From melven at mail.berlios.de  Wed Oct  1 18:51:22 2008
From: melven at mail.berlios.de (melven at mail.berlios.de)
Date: Wed, 1 Oct 2008 18:51:22 +0200
Subject: [Dsa-hl-svn] r4539 - in rl/branches/newton20:
	Mac/Rastullah.xcodeproj engine/core/include engine/rules
	engine/rules/include engine/rules/src engine/script/swig engine/ui
Message-ID: <200810011651.m91GpMrp032445@sheep.berlios.de>

Author: melven
Date: 2008-10-01 18:51:11 +0200 (Wed, 01 Oct 2008)
New Revision: 4539

Added:
   rl/branches/newton20/engine/rules/include/FetchItemJob.h
   rl/branches/newton20/engine/rules/src/FetchItemJob.cpp
Modified:
   rl/branches/newton20/Mac/Rastullah.xcodeproj/project.pbxproj
   rl/branches/newton20/engine/core/include/MessagePump.h
   rl/branches/newton20/engine/rules/RlRules2005.vcproj
   rl/branches/newton20/engine/rules/include/GameObject.h
   rl/branches/newton20/engine/rules/include/GoToJob.h
   rl/branches/newton20/engine/rules/include/Makefile.am
   rl/branches/newton20/engine/rules/include/PartyManager.h
   rl/branches/newton20/engine/rules/src/GameObject.cpp
   rl/branches/newton20/engine/rules/src/GoToJob.cpp
   rl/branches/newton20/engine/rules/src/Makefile.am
   rl/branches/newton20/engine/rules/src/PartyManager.cpp
   rl/branches/newton20/engine/script/swig/RlRules.head.swig
   rl/branches/newton20/engine/script/swig/RlRules.swig
   rl/branches/newton20/engine/ui/RlUI2005.vcproj
Log:
-merged changes from trunk
-added FetchItemJob to linux Makefiles


Modified: rl/branches/newton20/Mac/Rastullah.xcodeproj/project.pbxproj
===================================================================
--- rl/branches/newton20/Mac/Rastullah.xcodeproj/project.pbxproj	2008-10-01 16:22:07 UTC (rev 4538)
+++ rl/branches/newton20/Mac/Rastullah.xcodeproj/project.pbxproj	2008-10-01 16:51:11 UTC (rev 4539)
@@ -430,7 +430,6 @@
 		44D8147B0BF7B62F00534175 /* Zone.h in Headers */ = {isa = PBXBuildFile; fileRef = 44D814760BF7B62F00534175 /* Zone.h */; };
 		44D8147C0BF7B62F00534175 /* ZoneManager.h in Headers */ = {isa = PBXBuildFile; fileRef = 44D814770BF7B62F00534175 /* ZoneManager.h */; };
 		48003B550E3211660056D073 /* libboost_system.dylib in Copy Frameworks */ = {isa = PBXBuildFile; fileRef = 48A52CAF0E0EF55C008DBDD8 /* libboost_system.dylib */; };
-		4835559B0E6ABED100008748 /* mkdmg.sh in Resources */ = {isa = PBXBuildFile; fileRef = 4835559A0E6ABED100008748 /* mkdmg.sh */; };
 		483646990D83D13700912FEC /* ContentLoader.h in Headers */ = {isa = PBXBuildFile; fileRef = 483646960D83D13700912FEC /* ContentLoader.h */; };
 		4836469A0D83D13700912FEC /* SoundStitching.h in Headers */ = {isa = PBXBuildFile; fileRef = 483646970D83D13700912FEC /* SoundStitching.h */; };
 		4836469B0D83D13700912FEC /* StartAnimationJob.h in Headers */ = {isa = PBXBuildFile; fileRef = 483646980D83D13700912FEC /* StartAnimationJob.h */; };
@@ -703,6 +702,8 @@
 		48D34A800D91C7D800C89477 /* SaveGameFileWriter.h in Headers */ = {isa = PBXBuildFile; fileRef = 485A05700D71EDC40024198D /* SaveGameFileWriter.h */; };
 		48D34A810D91C7D800C89477 /* SaveGameManager.h in Headers */ = {isa = PBXBuildFile; fileRef = 485A05710D71EDC40024198D /* SaveGameManager.h */; };
 		48D409CE0D9E483300AE5340 /* modules in Resources */ = {isa = PBXBuildFile; fileRef = 48D401810D9E483200AE5340 /* modules */; };
+		48EFE0A40E8B6AF6007EB7F8 /* FetchItemJob.h in Headers */ = {isa = PBXBuildFile; fileRef = 48EFE0A30E8B6AF6007EB7F8 /* FetchItemJob.h */; };
+		48EFE0A60E8B6C39007EB7F8 /* FetchItemJob.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 48EFE0A50E8B6C39007EB7F8 /* FetchItemJob.cpp */; };
 		8D0C4E8D0486CD37000505A6 /* InfoPlist.strings in Resources */ = {isa = PBXBuildFile; fileRef = 0867D6AAFE840B52C02AAC07 /* InfoPlist.strings */; };
 		8D0C4E8E0486CD37000505A6 /* main.nib in Resources */ = {isa = PBXBuildFile; fileRef = 02345980000FD03B11CA0E72 /* main.nib */; };
 /* End PBXBuildFile section */
@@ -882,9 +883,9 @@
 		4404DA6E0C48CEE2007B4657 /* stdinc.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = stdinc.h; path = ../engine/ai/include/stdinc.h; sourceTree = SOURCE_ROOT; };
 		4404DA7C0C48CFB3007B4657 /* stdinc.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = stdinc.h; path = ../engine/common/include/stdinc.h; sourceTree = SOURCE_ROOT; };
 		4404DA7E0C48CFC7007B4657 /* stdinc.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = stdinc.h; path = ../engine/core/include/stdinc.h; sourceTree = SOURCE_ROOT; };
-		4404DA820C48D005007B4657 /* stdinc.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = stdinc.cpp; path = ../engine/rules/src/stdinc.cpp; sourceTree = SOURCE_ROOT; };
+		4404DA820C48D005007B4657 /* stdinc.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = stdinc.cpp; sourceTree = "<group>"; };
 		4404DA840C48D01E007B4657 /* stdinc.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = stdinc.h; path = ../engine/script/include/stdinc.h; sourceTree = SOURCE_ROOT; };
-		4404DA850C48D037007B4657 /* stdinc.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = stdinc.h; path = ../engine/ui/include/stdinc.h; sourceTree = SOURCE_ROOT; };
+		4404DA850C48D037007B4657 /* stdinc.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = stdinc.h; sourceTree = "<group>"; };
 		440785DD0C09D231006E496D /* libmeshmagick.dylib */ = {isa = PBXFileReference; lastKnownFileType = "compiled.mach-o.dylib"; name = libmeshmagick.dylib; path = /usr/local/lib/libmeshmagick.dylib; sourceTree = "<absolute>"; };
 		440785E20C09D2C1006E496D /* LightFadeJob.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = LightFadeJob.cpp; path = ../engine/core/src/LightFadeJob.cpp; sourceTree = SOURCE_ROOT; };
 		440785E30C09D2C1006E496D /* MergeableMeshObject.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = MergeableMeshObject.cpp; path = ../engine/core/src/MergeableMeshObject.cpp; sourceTree = SOURCE_ROOT; };
@@ -913,8 +914,8 @@
 		444825F50BF7B32100C5A94F /* TriggerFactory.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = TriggerFactory.h; path = ../engine/script/include/TriggerFactory.h; sourceTree = SOURCE_ROOT; };
 		444825F60BF7B32100C5A94F /* WaypointProcessor.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = WaypointProcessor.h; path = ../engine/script/include/WaypointProcessor.h; sourceTree = SOURCE_ROOT; };
 		444825F70BF7B32100C5A94F /* ZoneProcessor.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = ZoneProcessor.h; path = ../engine/script/include/ZoneProcessor.h; sourceTree = SOURCE_ROOT; };
-		444826030BF7B37D00C5A94F /* SelectionHelper.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = SelectionHelper.cpp; path = ../engine/rules/src/SelectionHelper.cpp; sourceTree = SOURCE_ROOT; };
-		444826040BF7B37D00C5A94F /* Selector.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = Selector.cpp; path = ../engine/rules/src/Selector.cpp; sourceTree = SOURCE_ROOT; };
+		444826030BF7B37D00C5A94F /* SelectionHelper.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = SelectionHelper.cpp; sourceTree = "<group>"; };
+		444826040BF7B37D00C5A94F /* Selector.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = Selector.cpp; sourceTree = "<group>"; };
 		444EAAAC0BD0E0C700C6D4A0 /* RastullahMain.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = RastullahMain.cpp; path = ../engine/startup/src/RastullahMain.cpp; sourceTree = SOURCE_ROOT; };
 		444EAAB20BD0E0FB00C6D4A0 /* libRlCommon.dylib */ = {isa = PBXFileReference; explicitFileType = "compiled.mach-o.dylib"; includeInIndex = 0; path = libRlCommon.dylib; sourceTree = BUILT_PRODUCTS_DIR; };
 		444EAAB60BD0E17000C6D4A0 /* ConfigFile.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = ConfigFile.cpp; path = ../engine/common/src/ConfigFile.cpp; sourceTree = SOURCE_ROOT; };
@@ -1097,158 +1098,158 @@
 		444EAC8C0BD0E54100C6D4A0 /* WayPointGraph.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = WayPointGraph.h; path = ../engine/ai/include/WayPointGraph.h; sourceTree = SOURCE_ROOT; };
 		444EAC8D0BD0E54100C6D4A0 /* WayPointGraphManager.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = WayPointGraphManager.h; path = ../engine/ai/include/WayPointGraphManager.h; sourceTree = SOURCE_ROOT; };
 		444EAC8E0BD0E54100C6D4A0 /* WayPointNode.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = WayPointNode.h; path = ../engine/ai/include/WayPointNode.h; sourceTree = SOURCE_ROOT; };
-		444EACA20BD0E57100C6D4A0 /* AboutWindow.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = AboutWindow.cpp; path = ../engine/ui/src/AboutWindow.cpp; sourceTree = SOURCE_ROOT; };
-		444EACA30BD0E57100C6D4A0 /* AbstractWindow.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = AbstractWindow.cpp; path = ../engine/ui/src/AbstractWindow.cpp; sourceTree = SOURCE_ROOT; };
-		444EACA40BD0E57100C6D4A0 /* ActionChoiceWindow.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = ActionChoiceWindow.cpp; path = ../engine/ui/src/ActionChoiceWindow.cpp; sourceTree = SOURCE_ROOT; };
-		444EACA60BD0E57100C6D4A0 /* CharacterSheetWindow.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = CharacterSheetWindow.cpp; path = ../engine/ui/src/CharacterSheetWindow.cpp; sourceTree = SOURCE_ROOT; };
-		444EACA70BD0E57100C6D4A0 /* CharacterStateWindow.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = CharacterStateWindow.cpp; path = ../engine/ui/src/CharacterStateWindow.cpp; sourceTree = SOURCE_ROOT; };
-		444EACA80BD0E57100C6D4A0 /* CloseConfirmationWindow.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = CloseConfirmationWindow.cpp; path = ../engine/ui/src/CloseConfirmationWindow.cpp; sourceTree = SOURCE_ROOT; };
-		444EACAA0BD0E57100C6D4A0 /* CommandMapper.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = CommandMapper.cpp; path = ../engine/ui/src/CommandMapper.cpp; sourceTree = SOURCE_ROOT; };
-		444EACAC0BD0E57100C6D4A0 /* ConfigComponent.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = ConfigComponent.cpp; path = ../engine/ui/src/ConfigComponent.cpp; sourceTree = SOURCE_ROOT; };
-		444EACAD0BD0E57100C6D4A0 /* Console.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = Console.cpp; path = ../engine/ui/src/Console.cpp; sourceTree = SOURCE_ROOT; };
-		444EACAE0BD0E57100C6D4A0 /* ContainerContentWindow.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = ContainerContentWindow.cpp; path = ../engine/ui/src/ContainerContentWindow.cpp; sourceTree = SOURCE_ROOT; };
-		444EACB10BD0E57100C6D4A0 /* DebugWindow.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = DebugWindow.cpp; path = ../engine/ui/src/DebugWindow.cpp; sourceTree = SOURCE_ROOT; };
-		444EACB30BD0E57100C6D4A0 /* DialogWindow.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = DialogWindow.cpp; path = ../engine/ui/src/DialogWindow.cpp; sourceTree = SOURCE_ROOT; };
-		444EACB50BD0E57100C6D4A0 /* GameLoggerWindow.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = GameLoggerWindow.cpp; path = ../engine/ui/src/GameLoggerWindow.cpp; sourceTree = SOURCE_ROOT; };
-		444EACB60BD0E57100C6D4A0 /* GameObjectInfoWindow.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = GameObjectInfoWindow.cpp; path = ../engine/ui/src/GameObjectInfoWindow.cpp; sourceTree = SOURCE_ROOT; };
-		444EACB80BD0E57100C6D4A0 /* GameSettings.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = GameSettings.cpp; path = ../engine/ui/src/GameSettings.cpp; sourceTree = SOURCE_ROOT; };
-		444EACB90BD0E57100C6D4A0 /* InfoPopup.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = InfoPopup.cpp; path = ../engine/ui/src/InfoPopup.cpp; sourceTree = SOURCE_ROOT; };
-		444EACBA0BD0E57100C6D4A0 /* InGameMenuWindow.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = InGameMenuWindow.cpp; path = ../engine/ui/src/InGameMenuWindow.cpp; sourceTree = SOURCE_ROOT; };
-		444EACBB0BD0E57100C6D4A0 /* InputManager.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = InputManager.cpp; path = ../engine/ui/src/InputManager.cpp; sourceTree = SOURCE_ROOT; };
-		444EACBC0BD0E57100C6D4A0 /* InventoryWindow.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = InventoryWindow.cpp; path = ../engine/ui/src/InventoryWindow.cpp; sourceTree = SOURCE_ROOT; };
-		444EACBD0BD0E57100C6D4A0 /* ItemDragContainer.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = ItemDragContainer.cpp; path = ../engine/ui/src/ItemDragContainer.cpp; sourceTree = SOURCE_ROOT; };
-		444EACBE0BD0E57100C6D4A0 /* JournalWindow.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = JournalWindow.cpp; path = ../engine/ui/src/JournalWindow.cpp; sourceTree = SOURCE_ROOT; };
-		444EACBF0BD0E57100C6D4A0 /* ListboxWrappedTextItem.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = ListboxWrappedTextItem.cpp; path = ../engine/ui/src/ListboxWrappedTextItem.cpp; sourceTree = SOURCE_ROOT; };
-		444EACC00BD0E57100C6D4A0 /* LogWindow.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = LogWindow.cpp; path = ../engine/ui/src/LogWindow.cpp; sourceTree = SOURCE_ROOT; };
-		444EACC10BD0E57100C6D4A0 /* MainMenuEngineWindow.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = MainMenuEngineWindow.cpp; path = ../engine/ui/src/MainMenuEngineWindow.cpp; sourceTree = SOURCE_ROOT; };
-		444EACC20BD0E57100C6D4A0 /* MainMenuWindow.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = MainMenuWindow.cpp; path = ../engine/ui/src/MainMenuWindow.cpp; sourceTree = SOURCE_ROOT; };
-		444EACC30BD0E57100C6D4A0 /* MessageWindow.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = MessageWindow.cpp; path = ../engine/ui/src/MessageWindow.cpp; sourceTree = SOURCE_ROOT; };
-		444EACC50BD0E57100C6D4A0 /* ObjectDescriptionWindow.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = ObjectDescriptionWindow.cpp; path = ../engine/ui/src/ObjectDescriptionWindow.cpp; sourceTree = SOURCE_ROOT; };
-		444EACC60BD0E57100C6D4A0 /* PlaylistWindow.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = PlaylistWindow.cpp; path = ../engine/ui/src/PlaylistWindow.cpp; sourceTree = SOURCE_ROOT; };
-		444EACC70BD0E57100C6D4A0 /* RenderSystemConfigComponent.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = RenderSystemConfigComponent.cpp; path = ../engine/ui/src/RenderSystemConfigComponent.cpp; sourceTree = SOURCE_ROOT; };
-		444EACC90BD0E57100C6D4A0 /* SoundConfig.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = SoundConfig.cpp; path = ../engine/ui/src/SoundConfig.cpp; sourceTree = SOURCE_ROOT; };
-		444EACCA0BD0E57100C6D4A0 /* SoundDriverConfigComponent.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = SoundDriverConfigComponent.cpp; path = ../engine/ui/src/SoundDriverConfigComponent.cpp; sourceTree = SOURCE_ROOT; };
-		444EACCB0BD0E57100C6D4A0 /* SubtitleWindow.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = SubtitleWindow.cpp; path = ../engine/ui/src/SubtitleWindow.cpp; sourceTree = SOURCE_ROOT; };
-		444EACCC0BD0E57100C6D4A0 /* UiSubsystem.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = UiSubsystem.cpp; path = ../engine/ui/src/UiSubsystem.cpp; sourceTree = SOURCE_ROOT; };
-		444EACCD0BD0E57100C6D4A0 /* WindowFactory.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = WindowFactory.cpp; path = ../engine/ui/src/WindowFactory.cpp; sourceTree = SOURCE_ROOT; };
-		444EACCE0BD0E57100C6D4A0 /* WindowFadeJob.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = WindowFadeJob.cpp; path = ../engine/ui/src/WindowFadeJob.cpp; sourceTree = SOURCE_ROOT; };
-		444EACCF0BD0E57100C6D4A0 /* WindowManager.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = WindowManager.cpp; path = ../engine/ui/src/WindowManager.cpp; sourceTree = SOURCE_ROOT; };
-		444EACFE0BD0E58C00C6D4A0 /* AboutWindow.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = AboutWindow.h; path = ../engine/ui/include/AboutWindow.h; sourceTree = SOURCE_ROOT; };
-		444EACFF0BD0E58C00C6D4A0 /* AbstractWindow.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = AbstractWindow.h; path = ../engine/ui/include/AbstractWindow.h; sourceTree = SOURCE_ROOT; };
-		444EAD000BD0E58C00C6D4A0 /* ActionChoiceWindow.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = ActionChoiceWindow.h; path = ../engine/ui/include/ActionChoiceWindow.h; sourceTree = SOURCE_ROOT; };
-		444EAD010BD0E58C00C6D4A0 /* CeGuiHelper.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = CeGuiHelper.h; path = ../engine/ui/include/CeGuiHelper.h; sourceTree = SOURCE_ROOT; };
-		444EAD030BD0E58C00C6D4A0 /* CharacterSheetWindow.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = CharacterSheetWindow.h; path = ../engine/ui/include/CharacterSheetWindow.h; sourceTree = SOURCE_ROOT; };
-		444EAD040BD0E58C00C6D4A0 /* CharacterStateWindow.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = CharacterStateWindow.h; path = ../engine/ui/include/CharacterStateWindow.h; sourceTree = SOURCE_ROOT; };
-		444EAD050BD0E58C00C6D4A0 /* CloseConfirmationWindow.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = CloseConfirmationWindow.h; path = ../engine/ui/include/CloseConfirmationWindow.h; sourceTree = SOURCE_ROOT; };
-		444EAD070BD0E58C00C6D4A0 /* CommandMapper.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = CommandMapper.h; path = ../engine/ui/include/CommandMapper.h; sourceTree = SOURCE_ROOT; };
-		444EAD090BD0E58C00C6D4A0 /* ConfigComponent.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = ConfigComponent.h; path = ../engine/ui/include/ConfigComponent.h; sourceTree = SOURCE_ROOT; };
-		444EAD0A0BD0E58C00C6D4A0 /* Console.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = Console.h; path = ../engine/ui/include/Console.h; sourceTree = SOURCE_ROOT; };
-		444EAD0B0BD0E58C00C6D4A0 /* ContainerContentWindow.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = ContainerContentWindow.h; path = ../engine/ui/include/ContainerContentWindow.h; sourceTree = SOURCE_ROOT; };
-		444EAD0E0BD0E58C00C6D4A0 /* DebugWindow.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = DebugWindow.h; path = ../engine/ui/include/DebugWindow.h; sourceTree = SOURCE_ROOT; };
-		444EAD100BD0E58C00C6D4A0 /* DialogWindow.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = DialogWindow.h; path = ../engine/ui/include/DialogWindow.h; sourceTree = SOURCE_ROOT; };
-		444EAD120BD0E58C00C6D4A0 /* GameLoggerWindow.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = GameLoggerWindow.h; path = ../engine/ui/include/GameLoggerWindow.h; sourceTree = SOURCE_ROOT; };
-		444EAD130BD0E58C00C6D4A0 /* GameObjectInfoWindow.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = GameObjectInfoWindow.h; path = ../engine/ui/include/GameObjectInfoWindow.h; sourceTree = SOURCE_ROOT; };
-		444EAD150BD0E58C00C6D4A0 /* GameSettings.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = GameSettings.h; path = ../engine/ui/include/GameSettings.h; sourceTree = SOURCE_ROOT; };
-		444EAD160BD0E58C00C6D4A0 /* InfoPopup.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = InfoPopup.h; path = ../engine/ui/include/InfoPopup.h; sourceTree = SOURCE_ROOT; };
-		444EAD170BD0E58C00C6D4A0 /* InGameMenuWindow.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = InGameMenuWindow.h; path = ../engine/ui/include/InGameMenuWindow.h; sourceTree = SOURCE_ROOT; };
-		444EAD180BD0E58C00C6D4A0 /* InputManager.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = InputManager.h; path = ../engine/ui/include/InputManager.h; sourceTree = SOURCE_ROOT; };
-		444EAD190BD0E58C00C6D4A0 /* InventoryWindow.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = InventoryWindow.h; path = ../engine/ui/include/InventoryWindow.h; sourceTree = SOURCE_ROOT; };
-		444EAD1A0BD0E58C00C6D4A0 /* ItemDragContainer.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = ItemDragContainer.h; path = ../engine/ui/include/ItemDragContainer.h; sourceTree = SOURCE_ROOT; };
-		444EAD1B0BD0E58C00C6D4A0 /* JournalWindow.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = JournalWindow.h; path = ../engine/ui/include/JournalWindow.h; sourceTree = SOURCE_ROOT; };
-		444EAD1C0BD0E58C00C6D4A0 /* ListboxWrappedTextItem.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = ListboxWrappedTextItem.h; path = ../engine/ui/include/ListboxWrappedTextItem.h; sourceTree = SOURCE_ROOT; };
-		444EAD1D0BD0E58C00C6D4A0 /* LogWindow.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = LogWindow.h; path = ../engine/ui/include/LogWindow.h; sourceTree = SOURCE_ROOT; };
-		444EAD1E0BD0E58C00C6D4A0 /* MainMenuEngineWindow.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = MainMenuEngineWindow.h; path = ../engine/ui/include/MainMenuEngineWindow.h; sourceTree = SOURCE_ROOT; };
-		444EAD1F0BD0E58C00C6D4A0 /* MainMenuWindow.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = MainMenuWindow.h; path = ../engine/ui/include/MainMenuWindow.h; sourceTree = SOURCE_ROOT; };
-		444EAD200BD0E58C00C6D4A0 /* MessageWindow.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = MessageWindow.h; path = ../engine/ui/include/MessageWindow.h; sourceTree = SOURCE_ROOT; };
-		444EAD220BD0E58C00C6D4A0 /* ObjectDescriptionWindow.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = ObjectDescriptionWindow.h; path = ../engine/ui/include/ObjectDescriptionWindow.h; sourceTree = SOURCE_ROOT; };
-		444EAD230BD0E58C00C6D4A0 /* PlaylistWindow.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = PlaylistWindow.h; path = ../engine/ui/include/PlaylistWindow.h; sourceTree = SOURCE_ROOT; };
-		444EAD240BD0E58C00C6D4A0 /* RenderSystemConfigComponent.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = RenderSystemConfigComponent.h; path = ../engine/ui/include/RenderSystemConfigComponent.h; sourceTree = SOURCE_ROOT; };
-		444EAD260BD0E58C00C6D4A0 /* SoundConfig.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = SoundConfig.h; path = ../engine/ui/include/SoundConfig.h; sourceTree = SOURCE_ROOT; };
-		444EAD270BD0E58C00C6D4A0 /* SoundDriverConfigComponent.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = SoundDriverConfigComponent.h; path = ../engine/ui/include/SoundDriverConfigComponent.h; sourceTree = SOURCE_ROOT; };
-		444EAD280BD0E58C00C6D4A0 /* SubtitleWindow.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = SubtitleWindow.h; path = ../engine/ui/include/SubtitleWindow.h; sourceTree = SOURCE_ROOT; };
-		444EAD290BD0E58C00C6D4A0 /* UiPrerequisites.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = UiPrerequisites.h; path = ../engine/ui/include/UiPrerequisites.h; sourceTree = SOURCE_ROOT; };
-		444EAD2A0BD0E58C00C6D4A0 /* UiSubsystem.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = UiSubsystem.h; path = ../engine/ui/include/UiSubsystem.h; sourceTree = SOURCE_ROOT; };
-		444EAD2B0BD0E58C00C6D4A0 /* WindowFactory.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = WindowFactory.h; path = ../engine/ui/include/WindowFactory.h; sourceTree = SOURCE_ROOT; };
-		444EAD2C0BD0E58C00C6D4A0 /* WindowFadeJob.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = WindowFadeJob.h; path = ../engine/ui/include/WindowFadeJob.h; sourceTree = SOURCE_ROOT; };
-		444EAD2D0BD0E58C00C6D4A0 /* WindowManager.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = WindowManager.h; path = ../engine/ui/include/WindowManager.h; sourceTree = SOURCE_ROOT; };
-		444EADB00BD0E64100C6D4A0 /* Action.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = Action.cpp; path = ../engine/rules/src/Action.cpp; sourceTree = SOURCE_ROOT; };
-		444EADB10BD0E64100C6D4A0 /* ActionManager.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = ActionManager.cpp; path = ../engine/rules/src/ActionManager.cpp; sourceTree = SOURCE_ROOT; };
-		444EADB20BD0E64100C6D4A0 /* Armor.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = Armor.cpp; path = ../engine/rules/src/Armor.cpp; sourceTree = SOURCE_ROOT; };
-		444EADB30BD0E64100C6D4A0 /* Combat.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = Combat.cpp; path = ../engine/rules/src/Combat.cpp; sourceTree = SOURCE_ROOT; };
-		444EADB40BD0E64100C6D4A0 /* CombatManager.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = CombatManager.cpp; path = ../engine/rules/src/CombatManager.cpp; sourceTree = SOURCE_ROOT; };
-		444EADB50BD0E64100C6D4A0 /* Container.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = Container.cpp; path = ../engine/rules/src/Container.cpp; sourceTree = SOURCE_ROOT; };
-		444EADB60BD0E64100C6D4A0 /* Creature.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = Creature.cpp; path = ../engine/rules/src/Creature.cpp; sourceTree = SOURCE_ROOT; };
-		444EADB70BD0E64100C6D4A0 /* Date.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = Date.cpp; path = ../engine/rules/src/Date.cpp; sourceTree = SOURCE_ROOT; };
-		444EADB80BD0E64100C6D4A0 /* DsaDataLoader.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = DsaDataLoader.cpp; path = ../engine/rules/src/DsaDataLoader.cpp; sourceTree = SOURCE_ROOT; };
-		444EADB90BD0E64100C6D4A0 /* DsaManager.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = DsaManager.cpp; path = ../engine/rules/src/DsaManager.cpp; sourceTree = SOURCE_ROOT; };
-		444EADBA0BD0E64100C6D4A0 /* Effect.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = Effect.cpp; path = ../engine/rules/src/Effect.cpp; sourceTree = SOURCE_ROOT; };
-		444EADBB0BD0E64100C6D4A0 /* EffectManager.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = EffectManager.cpp; path = ../engine/rules/src/EffectManager.cpp; sourceTree = SOURCE_ROOT; };
-		444EADBC0BD0E64100C6D4A0 /* Eigenschaft.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = Eigenschaft.cpp; path = ../engine/rules/src/Eigenschaft.cpp; sourceTree = SOURCE_ROOT; };
-		444EADBD0BD0E64100C6D4A0 /* EigenschaftenStateSet.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = EigenschaftenStateSet.cpp; path = ../engine/rules/src/EigenschaftenStateSet.cpp; sourceTree = SOURCE_ROOT; };
-		444EADBE0BD0E64100C6D4A0 /* GameObject.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = GameObject.cpp; path = ../engine/rules/src/GameObject.cpp; sourceTree = SOURCE_ROOT; };
-		444EADBF0BD0E64100C6D4A0 /* GameObjectManager.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = GameObjectManager.cpp; path = ../engine/rules/src/GameObjectManager.cpp; sourceTree = SOURCE_ROOT; };
-		444EADC10BD0E64100C6D4A0 /* Inventory.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = Inventory.cpp; path = ../engine/rules/src/Inventory.cpp; sourceTree = SOURCE_ROOT; };
-		444EADC20BD0E64100C6D4A0 /* Item.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = Item.cpp; path = ../engine/rules/src/Item.cpp; sourceTree = SOURCE_ROOT; };
-		444EADC30BD0E64100C6D4A0 /* JournalEntry.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = JournalEntry.cpp; path = ../engine/rules/src/JournalEntry.cpp; sourceTree = SOURCE_ROOT; };
-		444EADC40BD0E64100C6D4A0 /* Kampftechnik.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = Kampftechnik.cpp; path = ../engine/rules/src/Kampftechnik.cpp; sourceTree = SOURCE_ROOT; };
-		444EADC50BD0E64100C6D4A0 /* ObjectStateChangeEvent.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = ObjectStateChangeEvent.cpp; path = ../engine/rules/src/ObjectStateChangeEvent.cpp; sourceTree = SOURCE_ROOT; };
-		444EADC60BD0E64100C6D4A0 /* ObjectStateChangeEventSource.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = ObjectStateChangeEventSource.cpp; path = ../engine/rules/src/ObjectStateChangeEventSource.cpp; sourceTree = SOURCE_ROOT; };
-		444EADC70BD0E64100C6D4A0 /* ObjectStateChangeListener.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = ObjectStateChangeListener.cpp; path = ../engine/rules/src/ObjectStateChangeListener.cpp; sourceTree = SOURCE_ROOT; };
-		444EADC90BD0E64100C6D4A0 /* Quest.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = Quest.cpp; path = ../engine/rules/src/Quest.cpp; sourceTree = SOURCE_ROOT; };
-		444EADCA0BD0E64100C6D4A0 /* QuestBook.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = QuestBook.cpp; path = ../engine/rules/src/QuestBook.cpp; sourceTree = SOURCE_ROOT; };
-		444EADCB0BD0E64100C6D4A0 /* QuestEvent.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = QuestEvent.cpp; path = ../engine/rules/src/QuestEvent.cpp; sourceTree = SOURCE_ROOT; };
-		444EADCC0BD0E64100C6D4A0 /* QuestListener.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = QuestListener.cpp; path = ../engine/rules/src/QuestListener.cpp; sourceTree = SOURCE_ROOT; };
-		444EADCD0BD0E64100C6D4A0 /* RulesSubsystem.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = RulesSubsystem.cpp; path = ../engine/rules/src/RulesSubsystem.cpp; sourceTree = SOURCE_ROOT; };
-		444EADCE0BD0E64100C6D4A0 /* Slot.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = Slot.cpp; path = ../engine/rules/src/Slot.cpp; sourceTree = SOURCE_ROOT; };
-		444EADCF0BD0E64100C6D4A0 /* SonderfertigkeitenStateSet.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = SonderfertigkeitenStateSet.cpp; path = ../engine/rules/src/SonderfertigkeitenStateSet.cpp; sourceTree = SOURCE_ROOT; };
-		444EADD00BD0E64100C6D4A0 /* StateSet.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = StateSet.cpp; path = ../engine/rules/src/StateSet.cpp; sourceTree = SOURCE_ROOT; };
-		444EADD10BD0E64100C6D4A0 /* Talent.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = Talent.cpp; path = ../engine/rules/src/Talent.cpp; sourceTree = SOURCE_ROOT; };
-		444EADD20BD0E64100C6D4A0 /* Talentgruppe.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = Talentgruppe.cpp; path = ../engine/rules/src/Talentgruppe.cpp; sourceTree = SOURCE_ROOT; };
-		444EADD30BD0E64100C6D4A0 /* TalentStateSet.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = TalentStateSet.cpp; path = ../engine/rules/src/TalentStateSet.cpp; sourceTree = SOURCE_ROOT; };
-		444EADD80BD0E64100C6D4A0 /* Weapon.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = Weapon.cpp; path = ../engine/rules/src/Weapon.cpp; sourceTree = SOURCE_ROOT; };
-		444EADD90BD0E64100C6D4A0 /* ZauberStateSet.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = ZauberStateSet.cpp; path = ../engine/rules/src/ZauberStateSet.cpp; sourceTree = SOURCE_ROOT; };
-		444EAE040BD0E65B00C6D4A0 /* Action.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = Action.h; path = ../engine/rules/include/Action.h; sourceTree = SOURCE_ROOT; };
-		444EAE050BD0E65B00C6D4A0 /* ActionManager.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = ActionManager.h; path = ../engine/rules/include/ActionManager.h; sourceTree = SOURCE_ROOT; };
-		444EAE060BD0E65B00C6D4A0 /* Armor.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = Armor.h; path = ../engine/rules/include/Armor.h; sourceTree = SOURCE_ROOT; };
-		444EAE070BD0E65B00C6D4A0 /* Combat.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = Combat.h; path = ../engine/rules/include/Combat.h; sourceTree = SOURCE_ROOT; };
-		444EAE080BD0E65B00C6D4A0 /* CombatManager.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = CombatManager.h; path = ../engine/rules/include/CombatManager.h; sourceTree = SOURCE_ROOT; };
-		444EAE090BD0E65B00C6D4A0 /* Container.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = Container.h; path = ../engine/rules/include/Container.h; sourceTree = SOURCE_ROOT; };
-		444EAE0A0BD0E65B00C6D4A0 /* Creature.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = Creature.h; path = ../engine/rules/include/Creature.h; sourceTree = SOURCE_ROOT; };
-		444EAE0B0BD0E65B00C6D4A0 /* Date.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = Date.h; path = ../engine/rules/include/Date.h; sourceTree = SOURCE_ROOT; };
-		444EAE0C0BD0E65B00C6D4A0 /* DsaDataLoader.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = DsaDataLoader.h; path = ../engine/rules/include/DsaDataLoader.h; sourceTree = SOURCE_ROOT; };
-		444EAE0D0BD0E65B00C6D4A0 /* DsaManager.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = DsaManager.h; path = ../engine/rules/include/DsaManager.h; sourceTree = SOURCE_ROOT; };
-		444EAE0E0BD0E65B00C6D4A0 /* Effect.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = Effect.h; path = ../engine/rules/include/Effect.h; sourceTree = SOURCE_ROOT; };
-		444EAE0F0BD0E65B00C6D4A0 /* EffectManager.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = EffectManager.h; path = ../engine/rules/include/EffectManager.h; sourceTree = SOURCE_ROOT; };
-		444EAE100BD0E65B00C6D4A0 /* Eigenschaft.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = Eigenschaft.h; path = ../engine/rules/include/Eigenschaft.h; sourceTree = SOURCE_ROOT; };
-		444EAE110BD0E65B00C6D4A0 /* EigenschaftenStateSet.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = EigenschaftenStateSet.h; path = ../engine/rules/include/EigenschaftenStateSet.h; sourceTree = SOURCE_ROOT; };
-		444EAE120BD0E65B00C6D4A0 /* GameObject.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = GameObject.h; path = ../engine/rules/include/GameObject.h; sourceTree = SOURCE_ROOT; };
-		444EAE130BD0E65B00C6D4A0 /* GameObjectManager.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = GameObjectManager.h; path = ../engine/rules/include/GameObjectManager.h; sourceTree = SOURCE_ROOT; };
-		444EAE160BD0E65B00C6D4A0 /* GameObjectStateListener.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = GameObjectStateListener.h; path = ../engine/rules/include/GameObjectStateListener.h; sourceTree = SOURCE_ROOT; };
-		444EAE170BD0E65B00C6D4A0 /* Inventory.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = Inventory.h; path = ../engine/rules/include/Inventory.h; sourceTree = SOURCE_ROOT; };
-		444EAE180BD0E65B00C6D4A0 /* Item.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = Item.h; path = ../engine/rules/include/Item.h; sourceTree = SOURCE_ROOT; };
-		444EAE190BD0E65B00C6D4A0 /* JournalEntry.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = JournalEntry.h; path = ../engine/rules/include/JournalEntry.h; sourceTree = SOURCE_ROOT; };
-		444EAE1A0BD0E65B00C6D4A0 /* Kampftechnik.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = Kampftechnik.h; path = ../engine/rules/include/Kampftechnik.h; sourceTree = SOURCE_ROOT; };
-		444EAE1B0BD0E65B00C6D4A0 /* ObjectStateChangeEvent.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = ObjectStateChangeEvent.h; path = ../engine/rules/include/ObjectStateChangeEvent.h; sourceTree = SOURCE_ROOT; };
-		444EAE1C0BD0E65B00C6D4A0 /* ObjectStateChangeEventSource.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = ObjectStateChangeEventSource.h; path = ../engine/rules/include/ObjectStateChangeEventSource.h; sourceTree = SOURCE_ROOT; };
-		444EAE1D0BD0E65B00C6D4A0 /* ObjectStateChangeListener.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = ObjectStateChangeListener.h; path = ../engine/rules/include/ObjectStateChangeListener.h; sourceTree = SOURCE_ROOT; };
-		444EAE1F0BD0E65B00C6D4A0 /* Quest.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = Quest.h; path = ../engine/rules/include/Quest.h; sourceTree = SOURCE_ROOT; };
-		444EAE200BD0E65B00C6D4A0 /* QuestBook.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = QuestBook.h; path = ../engine/rules/include/QuestBook.h; sourceTree = SOURCE_ROOT; };
-		444EAE210BD0E65B00C6D4A0 /* QuestEvent.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = QuestEvent.h; path = ../engine/rules/include/QuestEvent.h; sourceTree = SOURCE_ROOT; };
-		444EAE220BD0E65B00C6D4A0 /* QuestListener.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = QuestListener.h; path = ../engine/rules/include/QuestListener.h; sourceTree = SOURCE_ROOT; };
-		444EAE230BD0E65B00C6D4A0 /* RulesPrerequisites.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = RulesPrerequisites.h; path = ../engine/rules/include/RulesPrerequisites.h; sourceTree = SOURCE_ROOT; };
-		444EAE240BD0E65B00C6D4A0 /* RulesSubsystem.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = RulesSubsystem.h; path = ../engine/rules/include/RulesSubsystem.h; sourceTree = SOURCE_ROOT; };
-		444EAE250BD0E65B00C6D4A0 /* Slot.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = Slot.h; path = ../engine/rules/include/Slot.h; sourceTree = SOURCE_ROOT; };
-		444EAE260BD0E65B00C6D4A0 /* SonderfertigkeitenStateSet.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = SonderfertigkeitenStateSet.h; path = ../engine/rules/include/SonderfertigkeitenStateSet.h; sourceTree = SOURCE_ROOT; };
-		444EAE270BD0E65B00C6D4A0 /* StateSet.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = StateSet.h; path = ../engine/rules/include/StateSet.h; sourceTree = SOURCE_ROOT; };
-		444EAE280BD0E65B00C6D4A0 /* Talent.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = Talent.h; path = ../engine/rules/include/Talent.h; sourceTree = SOURCE_ROOT; };
-		444EAE290BD0E65B00C6D4A0 /* Talentgruppe.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = Talentgruppe.h; path = ../engine/rules/include/Talentgruppe.h; sourceTree = SOURCE_ROOT; };
-		444EAE2A0BD0E65B00C6D4A0 /* TalentInputIterator.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = TalentInputIterator.h; path = ../engine/rules/include/TalentInputIterator.h; sourceTree = SOURCE_ROOT; };
-		444EAE2B0BD0E65B00C6D4A0 /* TalentStateSet.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = TalentStateSet.h; path = ../engine/rules/include/TalentStateSet.h; sourceTree = SOURCE_ROOT; };
-		444EAE300BD0E65B00C6D4A0 /* Weapon.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = Weapon.h; path = ../engine/rules/include/Weapon.h; sourceTree = SOURCE_ROOT; };
-		444EAE310BD0E65B00C6D4A0 /* ZauberStateSet.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = ZauberStateSet.h; path = ../engine/rules/include/ZauberStateSet.h; sourceTree = SOURCE_ROOT; };
-		444EAE610BD0E6C000C6D4A0 /* ScriptObjectMarker.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = ScriptObjectMarker.h; path = ../engine/script/include/ScriptObjectMarker.h; sourceTree = SOURCE_ROOT; };
-		444EAE620BD0E6C000C6D4A0 /* ScriptPrerequisites.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = ScriptPrerequisites.h; path = ../engine/script/include/ScriptPrerequisites.h; sourceTree = SOURCE_ROOT; };
-		444EAE630BD0E6C000C6D4A0 /* ScriptSubsystem.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = ScriptSubsystem.h; path = ../engine/script/include/ScriptSubsystem.h; sourceTree = SOURCE_ROOT; };
+		444EACA20BD0E57100C6D4A0 /* AboutWindow.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = AboutWindow.cpp; sourceTree = "<group>"; };
+		444EACA30BD0E57100C6D4A0 /* AbstractWindow.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = AbstractWindow.cpp; sourceTree = "<group>"; };
+		444EACA40BD0E57100C6D4A0 /* ActionChoiceWindow.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = ActionChoiceWindow.cpp; sourceTree = "<group>"; };
+		444EACA60BD0E57100C6D4A0 /* CharacterSheetWindow.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = CharacterSheetWindow.cpp; sourceTree = "<group>"; };
+		444EACA70BD0E57100C6D4A0 /* CharacterStateWindow.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = CharacterStateWindow.cpp; sourceTree = "<group>"; };
+		444EACA80BD0E57100C6D4A0 /* CloseConfirmationWindow.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = CloseConfirmationWindow.cpp; sourceTree = "<group>"; };
+		444EACAA0BD0E57100C6D4A0 /* CommandMapper.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = CommandMapper.cpp; sourceTree = "<group>"; };
+		444EACAC0BD0E57100C6D4A0 /* ConfigComponent.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = ConfigComponent.cpp; sourceTree = "<group>"; };
+		444EACAD0BD0E57100C6D4A0 /* Console.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = Console.cpp; sourceTree = "<group>"; };
+		444EACAE0BD0E57100C6D4A0 /* ContainerContentWindow.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = ContainerContentWindow.cpp; sourceTree = "<group>"; };
+		444EACB10BD0E57100C6D4A0 /* DebugWindow.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = DebugWindow.cpp; sourceTree = "<group>"; };
+		444EACB30BD0E57100C6D4A0 /* DialogWindow.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = DialogWindow.cpp; sourceTree = "<group>"; };
+		444EACB50BD0E57100C6D4A0 /* GameLoggerWindow.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = GameLoggerWindow.cpp; sourceTree = "<group>"; };
+		444EACB60BD0E57100C6D4A0 /* GameObjectInfoWindow.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = GameObjectInfoWindow.cpp; sourceTree = "<group>"; };
+		444EACB80BD0E57100C6D4A0 /* GameSettings.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = GameSettings.cpp; sourceTree = "<group>"; };
+		444EACB90BD0E57100C6D4A0 /* InfoPopup.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = InfoPopup.cpp; sourceTree = "<group>"; };
+		444EACBA0BD0E57100C6D4A0 /* InGameMenuWindow.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = InGameMenuWindow.cpp; sourceTree = "<group>"; };
+		444EACBB0BD0E57100C6D4A0 /* InputManager.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = InputManager.cpp; sourceTree = "<group>"; };
+		444EACBC0BD0E57100C6D4A0 /* InventoryWindow.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = InventoryWindow.cpp; sourceTree = "<group>"; };
+		444EACBD0BD0E57100C6D4A0 /* ItemDragContainer.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = ItemDragContainer.cpp; sourceTree = "<group>"; };
+		444EACBE0BD0E57100C6D4A0 /* JournalWindow.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = JournalWindow.cpp; sourceTree = "<group>"; };
+		444EACBF0BD0E57100C6D4A0 /* ListboxWrappedTextItem.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = ListboxWrappedTextItem.cpp; sourceTree = "<group>"; };
+		444EACC00BD0E57100C6D4A0 /* LogWindow.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = LogWindow.cpp; sourceTree = "<group>"; };
+		444EACC10BD0E57100C6D4A0 /* MainMenuEngineWindow.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = MainMenuEngineWindow.cpp; sourceTree = "<group>"; };
+		444EACC20BD0E57100C6D4A0 /* MainMenuWindow.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = MainMenuWindow.cpp; sourceTree = "<group>"; };
+		444EACC30BD0E57100C6D4A0 /* MessageWindow.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = MessageWindow.cpp; sourceTree = "<group>"; };
+		444EACC50BD0E57100C6D4A0 /* ObjectDescriptionWindow.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = ObjectDescriptionWindow.cpp; sourceTree = "<group>"; };
+		444EACC60BD0E57100C6D4A0 /* PlaylistWindow.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = PlaylistWindow.cpp; sourceTree = "<group>"; };
+		444EACC70BD0E57100C6D4A0 /* RenderSystemConfigComponent.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = RenderSystemConfigComponent.cpp; sourceTree = "<group>"; };
+		444EACC90BD0E57100C6D4A0 /* SoundConfig.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = SoundConfig.cpp; sourceTree = "<group>"; };
+		444EACCA0BD0E57100C6D4A0 /* SoundDriverConfigComponent.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = SoundDriverConfigComponent.cpp; sourceTree = "<group>"; };
+		444EACCB0BD0E57100C6D4A0 /* SubtitleWindow.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = SubtitleWindow.cpp; sourceTree = "<group>"; };
+		444EACCC0BD0E57100C6D4A0 /* UiSubsystem.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = UiSubsystem.cpp; sourceTree = "<group>"; };
+		444EACCD0BD0E57100C6D4A0 /* WindowFactory.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = WindowFactory.cpp; sourceTree = "<group>"; };
+		444EACCE0BD0E57100C6D4A0 /* WindowFadeJob.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = WindowFadeJob.cpp; sourceTree = "<group>"; };
+		444EACCF0BD0E57100C6D4A0 /* WindowManager.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = WindowManager.cpp; sourceTree = "<group>"; };
+		444EACFE0BD0E58C00C6D4A0 /* AboutWindow.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = AboutWindow.h; sourceTree = "<group>"; };
+		444EACFF0BD0E58C00C6D4A0 /* AbstractWindow.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = AbstractWindow.h; sourceTree = "<group>"; };
+		444EAD000BD0E58C00C6D4A0 /* ActionChoiceWindow.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = ActionChoiceWindow.h; sourceTree = "<group>"; };
+		444EAD010BD0E58C00C6D4A0 /* CeGuiHelper.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = CeGuiHelper.h; sourceTree = "<group>"; };
+		444EAD030BD0E58C00C6D4A0 /* CharacterSheetWindow.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = CharacterSheetWindow.h; sourceTree = "<group>"; };
+		444EAD040BD0E58C00C6D4A0 /* CharacterStateWindow.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = CharacterStateWindow.h; sourceTree = "<group>"; };
+		444EAD050BD0E58C00C6D4A0 /* CloseConfirmationWindow.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = CloseConfirmationWindow.h; sourceTree = "<group>"; };
+		444EAD070BD0E58C00C6D4A0 /* CommandMapper.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = CommandMapper.h; sourceTree = "<group>"; };
+		444EAD090BD0E58C00C6D4A0 /* ConfigComponent.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = ConfigComponent.h; sourceTree = "<group>"; };
+		444EAD0A0BD0E58C00C6D4A0 /* Console.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = Console.h; sourceTree = "<group>"; };
+		444EAD0B0BD0E58C00C6D4A0 /* ContainerContentWindow.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = ContainerContentWindow.h; sourceTree = "<group>"; };
+		444EAD0E0BD0E58C00C6D4A0 /* DebugWindow.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = DebugWindow.h; sourceTree = "<group>"; };
+		444EAD100BD0E58C00C6D4A0 /* DialogWindow.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = DialogWindow.h; sourceTree = "<group>"; };
+		444EAD120BD0E58C00C6D4A0 /* GameLoggerWindow.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = GameLoggerWindow.h; sourceTree = "<group>"; };
+		444EAD130BD0E58C00C6D4A0 /* GameObjectInfoWindow.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = GameObjectInfoWindow.h; sourceTree = "<group>"; };
+		444EAD150BD0E58C00C6D4A0 /* GameSettings.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = GameSettings.h; sourceTree = "<group>"; };
+		444EAD160BD0E58C00C6D4A0 /* InfoPopup.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = InfoPopup.h; sourceTree = "<group>"; };
+		444EAD170BD0E58C00C6D4A0 /* InGameMenuWindow.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = InGameMenuWindow.h; sourceTree = "<group>"; };
+		444EAD180BD0E58C00C6D4A0 /* InputManager.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = InputManager.h; sourceTree = "<group>"; };
+		444EAD190BD0E58C00C6D4A0 /* InventoryWindow.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = InventoryWindow.h; sourceTree = "<group>"; };
+		444EAD1A0BD0E58C00C6D4A0 /* ItemDragContainer.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = ItemDragContainer.h; sourceTree = "<group>"; };
+		444EAD1B0BD0E58C00C6D4A0 /* JournalWindow.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = JournalWindow.h; sourceTree = "<group>"; };
+		444EAD1C0BD0E58C00C6D4A0 /* ListboxWrappedTextItem.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = ListboxWrappedTextItem.h; sourceTree = "<group>"; };
+		444EAD1D0BD0E58C00C6D4A0 /* LogWindow.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = LogWindow.h; sourceTree = "<group>"; };
+		444EAD1E0BD0E58C00C6D4A0 /* MainMenuEngineWindow.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = MainMenuEngineWindow.h; sourceTree = "<group>"; };
+		444EAD1F0BD0E58C00C6D4A0 /* MainMenuWindow.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = MainMenuWindow.h; sourceTree = "<group>"; };
+		444EAD200BD0E58C00C6D4A0 /* MessageWindow.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = MessageWindow.h; sourceTree = "<group>"; };
+		444EAD220BD0E58C00C6D4A0 /* ObjectDescriptionWindow.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = ObjectDescriptionWindow.h; sourceTree = "<group>"; };
+		444EAD230BD0E58C00C6D4A0 /* PlaylistWindow.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = PlaylistWindow.h; sourceTree = "<group>"; };
+		444EAD240BD0E58C00C6D4A0 /* RenderSystemConfigComponent.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = RenderSystemConfigComponent.h; sourceTree = "<group>"; };
+		444EAD260BD0E58C00C6D4A0 /* SoundConfig.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = SoundConfig.h; sourceTree = "<group>"; };
+		444EAD270BD0E58C00C6D4A0 /* SoundDriverConfigComponent.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = SoundDriverConfigComponent.h; sourceTree = "<group>"; };
+		444EAD280BD0E58C00C6D4A0 /* SubtitleWindow.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = SubtitleWindow.h; sourceTree = "<group>"; };
+		444EAD290BD0E58C00C6D4A0 /* UiPrerequisites.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = UiPrerequisites.h; sourceTree = "<group>"; };
+		444EAD2A0BD0E58C00C6D4A0 /* UiSubsystem.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = UiSubsystem.h; sourceTree = "<group>"; };
+		444EAD2B0BD0E58C00C6D4A0 /* WindowFactory.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = WindowFactory.h; sourceTree = "<group>"; };
+		444EAD2C0BD0E58C00C6D4A0 /* WindowFadeJob.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = WindowFadeJob.h; sourceTree = "<group>"; };
+		444EAD2D0BD0E58C00C6D4A0 /* WindowManager.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = WindowManager.h; sourceTree = "<group>"; };
+		444EADB00BD0E64100C6D4A0 /* Action.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = Action.cpp; sourceTree = "<group>"; };
+		444EADB10BD0E64100C6D4A0 /* ActionManager.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = ActionManager.cpp; sourceTree = "<group>"; };
+		444EADB20BD0E64100C6D4A0 /* Armor.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = Armor.cpp; sourceTree = "<group>"; };
+		444EADB30BD0E64100C6D4A0 /* Combat.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = Combat.cpp; sourceTree = "<group>"; };
+		444EADB40BD0E64100C6D4A0 /* CombatManager.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = CombatManager.cpp; sourceTree = "<group>"; };
+		444EADB50BD0E64100C6D4A0 /* Container.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = Container.cpp; sourceTree = "<group>"; };
+		444EADB60BD0E64100C6D4A0 /* Creature.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = Creature.cpp; sourceTree = "<group>"; };
+		444EADB70BD0E64100C6D4A0 /* Date.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = Date.cpp; sourceTree = "<group>"; };
+		444EADB80BD0E64100C6D4A0 /* DsaDataLoader.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = DsaDataLoader.cpp; sourceTree = "<group>"; };
+		444EADB90BD0E64100C6D4A0 /* DsaManager.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = DsaManager.cpp; sourceTree = "<group>"; };
+		444EADBA0BD0E64100C6D4A0 /* Effect.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = Effect.cpp; sourceTree = "<group>"; };
+		444EADBB0BD0E64100C6D4A0 /* EffectManager.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = EffectManager.cpp; sourceTree = "<group>"; };
+		444EADBC0BD0E64100C6D4A0 /* Eigenschaft.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = Eigenschaft.cpp; sourceTree = "<group>"; };
+		444EADBD0BD0E64100C6D4A0 /* EigenschaftenStateSet.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = EigenschaftenStateSet.cpp; sourceTree = "<group>"; };
+		444EADBE0BD0E64100C6D4A0 /* GameObject.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = GameObject.cpp; sourceTree = "<group>"; };
+		444EADBF0BD0E64100C6D4A0 /* GameObjectManager.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = GameObjectManager.cpp; sourceTree = "<group>"; };
+		444EADC10BD0E64100C6D4A0 /* Inventory.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = Inventory.cpp; sourceTree = "<group>"; };
+		444EADC20BD0E64100C6D4A0 /* Item.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = Item.cpp; sourceTree = "<group>"; };
+		444EADC30BD0E64100C6D4A0 /* JournalEntry.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = JournalEntry.cpp; sourceTree = "<group>"; };
+		444EADC40BD0E64100C6D4A0 /* Kampftechnik.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = Kampftechnik.cpp; sourceTree = "<group>"; };
+		444EADC50BD0E64100C6D4A0 /* ObjectStateChangeEvent.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = ObjectStateChangeEvent.cpp; sourceTree = "<group>"; };
+		444EADC60BD0E64100C6D4A0 /* ObjectStateChangeEventSource.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = ObjectStateChangeEventSource.cpp; sourceTree = "<group>"; };
+		444EADC70BD0E64100C6D4A0 /* ObjectStateChangeListener.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = ObjectStateChangeListener.cpp; sourceTree = "<group>"; };
+		444EADC90BD0E64100C6D4A0 /* Quest.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = Quest.cpp; sourceTree = "<group>"; };
+		444EADCA0BD0E64100C6D4A0 /* QuestBook.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = QuestBook.cpp; sourceTree = "<group>"; };
+		444EADCB0BD0E64100C6D4A0 /* QuestEvent.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = QuestEvent.cpp; sourceTree = "<group>"; };
+		444EADCC0BD0E64100C6D4A0 /* QuestListener.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = QuestListener.cpp; sourceTree = "<group>"; };
+		444EADCD0BD0E64100C6D4A0 /* RulesSubsystem.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = RulesSubsystem.cpp; sourceTree = "<group>"; };
+		444EADCE0BD0E64100C6D4A0 /* Slot.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = Slot.cpp; sourceTree = "<group>"; };
+		444EADCF0BD0E64100C6D4A0 /* SonderfertigkeitenStateSet.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = SonderfertigkeitenStateSet.cpp; sourceTree = "<group>"; };
+		444EADD00BD0E64100C6D4A0 /* StateSet.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = StateSet.cpp; sourceTree = "<group>"; };
+		444EADD10BD0E64100C6D4A0 /* Talent.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = Talent.cpp; sourceTree = "<group>"; };
+		444EADD20BD0E64100C6D4A0 /* Talentgruppe.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = Talentgruppe.cpp; sourceTree = "<group>"; };
+		444EADD30BD0E64100C6D4A0 /* TalentStateSet.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = TalentStateSet.cpp; sourceTree = "<group>"; };
+		444EADD80BD0E64100C6D4A0 /* Weapon.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = Weapon.cpp; sourceTree = "<group>"; };
+		444EADD90BD0E64100C6D4A0 /* ZauberStateSet.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = ZauberStateSet.cpp; sourceTree = "<group>"; };
+		444EAE040BD0E65B00C6D4A0 /* Action.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = Action.h; sourceTree = "<group>"; };
+		444EAE050BD0E65B00C6D4A0 /* ActionManager.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = ActionManager.h; sourceTree = "<group>"; };
+		444EAE060BD0E65B00C6D4A0 /* Armor.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = Armor.h; sourceTree = "<group>"; };
+		444EAE070BD0E65B00C6D4A0 /* Combat.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = Combat.h; sourceTree = "<group>"; };
+		444EAE080BD0E65B00C6D4A0 /* CombatManager.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = CombatManager.h; sourceTree = "<group>"; };
+		444EAE090BD0E65B00C6D4A0 /* Container.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = Container.h; sourceTree = "<group>"; };
+		444EAE0A0BD0E65B00C6D4A0 /* Creature.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = Creature.h; sourceTree = "<group>"; };
+		444EAE0B0BD0E65B00C6D4A0 /* Date.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = Date.h; sourceTree = "<group>"; };
+		444EAE0C0BD0E65B00C6D4A0 /* DsaDataLoader.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = DsaDataLoader.h; sourceTree = "<group>"; };
+		444EAE0D0BD0E65B00C6D4A0 /* DsaManager.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = DsaManager.h; sourceTree = "<group>"; };
+		444EAE0E0BD0E65B00C6D4A0 /* Effect.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = Effect.h; sourceTree = "<group>"; };
+		444EAE0F0BD0E65B00C6D4A0 /* EffectManager.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = EffectManager.h; sourceTree = "<group>"; };
+		444EAE100BD0E65B00C6D4A0 /* Eigenschaft.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = Eigenschaft.h; sourceTree = "<group>"; };
+		444EAE110BD0E65B00C6D4A0 /* EigenschaftenStateSet.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = EigenschaftenStateSet.h; sourceTree = "<group>"; };
+		444EAE120BD0E65B00C6D4A0 /* GameObject.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = GameObject.h; sourceTree = "<group>"; };
+		444EAE130BD0E65B00C6D4A0 /* GameObjectManager.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = GameObjectManager.h; sourceTree = "<group>"; };
+		444EAE160BD0E65B00C6D4A0 /* GameObjectStateListener.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = GameObjectStateListener.h; sourceTree = "<group>"; };
+		444EAE170BD0E65B00C6D4A0 /* Inventory.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = Inventory.h; sourceTree = "<group>"; };
+		444EAE180BD0E65B00C6D4A0 /* Item.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = Item.h; sourceTree = "<group>"; };
+		444EAE190BD0E65B00C6D4A0 /* JournalEntry.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = JournalEntry.h; sourceTree = "<group>"; };
+		444EAE1A0BD0E65B00C6D4A0 /* Kampftechnik.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = Kampftechnik.h; sourceTree = "<group>"; };
+		444EAE1B0BD0E65B00C6D4A0 /* ObjectStateChangeEvent.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = ObjectStateChangeEvent.h; sourceTree = "<group>"; };
+		444EAE1C0BD0E65B00C6D4A0 /* ObjectStateChangeEventSource.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = ObjectStateChangeEventSource.h; sourceTree = "<group>"; };
+		444EAE1D0BD0E65B00C6D4A0 /* ObjectStateChangeListener.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = ObjectStateChangeListener.h; sourceTree = "<group>"; };
+		444EAE1F0BD0E65B00C6D4A0 /* Quest.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = Quest.h; sourceTree = "<group>"; };
+		444EAE200BD0E65B00C6D4A0 /* QuestBook.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = QuestBook.h; sourceTree = "<group>"; };
+		444EAE210BD0E65B00C6D4A0 /* QuestEvent.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = QuestEvent.h; sourceTree = "<group>"; };
+		444EAE220BD0E65B00C6D4A0 /* QuestListener.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = QuestListener.h; sourceTree = "<group>"; };
+		444EAE230BD0E65B00C6D4A0 /* RulesPrerequisites.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = RulesPrerequisites.h; sourceTree = "<group>"; };
+		444EAE240BD0E65B00C6D4A0 /* RulesSubsystem.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = RulesSubsystem.h; sourceTree = "<group>"; };
+		444EAE250BD0E65B00C6D4A0 /* Slot.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = Slot.h; sourceTree = "<group>"; };
+		444EAE260BD0E65B00C6D4A0 /* SonderfertigkeitenStateSet.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = SonderfertigkeitenStateSet.h; sourceTree = "<group>"; };
+		444EAE270BD0E65B00C6D4A0 /* StateSet.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = StateSet.h; sourceTree = "<group>"; };
+		444EAE280BD0E65B00C6D4A0 /* Talent.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = Talent.h; sourceTree = "<group>"; };
+		444EAE290BD0E65B00C6D4A0 /* Talentgruppe.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = Talentgruppe.h; sourceTree = "<group>"; };
+		444EAE2A0BD0E65B00C6D4A0 /* TalentInputIterator.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = TalentInputIterator.h; sourceTree = "<group>"; };
+		444EAE2B0BD0E65B00C6D4A0 /* TalentStateSet.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = TalentStateSet.h; sourceTree = "<group>"; };
+		444EAE300BD0E65B00C6D4A0 /* Weapon.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = Weapon.h; sourceTree = "<group>"; };
+		444EAE310BD0E65B00C6D4A0 /* ZauberStateSet.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = ZauberStateSet.h; sourceTree = "<group>"; };
+		444EAE610BD0E6C000C6D4A0 /* ScriptObjectMarker.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = ScriptObjectMarker.h; path = script/include/ScriptObjectMarker.h; sourceTree = "<group>"; };
+		444EAE620BD0E6C000C6D4A0 /* ScriptPrerequisites.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = ScriptPrerequisites.h; path = script/include/ScriptPrerequisites.h; sourceTree = "<group>"; };
+		444EAE630BD0E6C000C6D4A0 /* ScriptSubsystem.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = ScriptSubsystem.h; path = script/include/ScriptSubsystem.h; sourceTree = "<group>"; };
 		444EAE670BD0E6D400C6D4A0 /* ScriptObjectMarker.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = ScriptObjectMarker.cpp; path = ../engine/script/src/ScriptObjectMarker.cpp; sourceTree = SOURCE_ROOT; };
 		444EAE680BD0E6D400C6D4A0 /* ScriptSubsystem.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = ScriptSubsystem.cpp; path = ../engine/script/src/ScriptSubsystem.cpp; sourceTree = SOURCE_ROOT; };
 		444EAEBD0BD0F09900C6D4A0 /* CEGUI.framework */ = {isa = PBXFileReference; lastKnownFileType = wrapper.framework; name = CEGUI.framework; path = /Library/Frameworks/CEGUI.framework; sourceTree = "<absolute>"; };
@@ -1262,37 +1263,37 @@
 		446BF46F0C4532120013C214 /* LinearSoundFadeFunctor.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = LinearSoundFadeFunctor.cpp; path = ../engine/core/src/LinearSoundFadeFunctor.cpp; sourceTree = SOURCE_ROOT; };
 		446BF4700C4532120013C214 /* SoundFadeFunctor.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = SoundFadeFunctor.cpp; path = ../engine/core/src/SoundFadeFunctor.cpp; sourceTree = SOURCE_ROOT; };
 		446BF4710C4532120013C214 /* SoundFadeJob.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = SoundFadeJob.cpp; path = ../engine/core/src/SoundFadeJob.cpp; sourceTree = SOURCE_ROOT; };
-		446BF4750C4532720013C214 /* CreatureController.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = CreatureController.h; path = ../engine/rules/include/CreatureController.h; sourceTree = SOURCE_ROOT; };
-		446BF4760C4532720013C214 /* CreatureControllerManager.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = CreatureControllerManager.h; path = ../engine/rules/include/CreatureControllerManager.h; sourceTree = SOURCE_ROOT; };
-		446BF4770C4532720013C214 /* EffectFactory.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = EffectFactory.h; path = ../engine/rules/include/EffectFactory.h; sourceTree = SOURCE_ROOT; };
-		446BF47B0C45329F0013C214 /* CreatureController.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = CreatureController.cpp; path = ../engine/rules/src/CreatureController.cpp; sourceTree = SOURCE_ROOT; };
-		446BF47C0C45329F0013C214 /* CreatureControllerManager.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = CreatureControllerManager.cpp; path = ../engine/rules/src/CreatureControllerManager.cpp; sourceTree = SOURCE_ROOT; };
-		446BF47D0C45329F0013C214 /* EffectFactory.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = EffectFactory.cpp; path = ../engine/rules/src/EffectFactory.cpp; sourceTree = SOURCE_ROOT; };
+		446BF4750C4532720013C214 /* CreatureController.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = CreatureController.h; sourceTree = "<group>"; };
+		446BF4760C4532720013C214 /* CreatureControllerManager.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = CreatureControllerManager.h; sourceTree = "<group>"; };
+		446BF4770C4532720013C214 /* EffectFactory.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = EffectFactory.h; sourceTree = "<group>"; };
+		446BF47B0C45329F0013C214 /* CreatureController.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = CreatureController.cpp; sourceTree = "<group>"; };
+		446BF47C0C45329F0013C214 /* CreatureControllerManager.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = CreatureControllerManager.cpp; sourceTree = "<group>"; };
+		446BF47D0C45329F0013C214 /* EffectFactory.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = EffectFactory.cpp; sourceTree = "<group>"; };
 		446BF4810C4532B50013C214 /* UnifiedFactory.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = UnifiedFactory.h; path = ../engine/script/include/UnifiedFactory.h; sourceTree = SOURCE_ROOT; };
-		446BF4840C45335A0013C214 /* ControlState.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = ControlState.h; path = ../engine/ui/include/ControlState.h; sourceTree = SOURCE_ROOT; };
-		446BF4850C45335A0013C214 /* CutsceneControlState.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = CutsceneControlState.h; path = ../engine/ui/include/CutsceneControlState.h; sourceTree = SOURCE_ROOT; };
-		446BF4860C45335A0013C214 /* DialogControlState.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = DialogControlState.h; path = ../engine/ui/include/DialogControlState.h; sourceTree = SOURCE_ROOT; };
-		446BF4870C45335A0013C214 /* FreeflightControlState.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = FreeflightControlState.h; path = ../engine/ui/include/FreeflightControlState.h; sourceTree = SOURCE_ROOT; };
-		446BF4880C45335A0013C214 /* ItemDescriptionDragContainer.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = ItemDescriptionDragContainer.h; path = ../engine/ui/include/ItemDescriptionDragContainer.h; sourceTree = SOURCE_ROOT; };
-		446BF4890C45335A0013C214 /* ItemIconDragContainer.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = ItemIconDragContainer.h; path = ../engine/ui/include/ItemIconDragContainer.h; sourceTree = SOURCE_ROOT; };
-		446BF48A0C45335A0013C214 /* MovementControlState.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = MovementControlState.h; path = ../engine/ui/include/MovementControlState.h; sourceTree = SOURCE_ROOT; };
-		446BF48B0C45335A0013C214 /* PropertiesWindow.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = PropertiesWindow.h; path = ../engine/ui/include/PropertiesWindow.h; sourceTree = SOURCE_ROOT; };
-		446BF4940C4533BD0013C214 /* CombatControlState.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = CombatControlState.cpp; path = ../engine/ui/src/CombatControlState.cpp; sourceTree = SOURCE_ROOT; };
-		446BF4950C4533BD0013C214 /* CombatWindow.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = CombatWindow.cpp; path = ../engine/ui/src/CombatWindow.cpp; sourceTree = SOURCE_ROOT; };
-		446BF4960C4533BD0013C214 /* ControlState.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = ControlState.cpp; path = ../engine/ui/src/ControlState.cpp; sourceTree = SOURCE_ROOT; };
-		446BF4970C4533BD0013C214 /* CutsceneControlState.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = CutsceneControlState.cpp; path = ../engine/ui/src/CutsceneControlState.cpp; sourceTree = SOURCE_ROOT; };
-		446BF4980C4533BD0013C214 /* DialogControlState.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = DialogControlState.cpp; path = ../engine/ui/src/DialogControlState.cpp; sourceTree = SOURCE_ROOT; };
-		446BF4990C4533BD0013C214 /* FreeflightControlState.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = FreeflightControlState.cpp; path = ../engine/ui/src/FreeflightControlState.cpp; sourceTree = SOURCE_ROOT; };
-		446BF49A0C4533BD0013C214 /* ItemIconDragContainer.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = ItemIconDragContainer.cpp; path = ../engine/ui/src/ItemIconDragContainer.cpp; sourceTree = SOURCE_ROOT; };
-		446BF49B0C4533BD0013C214 /* MovementControlState.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = MovementControlState.cpp; path = ../engine/ui/src/MovementControlState.cpp; sourceTree = SOURCE_ROOT; };
-		446BF49C0C4533BD0013C214 /* PropertiesWindow.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = PropertiesWindow.cpp; path = ../engine/ui/src/PropertiesWindow.cpp; sourceTree = SOURCE_ROOT; };
-		446BF4D00C453B9E0013C214 /* CombatControlState.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = CombatControlState.h; path = ../engine/ui/include/CombatControlState.h; sourceTree = SOURCE_ROOT; };
-		446BF4D10C453B9E0013C214 /* CombatWindow.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = CombatWindow.h; path = ../engine/ui/include/CombatWindow.h; sourceTree = SOURCE_ROOT; };
-		446BF4D50C453C1D0013C214 /* ItemDescriptionDragContainer.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = ItemDescriptionDragContainer.cpp; path = ../engine/ui/src/ItemDescriptionDragContainer.cpp; sourceTree = SOURCE_ROOT; };
-		44D8145A0BF7B52600534175 /* SelectionHelper.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = SelectionHelper.h; path = ../engine/rules/include/SelectionHelper.h; sourceTree = SOURCE_ROOT; };
-		44D8145B0BF7B52600534175 /* Selector.h */ = {isa = PBXFileReference; explicitFileType = sourcecode.c.h; fileEncoding = 4; name = Selector.h; path = ../engine/rules/include/Selector.h; sourceTree = SOURCE_ROOT; };
-		44D8145F0BF7B58A00534175 /* ProgressWindow.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = ProgressWindow.h; path = ../engine/ui/include/ProgressWindow.h; sourceTree = SOURCE_ROOT; };
-		44D814630BF7B5AD00534175 /* ProgressWindow.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = ProgressWindow.cpp; path = ../engine/ui/src/ProgressWindow.cpp; sourceTree = SOURCE_ROOT; };
+		446BF4840C45335A0013C214 /* ControlState.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = ControlState.h; sourceTree = "<group>"; };
+		446BF4850C45335A0013C214 /* CutsceneControlState.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = CutsceneControlState.h; sourceTree = "<group>"; };
+		446BF4860C45335A0013C214 /* DialogControlState.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = DialogControlState.h; sourceTree = "<group>"; };
+		446BF4870C45335A0013C214 /* FreeflightControlState.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = FreeflightControlState.h; sourceTree = "<group>"; };
+		446BF4880C45335A0013C214 /* ItemDescriptionDragContainer.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = ItemDescriptionDragContainer.h; sourceTree = "<group>"; };
+		446BF4890C45335A0013C214 /* ItemIconDragContainer.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = ItemIconDragContainer.h; sourceTree = "<group>"; };
+		446BF48A0C45335A0013C214 /* MovementControlState.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = MovementControlState.h; sourceTree = "<group>"; };
+		446BF48B0C45335A0013C214 /* PropertiesWindow.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = PropertiesWindow.h; sourceTree = "<group>"; };
+		446BF4940C4533BD0013C214 /* CombatControlState.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = CombatControlState.cpp; sourceTree = "<group>"; };
+		446BF4950C4533BD0013C214 /* CombatWindow.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = CombatWindow.cpp; sourceTree = "<group>"; };
+		446BF4960C4533BD0013C214 /* ControlState.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = ControlState.cpp; sourceTree = "<group>"; };
+		446BF4970C4533BD0013C214 /* CutsceneControlState.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = CutsceneControlState.cpp; sourceTree = "<group>"; };
+		446BF4980C4533BD0013C214 /* DialogControlState.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = DialogControlState.cpp; sourceTree = "<group>"; };
+		446BF4990C4533BD0013C214 /* FreeflightControlState.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = FreeflightControlState.cpp; sourceTree = "<group>"; };
+		446BF49A0C4533BD0013C214 /* ItemIconDragContainer.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = ItemIconDragContainer.cpp; sourceTree = "<group>"; };
+		446BF49B0C4533BD0013C214 /* MovementControlState.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = MovementControlState.cpp; sourceTree = "<group>"; };
+		446BF49C0C4533BD0013C214 /* PropertiesWindow.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = PropertiesWindow.cpp; sourceTree = "<group>"; };
+		446BF4D00C453B9E0013C214 /* CombatControlState.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = CombatControlState.h; sourceTree = "<group>"; };
+		446BF4D10C453B9E0013C214 /* CombatWindow.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = CombatWindow.h; sourceTree = "<group>"; };
+		446BF4D50C453C1D0013C214 /* ItemDescriptionDragContainer.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = ItemDescriptionDragContainer.cpp; sourceTree = "<group>"; };
+		44D8145A0BF7B52600534175 /* SelectionHelper.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = SelectionHelper.h; sourceTree = "<group>"; };
+		44D8145B0BF7B52600534175 /* Selector.h */ = {isa = PBXFileReference; explicitFileType = sourcecode.c.h; fileEncoding = 4; path = Selector.h; sourceTree = "<group>"; };
+		44D8145F0BF7B58A00534175 /* ProgressWindow.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = ProgressWindow.h; sourceTree = "<group>"; };
+		44D814630BF7B5AD00534175 /* ProgressWindow.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = ProgressWindow.cpp; sourceTree = "<group>"; };
 		44D814670BF7B5C700534175 /* Landmark.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = Landmark.cpp; path = ../engine/ai/src/Landmark.cpp; sourceTree = SOURCE_ROOT; };
 		44D814680BF7B5C700534175 /* LandmarkPath.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = LandmarkPath.cpp; path = ../engine/ai/src/LandmarkPath.cpp; sourceTree = SOURCE_ROOT; };
 		44D8146B0BF7B5E800534175 /* Landmark.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = Landmark.h; path = ../engine/ai/include/Landmark.h; sourceTree = SOURCE_ROOT; };
@@ -1304,7 +1305,6 @@
 		44D814750BF7B62F00534175 /* Trigger.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = Trigger.h; path = ../engine/core/include/Trigger.h; sourceTree = SOURCE_ROOT; };
 		44D814760BF7B62F00534175 /* Zone.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = Zone.h; path = ../engine/core/include/Zone.h; sourceTree = SOURCE_ROOT; };
 		44D814770BF7B62F00534175 /* ZoneManager.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = ZoneManager.h; path = ../engine/core/include/ZoneManager.h; sourceTree = SOURCE_ROOT; };
-		4835559A0E6ABED100008748 /* mkdmg.sh */ = {isa = PBXFileReference; explicitFileType = text.script.sh; fileEncoding = 4; name = mkdmg.sh; path = tools/mkdmg.sh; sourceTree = "<group>"; };
 		483646960D83D13700912FEC /* ContentLoader.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = ContentLoader.h; path = ../engine/core/include/ContentLoader.h; sourceTree = SOURCE_ROOT; };
 		483646970D83D13700912FEC /* SoundStitching.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = SoundStitching.h; path = ../engine/core/include/SoundStitching.h; sourceTree = SOURCE_ROOT; };
 		483646980D83D13700912FEC /* StartAnimationJob.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = StartAnimationJob.h; path = ../engine/core/include/StartAnimationJob.h; sourceTree = SOURCE_ROOT; };
@@ -1313,14 +1313,14 @@
 		483646A10D83D57800912FEC /* libruby.dylib */ = {isa = PBXFileReference; lastKnownFileType = "compiled.mach-o.dylib"; name = libruby.dylib; path = /System/Library/Frameworks/Ruby.framework/Versions/1.8/usr/lib/libruby.dylib; sourceTree = "<absolute>"; };
 		4836CBC80D8FB0BE002FE5D7 /* Xerces.framework */ = {isa = PBXFileReference; lastKnownFileType = wrapper.framework; name = Xerces.framework; path = /Library/Frameworks/Xerces.framework; sourceTree = "<absolute>"; };
 		48380B180D800EED0013EE0C /* StartAnimationJob.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = StartAnimationJob.cpp; path = ../engine/core/src/StartAnimationJob.cpp; sourceTree = SOURCE_ROOT; };
-		48389B8E0D86741F00AFAB66 /* CombatGui.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = CombatGui.cpp; path = ../engine/ui/src/CombatGui.cpp; sourceTree = SOURCE_ROOT; };
-		48389B8F0D86741F00AFAB66 /* GameSaveLoadWindow.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = GameSaveLoadWindow.cpp; path = ../engine/ui/src/GameSaveLoadWindow.cpp; sourceTree = SOURCE_ROOT; };
-		48389B900D86741F00AFAB66 /* MainMenuLoadWindow.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = MainMenuLoadWindow.cpp; path = ../engine/ui/src/MainMenuLoadWindow.cpp; sourceTree = SOURCE_ROOT; };
-		48389B910D86741F00AFAB66 /* stdinc.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = stdinc.cpp; path = ../engine/ui/src/stdinc.cpp; sourceTree = SOURCE_ROOT; };
-		48389B960D86743900AFAB66 /* CombatGui.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = CombatGui.h; path = ../engine/ui/include/CombatGui.h; sourceTree = SOURCE_ROOT; };
-		48389B970D86743900AFAB66 /* GameSaveLoadWindow.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = GameSaveLoadWindow.h; path = ../engine/ui/include/GameSaveLoadWindow.h; sourceTree = SOURCE_ROOT; };
-		48389B980D86743900AFAB66 /* MainMenuLoadWindow.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = MainMenuLoadWindow.h; path = ../engine/ui/include/MainMenuLoadWindow.h; sourceTree = SOURCE_ROOT; };
-		48389B990D86743900AFAB66 /* UiMessages.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = UiMessages.h; path = ../engine/ui/include/UiMessages.h; sourceTree = SOURCE_ROOT; };
+		48389B8E0D86741F00AFAB66 /* CombatGui.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = CombatGui.cpp; sourceTree = "<group>"; };
+		48389B8F0D86741F00AFAB66 /* GameSaveLoadWindow.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = GameSaveLoadWindow.cpp; sourceTree = "<group>"; };
+		48389B900D86741F00AFAB66 /* MainMenuLoadWindow.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = MainMenuLoadWindow.cpp; sourceTree = "<group>"; };
+		48389B910D86741F00AFAB66 /* stdinc.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = stdinc.cpp; sourceTree = "<group>"; };
+		48389B960D86743900AFAB66 /* CombatGui.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = CombatGui.h; sourceTree = "<group>"; };
+		48389B970D86743900AFAB66 /* GameSaveLoadWindow.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = GameSaveLoadWindow.h; sourceTree = "<group>"; };
+		48389B980D86743900AFAB66 /* MainMenuLoadWindow.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = MainMenuLoadWindow.h; sourceTree = "<group>"; };
+		48389B990D86743900AFAB66 /* UiMessages.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = UiMessages.h; sourceTree = "<group>"; };
 		48389BE80D8677EE00AFAB66 /* RlAi.head.swig */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text; name = RlAi.head.swig; path = ../engine/script/swig/RlAi.head.swig; sourceTree = SOURCE_ROOT; };
 		48389BE90D8677EE00AFAB66 /* RlAi.swig */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text; name = RlAi.swig; path = ../engine/script/swig/RlAi.swig; sourceTree = SOURCE_ROOT; };
 		48389BEA0D8677EE00AFAB66 /* RlCommon.head.swig */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text; name = RlCommon.head.swig; path = ../engine/script/swig/RlCommon.head.swig; sourceTree = SOURCE_ROOT; };
@@ -1353,25 +1353,25 @@
 		48389C1A0D867AA900AFAB66 /* TriggerFactory.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = TriggerFactory.cpp; path = ../engine/script/src/TriggerFactory.cpp; sourceTree = SOURCE_ROOT; };
 		483D31100D85B1AF003477A0 /* NullSoundStitching.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = NullSoundStitching.h; path = ../engine/core/include/nulldriver/NullSoundStitching.h; sourceTree = SOURCE_ROOT; };
 		483D31120D85B1C2003477A0 /* NullSoundStitching.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = NullSoundStitching.cpp; path = ../engine/core/src/nulldriver/NullSoundStitching.cpp; sourceTree = SOURCE_ROOT; };
-		483D31150D85B215003477A0 /* Combatant.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = Combatant.h; path = ../engine/rules/include/Combatant.h; sourceTree = SOURCE_ROOT; };
-		483D31160D85B215003477A0 /* EffectManagementTask.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = EffectManagementTask.h; path = ../engine/rules/include/EffectManagementTask.h; sourceTree = SOURCE_ROOT; };
-		483D31170D85B215003477A0 /* GameEventLog.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = GameEventLog.h; path = ../engine/rules/include/GameEventLog.h; sourceTree = SOURCE_ROOT; };
-		483D31180D85B215003477A0 /* GameTimeSource.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = GameTimeSource.h; path = ../engine/rules/include/GameTimeSource.h; sourceTree = SOURCE_ROOT; };
-		483D31190D85B215003477A0 /* GlobalProperties.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = GlobalProperties.h; path = ../engine/rules/include/GlobalProperties.h; sourceTree = SOURCE_ROOT; };
-		483D311A0D85B215003477A0 /* GoToJob.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = GoToJob.h; path = ../engine/rules/include/GoToJob.h; sourceTree = SOURCE_ROOT; };
-		483D311B0D85B215003477A0 /* Kampfaktion.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = Kampfaktion.h; path = ../engine/rules/include/Kampfaktion.h; sourceTree = SOURCE_ROOT; };
-		483D311C0D85B215003477A0 /* RulesConstants.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = RulesConstants.h; path = ../engine/rules/include/RulesConstants.h; sourceTree = SOURCE_ROOT; };
-		483D311D0D85B215003477A0 /* RulesMessages.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = RulesMessages.h; path = ../engine/rules/include/RulesMessages.h; sourceTree = SOURCE_ROOT; };
-		483D311E0D85B215003477A0 /* stdinc.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = stdinc.h; path = ../engine/rules/include/stdinc.h; sourceTree = SOURCE_ROOT; };
-		483D311F0D85B215003477A0 /* WaitJob.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = WaitJob.h; path = ../engine/rules/include/WaitJob.h; sourceTree = SOURCE_ROOT; };
-		483D312B0D85B22C003477A0 /* Combatant.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = Combatant.cpp; path = ../engine/rules/src/Combatant.cpp; sourceTree = SOURCE_ROOT; };
-		483D312C0D85B22C003477A0 /* EffectManagementTask.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = EffectManagementTask.cpp; path = ../engine/rules/src/EffectManagementTask.cpp; sourceTree = SOURCE_ROOT; };
-		483D312D0D85B22C003477A0 /* GameEventLog.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = GameEventLog.cpp; path = ../engine/rules/src/GameEventLog.cpp; sourceTree = SOURCE_ROOT; };
-		483D312E0D85B22C003477A0 /* GameTimeSource.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = GameTimeSource.cpp; path = ../engine/rules/src/GameTimeSource.cpp; sourceTree = SOURCE_ROOT; };
-		483D312F0D85B22C003477A0 /* GlobalProperties.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = GlobalProperties.cpp; path = ../engine/rules/src/GlobalProperties.cpp; sourceTree = SOURCE_ROOT; };
-		483D31300D85B22C003477A0 /* GoToJob.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = GoToJob.cpp; path = ../engine/rules/src/GoToJob.cpp; sourceTree = SOURCE_ROOT; };
-		483D31310D85B22C003477A0 /* Kampfaktion.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = Kampfaktion.cpp; path = ../engine/rules/src/Kampfaktion.cpp; sourceTree = SOURCE_ROOT; };
-		483D31320D85B22C003477A0 /* WaitJob.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = WaitJob.cpp; path = ../engine/rules/src/WaitJob.cpp; sourceTree = SOURCE_ROOT; };
+		483D31150D85B215003477A0 /* Combatant.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = Combatant.h; sourceTree = "<group>"; };
+		483D31160D85B215003477A0 /* EffectManagementTask.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = EffectManagementTask.h; sourceTree = "<group>"; };
+		483D31170D85B215003477A0 /* GameEventLog.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = GameEventLog.h; sourceTree = "<group>"; };
+		483D31180D85B215003477A0 /* GameTimeSource.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = GameTimeSource.h; sourceTree = "<group>"; };
+		483D31190D85B215003477A0 /* GlobalProperties.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = GlobalProperties.h; sourceTree = "<group>"; };
+		483D311A0D85B215003477A0 /* GoToJob.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = GoToJob.h; sourceTree = "<group>"; };
+		483D311B0D85B215003477A0 /* Kampfaktion.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = Kampfaktion.h; sourceTree = "<group>"; };
+		483D311C0D85B215003477A0 /* RulesConstants.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = RulesConstants.h; sourceTree = "<group>"; };
+		483D311D0D85B215003477A0 /* RulesMessages.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = RulesMessages.h; sourceTree = "<group>"; };
+		483D311E0D85B215003477A0 /* stdinc.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = stdinc.h; sourceTree = "<group>"; };
+		483D311F0D85B215003477A0 /* WaitJob.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = WaitJob.h; sourceTree = "<group>"; };
+		483D312B0D85B22C003477A0 /* Combatant.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = Combatant.cpp; sourceTree = "<group>"; };
+		483D312C0D85B22C003477A0 /* EffectManagementTask.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = EffectManagementTask.cpp; sourceTree = "<group>"; };
+		483D312D0D85B22C003477A0 /* GameEventLog.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = GameEventLog.cpp; sourceTree = "<group>"; };
+		483D312E0D85B22C003477A0 /* GameTimeSource.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = GameTimeSource.cpp; sourceTree = "<group>"; };
+		483D312F0D85B22C003477A0 /* GlobalProperties.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = GlobalProperties.cpp; sourceTree = "<group>"; };
+		483D31300D85B22C003477A0 /* GoToJob.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = GoToJob.cpp; sourceTree = "<group>"; };
+		483D31310D85B22C003477A0 /* Kampfaktion.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = Kampfaktion.cpp; sourceTree = "<group>"; };
+		483D31320D85B22C003477A0 /* WaitJob.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = WaitJob.cpp; sourceTree = "<group>"; };
 		483D31450D85B398003477A0 /* AgentCombatState.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = AgentCombatState.h; path = ../engine/ai/include/AgentCombatState.h; sourceTree = SOURCE_ROOT; };
 		483D31460D85B398003477A0 /* AgentDialogState.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = AgentDialogState.h; path = ../engine/ai/include/AgentDialogState.h; sourceTree = SOURCE_ROOT; };
 		483D31470D85B398003477A0 /* AgentState.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = AgentState.h; path = ../engine/ai/include/AgentState.h; sourceTree = SOURCE_ROOT; };
@@ -1447,49 +1447,49 @@
 		485B89570E15796500D5B19C /* Scene.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = Scene.cpp; path = ../engine/script/src/Scene.cpp; sourceTree = SOURCE_ROOT; };
 		485B89580E15796500D5B19C /* SceneLoader.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = SceneLoader.cpp; path = ../engine/script/src/SceneLoader.cpp; sourceTree = SOURCE_ROOT; };
 		485B89590E15796500D5B19C /* SceneManager.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = SceneManager.cpp; path = ../engine/script/src/SceneManager.cpp; sourceTree = SOURCE_ROOT; };
-		487029C60E80DCEA00B66388 /* GameOverWindow.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = GameOverWindow.h; path = ../engine/ui/include/GameOverWindow.h; sourceTree = SOURCE_ROOT; };
-		487029C80E80DCF900B66388 /* GameOverWindow.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = GameOverWindow.cpp; path = ../engine/ui/src/GameOverWindow.cpp; sourceTree = SOURCE_ROOT; };
-		487029E70E80E12200B66388 /* PartyManager.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = PartyManager.h; path = ../engine/rules/include/PartyManager.h; sourceTree = SOURCE_ROOT; };
-		487029E90E80E13300B66388 /* PartyManager.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = PartyManager.cpp; path = ../engine/rules/src/PartyManager.cpp; sourceTree = SOURCE_ROOT; };
+		487029C60E80DCEA00B66388 /* GameOverWindow.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = GameOverWindow.h; sourceTree = "<group>"; };
+		487029C80E80DCF900B66388 /* GameOverWindow.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = GameOverWindow.cpp; sourceTree = "<group>"; };
+		487029E70E80E12200B66388 /* PartyManager.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = PartyManager.h; sourceTree = "<group>"; };
+		487029E90E80E13300B66388 /* PartyManager.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = PartyManager.cpp; sourceTree = "<group>"; };
 		48760A990D92E2CD00BEB57C /* RlUi.swig */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text; name = RlUi.swig; path = ../engine/script/swig/RlUi.swig; sourceTree = SOURCE_ROOT; };
 		48760AA90D92E4B700BEB57C /* RlExports_wrap.cxx */ = {isa = PBXFileReference; explicitFileType = sourcecode.cpp.cpp; fileEncoding = 4; includeInIndex = 0; name = RlExports_wrap.cxx; path = ../engine/script/swig/RlExports_wrap.cxx; sourceTree = SOURCE_ROOT; };
 		48760AAA0D92E4B700BEB57C /* RlExports_wrap.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = RlExports_wrap.h; path = ../engine/script/swig/RlExports_wrap.h; sourceTree = SOURCE_ROOT; };
 		487750AF0E7E3C9C0018216B /* Cg.framework */ = {isa = PBXFileReference; lastKnownFileType = wrapper.framework; name = Cg.framework; path = /Library/Frameworks/Cg.framework; sourceTree = "<absolute>"; };
-		4890C0A70E18061300BE5850 /* AbstractMovement.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = AbstractMovement.h; path = ../engine/rules/include/AbstractMovement.h; sourceTree = SOURCE_ROOT; };
-		4890C0A80E18061300BE5850 /* FallDownMovement.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = FallDownMovement.h; path = ../engine/rules/include/FallDownMovement.h; sourceTree = SOURCE_ROOT; };
-		4890C0A90E18061300BE5850 /* JogBackwardsMovement.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = JogBackwardsMovement.h; path = ../engine/rules/include/JogBackwardsMovement.h; sourceTree = SOURCE_ROOT; };
-		4890C0AA0E18061300BE5850 /* JogFastMovement.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = JogFastMovement.h; path = ../engine/rules/include/JogFastMovement.h; sourceTree = SOURCE_ROOT; };
-		4890C0AB0E18061300BE5850 /* JogMovement.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = JogMovement.h; path = ../engine/rules/include/JogMovement.h; sourceTree = SOURCE_ROOT; };
-		4890C0AC0E18061300BE5850 /* JumpHighMovement.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = JumpHighMovement.h; path = ../engine/rules/include/JumpHighMovement.h; sourceTree = SOURCE_ROOT; };
-		4890C0AD0E18061300BE5850 /* JumpLongMovement.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = JumpLongMovement.h; path = ../engine/rules/include/JumpLongMovement.h; sourceTree = SOURCE_ROOT; };
-		4890C0AE0E18061300BE5850 /* JumpToTargetMovement.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = JumpToTargetMovement.h; path = ../engine/rules/include/JumpToTargetMovement.h; sourceTree = SOURCE_ROOT; };
-		4890C0AF0E18061300BE5850 /* LieDownMovement.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = LieDownMovement.h; path = ../engine/rules/include/LieDownMovement.h; sourceTree = SOURCE_ROOT; };
-		4890C0B00E18061300BE5850 /* RotateMovement.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = RotateMovement.h; path = ../engine/rules/include/RotateMovement.h; sourceTree = SOURCE_ROOT; };
-		4890C0B10E18061300BE5850 /* SneakMovement.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = SneakMovement.h; path = ../engine/rules/include/SneakMovement.h; sourceTree = SOURCE_ROOT; };
-		4890C0B20E18061300BE5850 /* SprintMovement.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = SprintMovement.h; path = ../engine/rules/include/SprintMovement.h; sourceTree = SOURCE_ROOT; };
-		4890C0B30E18061300BE5850 /* StandAroundMovement.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = StandAroundMovement.h; path = ../engine/rules/include/StandAroundMovement.h; sourceTree = SOURCE_ROOT; };
-		4890C0B40E18061300BE5850 /* StepRecognitionMovement.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = StepRecognitionMovement.h; path = ../engine/rules/include/StepRecognitionMovement.h; sourceTree = SOURCE_ROOT; };
-		4890C0B50E18061300BE5850 /* StrafeMovement.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = StrafeMovement.h; path = ../engine/rules/include/StrafeMovement.h; sourceTree = SOURCE_ROOT; };
-		4890C0B60E18061300BE5850 /* WalkBackwardsMovement.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = WalkBackwardsMovement.h; path = ../engine/rules/include/WalkBackwardsMovement.h; sourceTree = SOURCE_ROOT; };
-		4890C0B70E18061300BE5850 /* WalkMovement.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = WalkMovement.h; path = ../engine/rules/include/WalkMovement.h; sourceTree = SOURCE_ROOT; };
-		4890C0C90E18062B00BE5850 /* FallDownMovement.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = FallDownMovement.cpp; path = ../engine/rules/src/FallDownMovement.cpp; sourceTree = SOURCE_ROOT; };
-		4890C0CA0E18062B00BE5850 /* JogFastMovement.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = JogFastMovement.cpp; path = ../engine/rules/src/JogFastMovement.cpp; sourceTree = SOURCE_ROOT; };
-		4890C0CB0E18062B00BE5850 /* JogMovement.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = JogMovement.cpp; path = ../engine/rules/src/JogMovement.cpp; sourceTree = SOURCE_ROOT; };
-		4890C0CC0E18062B00BE5850 /* JumpHighMovement.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = JumpHighMovement.cpp; path = ../engine/rules/src/JumpHighMovement.cpp; sourceTree = SOURCE_ROOT; };
-		4890C0CD0E18062B00BE5850 /* JumpLongMovement.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = JumpLongMovement.cpp; path = ../engine/rules/src/JumpLongMovement.cpp; sourceTree = SOURCE_ROOT; };
-		4890C0CE0E18062B00BE5850 /* JumpToTargetMovement.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = JumpToTargetMovement.cpp; path = ../engine/rules/src/JumpToTargetMovement.cpp; sourceTree = SOURCE_ROOT; };
-		4890C0CF0E18062B00BE5850 /* LieDownMovement.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = LieDownMovement.cpp; path = ../engine/rules/src/LieDownMovement.cpp; sourceTree = SOURCE_ROOT; };
-		4890C0D00E18062B00BE5850 /* RotateMovement.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = RotateMovement.cpp; path = ../engine/rules/src/RotateMovement.cpp; sourceTree = SOURCE_ROOT; };
-		4890C0D10E18062B00BE5850 /* SneakMovement.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = SneakMovement.cpp; path = ../engine/rules/src/SneakMovement.cpp; sourceTree = SOURCE_ROOT; };
-		4890C0D20E18062B00BE5850 /* SprintMovement.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = SprintMovement.cpp; path = ../engine/rules/src/SprintMovement.cpp; sourceTree = SOURCE_ROOT; };
-		4890C0D30E18062B00BE5850 /* StandAroundMovement.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = StandAroundMovement.cpp; path = ../engine/rules/src/StandAroundMovement.cpp; sourceTree = SOURCE_ROOT; };
-		4890C0D40E18062B00BE5850 /* StepRecognitionMovement.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = StepRecognitionMovement.cpp; path = ../engine/rules/src/StepRecognitionMovement.cpp; sourceTree = SOURCE_ROOT; };
-		4890C0D50E18062B00BE5850 /* StrafeMovement.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = StrafeMovement.cpp; path = ../engine/rules/src/StrafeMovement.cpp; sourceTree = SOURCE_ROOT; };
-		4890C0D60E18062B00BE5850 /* WalkMovement.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = WalkMovement.cpp; path = ../engine/rules/src/WalkMovement.cpp; sourceTree = SOURCE_ROOT; };
+		4890C0A70E18061300BE5850 /* AbstractMovement.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = AbstractMovement.h; sourceTree = "<group>"; };
+		4890C0A80E18061300BE5850 /* FallDownMovement.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = FallDownMovement.h; sourceTree = "<group>"; };
+		4890C0A90E18061300BE5850 /* JogBackwardsMovement.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = JogBackwardsMovement.h; sourceTree = "<group>"; };
+		4890C0AA0E18061300BE5850 /* JogFastMovement.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = JogFastMovement.h; sourceTree = "<group>"; };
+		4890C0AB0E18061300BE5850 /* JogMovement.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = JogMovement.h; sourceTree = "<group>"; };
+		4890C0AC0E18061300BE5850 /* JumpHighMovement.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = JumpHighMovement.h; sourceTree = "<group>"; };
+		4890C0AD0E18061300BE5850 /* JumpLongMovement.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = JumpLongMovement.h; sourceTree = "<group>"; };
+		4890C0AE0E18061300BE5850 /* JumpToTargetMovement.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = JumpToTargetMovement.h; sourceTree = "<group>"; };
+		4890C0AF0E18061300BE5850 /* LieDownMovement.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = LieDownMovement.h; sourceTree = "<group>"; };
+		4890C0B00E18061300BE5850 /* RotateMovement.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = RotateMovement.h; sourceTree = "<group>"; };
+		4890C0B10E18061300BE5850 /* SneakMovement.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = SneakMovement.h; sourceTree = "<group>"; };
+		4890C0B20E18061300BE5850 /* SprintMovement.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = SprintMovement.h; sourceTree = "<group>"; };
+		4890C0B30E18061300BE5850 /* StandAroundMovement.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = StandAroundMovement.h; sourceTree = "<group>"; };
+		4890C0B40E18061300BE5850 /* StepRecognitionMovement.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = StepRecognitionMovement.h; sourceTree = "<group>"; };
+		4890C0B50E18061300BE5850 /* StrafeMovement.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = StrafeMovement.h; sourceTree = "<group>"; };
+		4890C0B60E18061300BE5850 /* WalkBackwardsMovement.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = WalkBackwardsMovement.h; sourceTree = "<group>"; };
+		4890C0B70E18061300BE5850 /* WalkMovement.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = WalkMovement.h; sourceTree = "<group>"; };
+		4890C0C90E18062B00BE5850 /* FallDownMovement.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = FallDownMovement.cpp; sourceTree = "<group>"; };
+		4890C0CA0E18062B00BE5850 /* JogFastMovement.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = JogFastMovement.cpp; sourceTree = "<group>"; };
+		4890C0CB0E18062B00BE5850 /* JogMovement.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = JogMovement.cpp; sourceTree = "<group>"; };
+		4890C0CC0E18062B00BE5850 /* JumpHighMovement.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = JumpHighMovement.cpp; sourceTree = "<group>"; };
+		4890C0CD0E18062B00BE5850 /* JumpLongMovement.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = JumpLongMovement.cpp; sourceTree = "<group>"; };
+		4890C0CE0E18062B00BE5850 /* JumpToTargetMovement.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = JumpToTargetMovement.cpp; sourceTree = "<group>"; };
+		4890C0CF0E18062B00BE5850 /* LieDownMovement.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = LieDownMovement.cpp; sourceTree = "<group>"; };
+		4890C0D00E18062B00BE5850 /* RotateMovement.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = RotateMovement.cpp; sourceTree = "<group>"; };
+		4890C0D10E18062B00BE5850 /* SneakMovement.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = SneakMovement.cpp; sourceTree = "<group>"; };
+		4890C0D20E18062B00BE5850 /* SprintMovement.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = SprintMovement.cpp; sourceTree = "<group>"; };
+		4890C0D30E18062B00BE5850 /* StandAroundMovement.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = StandAroundMovement.cpp; sourceTree = "<group>"; };
+		4890C0D40E18062B00BE5850 /* StepRecognitionMovement.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = StepRecognitionMovement.cpp; sourceTree = "<group>"; };
+		4890C0D50E18062B00BE5850 /* StrafeMovement.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = StrafeMovement.cpp; sourceTree = "<group>"; };
+		4890C0D60E18062B00BE5850 /* WalkMovement.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = WalkMovement.cpp; sourceTree = "<group>"; };
 		48A52B210E0EDA0E008DBDD8 /* libboost_filesystem.dylib */ = {isa = PBXFileReference; lastKnownFileType = "compiled.mach-o.dylib"; name = libboost_filesystem.dylib; path = /usr/local/lib/libboost_filesystem.dylib; sourceTree = "<absolute>"; };
 		48A52CAF0E0EF55C008DBDD8 /* libboost_system.dylib */ = {isa = PBXFileReference; lastKnownFileType = "compiled.mach-o.dylib"; name = libboost_system.dylib; path = /usr/local/lib/libboost_system.dylib; sourceTree = "<absolute>"; };
-		48A52CB50E0EF5BD008DBDD8 /* ApplyDamageJob.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = ApplyDamageJob.h; path = ../engine/rules/include/ApplyDamageJob.h; sourceTree = SOURCE_ROOT; };
-		48A52CB70E0EF5D0008DBDD8 /* ApplyDamageJob.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = ApplyDamageJob.cpp; path = ../engine/rules/src/ApplyDamageJob.cpp; sourceTree = SOURCE_ROOT; };
+		48A52CB50E0EF5BD008DBDD8 /* ApplyDamageJob.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = ApplyDamageJob.h; sourceTree = "<group>"; };
+		48A52CB70E0EF5D0008DBDD8 /* ApplyDamageJob.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = ApplyDamageJob.cpp; sourceTree = "<group>"; };
 		48B0B0340E6534690023B198 /* PlaneNodeProcessor.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = PlaneNodeProcessor.cpp; path = ../engine/script/src/PlaneNodeProcessor.cpp; sourceTree = SOURCE_ROOT; };
 		48B0B0360E6534810023B198 /* PlaneNodeProcessor.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = PlaneNodeProcessor.h; path = ../engine/script/include/PlaneNodeProcessor.h; sourceTree = SOURCE_ROOT; };
 		48B0B0480E65BBB30023B198 /* libfmodex.dylib */ = {isa = PBXFileReference; lastKnownFileType = "compiled.mach-o.dylib"; name = libfmodex.dylib; path = "FMOD Programmers API/api/lib/libfmodex.dylib"; sourceTree = SYSTEM_DEVELOPER_DIR; };
@@ -1501,7 +1501,6 @@
 		48B772E20D583521000A3B97 /* XmlPropertyWriter.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = XmlPropertyWriter.cpp; path = ../engine/common/src/XmlPropertyWriter.cpp; sourceTree = SOURCE_ROOT; };
 		48C04B890E67DF0300CD3A7D /* PCRE.framework */ = {isa = PBXFileReference; lastKnownFileType = wrapper.framework; name = PCRE.framework; path = /Library/Frameworks/PCRE.framework; sourceTree = "<absolute>"; };
 		48CFBF8E0E2E869000CD0C51 /* FreeType.framework */ = {isa = PBXFileReference; lastKnownFileType = wrapper.framework; name = FreeType.framework; path = /Library/Frameworks/FreeType.framework; sourceTree = "<absolute>"; };
-		48CFBFD70E2E87BB00CD0C51 /* renameinstalldirs.sh */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.script.sh; name = renameinstalldirs.sh; path = tools/renameinstalldirs.sh; sourceTree = "<group>"; };
 		48D0BE280E273C5E00863824 /* SaveAble.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = SaveAble.h; path = ../engine/core/include/SaveAble.h; sourceTree = SOURCE_ROOT; };
 		48D0BE290E273C5E00863824 /* SaveAbleCollection.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = SaveAbleCollection.h; path = ../engine/core/include/SaveAbleCollection.h; sourceTree = SOURCE_ROOT; };
 		48D0BE2A0E273C5E00863824 /* SaveAbleFactory.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = SaveAbleFactory.h; path = ../engine/core/include/SaveAbleFactory.h; sourceTree = SOURCE_ROOT; };
@@ -1521,6 +1520,10 @@
 		48D34A610D90F5D500C89477 /* SaveGameData.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = SaveGameData.h; path = ../engine/core/include/SaveGameData.h; sourceTree = SOURCE_ROOT; };
 		48D34A620D90F5D500C89477 /* SaveGameData.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = SaveGameData.cpp; path = ../engine/core/src/SaveGameData.cpp; sourceTree = SOURCE_ROOT; };
 		48D401810D9E483200AE5340 /* modules */ = {isa = PBXFileReference; lastKnownFileType = folder; name = modules; path = ../../../modules; sourceTree = SOURCE_ROOT; };
+		48EFE0A30E8B6AF6007EB7F8 /* FetchItemJob.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = FetchItemJob.h; sourceTree = "<group>"; };
+		48EFE0A50E8B6C39007EB7F8 /* FetchItemJob.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = FetchItemJob.cpp; sourceTree = "<group>"; };
+		48EFE0D70E8B6EB1007EB7F8 /* mkdmg.sh */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.script.sh; path = mkdmg.sh; sourceTree = "<group>"; };
+		48EFE0D80E8B6EB1007EB7F8 /* renameinstalldirs.sh */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.script.sh; path = renameinstalldirs.sh; sourceTree = "<group>"; };
 		8D0C4E960486CD37000505A6 /* Info.plist */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.plist; path = Info.plist; sourceTree = "<group>"; };
 		8D0C4E970486CD37000505A6 /* Rastullah.app */ = {isa = PBXFileReference; explicitFileType = wrapper.application; includeInIndex = 0; path = Rastullah.app; sourceTree = BUILT_PRODUCTS_DIR; };
 /* End PBXFileReference section */
@@ -1697,7 +1700,7 @@
 		20286C29FDCF999611CA2CEA /* Rastullah */ = {
 			isa = PBXGroup;
 			children = (
-				20286C2AFDCF999611CA2CEA /* Sources */,
+				20286C2AFDCF999611CA2CEA /* Engine */,
 				48D401810D9E483200AE5340 /* modules */,
 				20286C2CFDCF999611CA2CEA /* Resources */,
 				20286C32FDCF999611CA2CEA /* External Frameworks and Libraries */,
@@ -1706,10 +1709,10 @@
 			name = Rastullah;
 			sourceTree = "<group>";
 		};
-		20286C2AFDCF999611CA2CEA /* Sources */ = {
+		20286C2AFDCF999611CA2CEA /* Engine */ = {
 			isa = PBXGroup;
 			children = (
-				48CFBFD60E2E87A800CD0C51 /* Scripts */,
+				48CFBFD60E2E87A800CD0C51 /* Mac Scripts */,
 				444EAC220BD0E3E000C6D4A0 /* RlAi */,
 				444EAB1F0BD0E25C00C6D4A0 /* RlCommon */,
 				444EAB200BD0E27400C6D4A0 /* RlCore */,
@@ -1719,7 +1722,8 @@
 				444EAC570BD0E4CD00C6D4A0 /* RlUi */,
 				444EAAAC0BD0E0C700C6D4A0 /* RastullahMain.cpp */,
 			);
-			name = Sources;
+			name = Engine;
+			path = ../engine;
 			sourceTree = "<group>";
 		};
 		20286C2CFDCF999611CA2CEA /* Resources */ = {
@@ -2066,29 +2070,180 @@
 		444EAC570BD0E4CD00C6D4A0 /* RlUi */ = {
 			isa = PBXGroup;
 			children = (
-				487029C80E80DCF900B66388 /* GameOverWindow.cpp */,
-				487029C60E80DCEA00B66388 /* GameOverWindow.h */,
-				48389B960D86743900AFAB66 /* CombatGui.h */,
-				48389B970D86743900AFAB66 /* GameSaveLoadWindow.h */,
-				48389B980D86743900AFAB66 /* MainMenuLoadWindow.h */,
-				48389B990D86743900AFAB66 /* UiMessages.h */,
-				48389B8E0D86741F00AFAB66 /* CombatGui.cpp */,
-				48389B8F0D86741F00AFAB66 /* GameSaveLoadWindow.cpp */,
-				48389B900D86741F00AFAB66 /* MainMenuLoadWindow.cpp */,
-				48389B910D86741F00AFAB66 /* stdinc.cpp */,
+				48EFE0890E8B6900007EB7F8 /* Source */,
+				48EFE0880E8B6822007EB7F8 /* Headers */,
+			);
+			name = RlUi;
+			path = ../engine/ui;
+			sourceTree = "<group>";
+		};
+		444EAC590BD0E50600C6D4A0 /* RlRules */ = {
+			isa = PBXGroup;
+			children = (
+				48EFE0A20E8B69F5007EB7F8 /* Headers */,
+				48EFE0A10E8B69EE007EB7F8 /* Source */,
+			);
+			name = RlRules;
+			path = rules;
+			sourceTree = "<group>";
+		};
+		444EAE600BD0E66500C6D4A0 /* RlScript */ = {
+			isa = PBXGroup;
+			children = (
+				48B0B0230E6533940023B198 /* Headers */,
+				48B0B0240E6533A50023B198 /* Source */,
+				48389C010D86783200AFAB66 /* swig */,
+			);
+			name = RlScript;
+			sourceTree = "<group>";
+		};
+		48389C010D86783200AFAB66 /* swig */ = {
+			isa = PBXGroup;
+			children = (
+				48760AA90D92E4B700BEB57C /* RlExports_wrap.cxx */,
+				48760AAA0D92E4B700BEB57C /* RlExports_wrap.h */,
+				48500B780D906A1000EAD8DB /* RlScriptExportsMac.cpp */,
+				48389C020D86787900AFAB66 /* RlExports.i */,
+				48389BE80D8677EE00AFAB66 /* RlAi.head.swig */,
+				48389BE90D8677EE00AFAB66 /* RlAi.swig */,
+				48389BEA0D8677EE00AFAB66 /* RlCommon.head.swig */,
+				48389BEB0D8677EE00AFAB66 /* RlCommon.swig */,
+				48389BEC0D8677EE00AFAB66 /* RlCore.head.swig */,
+				48389BED0D8677EE00AFAB66 /* RlCore.swig */,
+				48389BEE0D8677EE00AFAB66 /* RlRules.head.swig */,
+				48389BEF0D8677EE00AFAB66 /* RlRules.swig */,
+				48389BF00D8677EE00AFAB66 /* RlScript.head.swig */,
+				48389BF10D8677EE00AFAB66 /* RlScript.swig */,
+				48389BF20D8677EE00AFAB66 /* RlUi.head.swig */,
+				48760A990D92E2CD00BEB57C /* RlUi.swig */,
+				48389BF30D8677EE00AFAB66 /* TypeDynamicDirector.swig */,
+				48389BF40D8677EE00AFAB66 /* TypeMaps.i */,
+				48389BF50D8677EE00AFAB66 /* TypeOgreColourValue.swig */,
+				48389BF60D8677EE00AFAB66 /* TypeOgreQuaternion.swig */,
+				48389BF70D8677EE00AFAB66 /* TypeOgreRadian.swig */,
+				48389BF80D8677EE00AFAB66 /* TypeOgreReal.swig */,
+				48389BF90D8677EE00AFAB66 /* TypeOgreString.swig */,
+				48389BFA0D8677EE00AFAB66 /* TypeOgreStringVector.swig */,
+				48389BFB0D8677EE00AFAB66 /* TypeOgreVector3.swig */,
+				48389BFC0D8677EE00AFAB66 /* TypeRlCeGuiString.swig */,
+				48389BFD0D8677EE00AFAB66 /* TypeRlCeGuiStringVector.swig */,
+				48389BFE0D8677EE00AFAB66 /* TypeRlProperty.swig */,
+				48389BFF0D8677EE00AFAB66 /* TypeRlPropertyKeys.swig */,
+				48389C000D8677EE00AFAB66 /* TypeStdPairIntInt.swig */,
+			);
+			name = swig;
+			sourceTree = "<group>";
+		};
+		483D86890D8C3DA200F3629E /* RlFmod4Driver */ = {
+			isa = PBXGroup;
+			children = (
+				483D868B0D8C3DA200F3629E /* include */,
+				483D86950D8C3DA200F3629E /* src */,
+			);
+			name = RlFmod4Driver;
+			path = ../plugins/fmod4driver;
+			sourceTree = SOURCE_ROOT;
+		};
+		483D868B0D8C3DA200F3629E /* include */ = {
+			isa = PBXGroup;
+			children = (
+				483D868C0D8C3DA200F3629E /* Fmod4ConfigComponent.h */,
+				483D868D0D8C3DA200F3629E /* Fmod4Driver.h */,
+				483D868E0D8C3DA200F3629E /* Fmod4DriverPrerequisites.h */,
+				483D868F0D8C3DA200F3629E /* Fmod4Listener.h */,
+				483D86900D8C3DA200F3629E /* Fmod4Sound.h */,
+				483D86910D8C3DA200F3629E /* Fmod4SoundStitching.h */,
+			);
+			path = include;
+			sourceTree = "<group>";
+		};
+		483D86950D8C3DA200F3629E /* src */ = {
+			isa = PBXGroup;
+			children = (
+				483D86960D8C3DA200F3629E /* Fmod4ConfigComponent.cpp */,
+				483D86970D8C3DA200F3629E /* Fmod4Driver.cpp */,
+				483D86980D8C3DA200F3629E /* Fmod4DriverDllMain.cpp */,
+				483D86990D8C3DA200F3629E /* Fmod4Listener.cpp */,
+				483D869A0D8C3DA200F3629E /* Fmod4Sound.cpp */,
+				483D869B0D8C3DA200F3629E /* Fmod4SoundStitching.cpp */,
+			);
+			path = src;
+			sourceTree = "<group>";
+		};
+		48B0B0230E6533940023B198 /* Headers */ = {
+			isa = PBXGroup;
+			children = (
+				444EAE610BD0E6C000C6D4A0 /* ScriptObjectMarker.h */,
+				444EAE620BD0E6C000C6D4A0 /* ScriptPrerequisites.h */,
+				444EAE630BD0E6C000C6D4A0 /* ScriptSubsystem.h */,
+				444825ED0BF7B32100C5A94F /* AbstractMapNodeProcessor.h */,
+				444825EE0BF7B32100C5A94F /* EntityNodeProcessor.h */,
+				444825EF0BF7B32100C5A94F /* EnvironmentProcessor.h */,
+				444825F00BF7B32100C5A94F /* GameObjectNodeProcessor.h */,
+				444825F10BF7B32100C5A94F /* LightNodeProcessor.h */,
+				444825F20BF7B32100C5A94F /* MapLoader.h */,
+				444825F30BF7B32100C5A94F /* ParticleSystemNodeProcessor.h */,
+				48B0B0360E6534810023B198 /* PlaneNodeProcessor.h */,
+				485B89510E15794A00D5B19C /* Scene.h */,
+				485B89520E15794A00D5B19C /* SceneLoader.h */,
+				485B89530E15794A00D5B19C /* SceneManager.h */,
+				444825F40BF7B32100C5A94F /* SoundNodeProcessor.h */,
+				4404DA840C48D01E007B4657 /* stdinc.h */,
+				444825F50BF7B32100C5A94F /* TriggerFactory.h */,
+				446BF4810C4532B50013C214 /* UnifiedFactory.h */,
+				444825F60BF7B32100C5A94F /* WaypointProcessor.h */,
+				444825F70BF7B32100C5A94F /* ZoneProcessor.h */,
+			);
+			name = Headers;
+			sourceTree = "<group>";
+		};
+		48B0B0240E6533A50023B198 /* Source */ = {
+			isa = PBXGroup;
+			children = (
+				444825D90BF7B2B200C5A94F /* AbstractMapNodeProcessor.cpp */,
+				444825DA0BF7B2B200C5A94F /* EntityNodeProcessor.cpp */,
+				444825DB0BF7B2B200C5A94F /* EnvironmentProcessor.cpp */,
+				444825DC0BF7B2B200C5A94F /* GameObjectNodeProcessor.cpp */,
+				444825DD0BF7B2B200C5A94F /* LightNodeProcessor.cpp */,
+				444825DE0BF7B2B200C5A94F /* MapLoader.cpp */,
+				444825DF0BF7B2B200C5A94F /* ParticleSystemNodeProcessor.cpp */,
+				48B0B0340E6534690023B198 /* PlaneNodeProcessor.cpp */,
+				485B89570E15796500D5B19C /* Scene.cpp */,
+				485B89580E15796500D5B19C /* SceneLoader.cpp */,
+				485B89590E15796500D5B19C /* SceneManager.cpp */,
+				444EAE670BD0E6D400C6D4A0 /* ScriptObjectMarker.cpp */,
+				444EAE680BD0E6D400C6D4A0 /* ScriptSubsystem.cpp */,
+				444825E00BF7B2B200C5A94F /* SoundNodeProcessor.cpp */,
+				48389C190D867AA900AFAB66 /* stdinc.cpp */,
+				48389C1A0D867AA900AFAB66 /* TriggerFactory.cpp */,
+				444825E10BF7B2B200C5A94F /* WaypointProcessor.cpp */,
+				444825E20BF7B2B200C5A94F /* ZoneProcessor.cpp */,
+			);
+			name = Source;
+			sourceTree = "<group>";
+		};
+		48CFBFD60E2E87A800CD0C51 /* Mac Scripts */ = {
+			isa = PBXGroup;
+			children = (
+				48EFE0D70E8B6EB1007EB7F8 /* mkdmg.sh */,
+				48EFE0D80E8B6EB1007EB7F8 /* renameinstalldirs.sh */,
+			);
+			name = "Mac Scripts";
+			path = ../Mac/tools;
+			sourceTree = "<group>";
+		};
+		48EFE0880E8B6822007EB7F8 /* Headers */ = {
+			isa = PBXGroup;
+			children = (
+				44D8145F0BF7B58A00534175 /* ProgressWindow.h */,
+				444EACFE0BD0E58C00C6D4A0 /* AboutWindow.h */,
+				444EACFF0BD0E58C00C6D4A0 /* AbstractWindow.h */,
+				444EAD000BD0E58C00C6D4A0 /* ActionChoiceWindow.h */,
+				444EAD010BD0E58C00C6D4A0 /* CeGuiHelper.h */,
+				444EAD030BD0E58C00C6D4A0 /* CharacterSheetWindow.h */,
 				4404DA850C48D037007B4657 /* stdinc.h */,
-				446BF4D50C453C1D0013C214 /* ItemDescriptionDragContainer.cpp */,
 				446BF4D00C453B9E0013C214 /* CombatControlState.h */,
 				446BF4D10C453B9E0013C214 /* CombatWindow.h */,
-				446BF4940C4533BD0013C214 /* CombatControlState.cpp */,
-				446BF4950C4533BD0013C214 /* CombatWindow.cpp */,
-				446BF4960C4533BD0013C214 /* ControlState.cpp */,
-				446BF4970C4533BD0013C214 /* CutsceneControlState.cpp */,
-				446BF4980C4533BD0013C214 /* DialogControlState.cpp */,
-				446BF4990C4533BD0013C214 /* FreeflightControlState.cpp */,
-				446BF49A0C4533BD0013C214 /* ItemIconDragContainer.cpp */,
-				446BF49B0C4533BD0013C214 /* MovementControlState.cpp */,
-				446BF49C0C4533BD0013C214 /* PropertiesWindow.cpp */,
 				446BF4840C45335A0013C214 /* ControlState.h */,
 				446BF4850C45335A0013C214 /* CutsceneControlState.h */,
 				446BF4860C45335A0013C214 /* DialogControlState.h */,
@@ -2097,13 +2252,10 @@
 				446BF4890C45335A0013C214 /* ItemIconDragContainer.h */,
 				446BF48A0C45335A0013C214 /* MovementControlState.h */,
 				446BF48B0C45335A0013C214 /* PropertiesWindow.h */,
-				44D814630BF7B5AD00534175 /* ProgressWindow.cpp */,
-				44D8145F0BF7B58A00534175 /* ProgressWindow.h */,
-				444EACFE0BD0E58C00C6D4A0 /* AboutWindow.h */,
-				444EACFF0BD0E58C00C6D4A0 /* AbstractWindow.h */,
-				444EAD000BD0E58C00C6D4A0 /* ActionChoiceWindow.h */,
-				444EAD010BD0E58C00C6D4A0 /* CeGuiHelper.h */,
-				444EAD030BD0E58C00C6D4A0 /* CharacterSheetWindow.h */,
+				487029C60E80DCEA00B66388 /* GameOverWindow.h */,
+				48389B960D86743900AFAB66 /* CombatGui.h */,
+				48389B970D86743900AFAB66 /* GameSaveLoadWindow.h */,
+				48389B980D86743900AFAB66 /* MainMenuLoadWindow.h */,
 				444EAD040BD0E58C00C6D4A0 /* CharacterStateWindow.h */,
 				444EAD050BD0E58C00C6D4A0 /* CloseConfirmationWindow.h */,
 				444EAD070BD0E58C00C6D4A0 /* CommandMapper.h */,
@@ -2137,6 +2289,38 @@
 				444EAD2B0BD0E58C00C6D4A0 /* WindowFactory.h */,
 				444EAD2C0BD0E58C00C6D4A0 /* WindowFadeJob.h */,
 				444EAD2D0BD0E58C00C6D4A0 /* WindowManager.h */,
+				48389B990D86743900AFAB66 /* UiMessages.h */,
+			);
+			name = Headers;
+			path = include;
+			sourceTree = "<group>";
+		};
+		48EFE0890E8B6900007EB7F8 /* Source */ = {
+			isa = PBXGroup;
+			children = (
+				444EACC90BD0E57100C6D4A0 /* SoundConfig.cpp */,
+				444EACCA0BD0E57100C6D4A0 /* SoundDriverConfigComponent.cpp */,
+				444EACCB0BD0E57100C6D4A0 /* SubtitleWindow.cpp */,
+				444EACCC0BD0E57100C6D4A0 /* UiSubsystem.cpp */,
+				444EACCD0BD0E57100C6D4A0 /* WindowFactory.cpp */,
+				444EACCE0BD0E57100C6D4A0 /* WindowFadeJob.cpp */,
+				444EACCF0BD0E57100C6D4A0 /* WindowManager.cpp */,
+				487029C80E80DCF900B66388 /* GameOverWindow.cpp */,
+				48389B8E0D86741F00AFAB66 /* CombatGui.cpp */,
+				48389B8F0D86741F00AFAB66 /* GameSaveLoadWindow.cpp */,
+				48389B900D86741F00AFAB66 /* MainMenuLoadWindow.cpp */,
+				48389B910D86741F00AFAB66 /* stdinc.cpp */,
+				446BF4D50C453C1D0013C214 /* ItemDescriptionDragContainer.cpp */,
+				446BF4940C4533BD0013C214 /* CombatControlState.cpp */,
+				446BF4950C4533BD0013C214 /* CombatWindow.cpp */,
+				446BF4960C4533BD0013C214 /* ControlState.cpp */,
+				446BF4970C4533BD0013C214 /* CutsceneControlState.cpp */,
+				446BF4980C4533BD0013C214 /* DialogControlState.cpp */,
+				446BF4990C4533BD0013C214 /* FreeflightControlState.cpp */,
+				446BF49A0C4533BD0013C214 /* ItemIconDragContainer.cpp */,
+				446BF49B0C4533BD0013C214 /* MovementControlState.cpp */,
+				446BF49C0C4533BD0013C214 /* PropertiesWindow.cpp */,
+				44D814630BF7B5AD00534175 /* ProgressWindow.cpp */,
 				444EACA20BD0E57100C6D4A0 /* AboutWindow.cpp */,
 				444EACA30BD0E57100C6D4A0 /* AbstractWindow.cpp */,
 				444EACA40BD0E57100C6D4A0 /* ActionChoiceWindow.cpp */,
@@ -2166,26 +2350,34 @@
 				444EACC50BD0E57100C6D4A0 /* ObjectDescriptionWindow.cpp */,
 				444EACC60BD0E57100C6D4A0 /* PlaylistWindow.cpp */,
 				444EACC70BD0E57100C6D4A0 /* RenderSystemConfigComponent.cpp */,
-				444EACC90BD0E57100C6D4A0 /* SoundConfig.cpp */,
-				444EACCA0BD0E57100C6D4A0 /* SoundDriverConfigComponent.cpp */,
-				444EACCB0BD0E57100C6D4A0 /* SubtitleWindow.cpp */,
-				444EACCC0BD0E57100C6D4A0 /* UiSubsystem.cpp */,
-				444EACCD0BD0E57100C6D4A0 /* WindowFactory.cpp */,
-				444EACCE0BD0E57100C6D4A0 /* WindowFadeJob.cpp */,
-				444EACCF0BD0E57100C6D4A0 /* WindowManager.cpp */,
 			);
-			name = RlUi;
+			name = Source;
+			path = src;
 			sourceTree = "<group>";
 		};
-		444EAC590BD0E50600C6D4A0 /* RlRules */ = {
+		48EFE0A10E8B69EE007EB7F8 /* Source */ = {
 			isa = PBXGroup;
 			children = (
+				48EFE0A50E8B6C39007EB7F8 /* FetchItemJob.cpp */,
+				48A52CB70E0EF5D0008DBDD8 /* ApplyDamageJob.cpp */,
+				483D312D0D85B22C003477A0 /* GameEventLog.cpp */,
+				483D312E0D85B22C003477A0 /* GameTimeSource.cpp */,
+				483D31300D85B22C003477A0 /* GoToJob.cpp */,
+				4404DA820C48D005007B4657 /* stdinc.cpp */,
+				446BF47B0C45329F0013C214 /* CreatureController.cpp */,
+				446BF47C0C45329F0013C214 /* CreatureControllerManager.cpp */,
+				446BF47D0C45329F0013C214 /* EffectFactory.cpp */,
+				483D312F0D85B22C003477A0 /* GlobalProperties.cpp */,
+				483D312B0D85B22C003477A0 /* Combatant.cpp */,
+				483D312C0D85B22C003477A0 /* EffectManagementTask.cpp */,
+				483D31310D85B22C003477A0 /* Kampfaktion.cpp */,
+				483D31320D85B22C003477A0 /* WaitJob.cpp */,
+				444826030BF7B37D00C5A94F /* SelectionHelper.cpp */,
+				444826040BF7B37D00C5A94F /* Selector.cpp */,
 				487029E90E80E13300B66388 /* PartyManager.cpp */,
-				487029E70E80E12200B66388 /* PartyManager.h */,
 				4890C0C90E18062B00BE5850 /* FallDownMovement.cpp */,
 				4890C0CA0E18062B00BE5850 /* JogFastMovement.cpp */,
 				4890C0CB0E18062B00BE5850 /* JogMovement.cpp */,
-				483D311D0D85B215003477A0 /* RulesMessages.h */,
 				4890C0CC0E18062B00BE5850 /* JumpHighMovement.cpp */,
 				4890C0CD0E18062B00BE5850 /* JumpLongMovement.cpp */,
 				4890C0CE0E18062B00BE5850 /* JumpToTargetMovement.cpp */,
@@ -2197,6 +2389,53 @@
 				4890C0D40E18062B00BE5850 /* StepRecognitionMovement.cpp */,
 				4890C0D50E18062B00BE5850 /* StrafeMovement.cpp */,
 				4890C0D60E18062B00BE5850 /* WalkMovement.cpp */,
+				444EADB00BD0E64100C6D4A0 /* Action.cpp */,
+				444EADB10BD0E64100C6D4A0 /* ActionManager.cpp */,
+				444EADB20BD0E64100C6D4A0 /* Armor.cpp */,
+				444EADB30BD0E64100C6D4A0 /* Combat.cpp */,
+				444EADB40BD0E64100C6D4A0 /* CombatManager.cpp */,
+				444EADB50BD0E64100C6D4A0 /* Container.cpp */,
+				444EADB60BD0E64100C6D4A0 /* Creature.cpp */,
+				444EADB70BD0E64100C6D4A0 /* Date.cpp */,
+				444EADB80BD0E64100C6D4A0 /* DsaDataLoader.cpp */,
+				444EADB90BD0E64100C6D4A0 /* DsaManager.cpp */,
+				444EADBA0BD0E64100C6D4A0 /* Effect.cpp */,
+				444EADBB0BD0E64100C6D4A0 /* EffectManager.cpp */,
+				444EADBC0BD0E64100C6D4A0 /* Eigenschaft.cpp */,
+				444EADBD0BD0E64100C6D4A0 /* EigenschaftenStateSet.cpp */,
+				444EADBE0BD0E64100C6D4A0 /* GameObject.cpp */,
+				444EADBF0BD0E64100C6D4A0 /* GameObjectManager.cpp */,
+				444EADC10BD0E64100C6D4A0 /* Inventory.cpp */,
+				444EADC20BD0E64100C6D4A0 /* Item.cpp */,
+				444EADC30BD0E64100C6D4A0 /* JournalEntry.cpp */,
+				444EADC40BD0E64100C6D4A0 /* Kampftechnik.cpp */,
+				444EADC50BD0E64100C6D4A0 /* ObjectStateChangeEvent.cpp */,
+				444EADC60BD0E64100C6D4A0 /* ObjectStateChangeEventSource.cpp */,
+				444EADC70BD0E64100C6D4A0 /* ObjectStateChangeListener.cpp */,
+				444EADC90BD0E64100C6D4A0 /* Quest.cpp */,
+				444EADCA0BD0E64100C6D4A0 /* QuestBook.cpp */,
+				444EADCB0BD0E64100C6D4A0 /* QuestEvent.cpp */,
+				444EADCC0BD0E64100C6D4A0 /* QuestListener.cpp */,
+				444EADCD0BD0E64100C6D4A0 /* RulesSubsystem.cpp */,
+				444EADCE0BD0E64100C6D4A0 /* Slot.cpp */,
+				444EADCF0BD0E64100C6D4A0 /* SonderfertigkeitenStateSet.cpp */,
+				444EADD00BD0E64100C6D4A0 /* StateSet.cpp */,
+				444EADD10BD0E64100C6D4A0 /* Talent.cpp */,
+				444EADD20BD0E64100C6D4A0 /* Talentgruppe.cpp */,
+				444EADD30BD0E64100C6D4A0 /* TalentStateSet.cpp */,
+				444EADD80BD0E64100C6D4A0 /* Weapon.cpp */,
+				444EADD90BD0E64100C6D4A0 /* ZauberStateSet.cpp */,
+			);
+			name = Source;
+			path = src;
+			sourceTree = "<group>";
+		};
+		48EFE0A20E8B69F5007EB7F8 /* Headers */ = {
+			isa = PBXGroup;
+			children = (
+				48EFE0A30E8B6AF6007EB7F8 /* FetchItemJob.h */,
+				487029E70E80E12200B66388 /* PartyManager.h */,
+				483D311D0D85B215003477A0 /* RulesMessages.h */,
 				4890C0A70E18061300BE5850 /* AbstractMovement.h */,
 				4890C0A80E18061300BE5850 /* FallDownMovement.h */,
 				4890C0A90E18061300BE5850 /* JogBackwardsMovement.h */,
@@ -2210,41 +2449,24 @@
 				4890C0B10E18061300BE5850 /* SneakMovement.h */,
 				4890C0B20E18061300BE5850 /* SprintMovement.h */,
 				4890C0B30E18061300BE5850 /* StandAroundMovement.h */,
-				4890C0B40E18061300BE5850 /* StepRecognitionMovement.h */,
-				4890C0B50E18061300BE5850 /* StrafeMovement.h */,
-				4890C0B60E18061300BE5850 /* WalkBackwardsMovement.h */,
-				4890C0B70E18061300BE5850 /* WalkMovement.h */,
-				48A52CB70E0EF5D0008DBDD8 /* ApplyDamageJob.cpp */,
 				48A52CB50E0EF5BD008DBDD8 /* ApplyDamageJob.h */,
 				483D311E0D85B215003477A0 /* stdinc.h */,
-				483D312D0D85B22C003477A0 /* GameEventLog.cpp */,
-				483D312E0D85B22C003477A0 /* GameTimeSource.cpp */,
-				483D31300D85B22C003477A0 /* GoToJob.cpp */,
 				483D31170D85B215003477A0 /* GameEventLog.h */,
 				483D311F0D85B215003477A0 /* WaitJob.h */,
 				483D31190D85B215003477A0 /* GlobalProperties.h */,
-				4404DA820C48D005007B4657 /* stdinc.cpp */,
-				446BF47B0C45329F0013C214 /* CreatureController.cpp */,
-				446BF47C0C45329F0013C214 /* CreatureControllerManager.cpp */,
+				4890C0B40E18061300BE5850 /* StepRecognitionMovement.h */,
+				4890C0B60E18061300BE5850 /* WalkBackwardsMovement.h */,
 				483D31150D85B215003477A0 /* Combatant.h */,
-				446BF47D0C45329F0013C214 /* EffectFactory.cpp */,
 				446BF4750C4532720013C214 /* CreatureController.h */,
 				446BF4760C4532720013C214 /* CreatureControllerManager.h */,
 				446BF4770C4532720013C214 /* EffectFactory.h */,
 				44D8145A0BF7B52600534175 /* SelectionHelper.h */,
 				483D311A0D85B215003477A0 /* GoToJob.h */,
 				483D31180D85B215003477A0 /* GameTimeSource.h */,
-				483D312F0D85B22C003477A0 /* GlobalProperties.cpp */,
-				483D312B0D85B22C003477A0 /* Combatant.cpp */,
-				483D312C0D85B22C003477A0 /* EffectManagementTask.cpp */,
-				483D31310D85B22C003477A0 /* Kampfaktion.cpp */,
-				483D31320D85B22C003477A0 /* WaitJob.cpp */,
 				483D311B0D85B215003477A0 /* Kampfaktion.h */,
 				483D311C0D85B215003477A0 /* RulesConstants.h */,
 				483D31160D85B215003477A0 /* EffectManagementTask.h */,
 				44D8145B0BF7B52600534175 /* Selector.h */,
-				444826030BF7B37D00C5A94F /* SelectionHelper.cpp */,
-				444826040BF7B37D00C5A94F /* Selector.cpp */,
 				444EAE040BD0E65B00C6D4A0 /* Action.h */,
 				444EAE050BD0E65B00C6D4A0 /* ActionManager.h */,
 				444EAE060BD0E65B00C6D4A0 /* Armor.h */,
@@ -2284,190 +2506,13 @@
 				444EAE2B0BD0E65B00C6D4A0 /* TalentStateSet.h */,
 				444EAE300BD0E65B00C6D4A0 /* Weapon.h */,
 				444EAE310BD0E65B00C6D4A0 /* ZauberStateSet.h */,
-				444EADB00BD0E64100C6D4A0 /* Action.cpp */,
-				444EADB10BD0E64100C6D4A0 /* ActionManager.cpp */,
-				444EADB20BD0E64100C6D4A0 /* Armor.cpp */,
-				444EADB30BD0E64100C6D4A0 /* Combat.cpp */,
-				444EADB40BD0E64100C6D4A0 /* CombatManager.cpp */,
-				444EADB50BD0E64100C6D4A0 /* Container.cpp */,
-				444EADB60BD0E64100C6D4A0 /* Creature.cpp */,
-				444EADB70BD0E64100C6D4A0 /* Date.cpp */,
-				444EADB80BD0E64100C6D4A0 /* DsaDataLoader.cpp */,
-				444EADB90BD0E64100C6D4A0 /* DsaManager.cpp */,
-				444EADBA0BD0E64100C6D4A0 /* Effect.cpp */,
-				444EADBB0BD0E64100C6D4A0 /* EffectManager.cpp */,
-				444EADBC0BD0E64100C6D4A0 /* Eigenschaft.cpp */,
-				444EADBD0BD0E64100C6D4A0 /* EigenschaftenStateSet.cpp */,
-				444EADBE0BD0E64100C6D4A0 /* GameObject.cpp */,
-				444EADBF0BD0E64100C6D4A0 /* GameObjectManager.cpp */,
-				444EADC10BD0E64100C6D4A0 /* Inventory.cpp */,
-				444EADC20BD0E64100C6D4A0 /* Item.cpp */,
-				444EADC30BD0E64100C6D4A0 /* JournalEntry.cpp */,
-				444EADC40BD0E64100C6D4A0 /* Kampftechnik.cpp */,
-				444EADC50BD0E64100C6D4A0 /* ObjectStateChangeEvent.cpp */,
-				444EADC60BD0E64100C6D4A0 /* ObjectStateChangeEventSource.cpp */,
-				444EADC70BD0E64100C6D4A0 /* ObjectStateChangeListener.cpp */,
-				444EADC90BD0E64100C6D4A0 /* Quest.cpp */,
-				444EADCA0BD0E64100C6D4A0 /* QuestBook.cpp */,
-				444EADCB0BD0E64100C6D4A0 /* QuestEvent.cpp */,
-				444EADCC0BD0E64100C6D4A0 /* QuestListener.cpp */,
-				444EADCD0BD0E64100C6D4A0 /* RulesSubsystem.cpp */,
-				444EADCE0BD0E64100C6D4A0 /* Slot.cpp */,
-				444EADCF0BD0E64100C6D4A0 /* SonderfertigkeitenStateSet.cpp */,
-				444EADD00BD0E64100C6D4A0 /* StateSet.cpp */,
-				444EADD10BD0E64100C6D4A0 /* Talent.cpp */,
-				444EADD20BD0E64100C6D4A0 /* Talentgruppe.cpp */,
-				444EADD30BD0E64100C6D4A0 /* TalentStateSet.cpp */,
-				444EADD80BD0E64100C6D4A0 /* Weapon.cpp */,
-				444EADD90BD0E64100C6D4A0 /* ZauberStateSet.cpp */,
+				4890C0B70E18061300BE5850 /* WalkMovement.h */,
+				4890C0B50E18061300BE5850 /* StrafeMovement.h */,
 			);
-			name = RlRules;
-			sourceTree = "<group>";
-		};
-		444EAE600BD0E66500C6D4A0 /* RlScript */ = {
-			isa = PBXGroup;
-			children = (
-				48B0B0230E6533940023B198 /* Headers */,
-				48B0B0240E6533A50023B198 /* Source */,
-				48389C010D86783200AFAB66 /* swig */,
-				444EAE610BD0E6C000C6D4A0 /* ScriptObjectMarker.h */,
-				444EAE620BD0E6C000C6D4A0 /* ScriptPrerequisites.h */,
-				444EAE630BD0E6C000C6D4A0 /* ScriptSubsystem.h */,
-			);
-			name = RlScript;
-			sourceTree = "<group>";
-		};
-		48389C010D86783200AFAB66 /* swig */ = {
-			isa = PBXGroup;
-			children = (
-				48760AA90D92E4B700BEB57C /* RlExports_wrap.cxx */,
-				48760AAA0D92E4B700BEB57C /* RlExports_wrap.h */,
-				48500B780D906A1000EAD8DB /* RlScriptExportsMac.cpp */,
-				48389C020D86787900AFAB66 /* RlExports.i */,
-				48389BE80D8677EE00AFAB66 /* RlAi.head.swig */,
-				48389BE90D8677EE00AFAB66 /* RlAi.swig */,
-				48389BEA0D8677EE00AFAB66 /* RlCommon.head.swig */,
-				48389BEB0D8677EE00AFAB66 /* RlCommon.swig */,
-				48389BEC0D8677EE00AFAB66 /* RlCore.head.swig */,
-				48389BED0D8677EE00AFAB66 /* RlCore.swig */,
-				48389BEE0D8677EE00AFAB66 /* RlRules.head.swig */,
-				48389BEF0D8677EE00AFAB66 /* RlRules.swig */,
-				48389BF00D8677EE00AFAB66 /* RlScript.head.swig */,
-				48389BF10D8677EE00AFAB66 /* RlScript.swig */,
-				48389BF20D8677EE00AFAB66 /* RlUi.head.swig */,
-				48760A990D92E2CD00BEB57C /* RlUi.swig */,
-				48389BF30D8677EE00AFAB66 /* TypeDynamicDirector.swig */,
-				48389BF40D8677EE00AFAB66 /* TypeMaps.i */,
-				48389BF50D8677EE00AFAB66 /* TypeOgreColourValue.swig */,
-				48389BF60D8677EE00AFAB66 /* TypeOgreQuaternion.swig */,
-				48389BF70D8677EE00AFAB66 /* TypeOgreRadian.swig */,
-				48389BF80D8677EE00AFAB66 /* TypeOgreReal.swig */,
-				48389BF90D8677EE00AFAB66 /* TypeOgreString.swig */,
-				48389BFA0D8677EE00AFAB66 /* TypeOgreStringVector.swig */,
-				48389BFB0D8677EE00AFAB66 /* TypeOgreVector3.swig */,
-				48389BFC0D8677EE00AFAB66 /* TypeRlCeGuiString.swig */,
-				48389BFD0D8677EE00AFAB66 /* TypeRlCeGuiStringVector.swig */,
-				48389BFE0D8677EE00AFAB66 /* TypeRlProperty.swig */,
-				48389BFF0D8677EE00AFAB66 /* TypeRlPropertyKeys.swig */,
-				48389C000D8677EE00AFAB66 /* TypeStdPairIntInt.swig */,
-			);
-			name = swig;
-			sourceTree = "<group>";
-		};
-		483D86890D8C3DA200F3629E /* RlFmod4Driver */ = {
-			isa = PBXGroup;
-			children = (
-				483D868B0D8C3DA200F3629E /* include */,
-				483D86950D8C3DA200F3629E /* src */,
-			);
-			name = RlFmod4Driver;
-			path = ../plugins/fmod4driver;
-			sourceTree = SOURCE_ROOT;
-		};
-		483D868B0D8C3DA200F3629E /* include */ = {
-			isa = PBXGroup;
-			children = (
-				483D868C0D8C3DA200F3629E /* Fmod4ConfigComponent.h */,
-				483D868D0D8C3DA200F3629E /* Fmod4Driver.h */,
-				483D868E0D8C3DA200F3629E /* Fmod4DriverPrerequisites.h */,
-				483D868F0D8C3DA200F3629E /* Fmod4Listener.h */,
-				483D86900D8C3DA200F3629E /* Fmod4Sound.h */,
-				483D86910D8C3DA200F3629E /* Fmod4SoundStitching.h */,
-			);
+			name = Headers;
 			path = include;
 			sourceTree = "<group>";
 		};
-		483D86950D8C3DA200F3629E /* src */ = {
-			isa = PBXGroup;
-			children = (
-				483D86960D8C3DA200F3629E /* Fmod4ConfigComponent.cpp */,
-				483D86970D8C3DA200F3629E /* Fmod4Driver.cpp */,
-				483D86980D8C3DA200F3629E /* Fmod4DriverDllMain.cpp */,
-				483D86990D8C3DA200F3629E /* Fmod4Listener.cpp */,
-				483D869A0D8C3DA200F3629E /* Fmod4Sound.cpp */,
-				483D869B0D8C3DA200F3629E /* Fmod4SoundStitching.cpp */,
-			);
-			path = src;
-			sourceTree = "<group>";
-		};
-		48B0B0230E6533940023B198 /* Headers */ = {
-			isa = PBXGroup;
-			children = (
-				444825ED0BF7B32100C5A94F /* AbstractMapNodeProcessor.h */,
-				444825EE0BF7B32100C5A94F /* EntityNodeProcessor.h */,
-				444825EF0BF7B32100C5A94F /* EnvironmentProcessor.h */,
-				444825F00BF7B32100C5A94F /* GameObjectNodeProcessor.h */,
-				444825F10BF7B32100C5A94F /* LightNodeProcessor.h */,
-				444825F20BF7B32100C5A94F /* MapLoader.h */,
-				444825F30BF7B32100C5A94F /* ParticleSystemNodeProcessor.h */,
-				48B0B0360E6534810023B198 /* PlaneNodeProcessor.h */,
-				485B89510E15794A00D5B19C /* Scene.h */,
-				485B89520E15794A00D5B19C /* SceneLoader.h */,
-				485B89530E15794A00D5B19C /* SceneManager.h */,
-				444825F40BF7B32100C5A94F /* SoundNodeProcessor.h */,
-				4404DA840C48D01E007B4657 /* stdinc.h */,
-				444825F50BF7B32100C5A94F /* TriggerFactory.h */,
-				446BF4810C4532B50013C214 /* UnifiedFactory.h */,
-				444825F60BF7B32100C5A94F /* WaypointProcessor.h */,
-				444825F70BF7B32100C5A94F /* ZoneProcessor.h */,
-			);
-			name = Headers;
-			sourceTree = "<group>";
-		};
-		48B0B0240E6533A50023B198 /* Source */ = {
-			isa = PBXGroup;
-			children = (
-				444825D90BF7B2B200C5A94F /* AbstractMapNodeProcessor.cpp */,
-				444825DA0BF7B2B200C5A94F /* EntityNodeProcessor.cpp */,
-				444825DB0BF7B2B200C5A94F /* EnvironmentProcessor.cpp */,
-				444825DC0BF7B2B200C5A94F /* GameObjectNodeProcessor.cpp */,
-				444825DD0BF7B2B200C5A94F /* LightNodeProcessor.cpp */,
-				444825DE0BF7B2B200C5A94F /* MapLoader.cpp */,
-				444825DF0BF7B2B200C5A94F /* ParticleSystemNodeProcessor.cpp */,
-				48B0B0340E6534690023B198 /* PlaneNodeProcessor.cpp */,
-				485B89570E15796500D5B19C /* Scene.cpp */,
-				485B89580E15796500D5B19C /* SceneLoader.cpp */,
-				485B89590E15796500D5B19C /* SceneManager.cpp */,
-				444EAE670BD0E6D400C6D4A0 /* ScriptObjectMarker.cpp */,
-				444EAE680BD0E6D400C6D4A0 /* ScriptSubsystem.cpp */,
-				444825E00BF7B2B200C5A94F /* SoundNodeProcessor.cpp */,
-				48389C190D867AA900AFAB66 /* stdinc.cpp */,
-				48389C1A0D867AA900AFAB66 /* TriggerFactory.cpp */,
-				444825E10BF7B2B200C5A94F /* WaypointProcessor.cpp */,
-				444825E20BF7B2B200C5A94F /* ZoneProcessor.cpp */,
-			);
-			name = Source;
-			sourceTree = "<group>";
-		};
-		48CFBFD60E2E87A800CD0C51 /* Scripts */ = {
-			isa = PBXGroup;
-			children = (
-				48CFBFD70E2E87BB00CD0C51 /* renameinstalldirs.sh */,
-				4835559A0E6ABED100008748 /* mkdmg.sh */,
-			);
-			name = Scripts;
-			sourceTree = "<group>";
-		};
 /* End PBXGroup section */
 
 /* Begin PBXHeadersBuildPhase section */
@@ -2724,6 +2769,7 @@
 				4890C0C70E18061300BE5850 /* WalkBackwardsMovement.h in Headers */,
 				4890C0C80E18061300BE5850 /* WalkMovement.h in Headers */,
 				487029E80E80E12200B66388 /* PartyManager.h in Headers */,
+				48EFE0A40E8B6AF6007EB7F8 /* FetchItemJob.h in Headers */,
 			);
 			runOnlyForDeploymentPostprocessing = 0;
 		};
@@ -3063,7 +3109,6 @@
 				8D0C4E8D0486CD37000505A6 /* InfoPlist.strings in Resources */,
 				8D0C4E8E0486CD37000505A6 /* main.nib in Resources */,
 				48D409CE0D9E483300AE5340 /* modules in Resources */,
-				4835559B0E6ABED100008748 /* mkdmg.sh in Resources */,
 			);
 			runOnlyForDeploymentPostprocessing = 0;
 		};
@@ -3322,6 +3367,7 @@
 				4890C0E30E18062B00BE5850 /* StrafeMovement.cpp in Sources */,
 				4890C0E40E18062B00BE5850 /* WalkMovement.cpp in Sources */,
 				487029EA0E80E13300B66388 /* PartyManager.cpp in Sources */,
+				48EFE0A60E8B6C39007EB7F8 /* FetchItemJob.cpp in Sources */,
 			);
 			runOnlyForDeploymentPostprocessing = 0;
 		};

Modified: rl/branches/newton20/engine/core/include/MessagePump.h
===================================================================
--- rl/branches/newton20/engine/core/include/MessagePump.h	2008-10-01 16:22:07 UTC (rev 4538)
+++ rl/branches/newton20/engine/core/include/MessagePump.h	2008-10-01 16:51:11 UTC (rev 4539)
@@ -52,7 +52,7 @@
 
         virtual bool Invoke(MessageObjectBase* obj)
         {
-            MessageObjectType* obj2 = (MessageObjectType*)obj;
+            MessageObjectType* obj2 = static_cast<MessageObjectType*>(obj);
             return obj2->Invoke(mHandler);
         }
 
@@ -127,6 +127,10 @@
             MessageHandlerMapEntry entry = {mNextConnectionId++, wrapper};
             entries->push_back(entry);
 
+            LOG_MESSAGE("MessagePump", 
+                "Added message handler for message type " 
+                + Ogre::StringConverter::toString(_MessageType::MessageTypeId));
+
             Connection con;
             con.pump = this;
             con.connectionId = entry.connectionId;
@@ -216,13 +220,14 @@
 
         // overloads from GameTask
 
-		virtual void run(Ogre::Real elapsedTime);
+        virtual void run(Ogre::Real elapsedTime);
 
         virtual const Ogre::String& getName() const;
 
     private:
         MessageHandlerMapEntries* getOrCreateMapEntries(int id) 
         {
+            LOG_MESSAGE("MessagePump", "Create or get id " + Ogre::StringConverter::toString(id));
             MessageHandlerMap::iterator it = mMessageHandlerMap.find(id);
             if(it == mMessageHandlerMap.end())
             {

Modified: rl/branches/newton20/engine/rules/RlRules2005.vcproj
===================================================================
--- rl/branches/newton20/engine/rules/RlRules2005.vcproj	2008-10-01 16:22:07 UTC (rev 4538)
+++ rl/branches/newton20/engine/rules/RlRules2005.vcproj	2008-10-01 16:51:11 UTC (rev 4539)
@@ -359,6 +359,10 @@
 				>
 			</File>
 			<File
+				RelativePath=".\src\FetchItemJob.cpp"
+				>
+			</File>
+			<File
 				RelativePath=".\src\GameEventLog.cpp"
 				>
 			</File>
@@ -661,6 +665,10 @@
 				>
 			</File>
 			<File
+				RelativePath=".\include\FetchItemJob.h"
+				>
+			</File>
+			<File
 				RelativePath=".\include\GameEventLog.h"
 				>
 			</File>

Copied: rl/branches/newton20/engine/rules/include/FetchItemJob.h (from rev 4538, rl/trunk/engine/rules/include/FetchItemJob.h)

Modified: rl/branches/newton20/engine/rules/include/GameObject.h
===================================================================
--- rl/branches/newton20/engine/rules/include/GameObject.h	2008-10-01 16:22:07 UTC (rev 4538)
+++ rl/branches/newton20/engine/rules/include/GameObject.h	2008-10-01 16:51:11 UTC (rev 4539)
@@ -1,240 +1,249 @@
-/* This source file is part of Rastullahs Lockenpracht.
- * Copyright (C) 2003-2008 Team Pantheon. http://www.team-pantheon.de
- * 
- *  This program is free software; you can redistribute it and/or modify
- *  it under the terms of the Clarified Artistic License.
- *
- *  This program is distributed in the hope that it will be useful,
- *  but WITHOUT ANY WARRANTY; without even the implied warranty of
- *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- *  Clarified Artistic License for more details.
- *
- *  You should have received a copy of the Clarified Artistic License
- *  along with this program; if not you can get it here
- *  http://www.jpaulmorrison.com/fbp/artistic2.htm.
- */
-
-#ifndef __GAMEOBJECT_H__
-#define __GAMEOBJECT_H__
-
-#include "RulesPrerequisites.h"
-
-#include "Action.h"
-#include "Actor.h"
-#include "RulesConstants.h"
-#include "ObjectStateChangeEventSource.h"
-#include "Properties.h"
-#include "CoreDefines.h"
-
-namespace rl
-{
-    class Creature;
-    class Effect;
-    class EffectManager;
-
-    /**
-    * \brief Base class for all game relevant objects in RL
-    * Provides methods for identification of objects within the world
-    * Abstract concepts do not inherit this class
-    */
-    class _RlRulesExport GameObject 
-        : public ActorNotifiedObject, 
-          public ObjectStateChangeEventSource,
-          public PropertyHolder
-    {
-    public:
-        typedef std::vector<std::pair<Action*, int> > ActionOptionVector;
-        static const unsigned int NO_OBJECT_ID = 0;
-        
-        static const Ogre::String CLASS_NAME;
-
-        static const Ogre::String PROPERTY_CLASS_ID;
-        static const Ogre::String PROPERTY_OBJECT_ID;
-        static const Ogre::String PROPERTY_INHERITS;
-        static const Ogre::String PROPERTY_BASE_CLASS;
-        static const Ogre::String PROPERTY_SCENE; 
-        static const Ogre::String PROPERTY_POSITION; 
-        static const Ogre::String PROPERTY_ORIENTATION; 
-        static const Ogre::String PROPERTY_NAME;
-        static const Ogre::String PROPERTY_DESCRIPTION; 
-        static const Ogre::String PROPERTY_MESHFILE; 
-  		static const Ogre::String PROPERTY_MESHPARTS;
-        static const Ogre::String PROPERTY_SUBMESHPRENAME;
-		static const Ogre::String PROPERTY_GEOMETRY_TYPE; 
-        static const Ogre::String PROPERTY_MASS; 
-        static const Ogre::String PROPERTY_ACTIONS; 
-        static const Ogre::String PROPERTY_DEFAULT_ACTION;
-
-        static const CeGuiString DEFAULT_VIEW_OBJECT_ACTION;
-        static const CeGuiString DEFAULT_VIEW_OBJECT_ACTION_DEBUG;
-
-        GameObject(unsigned int id);
-        virtual ~GameObject();
-
-        int getId() const;
-
-        const CeGuiString& getClassId() const;
-        void setClassId(const CeGuiString& classId);
-        
-        const CeGuiString& getName() const;
-        void setName(const CeGuiString& name);
-
-        const CeGuiString& getDescription() const;
-        void setDescription(const CeGuiString& description);
-
-        const CeGuiString& getMeshfile() const;
-        void setMeshfile(const CeGuiString& meshfile);
-
-        const CeGuiString& getSubmeshPreName() const;
-        void setSubmeshPreName(const CeGuiString& name);
-
-		const MeshPartMap& getMeshParts() const;
-
-        const GeometryType getGeometryType() const;
-        void setGeometryType(GeometryType type);
-
-        const Ogre::Real getMass() const;
-        void setMass(const Ogre::Real mass);
-
-        void addAction(Action* action, int option = Action::ACT_NORMAL);
-        void addActionInGroup(Action* action, ActionGroup* group, int option = Action::ACT_NORMAL);
-        void removeAction(Action* action);
-
-        void setScene(const CeGuiString& scene);
-        const CeGuiString& getScene() const;
-    
-        /*
-         * sets the actor of this gameobject
-         * @warning if the GameObject is destroyed or the State of the GameObject changed or this function
-         * is called with another actor, the actor will be deleted!
-         */
-        void setActor(Actor* actor);
-        Actor* getActor();
-
-        /**
-         * Get all valid actions a character can perfom on this game object
-         * 
-         * @param actor the character
-         * @return a vector of actions
-         */
-        const ActionVector getValidActions(Creature* actor) const;
-        virtual Action* getDefaultAction(Creature* actor) const;
-
-        /** Trigger an action of this game object
-         *  @param actionName the action's name
-         *  @param actor the "user" of this game object, can be <code>NULL</code> sein, 
-                   if the action wasn't triggered by someone (e.g. by time)
-         *  @param target the action's target (can be <code>NULL</code> if no other game objects are involved)
-         */
-        void doAction(const CeGuiString actionName,
-                      Creature* actor,
-                      GameObject* target);
-
-        void doAction(const CeGuiString actionName);
-
-        void doAction(Action* action,
-                      Creature* actor,
-                      GameObject* target);
-                      
-        bool activateAction(Action* action,
-                      Creature* actor,
-                      GameObject* target);
-
-        void doDefaultAction(Creature* actor, GameObject* target);
-
-        void setPosition(const Ogre::Vector3& position);
-        void setOrientation(const Ogre::Quaternion& orientation);
-        const Ogre::Quaternion& getOrientation() const;
-        const Ogre::Vector3& getPosition() const;
-        Ogre::AxisAlignedBox getWorldBoundingBox() const;
-
-        /// Soll der Aktor ?berhaupt leuchten?
-        bool isHighlightingEnabled();
-        void setHighlightingEnabled( bool highlightenabled );
-
-        void setHighlighted(bool highlight);
-        bool isHighlighted() const;
-
-        virtual const Property getProperty(const CeGuiString& key) const;
-        virtual void setProperty(const CeGuiString& key, const Property& value);
-        virtual PropertyKeys getAllPropertyKeys() const;
-
-        GameObjectState getState() const;
-        virtual void setState(GameObjectState state);
-        void placeIntoScene();
-        void removeFromScene();
-
-        unsigned long getQueryFlags() const;
-        void addQueryFlag(unsigned long queryflag);
-        void setQueryFlags(unsigned long queryflags);
-
-        virtual void onBeforeStateChange(GameObjectState oldState, GameObjectState newState);
-        virtual void onAfterStateChange(GameObjectState oldState, GameObjectState newState);
-
-        /**
-         * Lets an effect affect the game object
-         * @param effect the effect
-         * @ingroup CreatureRubyExports
-         **/
-        void addEffect(Effect* effect);
-        void addEffectWithCheckTime(Effect* effect, RL_LONGLONG time);
-        void addEffectWithCheckDate(Effect* effect, RL_LONGLONG date);
-        void removeEffect(Effect* effect);
-
-        /**
-         * Returns a printable list of all effects
-         */
-        CeGuiString getEffects();
-
-        /**
-         * Checks all effects for end-of-life
-         **/
-        void _checkEffects();
-
-    protected:
-        int mId;
-        GameObjectState mState;
-        
-        CeGuiString mName;
-        CeGuiString mDescription;
-        CeGuiString mMeshfile;
-		MeshPartMap mMeshParts;
-        CeGuiString mSubmeshPreName;
-        CeGuiString mClassId;
-        
-        Actor* mActor;
-        
-        /// Query flags to be set to the actor, when placed into scene.
-        unsigned long mQueryFlags;
-
-        /// Shall the game object be selectable
-        bool mHighlightingEnabled;
-
-        /// Manages the effects affecting this game object
-        EffectManager* mEffectManager;
-
-        Actor* createActor();
-        void destroyActor();
-
-        virtual void doPlaceIntoScene();
-        virtual void doRemoveFromScene();
-        CeGuiString mScene;
-
-    private:
-        static int sNextGameObjectId;    
-
-        ActionOptionVector mActions;
-        Ogre::Vector3 mPosition;
-        Ogre::Quaternion mOrientation;
-        Ogre::Real mMass;
-        CeGuiString mDefaultAction;
-        GeometryType mGeometryType;
-
-        ActionOptionVector::iterator findAction(ActionOptionVector::iterator begin,
-            ActionOptionVector::iterator end, const CeGuiString actionName);
-        ActionOptionVector::iterator findAction(ActionOptionVector::iterator
-            begin, ActionOptionVector::iterator end, const Action* action);    
-    };
-}
-
-#endif
+/* This source file is part of Rastullahs Lockenpracht.
+ * Copyright (C) 2003-2008 Team Pantheon. http://www.team-pantheon.de
+ * 
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the Clarified Artistic License.
+ *
+ *  This program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  Clarified Artistic License for more details.
+ *
+ *  You should have received a copy of the Clarified Artistic License
+ *  along with this program; if not you can get it here
+ *  http://www.jpaulmorrison.com/fbp/artistic2.htm.
+ */
+
+#ifndef __GAMEOBJECT_H__
+#define __GAMEOBJECT_H__
+
+#include "RulesPrerequisites.h"
+
+#include "Action.h"
+#include "Actor.h"
+#include "RulesConstants.h"
+#include "ObjectStateChangeEventSource.h"
+#include "Properties.h"
+#include "CoreDefines.h"
+
+namespace rl
+{
+    class Creature;
+    class Effect;
+    class EffectManager;
+
+    /**
+    * \brief Base class for all game relevant objects in RL
+    * Provides methods for identification of objects within the world
+    * Abstract concepts do not inherit this class
+    */
+    class _RlRulesExport GameObject 
+        : public ActorNotifiedObject, 
+          public ObjectStateChangeEventSource,
+          public PropertyHolder
+    {
+    public:
+        typedef std::vector<std::pair<Action*, int> > ActionOptionVector;
+        static const unsigned int NO_OBJECT_ID = 0;
+        
+        static const Ogre::String CLASS_NAME;
+
+        static const Ogre::String PROPERTY_CLASS_ID;
+        static const Ogre::String PROPERTY_OBJECT_ID;
+        static const Ogre::String PROPERTY_INHERITS;
+        static const Ogre::String PROPERTY_BASE_CLASS;
+        static const Ogre::String PROPERTY_SCENE; 
+        static const Ogre::String PROPERTY_POSITION; 
+        static const Ogre::String PROPERTY_ORIENTATION; 
+        static const Ogre::String PROPERTY_NAME;
+        static const Ogre::String PROPERTY_DESCRIPTION; 
+        static const Ogre::String PROPERTY_MESHFILE; 
+  		static const Ogre::String PROPERTY_MESHPARTS;
+        static const Ogre::String PROPERTY_SUBMESHPRENAME;
+		static const Ogre::String PROPERTY_GEOMETRY_TYPE; 
+        static const Ogre::String PROPERTY_MASS; 
+        static const Ogre::String PROPERTY_ACTIONS; 
+        static const Ogre::String PROPERTY_DEFAULT_ACTION;
+
+        static const CeGuiString DEFAULT_VIEW_OBJECT_ACTION;
+        static const CeGuiString DEFAULT_VIEW_OBJECT_ACTION_DEBUG;
+
+        GameObject(unsigned int id);
+        virtual ~GameObject();
+
+        int getId() const;
+
+        const CeGuiString& getClassId() const;
+        void setClassId(const CeGuiString& classId);
+        
+        const CeGuiString& getName() const;
+        void setName(const CeGuiString& name);
+
+        const CeGuiString& getDescription() const;
+        void setDescription(const CeGuiString& description);
+
+        const CeGuiString& getMeshfile() const;
+        void setMeshfile(const CeGuiString& meshfile);
+
+        const CeGuiString& getSubmeshPreName() const;
+        void setSubmeshPreName(const CeGuiString& name);
+
+		const MeshPartMap& getMeshParts() const;
+
+        const GeometryType getGeometryType() const;
+        void setGeometryType(GeometryType type);
+
+        const Ogre::Real getMass() const;
+        void setMass(const Ogre::Real mass);
+
+        void addAction(Action* action, int option = Action::ACT_NORMAL);
+        void addActionInGroup(Action* action, ActionGroup* group, int option = Action::ACT_NORMAL);
+        void removeAction(Action* action);
+
+        void setScene(const CeGuiString& scene);
+        const CeGuiString& getScene() const;
+    
+        /*
+         * sets the actor of this gameobject
+         * @warning if the GameObject is destroyed or the State of the GameObject changed or this function
+         * is called with another actor, the actor will be deleted!
+         */
+        void setActor(Actor* actor);
+        Actor* getActor();
+        
+        /**
+         * Check whether a creature can perform an action on this game object
+         *
+         * @return a boolean
+         */
+        bool hasAction(const CeGuiString& actionName, Creature* actor) const;
+
+        /**
+         * Get all valid actions a character can perfom on this game object
+         * 
+         * @param actor the character
+         * @return a vector of actions
+         */
+        const ActionVector getValidActions(Creature* actor) const;
+        virtual Action* getDefaultAction(Creature* actor) const;
+
+        /** Trigger an action of this game object
+         *  @param actionName the action's name
+         *  @param actor the "user" of this game object, can be <code>NULL</code> sein, 
+                   if the action wasn't triggered by someone (e.g. by time)
+         *  @param target the action's target (can be <code>NULL</code> if no other game objects are involved)
+         */
+        void doAction(const CeGuiString& actionName,
+                      Creature* actor,
+                      GameObject* target);
+
+        void doAction(const CeGuiString& actionName);
+
+        void doAction(Action* action,
+                      Creature* actor,
+                      GameObject* target);
+                      
+        bool activateAction(Action* action,
+                      Creature* actor,
+                      GameObject* target);
+
+        void doDefaultAction(Creature* actor, GameObject* target);
+
+        void setPosition(const Ogre::Vector3& position);
+        void setOrientation(const Ogre::Quaternion& orientation);
+        const Ogre::Quaternion& getOrientation() const;
+        const Ogre::Vector3& getPosition() const;
+        Ogre::AxisAlignedBox getWorldBoundingBox() const;
+
+        /// Soll der Aktor ??berhaupt leuchten?
+        bool isHighlightingEnabled();
+        void setHighlightingEnabled( bool highlightenabled );
+
+        void setHighlighted(bool highlight);
+        bool isHighlighted() const;
+
+        virtual const Property getProperty(const CeGuiString& key) const;
+        virtual void setProperty(const CeGuiString& key, const Property& value);
+        virtual PropertyKeys getAllPropertyKeys() const;
+
+        GameObjectState getState() const;
+        virtual void setState(GameObjectState state);
+        void placeIntoScene();
+        void removeFromScene();
+
+        unsigned long getQueryFlags() const;
+        void addQueryFlag(unsigned long queryflag);
+        void setQueryFlags(unsigned long queryflags);
+
+        virtual void onBeforeStateChange(GameObjectState oldState, GameObjectState newState);
+        virtual void onAfterStateChange(GameObjectState oldState, GameObjectState newState);
+
+        /**
+         * Lets an effect affect the game object
+         * @param effect the effect
+         * @ingroup CreatureRubyExports
+         **/
+        void addEffect(Effect* effect);
+        void addEffectWithCheckTime(Effect* effect, RL_LONGLONG time);
+        void addEffectWithCheckDate(Effect* effect, RL_LONGLONG date);
+        void removeEffect(Effect* effect);
+
+        /**
+         * Returns a printable list of all effects
+         */
+        CeGuiString getEffects();
+
+        /**
+         * Checks all effects for end-of-life
+         **/
+        void _checkEffects();
+
+    protected:
+        int mId;
+        GameObjectState mState;
+        
+        CeGuiString mName;
+        CeGuiString mDescription;
+        CeGuiString mMeshfile;
+		MeshPartMap mMeshParts;
+        CeGuiString mSubmeshPreName;
+        CeGuiString mClassId;
+        
+        Actor* mActor;
+        
+        /// Query flags to be set to the actor, when placed into scene.
+        unsigned long mQueryFlags;
+
+        /// Shall the game object be selectable
+        bool mHighlightingEnabled;
+
+        /// Manages the effects affecting this game object
+        EffectManager* mEffectManager;
+
+        Actor* createActor();
+        void destroyActor();
+
+        virtual void doPlaceIntoScene();
+        virtual void doRemoveFromScene();
+        CeGuiString mScene;
+
+    private:
+        static int sNextGameObjectId;    
+
+        ActionOptionVector mActions;
+        Ogre::Vector3 mPosition;
+        Ogre::Quaternion mOrientation;
+        Ogre::Real mMass;
+        CeGuiString mDefaultAction;
+        GeometryType mGeometryType;
+
+        ActionOptionVector::iterator findAction(ActionOptionVector::iterator begin,
+            ActionOptionVector::iterator end, const CeGuiString actionName);
+        ActionOptionVector::const_iterator findAction(ActionOptionVector::const_iterator begin,
+            ActionOptionVector::const_iterator end, const CeGuiString actionName) const;
+        ActionOptionVector::iterator findAction(ActionOptionVector::iterator
+            begin, ActionOptionVector::iterator end, const Action* action);    
+    };
+}
+
+#endif

Modified: rl/branches/newton20/engine/rules/include/GoToJob.h
===================================================================
--- rl/branches/newton20/engine/rules/include/GoToJob.h	2008-10-01 16:22:07 UTC (rev 4538)
+++ rl/branches/newton20/engine/rules/include/GoToJob.h	2008-10-01 16:51:11 UTC (rev 4539)
@@ -1,50 +1,50 @@
-/* This source file is part of Rastullahs Lockenpracht.
-* Copyright (C) 2003-2008 Team Pantheon. http://www.team-pantheon.de
-* 
-*  This program is free software; you can redistribute it and/or modify
-*  it under the terms of the Clarified Artistic License.
-*
-*  This program is distributed in the hope that it will be useful,
-*  but WITHOUT ANY WARRANTY; without even the implied warranty of
-*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-*  Clarified Artistic License for more details.
-*
-*  You should have received a copy of the Clarified Artistic License
-*  along with this program; if not you can get it here
-*  http://www.jpaulmorrison.com/fbp/artistic2.htm.
-*/
-
-#ifndef __RL_GOTO_JOB_H__
-#define __RL_GOTO_JOB_H__
-
-#include "RulesPrerequisites.h"
-#include "Creature.h"
-#include "CreatureController.h"
-#include "Job.h"
-
-namespace rl
-{
-    class MeshAnimation;
-
-    /// A rl#Job to play an animation.
-    class _RlRulesExport GoToJob : public Job
-    {
-    public:
-
-		GoToJob(Creature* actor, const Ogre::Vector3& targetPos,
-			Ogre::Real maxDistance, Ogre::Real duration);
-		GoToJob(Creature* actor, GameObject* target, Ogre::Real maxDistance, Ogre::Real duration);
-        virtual ~GoToJob();
-
-        virtual bool execute(Ogre::Real time);
-
-    private:
-		CreatureController* mActor;
-		GameObject* mTarget;
-		Ogre::Vector3 mTargetPos;
-		Ogre::Real mMaxDistance;
-		Ogre::Real mTimeLeft;
-    };
-}
-
-#endif
+/* This source file is part of Rastullahs Lockenpracht.
+* Copyright (C) 2003-2008 Team Pantheon. http://www.team-pantheon.de
+* 
+*  This program is free software; you can redistribute it and/or modify
+*  it under the terms of the Clarified Artistic License.
+*
+*  This program is distributed in the hope that it will be useful,
+*  but WITHOUT ANY WARRANTY; without even the implied warranty of
+*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+*  Clarified Artistic License for more details.
+*
+*  You should have received a copy of the Clarified Artistic License
+*  along with this program; if not you can get it here
+*  http://www.jpaulmorrison.com/fbp/artistic2.htm.
+*/
+
+#ifndef __RL_GOTO_JOB_H__
+#define __RL_GOTO_JOB_H__
+
+#include "RulesPrerequisites.h"
+#include "Job.h"
+
+namespace rl
+{
+    class Creature;
+    class CreatureController;
+    class GameObject;
+    
+    /// A rl#Job to let a creature go to a target position
+    class _RlRulesExport GoToJob : public Job
+    {
+    public:
+
+		GoToJob(Creature* actor, const Ogre::Vector3& targetPos,
+			Ogre::Real maxDistance, Ogre::Real duration);
+		GoToJob(Creature* actor, GameObject* target, Ogre::Real maxDistance, Ogre::Real duration);
+        virtual ~GoToJob();
+
+        virtual bool execute(Ogre::Real time);
+
+    private:
+		CreatureController* mActor;
+		GameObject* mTarget;
+		Ogre::Vector3 mTargetPos;
+		Ogre::Real mMaxDistance;
+		Ogre::Real mTimeLeft;
+    };
+}
+
+#endif

Modified: rl/branches/newton20/engine/rules/include/Makefile.am
===================================================================
--- rl/branches/newton20/engine/rules/include/Makefile.am	2008-10-01 16:22:07 UTC (rev 4538)
+++ rl/branches/newton20/engine/rules/include/Makefile.am	2008-10-01 16:51:11 UTC (rev 4539)
@@ -18,6 +18,7 @@
 	EffectManager.h \
 	Eigenschaft.h \
 	EigenschaftenStateSet.h \
+	FetchItemJob.h \
 	GameEventLog.h \
 	GameObject.h \
 	GameObjectStateListener.h \

Modified: rl/branches/newton20/engine/rules/include/PartyManager.h
===================================================================
--- rl/branches/newton20/engine/rules/include/PartyManager.h	2008-10-01 16:22:07 UTC (rev 4538)
+++ rl/branches/newton20/engine/rules/include/PartyManager.h	2008-10-01 16:51:11 UTC (rev 4539)
@@ -28,17 +28,19 @@
     class _RlRulesExport PartyManager : public Ogre::Singleton<PartyManager>
     {
     public:
-        PartyManager();
+		typedef std::vector<Creature*> Party;
+
+		PartyManager();
         
         Creature* getActiveCharacter() const;
         void setActiveCharacter(Creature* character);
         void addCharacter(Creature* character);
         void removeCharacter(Creature* character);
-        std::vector<Creature*> getCharacters() const;
+        Party getCharacters() const;
         bool isInParty(Creature* creature) const;
         
     private:
-        std::vector<Creature*> mParty;
+		Party mParty;
         Creature* mActiveCharacter;
 	    MessagePump::ScopedConnection mLifeStateChangeConnection;
 

Copied: rl/branches/newton20/engine/rules/src/FetchItemJob.cpp (from rev 4538, rl/trunk/engine/rules/src/FetchItemJob.cpp)

Modified: rl/branches/newton20/engine/rules/src/GameObject.cpp
===================================================================
--- rl/branches/newton20/engine/rules/src/GameObject.cpp	2008-10-01 16:22:07 UTC (rev 4538)
+++ rl/branches/newton20/engine/rules/src/GameObject.cpp	2008-10-01 16:51:11 UTC (rev 4539)
@@ -1,835 +1,880 @@
-/* This source file is part of Rastullahs Lockenpracht.
- * Copyright (C) 2003-2008 Team Pantheon. http://www.team-pantheon.de
- *
- *  This program is free software; you can redistribute it and/or modify
- *  it under the terms of the Clarified Artistic License.
- *
- *  This program is distributed in the hope that it will be useful,
- *  but WITHOUT ANY WARRANTY; without even the implied warranty of
- *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- *  Clarified Artistic License for more details.
- *
- *  You should have received a copy of the Clarified Artistic License
- *  along with this program; if not you can get it here
- *  http://www.jpaulmorrison.com/fbp/artistic2.htm.
- */
-#include "stdinc.h" //precompiled header
-
-#include "GameObject.h"
-#include <CEGUIPropertyHelper.h>
-
-#include "Action.h"
-#include "ActionManager.h"
-#include "Actor.h"
-#include "ActorManager.h"
-#include "EffectManager.h"
-#include "Exception.h"
-#include "ObjectStateChangeEventSource.h"
-#include "Property.h"
-#include "RulesSubsystem.h"
-#include "GameObjectManager.h"
-#include "CoreSubsystem.h"
-#include "PhysicsManager.h"
-
-
-using namespace std;
-
-namespace rl
-{
-    const CeGuiString GameObject::DEFAULT_VIEW_OBJECT_ACTION = "viewobject";
-    const CeGuiString GameObject::DEFAULT_VIEW_OBJECT_ACTION_DEBUG = "viewobjectdebug";
-
-    const Ogre::String GameObject::CLASS_NAME = "GameObject";
-
-    const Ogre::String GameObject::PROPERTY_CLASS_ID = "classid";
-    const Ogre::String GameObject::PROPERTY_OBJECT_ID = "id";
-    const Ogre::String GameObject::PROPERTY_BASE_CLASS = "baseclass";
-    const Ogre::String GameObject::PROPERTY_POSITION = "position";
-    const Ogre::String GameObject::PROPERTY_SCENE = "scene";
-    const Ogre::String GameObject::PROPERTY_INHERITS = "inherits";
-    const Ogre::String GameObject::PROPERTY_ORIENTATION = "orientation";
-    const Ogre::String GameObject::PROPERTY_NAME = "name";
-    const Ogre::String GameObject::PROPERTY_DESCRIPTION = "description";
-    const Ogre::String GameObject::PROPERTY_MESHFILE = "meshfile";
-	const Ogre::String GameObject::PROPERTY_MESHPARTS = "meshparts";
-    const Ogre::String GameObject::PROPERTY_SUBMESHPRENAME = "submeshprename";
-    const Ogre::String GameObject::PROPERTY_GEOMETRY_TYPE = "geometrytype";
-    const Ogre::String GameObject::PROPERTY_MASS = "mass";
-    const Ogre::String GameObject::PROPERTY_ACTIONS = "actions";
-    const Ogre::String GameObject::PROPERTY_DEFAULT_ACTION = "defaultaction";
-
-    GameObject::GameObject(unsigned int id)
-        :   mId(id),
-            mName(""),
-            mDescription(""),
-            mMeshfile(""),
-			mMeshParts(),
-            mQueryFlags(QUERYFLAG_GAMEOBJECT),
-            mHighlightingEnabled(true),
-            mActor(NULL),
-            mActions(),
-            mPosition(Ogre::Vector3::ZERO),
-            mOrientation(Ogre::Quaternion::IDENTITY),
-            mMass(0),
-            mGeometryType(GT_NONE),
-            mDefaultAction(DEFAULT_VIEW_OBJECT_ACTION),
-            mState(GOS_LOADED),
-            mScene("")
-    {
-        mEffectManager = new EffectManager(this);
-
-        // Standardactions registrieren
-        Action* defaultAction = ActionManager::getSingleton().getAction(DEFAULT_VIEW_OBJECT_ACTION);
-        if (defaultAction != NULL)
-        {
-            addAction(defaultAction);
-        }
-
-        // If game in developer mode, show GameObject debug window
-        // in the radial menu
-        //if( CoreSubsystem::getSingleton().getDeveloperMode() )
-        //{
-            defaultAction = ActionManager::getSingleton().getAction(DEFAULT_VIEW_OBJECT_ACTION_DEBUG);
-            if (defaultAction != NULL)
-            {
-                addAction(defaultAction);
-            }
-        //}
-
-        // Eventsource erzeugen
-        setObject(this);
-    }
-
-    GameObject::~GameObject(void)
-    {
-        destroyActor();
-    	delete mEffectManager;
-    }
-
-    int GameObject::getId() const
-    {
-        return mId;
-    }
-
-    const CeGuiString& GameObject::getClassId() const
-    {
-        return mClassId;
-    }
-
-    void GameObject::setClassId(const CeGuiString& classId)
-    {
-        mClassId = classId;
-    }
-
-    const CeGuiString& GameObject::getName() const
-    {
-        return mName;
-    }
-
-    void GameObject::setName(const CeGuiString& name)
-    {
-        mName = name;
-    }
-
-    const CeGuiString& GameObject::getDescription() const
-    {
-        return mDescription;
-    }
-
-    void GameObject::setDescription(const CeGuiString& description)
-    {
-        mDescription = description;
-    }
-
-    const CeGuiString& GameObject::getMeshfile() const
-    {
-        return mMeshfile;
-    }
-
-    void GameObject::setMeshfile(const CeGuiString& meshfile)
-    {
-        mMeshfile = meshfile;
-    }
-
-	const MeshPartMap& GameObject::getMeshParts() const
-	{
-		return mMeshParts;
-	}
-
-    const CeGuiString& GameObject::getSubmeshPreName() const
-    {
-        return mSubmeshPreName;
-    }
-
-    void GameObject::setSubmeshPreName(const CeGuiString& name)
-    {
-        mSubmeshPreName = name;
-    }
-
-    const CeGuiString& GameObject::getScene() const
-    {
-        return mScene;
-    }
-
-    void GameObject::setScene(const CeGuiString& scene)
-    {
-        mScene = scene;
-    }
-
-    void GameObject::addAction(Action* action, int option)
-    {
-        if (action == NULL)
-        {
-            Throw(NullPointerException, "Parameter action ist NULL.");
-        }
-
-        mActions.push_back(make_pair(action, option));
-        LOG_MESSAGE(Logger::RULES,
-            "Bei GameObject #"+CEGUI::PropertyHelper::intToString(mId)+
-            " ("+getName()+") wurde Aktion "+action->getName().c_str()+" hinzugefuegt.");
-    }
-
-    void GameObject::addActionInGroup(Action* action, ActionGroup* group, int option)
-    {
-        addAction(action, option);
-        action->setGroup(group);
-    }
-
-    void GameObject::removeAction(Action* action)
-    {
-        ActionOptionVector::iterator it = findAction(mActions.begin(), mActions.end(), action);
-        if (it != mActions.end())
-        {
-            mActions.erase(it);
-        }
-    }
-
-    const ActionVector GameObject::getValidActions(Creature* actor) const
-    {
-        ActionVector actions;
-        for (ActionOptionVector::const_iterator it = mActions.begin(); it != mActions.end(); ++it)
-        {
-            LOG_MESSAGE(Logger::RULES, "Untersuche Aktion "+(*it).first->getName());
-            if ((*it).second == Action::ACT_DISABLED)
-                continue;
-            //if ((*it).second > ACT_NEEDS_TALENT)
-            if (actor != NULL && !(*it).first->canDo(const_cast<GameObject*>(this), actor)) // Aktion nicht m???glich
-                continue;
-
-            actions.push_back((*it).first);
-        }
-        return actions;
-    }
-
-    void GameObject::doAction( const CeGuiString actionName,
-                              Creature* actor,
-                              GameObject* target)
-    {
-        ActionOptionVector::const_iterator it =
-            findAction(mActions.begin(), mActions.end(), actionName);
-
-        if (it == mActions.end())
-        {
-            LOG_ERROR(
-                Logger::RULES,
-                "'" + actionName + "' ist eine dem Objekt unbekannte Aktion.");
-        }
-        else
-        {
-            doAction((*it).first, actor, target);
-        }
-    }
-
-    void GameObject::doAction(const CeGuiString actionName)
-    {
-        doAction(actionName, NULL, NULL);
-    }
-
-    void GameObject::doAction(Action* action,
-                              Creature* actor,
-                              GameObject* target)
-    {
-        action->doAction(this, actor, target);
-    }
-
-    void GameObject::doDefaultAction(Creature* actor, GameObject* target)
-    {
-        Action* action = getDefaultAction(actor);
-        if (action != NULL)
-        {
-            doAction(action, actor, target);
-        }
-        else
-        {
-            LOG_ERROR(
-                Logger::RULES,
-                "GameObject " + getName() + " has no valid default action set.");
-        }
-    }
-
-    bool GameObject::activateAction(Action* action,
-                      Creature* actor,
-                      GameObject* target)
-    {
-        doAction(action, actor, target);
-        return true;
-    }
-
-    GameObject::ActionOptionVector::iterator
-        GameObject::findAction(
-            GameObject::ActionOptionVector::iterator begin,
-            GameObject::ActionOptionVector::iterator end,
-            const CeGuiString actionName)
-    {
-        for (ActionOptionVector::iterator iter = begin; iter != end; ++iter)
-        {
-            Action* action = (*iter).first;
-
-            if (action->getName().compare(actionName) == 0)
-                return iter;
-        }
-        return end;
-    }
-
-    GameObject::ActionOptionVector::iterator
-        GameObject::findAction(
-            GameObject::ActionOptionVector::iterator begin,
-            GameObject::ActionOptionVector::iterator end,
-            const Action* action)
-    {
-        for (ActionOptionVector::iterator iter = begin; iter != end; ++iter)
-            if ((*iter).first == action)
-                return iter;
-
-        return end;
-    }
-
-    void GameObject::setActor(Actor* actor)
-    {
-        if (mActor != actor)
-        {
-            if (mActor != NULL)
-            {
-                mActor->setGameObject(NULL);
-                mActor->setQueryFlags(0);
-            }
-
-            if (actor != NULL)
-            {                
-                actor->setGameObject(this);
-                if (actor->isInScene())
-                {
-                    actor->setPosition(mPosition);
-                    actor->setOrientation(mOrientation);                    
-                }
-            }
-
-            mActor = actor;
-        }
-
-        if (mActor && mActor->isInScene())
-        {
-            mActor->setQueryFlags(mQueryFlags);
-        }
-    }
-
-    Actor* GameObject::getActor()
-    {
-        return mActor;
-    }
-
-    bool GameObject::isHighlightingEnabled()
-    {
-        return mHighlightingEnabled;
-    }
-
-    void GameObject::setHighlightingEnabled( bool highlightenabled )
-    {
-        // Leuchtet zur Zeit, sollte aber nicht leuchten
-        if( mActor != NULL && !highlightenabled && mActor->isHighlighted() )
-        {
-            mActor->setHighlighted( false );
-        }
-
-        mHighlightingEnabled = highlightenabled;
-    }
-
-    Action* GameObject::getDefaultAction(Creature* actor) const
-    {
-        return ActionManager::getSingleton().getAction(mDefaultAction);
-    }
-
-    void GameObject::setHighlighted(bool highlight)
-    {
-        if (mHighlightingEnabled && mActor != NULL)
-        {
-            mActor->setHighlighted(highlight, getName());
-        }
-    }
-
-    bool GameObject::isHighlighted() const
-    {
-        return mActor != NULL && mActor->isHighlighted();
-    }
-
-    void GameObject::setPosition(const Ogre::Vector3& position)
-    {
-        if (mActor != NULL)
-        {
-            mActor->setPosition(position);
-        }
-        else
-        {
-            mPosition = position;
-        }
-    }
-
-    const Ogre::Vector3& GameObject::getPosition() const
-    {
-        if (mActor != NULL)
-        {
-            return mActor->getPosition();
-        }
-        return mPosition;
-    }
-
-	Ogre::AxisAlignedBox GameObject::getWorldBoundingBox() const
-	{
-        if (mActor != NULL)
-        {
-            return mActor->getWorldBoundingBox();
-        }
-        return Ogre::AxisAlignedBox();
-	}
-
-    void GameObject::setOrientation(const Ogre::Quaternion& orientation)
-    {
-        if (mActor != NULL)
-        {
-            mActor->setOrientation(orientation);
-        }
-        else
-        {
-            mOrientation = orientation;
-        }
-    }
-
-    const Ogre::Quaternion& GameObject::getOrientation() const
-    {
-        if (mActor != NULL)
-        {
-            return mActor->getOrientation();
-        }
-        return mOrientation;
-    }
-
-    const GeometryType GameObject::getGeometryType() const
-    {
-        return mGeometryType;
-    }
-
-    void GameObject::setGeometryType(GeometryType type)
-    {
-        mGeometryType = type;
-    }
-
-    const Ogre::Real GameObject::getMass() const
-    {
-        return mMass;
-    }
-
-    void GameObject::setMass(const Ogre::Real mass)
-    {
-        mMass = mass;
-    }
-
-    void GameObject::addEffect(Effect* effect)
-	{
-		mEffectManager->addEffect(effect);
-	}
-
-    void GameObject::addEffectWithCheckTime(Effect* effect, RL_LONGLONG time)
-    {
-      addEffect(effect);
-      mEffectManager->addTimeCheck(time, effect);
-    }
-
-    void GameObject::addEffectWithCheckDate(Effect* effect, RL_LONGLONG date)
-    {
-      addEffect(effect);
-      mEffectManager->addDateCheck(date, effect);
-    }
-
-	void GameObject::_checkEffects()
-	{
-		/// @todo Nur einmal pro Aktion ausfuehren
-		mEffectManager->checkEffects();
-	}
-
-    void GameObject::removeEffect(Effect* effect)
-	{
-		mEffectManager->removeEffect(effect);
-	}
-
-    CeGuiString GameObject::getEffects()
-    {
-        return mEffectManager->getEffects();
-    }
-
-    const Property GameObject::getProperty(const CeGuiString& key) const
-    {
-        Property prop;
-        if (key == PROPERTY_POSITION)
-        {
-            prop.setValue(getPosition());
-        }
-        else if (key == PROPERTY_ORIENTATION)
-        {
-            prop.setValue(getOrientation());
-        }
-        else if (key == PROPERTY_NAME)
-        {
-            prop.setValue(mName);
-        }
-        else if (key == PROPERTY_DESCRIPTION)
-        {
-            prop.setValue(mDescription);
-        }
-        else if (key == PROPERTY_MESHFILE)
-        {
-            prop.setValue(mMeshfile);
-        }
-        else if (key == PROPERTY_GEOMETRY_TYPE)
-        {
-            prop.setValue(PhysicsManager::convertGeometryTypeToString(mGeometryType));
-        }
-        else if (key == PROPERTY_MASS)
-        {
-            prop.setValue(mMass);
-        }
-		else if (key == PROPERTY_MESHPARTS)
-		{
-			PropertyMap map;
-			for (MeshPartMap::const_iterator
-					it = mMeshParts.begin(); it != mMeshParts.end(); ++it)
-			{
-				map[(*it).first] = Property((*it).second);
-			}
-			prop.setValue(map);
-		}
-        else if (key == PROPERTY_SUBMESHPRENAME)
-        {
-            prop.setValue(mSubmeshPreName);
-        }
-        else
-        {
-            Throw(IllegalArgumentException, key + " is not a property of this gameobject ("+mName.c_str()+")");
-        }
-
-        return prop;
-    }
-
-    void GameObject::setProperty(const CeGuiString& key, const Property& value)
-    {
-        try
-        {
-            if (key == PROPERTY_POSITION)
-            {
-                setPosition(value.toVector3());
-            }
-            else if (key == PROPERTY_ORIENTATION)
-            {
-                setOrientation(value.toQuaternion());
-            }
-            else if (key == PROPERTY_NAME)
-            {
-                setName(value.toString());
-            }
-            else if (key == PROPERTY_DESCRIPTION)
-            {
-                setDescription(value.toString());
-            }
-            else if (key == PROPERTY_MESHFILE)
-            {
-                setMeshfile(value.toString());
-            }
-            else if (key == PROPERTY_MESHPARTS)
-            {
-				PropertyMap map = value.toMap();
-				for (PropertyMap::const_iterator
-					it = map.begin(); it != map.end(); ++it)
-				{
-					mMeshParts[(*it).first.c_str()] = (*it).second.toString().c_str();
-				}
-            }
-            else if (key == PROPERTY_GEOMETRY_TYPE)
-            {
-                setGeometryType(PhysicsManager::convertStringToGeometryType(value.toString().c_str()));
-            }
-            else if (key == PROPERTY_MASS)
-            {
-                Ogre::Real mass = 0.0;
-                if (value.isInt())
-                {
-                    mass = value.toInt();
-                }
-                else if (value.isReal())
-                {
-                    mass = value.toReal();
-                }
-                setMass(mass);
-            }
-            else if (key == PROPERTY_ACTIONS)
-            {
-                PropertyArray vecVal = value.toArray();
-                for (PropertyArray::const_iterator it = vecVal.begin(); it != vecVal.end(); it++)
-                {
-                    Ogre::String actionName = (*it).toString().c_str();
-                    Action* act = ActionManager::getSingleton().getAction(actionName);
-
-                    if (act != NULL)
-                    {
-                        addAction(act);
-                    }
-                    else
-                    {
-                        LOG_ERROR(Logger::RULES, "'"+actionName+"' not registered at ActionManager.");
-                    }
-                }
-            }
-            else if (key == PROPERTY_DEFAULT_ACTION)
-            {
-                mDefaultAction = value.toString().c_str();
-            }
-            else if (key == PROPERTY_SUBMESHPRENAME)
-            {
-                mSubmeshPreName = value.toString();
-            }
-            else
-            {
-                if( key != PROPERTY_BASE_CLASS && key != PROPERTY_CLASS_ID && key != PROPERTY_INHERITS)
-                    // these two keys can be ignored, they are only given to the GameObjectFactory when creating a GOF
-                {
-                    LOG_WARNING(Logger::RULES,
-						key + " is not a property of this GameObject ("+mName+")");
-                }
-            }
-        }
-        catch (WrongFormatException ex)
-        {
-            LOG_ERROR(
-                Logger::RULES,
-                "property " + key + " has the wrong format");
-        }
-    }
-
-    PropertyKeys GameObject::getAllPropertyKeys() const
-    {
-        PropertyKeys keys;
-        keys.insert(PROPERTY_NAME);
-        keys.insert(PROPERTY_DESCRIPTION);
-        if(mState == GOS_IN_SCENE)
-        {
-            keys.insert(PROPERTY_POSITION);
-            keys.insert(PROPERTY_ORIENTATION); 
-        }
-        keys.insert(PROPERTY_MESHFILE);
-        keys.insert(PROPERTY_MESHPARTS);
-        keys.insert(PROPERTY_GEOMETRY_TYPE);
-        keys.insert(PROPERTY_MASS);
-        return keys;
-    }
-
-    Actor* GameObject::createActor()
-    {
-        if (!mActor)
-        {
-            Ogre::String actorName = Ogre::StringConverter::toString(mId);
-			Actor* actor = NULL;
-
-			if (mMeshfile.empty() && mMeshParts.empty())
-			{
-				LOG_ERROR(
-					Logger::RULES,
-					"Neither mesh file nor mesh parts are set on gameobject '" + getName()
-					+ "' (id: " + getId() + "). Can't create actor!");
-			}
-			else if (!mMeshParts.empty())
-			{
-				actor = ActorManager::getSingleton().createMeshActor(
-						actorName,
-						mMeshfile.c_str(),
-						mMeshParts,
-						mGeometryType,
-						mMass);
-			}
-			else
-			{
-				actor = ActorManager::getSingleton().createMeshActor(
-						actorName,
-						mMeshfile.c_str(),
-						mGeometryType,
-						mMass);
-			}
-
-			if (actor == NULL)
-			{
-				LOG_ERROR(
-					Logger::RULES,
-					"Error creating actor '"
-					+ actorName	+ "'.");
-			}
-
-            setActor(actor);
-        }
-
-        return mActor;
-    }
-
-    void GameObject::destroyActor()
-    {
-        if (mActor != NULL)
-        {
-			Actor* actor = mActor;
-			setActor(NULL);
-            ActorManager::getSingleton().destroyActor(actor);
-		}
-    }
-
-    void GameObject::placeIntoScene()
-    {
-        setState(GOS_IN_SCENE);
-    }
-
-    void GameObject::removeFromScene()
-    {
-        setState(GOS_LOADED);
-    }
-
-    void GameObject::doPlaceIntoScene()
-    {
-        if (mState != GOS_IN_SCENE)
-        {
-            Actor* actor = createActor();
-
-            if (actor != NULL)
-            {
-                actor->placeIntoScene(mPosition, mOrientation);
-                setActor(actor);
-                mScene = CoreSubsystem::getSingleton().getCurrentScene();
-
-                // this is done in setstate now
-                //GameObjectState tmpState = mState;
-                //mState = GOS_IN_SCENE;
-                //GameObjectManager::getSingleton().gameObjectStateChanged(this, tmpState, mState);
-                //onStateChange(tmpState, GOS_IN_SCENE);
-            }
-            else {
-                LOG_ERROR(
-                    Logger::RULES,
-                    "Error placing gameobject '"
-                    + Ogre::StringConverter::toString(mId)
-                    + "' into scene "
-                    + mMeshfile);
-            }
-        }
-    }
-
-    void GameObject::doRemoveFromScene()
-    {
-        if (mState == GOS_IN_SCENE)
-        {
-            Actor* actor = mActor;
-            if (actor)
-            {
-                //mOrientation = actor->getWorldOrientation(); //Why world orientation?
-                //mPosition = actor->getWorldPosition(); //Why world position?
-
-                mOrientation = actor->getOrientation();
-                mPosition = actor->getPosition();
-
-                setActor(NULL);
-                actor->removeFromScene();
-                mScene = "";
-            }
-
-            // give the setstate function the possibility to reuse the actor
-            //ActorManager::getSingleton().destroyActor(actor);
-
-            // this is done in setstate now
-            //GameObjectState tmpState = mState;
-            //mState = GOS_LOADED;
-            //GameObjectManager::getSingleton().gameObjectStateChanged(this, tmpState, mState);
-        }
-    }
-
-    void GameObject::setState(GameObjectState targetstate)
-    {
-        if (targetstate == mState)
-        {
-            return;
-        }
-
-        GameObjectState oldState = mState;
-        onBeforeStateChange(oldState, targetstate);
-
-        if (targetstate == GOS_LOADED && mState == GOS_IN_SCENE)
-        {
-            doRemoveFromScene();
-            destroyActor();
-        }
-        else if (targetstate == GOS_IN_SCENE && mState == GOS_LOADED)
-        {
-            doPlaceIntoScene();
-        }
-        else
-        {
-            LOG_ERROR(
-                Logger::RULES,
-                "GameObject '" + getName()
-                + "' could not change state from "
-                + Ogre::StringConverter::toString(mState) + " to "
-                + Ogre::StringConverter::toString(targetstate));
-            return;
-        }
-
-        mState = targetstate;
-        onAfterStateChange(oldState, targetstate);
-        GameObjectManager::getSingleton().gameObjectStateChanged(this, oldState, targetstate);
-    }
-
-    void GameObject::onBeforeStateChange(GameObjectState oldState, GameObjectState newState)
-    {
-    }
-
-    void GameObject::onAfterStateChange(GameObjectState oldState, GameObjectState newState)
-    {
-    }
-
-    GameObjectState GameObject::getState() const
-    {
-        return mState;
-    }
-
-    unsigned long GameObject::getQueryFlags() const
-    {
-        return mQueryFlags;
-    }
-
-    void GameObject::addQueryFlag(unsigned long queryflag)
-    {
-        mQueryFlags |= queryflag;
-
-        setQueryFlags(mQueryFlags);
-    }
-
-    void GameObject::setQueryFlags(unsigned long queryflags)
-    {
-        mQueryFlags = queryflags;
-
-        if(mActor != NULL)
-        {
-            mActor->setQueryFlags(mQueryFlags);
-        }
-    }
-}
+/* This source file is part of Rastullahs Lockenpracht.
+ * Copyright (C) 2003-2008 Team Pantheon. http://www.team-pantheon.de
+ *
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the Clarified Artistic License.
+ *
+ *  This program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  Clarified Artistic License for more details.
+ *
+ *  You should have received a copy of the Clarified Artistic License
+ *  along with this program; if not you can get it here
+ *  http://www.jpaulmorrison.com/fbp/artistic2.htm.
+ */
+#include "stdinc.h" //precompiled header
+
+#include "GameObject.h"
+#include <CEGUIPropertyHelper.h>
+
+#include "Action.h"
+#include "ActionManager.h"
+#include "Actor.h"
+#include "ActorManager.h"
+#include "EffectManager.h"
+#include "Exception.h"
+#include "ObjectStateChangeEventSource.h"
+#include "Property.h"
+#include "RulesSubsystem.h"
+#include "GameObjectManager.h"
+#include "CoreSubsystem.h"
+#include "PhysicsManager.h"
+
+
+using namespace std;
+
+namespace rl
+{
+    const CeGuiString GameObject::DEFAULT_VIEW_OBJECT_ACTION = "viewobject";
+    const CeGuiString GameObject::DEFAULT_VIEW_OBJECT_ACTION_DEBUG = "viewobjectdebug";
+
+    const Ogre::String GameObject::CLASS_NAME = "GameObject";
+
+    const Ogre::String GameObject::PROPERTY_CLASS_ID = "classid";
+    const Ogre::String GameObject::PROPERTY_OBJECT_ID = "id";
+    const Ogre::String GameObject::PROPERTY_BASE_CLASS = "baseclass";
+    const Ogre::String GameObject::PROPERTY_POSITION = "position";
+    const Ogre::String GameObject::PROPERTY_SCENE = "scene";
+    const Ogre::String GameObject::PROPERTY_INHERITS = "inherits";
+    const Ogre::String GameObject::PROPERTY_ORIENTATION = "orientation";
+    const Ogre::String GameObject::PROPERTY_NAME = "name";
+    const Ogre::String GameObject::PROPERTY_DESCRIPTION = "description";
+    const Ogre::String GameObject::PROPERTY_MESHFILE = "meshfile";
+	const Ogre::String GameObject::PROPERTY_MESHPARTS = "meshparts";
+    const Ogre::String GameObject::PROPERTY_SUBMESHPRENAME = "submeshprename";
+    const Ogre::String GameObject::PROPERTY_GEOMETRY_TYPE = "geometrytype";
+    const Ogre::String GameObject::PROPERTY_MASS = "mass";
+    const Ogre::String GameObject::PROPERTY_ACTIONS = "actions";
+    const Ogre::String GameObject::PROPERTY_DEFAULT_ACTION = "defaultaction";
+
+    GameObject::GameObject(unsigned int id)
+        :   mId(id),
+            mName(""),
+            mDescription(""),
+            mMeshfile(""),
+			mMeshParts(),
+            mQueryFlags(QUERYFLAG_GAMEOBJECT),
+            mHighlightingEnabled(true),
+            mActor(NULL),
+            mActions(),
+            mPosition(Ogre::Vector3::ZERO),
+            mOrientation(Ogre::Quaternion::IDENTITY),
+            mMass(0),
+            mGeometryType(GT_NONE),
+            mDefaultAction(DEFAULT_VIEW_OBJECT_ACTION),
+            mState(GOS_LOADED),
+            mScene("")
+    {
+        mEffectManager = new EffectManager(this);
+
+        // Standardactions registrieren
+        Action* defaultAction = ActionManager::getSingleton().getAction(DEFAULT_VIEW_OBJECT_ACTION);
+        if (defaultAction != NULL)
+        {
+            addAction(defaultAction);
+        }
+
+        // If game in developer mode, show GameObject debug window
+        // in the radial menu
+        //if( CoreSubsystem::getSingleton().getDeveloperMode() )
+        //{
+            defaultAction = ActionManager::getSingleton().getAction(DEFAULT_VIEW_OBJECT_ACTION_DEBUG);
+            if (defaultAction != NULL)
+            {
+                addAction(defaultAction);
+            }
+        //}
+
+        // Eventsource erzeugen
+        setObject(this);
+    }
+
+    GameObject::~GameObject(void)
+    {
+        destroyActor();
+    	delete mEffectManager;
+    }
+
+    int GameObject::getId() const
+    {
+        return mId;
+    }
+
+    const CeGuiString& GameObject::getClassId() const
+    {
+        return mClassId;
+    }
+
+    void GameObject::setClassId(const CeGuiString& classId)
+    {
+        mClassId = classId;
+    }
+
+    const CeGuiString& GameObject::getName() const
+    {
+        return mName;
+    }
+
+    void GameObject::setName(const CeGuiString& name)
+    {
+        mName = name;
+    }
+
+    const CeGuiString& GameObject::getDescription() const
+    {
+        return mDescription;
+    }
+
+    void GameObject::setDescription(const CeGuiString& description)
+    {
+        mDescription = description;
+    }
+
+    const CeGuiString& GameObject::getMeshfile() const
+    {
+        return mMeshfile;
+    }
+
+    void GameObject::setMeshfile(const CeGuiString& meshfile)
+    {
+        mMeshfile = meshfile;
+    }
+
+	const MeshPartMap& GameObject::getMeshParts() const
+	{
+		return mMeshParts;
+	}
+
+    const CeGuiString& GameObject::getSubmeshPreName() const
+    {
+        return mSubmeshPreName;
+    }
+
+    void GameObject::setSubmeshPreName(const CeGuiString& name)
+    {
+        mSubmeshPreName = name;
+    }
+
+    const CeGuiString& GameObject::getScene() const
+    {
+        return mScene;
+    }
+
+    void GameObject::setScene(const CeGuiString& scene)
+    {
+        mScene = scene;
+    }
+
+    void GameObject::addAction(Action* action, int option)
+    {
+        if (action == NULL)
+        {
+            Throw(NullPointerException, "Parameter action ist NULL.");
+        }
+
+        mActions.push_back(make_pair(action, option));
+        LOG_MESSAGE(Logger::RULES,
+            "Bei GameObject #"+CEGUI::PropertyHelper::intToString(mId)+
+            " ("+getName()+") wurde Aktion "+action->getName().c_str()+" hinzugefuegt.");
+    }
+
+    void GameObject::addActionInGroup(Action* action, ActionGroup* group, int option)
+    {
+        addAction(action, option);
+        action->setGroup(group);
+    }
+
+    void GameObject::removeAction(Action* action)
+    {
+        ActionOptionVector::iterator it = findAction(mActions.begin(), mActions.end(), action);
+        if (it != mActions.end())
+        {
+            mActions.erase(it);
+        }
+    }
+
+    const ActionVector GameObject::getValidActions(Creature* actor) const
+    {
+        ActionVector actions;
+        for (ActionOptionVector::const_iterator it = mActions.begin(); it != mActions.end(); ++it)
+        {
+            LOG_DEBUG(Logger::RULES, "Untersuche Aktion "+(*it).first->getName());
+            if ((*it).second == Action::ACT_DISABLED)
+            {
+                continue;                
+            }
+            //if ((*it).second > ACT_NEEDS_TALENT)
+            if (actor != NULL && !(*it).first->canDo(const_cast<GameObject*>(this), actor)) // Aktion nicht m???glich
+            {
+                continue;                
+            }
+            
+            actions.push_back((*it).first);
+        }
+        return actions;
+    }
+    
+    bool GameObject::hasAction(const CeGuiString& actionName, Creature* actor) const
+    {
+        ActionOptionVector::const_iterator it =
+            findAction(mActions.begin(), mActions.end(), actionName);
+        
+        if (it == mActions.end())
+        {
+            return false;
+        }
+
+        LOG_DEBUG(Logger::RULES, "Untersuche Aktion "+(*it).first->getName());
+        if ((*it).second == Action::ACT_DISABLED)
+        {
+            return false;                
+        }
+        //if ((*it).second > ACT_NEEDS_TALENT)
+        if (actor != NULL && !(*it).first->canDo(const_cast<GameObject*>(this), actor)) // Aktion nicht m???glich
+        {
+            return false;
+        }
+        
+        return true;
+    }
+    
+    
+    void GameObject::doAction( const CeGuiString& actionName,
+                              Creature* actor,
+                              GameObject* target)
+    {
+        ActionOptionVector::iterator it =
+            findAction(mActions.begin(), mActions.end(), actionName);
+
+        if (it == mActions.end())
+        {
+            LOG_ERROR(
+                Logger::RULES,
+                "'" + actionName + "' ist eine dem Objekt unbekannte Aktion.");
+        }
+        else
+        {
+            doAction((*it).first, actor, target);
+        }
+    }
+
+    void GameObject::doAction(const CeGuiString& actionName)
+    {
+        doAction(actionName, NULL, NULL);
+    }
+
+    void GameObject::doAction(Action* action,
+                              Creature* actor,
+                              GameObject* target)
+    {
+        action->doAction(this, actor, target);
+    }
+
+    void GameObject::doDefaultAction(Creature* actor, GameObject* target)
+    {
+        Action* action = getDefaultAction(actor);
+        if (action != NULL)
+        {
+            doAction(action, actor, target);
+        }
+        else
+        {
+            LOG_ERROR(
+                Logger::RULES,
+                "GameObject " + getName() + " has no valid default action set.");
+        }
+    }
+
+    bool GameObject::activateAction(Action* action,
+                      Creature* actor,
+                      GameObject* target)
+    {
+        doAction(action, actor, target);
+        return true;
+    }
+
+    GameObject::ActionOptionVector::iterator
+        GameObject::findAction(
+            GameObject::ActionOptionVector::iterator begin,
+            GameObject::ActionOptionVector::iterator end,
+            const CeGuiString actionName)
+    {
+        for (ActionOptionVector::iterator iter = begin; iter != end; ++iter)
+        {
+            Action* action = (*iter).first;
+
+            if (action->getName().compare(actionName) == 0)
+                return iter;
+        }
+        return end;
+    }
+
+    GameObject::ActionOptionVector::const_iterator
+    GameObject::findAction(
+                           GameObject::ActionOptionVector::const_iterator begin,
+                           GameObject::ActionOptionVector::const_iterator end,
+                           const CeGuiString actionName) const
+    {
+        for (ActionOptionVector::const_iterator iter = begin; iter != end; ++iter)
+        {
+            Action* action = (*iter).first;
+            
+            if (action->getName().compare(actionName) == 0)
+                return iter;
+        }
+        return end;
+    }
+    
+    GameObject::ActionOptionVector::iterator
+        GameObject::findAction(
+            GameObject::ActionOptionVector::iterator begin,
+            GameObject::ActionOptionVector::iterator end,
+            const Action* action)
+    {
+        for (ActionOptionVector::iterator iter = begin; iter != end; ++iter)
+            if ((*iter).first == action)
+                return iter;
+
+        return end;
+    }
+
+    void GameObject::setActor(Actor* actor)
+    {
+        if (mActor != actor)
+        {
+            if (mActor != NULL)
+            {
+                mActor->setGameObject(NULL);
+                mActor->setQueryFlags(0);
+            }
+
+            if (actor != NULL)
+            {                
+                actor->setGameObject(this);
+                if (actor->isInScene())
+                {
+                    actor->setPosition(mPosition);
+                    actor->setOrientation(mOrientation);                    
+                }
+            }
+
+            mActor = actor;
+        }
+
+        if (mActor && mActor->isInScene())
+        {
+            mActor->setQueryFlags(mQueryFlags);
+        }
+    }
+
+    Actor* GameObject::getActor()
+    {
+        return mActor;
+    }
+
+    bool GameObject::isHighlightingEnabled()
+    {
+        return mHighlightingEnabled;
+    }
+
+    void GameObject::setHighlightingEnabled( bool highlightenabled )
+    {
+        // Leuchtet zur Zeit, sollte aber nicht leuchten
+        if( mActor != NULL && !highlightenabled && mActor->isHighlighted() )
+        {
+            mActor->setHighlighted( false );
+        }
+
+        mHighlightingEnabled = highlightenabled;
+    }
+
+    Action* GameObject::getDefaultAction(Creature* actor) const
+    {
+        return ActionManager::getSingleton().getAction(mDefaultAction);
+    }
+
+    void GameObject::setHighlighted(bool highlight)
+    {
+        if (mHighlightingEnabled && mActor != NULL)
+        {
+            mActor->setHighlighted(highlight, getName());
+        }
+    }
+
+    bool GameObject::isHighlighted() const
+    {
+        return mActor != NULL && mActor->isHighlighted();
+    }
+
+    void GameObject::setPosition(const Ogre::Vector3& position)
+    {
+        if (mActor != NULL)
+        {
+            mActor->setPosition(position);
+        }
+        else
+        {
+            mPosition = position;
+        }
+    }
+
+    const Ogre::Vector3& GameObject::getPosition() const
+    {
+        if (mActor != NULL)
+        {
+            return mActor->getPosition();
+        }
+        return mPosition;
+    }
+
+	Ogre::AxisAlignedBox GameObject::getWorldBoundingBox() const
+	{
+        if (mActor != NULL)
+        {
+            return mActor->getWorldBoundingBox();
+        }
+        return Ogre::AxisAlignedBox();
+	}
+
+    void GameObject::setOrientation(const Ogre::Quaternion& orientation)
+    {
+        if (mActor != NULL)
+        {
+            mActor->setOrientation(orientation);
+        }
+        else
+        {
+            mOrientation = orientation;
+        }
+    }
+
+    const Ogre::Quaternion& GameObject::getOrientation() const
+    {
+        if (mActor != NULL)
+        {
+            return mActor->getOrientation();
+        }
+        return mOrientation;
+    }
+
+    const GeometryType GameObject::getGeometryType() const
+    {
+        return mGeometryType;
+    }
+
+    void GameObject::setGeometryType(GeometryType type)
+    {
+        mGeometryType = type;
+    }
+
+    const Ogre::Real GameObject::getMass() const
+    {
+        return mMass;
+    }
+
+    void GameObject::setMass(const Ogre::Real mass)
+    {
+        mMass = mass;
+    }
+
+    void GameObject::addEffect(Effect* effect)
+	{
+		mEffectManager->addEffect(effect);
+	}
+
+    void GameObject::addEffectWithCheckTime(Effect* effect, RL_LONGLONG time)
+    {
+      addEffect(effect);
+      mEffectManager->addTimeCheck(time, effect);
+    }
+
+    void GameObject::addEffectWithCheckDate(Effect* effect, RL_LONGLONG date)
+    {
+      addEffect(effect);
+      mEffectManager->addDateCheck(date, effect);
+    }
+
+	void GameObject::_checkEffects()
+	{
+		/// @todo Nur einmal pro Aktion ausfuehren
+		mEffectManager->checkEffects();
+	}
+
+    void GameObject::removeEffect(Effect* effect)
+	{
+		mEffectManager->removeEffect(effect);
+	}
+
+    CeGuiString GameObject::getEffects()
+    {
+        return mEffectManager->getEffects();
+    }
+
+    const Property GameObject::getProperty(const CeGuiString& key) const
+    {
+        Property prop;
+        if (key == PROPERTY_POSITION)
+        {
+            prop.setValue(getPosition());
+        }
+        else if (key == PROPERTY_ORIENTATION)
+        {
+            prop.setValue(getOrientation());
+        }
+        else if (key == PROPERTY_NAME)
+        {
+            prop.setValue(mName);
+        }
+        else if (key == PROPERTY_DESCRIPTION)
+        {
+            prop.setValue(mDescription);
+        }
+        else if (key == PROPERTY_MESHFILE)
+        {
+            prop.setValue(mMeshfile);
+        }
+        else if (key == PROPERTY_GEOMETRY_TYPE)
+        {
+            prop.setValue(PhysicsManager::convertGeometryTypeToString(mGeometryType));
+        }
+        else if (key == PROPERTY_MASS)
+        {
+            prop.setValue(mMass);
+        }
+		else if (key == PROPERTY_MESHPARTS)
+		{
+			PropertyMap map;
+			for (MeshPartMap::const_iterator
+					it = mMeshParts.begin(); it != mMeshParts.end(); ++it)
+			{
+				map[(*it).first] = Property((*it).second);
+			}
+			prop.setValue(map);
+		}
+        else if (key == PROPERTY_SUBMESHPRENAME)
+        {
+            prop.setValue(mSubmeshPreName);
+        }
+        else
+        {
+            Throw(IllegalArgumentException, key + " is not a property of this gameobject ("+mName.c_str()+")");
+        }
+
+        return prop;
+    }
+
+    void GameObject::setProperty(const CeGuiString& key, const Property& value)
+    {
+        try
+        {
+            if (key == PROPERTY_POSITION)
+            {
+                setPosition(value.toVector3());
+            }
+            else if (key == PROPERTY_ORIENTATION)
+            {
+                setOrientation(value.toQuaternion());
+            }
+            else if (key == PROPERTY_NAME)
+            {
+                setName(value.toString());
+            }
+            else if (key == PROPERTY_DESCRIPTION)
+            {
+                setDescription(value.toString());
+            }
+            else if (key == PROPERTY_MESHFILE)
+            {
+                setMeshfile(value.toString());
+            }
+            else if (key == PROPERTY_MESHPARTS)
+            {
+				PropertyMap map = value.toMap();
+				for (PropertyMap::const_iterator
+					it = map.begin(); it != map.end(); ++it)
+				{
+					mMeshParts[(*it).first.c_str()] = (*it).second.toString().c_str();
+				}
+            }
+            else if (key == PROPERTY_GEOMETRY_TYPE)
+            {
+                setGeometryType(PhysicsManager::convertStringToGeometryType(value.toString().c_str()));
+            }
+            else if (key == PROPERTY_MASS)
+            {
+                Ogre::Real mass = 0.0;
+                if (value.isInt())
+                {
+                    mass = value.toInt();
+                }
+                else if (value.isReal())
+                {
+                    mass = value.toReal();
+                }
+                setMass(mass);
+            }
+            else if (key == PROPERTY_ACTIONS)
+            {
+                PropertyArray vecVal = value.toArray();
+                for (PropertyArray::const_iterator it = vecVal.begin(); it != vecVal.end(); it++)
+                {
+                    Ogre::String actionName = (*it).toString().c_str();
+                    Action* act = ActionManager::getSingleton().getAction(actionName);
+
+                    if (act != NULL)
+                    {
+                        addAction(act);
+                    }
+                    else
+                    {
+                        LOG_ERROR(Logger::RULES, "'"+actionName+"' not registered at ActionManager.");
+                    }
+                }
+            }
+            else if (key == PROPERTY_DEFAULT_ACTION)
+            {
+                mDefaultAction = value.toString().c_str();
+            }
+            else if (key == PROPERTY_SUBMESHPRENAME)
+            {
+                mSubmeshPreName = value.toString();
+            }
+            else
+            {
+                if( key != PROPERTY_BASE_CLASS && key != PROPERTY_CLASS_ID && key != PROPERTY_INHERITS)
+                    // these two keys can be ignored, they are only given to the GameObjectFactory when creating a GOF
+                {
+                    LOG_WARNING(Logger::RULES,
+						key + " is not a property of this GameObject ("+mName+")");
+                }
+            }
+        }
+        catch (WrongFormatException ex)
+        {
+            LOG_ERROR(
+                Logger::RULES,
+                "property " + key + " has the wrong format");
+        }
+    }
+
+    PropertyKeys GameObject::getAllPropertyKeys() const
+    {
+        PropertyKeys keys;
+        keys.insert(PROPERTY_NAME);
+        keys.insert(PROPERTY_DESCRIPTION);
+        if(mState == GOS_IN_SCENE)
+        {
+            keys.insert(PROPERTY_POSITION);
+            keys.insert(PROPERTY_ORIENTATION); 
+        }
+        keys.insert(PROPERTY_MESHFILE);
+        keys.insert(PROPERTY_MESHPARTS);
+        keys.insert(PROPERTY_GEOMETRY_TYPE);
+        keys.insert(PROPERTY_MASS);
+        return keys;
+    }
+
+    Actor* GameObject::createActor()
+    {
+        if (!mActor)
+        {
+            Ogre::String actorName = Ogre::StringConverter::toString(mId);
+			Actor* actor = NULL;
+
+			if (mMeshfile.empty() && mMeshParts.empty())
+			{
+				LOG_ERROR(
+					Logger::RULES,
+					"Neither mesh file nor mesh parts are set on gameobject '" + getName()
+					+ "' (id: " + getId() + "). Can't create actor!");
+			}
+			else if (!mMeshParts.empty())
+			{
+				actor = ActorManager::getSingleton().createMeshActor(
+						actorName,
+						mMeshfile.c_str(),
+						mMeshParts,
+						mGeometryType,
+						mMass);
+			}
+			else
+			{
+				actor = ActorManager::getSingleton().createMeshActor(
+						actorName,
+						mMeshfile.c_str(),
+						mGeometryType,
+						mMass);
+			}
+
+			if (actor == NULL)
+			{
+				LOG_ERROR(
+					Logger::RULES,
+					"Error creating actor '"
+					+ actorName	+ "'.");
+			}
+
+            setActor(actor);
+        }
+
+        return mActor;
+    }
+
+    void GameObject::destroyActor()
+    {
+        if (mActor != NULL)
+        {
+			Actor* actor = mActor;
+			setActor(NULL);
+            ActorManager::getSingleton().destroyActor(actor);
+		}
+    }
+
+    void GameObject::placeIntoScene()
+    {
+        setState(GOS_IN_SCENE);
+    }
+
+    void GameObject::removeFromScene()
+    {
+        setState(GOS_LOADED);
+    }
+
+    void GameObject::doPlaceIntoScene()
+    {
+        if (mState != GOS_IN_SCENE)
+        {
+            Actor* actor = createActor();
+
+            if (actor != NULL)
+            {
+                actor->placeIntoScene(mPosition, mOrientation);
+                setActor(actor);
+                mScene = CoreSubsystem::getSingleton().getCurrentScene();
+
+                // this is done in setstate now
+                //GameObjectState tmpState = mState;
+                //mState = GOS_IN_SCENE;
+                //GameObjectManager::getSingleton().gameObjectStateChanged(this, tmpState, mState);
+                //onStateChange(tmpState, GOS_IN_SCENE);
+            }
+            else {
+                LOG_ERROR(
+                    Logger::RULES,
+                    "Error placing gameobject '"
+                    + Ogre::StringConverter::toString(mId)
+                    + "' into scene "
+                    + mMeshfile);
+            }
+        }
+    }
+
+    void GameObject::doRemoveFromScene()
+    {
+        if (mState == GOS_IN_SCENE)
+        {
+            Actor* actor = mActor;
+            if (actor)
+            {
+                //mOrientation = actor->getWorldOrientation(); //Why world orientation?
+                //mPosition = actor->getWorldPosition(); //Why world position?
+
+                mOrientation = actor->getOrientation();
+                mPosition = actor->getPosition();
+
+                setActor(NULL);
+                actor->removeFromScene();
+                mScene = "";
+            }
+
+            // give the setstate function the possibility to reuse the actor
+            //ActorManager::getSingleton().destroyActor(actor);
+
+            // this is done in setstate now
+            //GameObjectState tmpState = mState;
+            //mState = GOS_LOADED;
+            //GameObjectManager::getSingleton().gameObjectStateChanged(this, tmpState, mState);
+        }
+    }
+
+    void GameObject::setState(GameObjectState targetstate)
+    {
+        if (targetstate == mState)
+        {
+            return;
+        }
+
+        GameObjectState oldState = mState;
+        onBeforeStateChange(oldState, targetstate);
+
+        if (targetstate == GOS_LOADED && mState == GOS_IN_SCENE)
+        {
+            doRemoveFromScene();
+            destroyActor();
+        }
+        else if (targetstate == GOS_IN_SCENE && mState == GOS_LOADED)
+        {
+            doPlaceIntoScene();
+        }
+        else
+        {
+            LOG_ERROR(
+                Logger::RULES,
+                "GameObject '" + getName()
+                + "' could not change state from "
+                + Ogre::StringConverter::toString(mState) + " to "
+                + Ogre::StringConverter::toString(targetstate));
+            return;
+        }
+
+        mState = targetstate;
+        onAfterStateChange(oldState, targetstate);
+        GameObjectManager::getSingleton().gameObjectStateChanged(this, oldState, targetstate);
+    }
+
+    void GameObject::onBeforeStateChange(GameObjectState oldState, GameObjectState newState)
+    {
+    }
+
+    void GameObject::onAfterStateChange(GameObjectState oldState, GameObjectState newState)
+    {
+    }
+
+    GameObjectState GameObject::getState() const
+    {
+        return mState;
+    }
+
+    unsigned long GameObject::getQueryFlags() const
+    {
+        return mQueryFlags;
+    }
+
+    void GameObject::addQueryFlag(unsigned long queryflag)
+    {
+        mQueryFlags |= queryflag;
+
+        setQueryFlags(mQueryFlags);
+    }
+
+    void GameObject::setQueryFlags(unsigned long queryflags)
+    {
+        mQueryFlags = queryflags;
+
+        if(mActor != NULL)
+        {
+            mActor->setQueryFlags(mQueryFlags);
+        }
+    }
+}

Modified: rl/branches/newton20/engine/rules/src/GoToJob.cpp
===================================================================
--- rl/branches/newton20/engine/rules/src/GoToJob.cpp	2008-10-01 16:22:07 UTC (rev 4538)
+++ rl/branches/newton20/engine/rules/src/GoToJob.cpp	2008-10-01 16:51:11 UTC (rev 4539)
@@ -18,6 +18,8 @@
 
 #include "GoToJob.h"
 
+#include "Creature.h"
+#include "CreatureController.h"
 #include "CreatureControllerManager.h"
 #include "MathUtil.h"
 

Modified: rl/branches/newton20/engine/rules/src/Makefile.am
===================================================================
--- rl/branches/newton20/engine/rules/src/Makefile.am	2008-10-01 16:22:07 UTC (rev 4538)
+++ rl/branches/newton20/engine/rules/src/Makefile.am	2008-10-01 16:51:11 UTC (rev 4539)
@@ -23,6 +23,7 @@
 	EffectManager.cpp \
 	Eigenschaft.cpp \
 	EigenschaftenStateSet.cpp \
+	FetchItemJob.cpp \
 	GameEventLog.cpp \
 	GameObject.cpp \
 	GameObjectManager.cpp \

Modified: rl/branches/newton20/engine/rules/src/PartyManager.cpp
===================================================================
--- rl/branches/newton20/engine/rules/src/PartyManager.cpp	2008-10-01 16:22:07 UTC (rev 4538)
+++ rl/branches/newton20/engine/rules/src/PartyManager.cpp	2008-10-01 16:51:11 UTC (rev 4539)
@@ -28,18 +28,21 @@
 namespace rl
 {
     
-	PartyManager::PartyManager() : mActiveCharacter(NULL)
+	PartyManager::PartyManager()
+		: mActiveCharacter(NULL)
     {
         ///@todo watch characters for death, trigger game over if no-one is left
+        LOG_MESSAGE("PartyManager", "Register message handler");
         mLifeStateChangeConnection =
             MessagePump::getSingleton().addMessageHandler<MessageType_GameObjectLifeStateChanged>(
                 boost::bind(&PartyManager::onGameObjectLifeStateChanged, this, _1, _2, _3));
     }
-    
+
     void PartyManager::addCharacter(Creature* character)
     {
         mParty.push_back(character);
-        ///@todo send message
+        MessagePump::getSingleton().sendMessage<MessageType_PlayerCharRemoved>(
+			character);
         
         if (mActiveCharacter == NULL)
         {
@@ -54,9 +57,10 @@
         {
             if (*it == character)
             {
-                ///@todo send message
                 mParty.erase(it);
-                break;
+                MessagePump::getSingleton().sendMessage<MessageType_PlayerCharRemoved>(
+					character);
+				break;
             }
         }
         checkParty();
@@ -89,9 +93,9 @@
     
     bool PartyManager::isInParty(Creature* creature) const
     {
-        for (int i = 0; i < mParty.size(); ++i)
+		for (Party::const_iterator it = mParty.begin(); it != mParty.end(); ++it)
         {
-            if (mParty[i] == creature)
+            if (*it == creature)
             {
                 return true;
             }

Modified: rl/branches/newton20/engine/script/swig/RlRules.head.swig
===================================================================
--- rl/branches/newton20/engine/script/swig/RlRules.head.swig	2008-10-01 16:22:07 UTC (rev 4538)
+++ rl/branches/newton20/engine/script/swig/RlRules.head.swig	2008-10-01 16:51:11 UTC (rev 4539)
@@ -31,6 +31,7 @@
 #include "Effect.h"
 #include "EffectFactory.h"
 #include "EigenschaftenStateSet.h"
+#include "FetchItemJob.h"
 #include "GameEventLog.h"
 #include "GameObject.h"
 #include "GameObjectManager.h"

Modified: rl/branches/newton20/engine/script/swig/RlRules.swig
===================================================================
--- rl/branches/newton20/engine/script/swig/RlRules.swig	2008-10-01 16:22:07 UTC (rev 4538)
+++ rl/branches/newton20/engine/script/swig/RlRules.swig	2008-10-01 16:51:11 UTC (rev 4539)
@@ -455,6 +455,14 @@
 		//GoToJob(rl::Creature* actor, rl::GameObject* target, Ogre::Real maxDistance, Ogre::Real duration);
     };
     
+    /// A rl#Job to fetch an item
+    class FetchItemJob : public Job
+    {
+    public:
+
+		FetchItemJob(rl::Creature* actor, rl::Item* item, const Ogre::String& targetSlot, Ogre::Real duration);
+    };
+    
     %feature("director") Item;
     class Item : public rl::GameObject {
     public:

Modified: rl/branches/newton20/engine/ui/RlUI2005.vcproj
===================================================================
--- rl/branches/newton20/engine/ui/RlUI2005.vcproj	2008-10-01 16:22:07 UTC (rev 4538)
+++ rl/branches/newton20/engine/ui/RlUI2005.vcproj	2008-10-01 16:51:11 UTC (rev 4539)
@@ -476,6 +476,10 @@
 					>
 				</File>
 				<File
+					RelativePath=".\include\GameOverWindow.h"
+					>
+				</File>
+				<File
 					RelativePath=".\include\GameSaveLoadWindow.h"
 					>
 				</File>
@@ -717,6 +721,10 @@
 					>
 				</File>
 				<File
+					RelativePath=".\src\GameOverWindow.cpp"
+					>
+				</File>
+				<File
 					RelativePath=".\src\GameSaveLoadWindow.cpp"
 					>
 				</File>



From melven at mail.berlios.de  Wed Oct  1 18:22:13 2008
From: melven at mail.berlios.de (melven at mail.berlios.de)
Date: Wed, 1 Oct 2008 18:22:13 +0200
Subject: [Dsa-hl-svn] r4538 - in rl/branches/newton20/engine: core/include
	core/src script/src ui/src
Message-ID: <200810011622.m91GMDDY006425@sheep.berlios.de>

Author: melven
Date: 2008-10-01 18:22:07 +0200 (Wed, 01 Oct 2008)
New Revision: 4538

Modified:
   rl/branches/newton20/engine/core/include/PhysicsManager.h
   rl/branches/newton20/engine/core/src/CoreSubsystem.cpp
   rl/branches/newton20/engine/core/src/DotSceneLoader.cpp
   rl/branches/newton20/engine/core/src/PhysicalThing.cpp
   rl/branches/newton20/engine/core/src/PhysicsManager.cpp
   rl/branches/newton20/engine/script/src/EntityNodeProcessor.cpp
   rl/branches/newton20/engine/ui/src/MovementControlState.cpp
Log:
- optmize OgreNewt::TreeCollision when created (this was deactived before, why?)
- physics debugging can now be updated every frame:
  press l once: show physical bodies at this point in time
  press l again: update the debugging-lines every frame


Modified: rl/branches/newton20/engine/core/include/PhysicsManager.h
===================================================================
--- rl/branches/newton20/engine/core/include/PhysicsManager.h	2008-10-01 16:14:19 UTC (rev 4537)
+++ rl/branches/newton20/engine/core/include/PhysicsManager.h	2008-10-01 16:22:07 UTC (rev 4538)
@@ -137,8 +137,8 @@
 		/// Komplette Levelgeometrie aufl?sen
 		void clearLevelGeometry();
 		
-		void toggleDebugMode();
-        bool isDebugMode() const;
+	void toggleDebugMode();
+        int isDebugMode() const;
 
         // Newton callbacks ...
         /// generic force callback. Gravity is applied and the force,
@@ -305,7 +305,8 @@
         OgreNewt::World* mWorld;
         //! the visualisation for physical behaviour (actually not the best)
         OgreNewt::Debugger* mNewtonDebugger;
-        bool mDebugMode;
+        //! debug mode: 0 no debugging, 1 show debug lines (freezed state), 2 show debug lines (update every frame)
+        int mDebugMode;
 
         //! factory for creating new collision primitives
         PhysicsCollisionFactory* mPhysicsCollisionFactory;

Modified: rl/branches/newton20/engine/core/src/CoreSubsystem.cpp
===================================================================
--- rl/branches/newton20/engine/core/src/CoreSubsystem.cpp	2008-10-01 16:14:19 UTC (rev 4537)
+++ rl/branches/newton20/engine/core/src/CoreSubsystem.cpp	2008-10-01 16:22:07 UTC (rev 4538)
@@ -283,7 +283,7 @@
         mWorld = new DotSceneOctreeWorld();
         mActorManager->setWorld(mWorld);
 
-        mPhysicsManager = new PhysicsManager();
+        mPhysicsManager = new PhysicsManager();  // the World needs to be initialized before!
         GameLoop::getSingleton().addTask(mPhysicsManager, GameLoop::TG_PHYSICS);
         LOG_MESSAGE(Logger::CORE,"PhysicsManager erzeugt");
 

Modified: rl/branches/newton20/engine/core/src/DotSceneLoader.cpp
===================================================================
--- rl/branches/newton20/engine/core/src/DotSceneLoader.cpp	2008-10-01 16:14:19 UTC (rev 4537)
+++ rl/branches/newton20/engine/core/src/DotSceneLoader.cpp	2008-10-01 16:22:07 UTC (rev 4538)
@@ -874,7 +874,7 @@
                 else if (physical_body.compare("mesh") == 0 || physical_body.compare("auto"))
                 {
                     collision = OgreNewt::CollisionPtr(new OgreNewt::CollisionPrimitives::TreeCollision(
-                                    thisWorld, newEnt, false));
+                                    thisWorld, newEnt, true));
                     LOG_DEBUG(Logger::CORE, " physical_body 'mesh' f?r Entity '"+entName+"' erstellt. ");
                 }
                 else

Modified: rl/branches/newton20/engine/core/src/PhysicalThing.cpp
===================================================================
--- rl/branches/newton20/engine/core/src/PhysicalThing.cpp	2008-10-01 16:14:19 UTC (rev 4537)
+++ rl/branches/newton20/engine/core/src/PhysicalThing.cpp	2008-10-01 16:22:07 UTC (rev 4538)
@@ -299,7 +299,7 @@
 		else if (mGeometryType == GT_MESH)
 		{
 	        CollisionPtr collision(new TreeCollision(
-				PhysicsManager::getSingleton()._getNewtonWorld(), entity, false));
+				PhysicsManager::getSingleton()._getNewtonWorld(), entity, true));
 		    mBody->setCollision(collision);
 		}
 

Modified: rl/branches/newton20/engine/core/src/PhysicsManager.cpp
===================================================================
--- rl/branches/newton20/engine/core/src/PhysicsManager.cpp	2008-10-01 16:14:19 UTC (rev 4537)
+++ rl/branches/newton20/engine/core/src/PhysicsManager.cpp	2008-10-01 16:22:07 UTC (rev 4538)
@@ -101,6 +101,7 @@
 
         mNewtonDebugger->setMaterialColor(getMaterialID("level"), Ogre::ColourValue::Blue);
 
+
         // below here starts 'old' stale fix code that should be removed
 
         // setup level quadtree extents
@@ -132,6 +133,8 @@
         }
         mMaterials.clear();
 
+        mNewtonDebugger->deInit();
+
         delete mPhysicsCollisionFactory;
         delete mGenericCallback;
         delete mWorld;
@@ -192,6 +195,10 @@
                     newtonPerBodyLogProperties(body);
 #endif
         }
+
+
+        if( mDebugMode == 2 )
+            mNewtonDebugger->showDebugInformation(mWorld);
     }
 
 #ifdef _DEBUG
@@ -274,31 +281,27 @@
         mEnabled = enabled;
     }
 
-    bool PhysicsManager::isDebugMode() const
+    int PhysicsManager::isDebugMode() const
     {
         return mDebugMode;
     }
 
     void PhysicsManager::toggleDebugMode()
     {
-        if (mDebugMode)
-		{
-            mNewtonDebugger->hideLines();
-		}
-        else
+        mDebugMode = (mDebugMode+1)%3;
+        switch(mDebugMode)
         {
-            mNewtonDebugger = &OgreNewt::Debugger::getSingleton();
-
-			try
-			{
-				mNewtonDebugger->init(
-					CoreSubsystem::getSingleton().getWorld()->getSceneManager());
-			}
-			catch(Ogre::Exception) {}
-
-            mNewtonDebugger->showLines(mWorld);
+            case 0:
+                mNewtonDebugger->hideDebugInformation();
+                break;
+            case 1:
+	        mNewtonDebugger->init(CoreSubsystem::getSingleton().getWorld()->getSceneManager());
+                mNewtonDebugger->showDebugInformation(mWorld);
+                break;
+            default:
+	        mNewtonDebugger->init(CoreSubsystem::getSingleton().getWorld()->getSceneManager());
+                break;
         }
-        mDebugMode = !mDebugMode;
     }
 
     void PhysicsManager::addLevelGeometry( Ogre::Entity* levelEntity, const std::vector<OgreNewt::CollisionPtr> &collisions)
@@ -308,14 +311,24 @@
 
         SceneNode* node = levelEntity->getParentSceneNode();
         //Level entity has to be attached to a scene node.
+        
 
-        for( size_t i = 0; i < collisions.size(); i++)
+        // try one compound collision for the entity if there are several collisions
+        OgreNewt::CollisionPtr collision(NULL);
+        switch( collisions.size() )
         {
-		    if( collisions[i] == NULL )
-                continue;
+            case 0:
+                break;
+            case 1:
+                collision = collisions[0];
+                break;
+            default:
+                collision = new OgreNewt::CollisionPrimitives::CompoundCollision(mWorld, collisions);
+                break;
+        }
 
-            OgreNewt::CollisionPtr collision = collisions[i];
-
+        if( collision )
+        {
             OgreNewt::Body* body = new OgreNewt::Body(mWorld, collision );
 
 
@@ -324,7 +337,7 @@
                 node->getWorldOrientation());
             body->setMaterialGroupID(getMaterialID("level"));
 
-			mLevelBodiesQuadTree.add(body);
+            mLevelBodiesQuadTree.add(body);
             //mLevelBodies.push_back(body);
         }
 
@@ -846,7 +859,7 @@
 
             rval = CollisionPtr(new OgreNewt::CollisionPrimitives::TreeCollision(
                 PhysicsManager::getSingleton()._getNewtonWorld(),
-                entity, false/*, true */ ));
+                entity, true ));
         }
         else
         {
@@ -1039,6 +1052,5 @@
         }
         return rval;
     }
-
 }
 

Modified: rl/branches/newton20/engine/script/src/EntityNodeProcessor.cpp
===================================================================
--- rl/branches/newton20/engine/script/src/EntityNodeProcessor.cpp	2008-10-01 16:14:19 UTC (rev 4537)
+++ rl/branches/newton20/engine/script/src/EntityNodeProcessor.cpp	2008-10-01 16:22:07 UTC (rev 4538)
@@ -256,7 +256,7 @@
                 else if (physicsProxyType == "mesh" || physicsProxyType == "auto")
                 {
                     collision = OgreNewt::CollisionPtr(new OgreNewt::CollisionPrimitives::TreeCollision(
-                                    thisWorld, entity, false));
+                                    thisWorld, entity, true));
                     LOG_DEBUG(Logger::RULES, "Created physics proxy type 'mesh' for entity '"+entity->getName()+"'.");
                 }
                 else

Modified: rl/branches/newton20/engine/ui/src/MovementControlState.cpp
===================================================================
--- rl/branches/newton20/engine/ui/src/MovementControlState.cpp	2008-10-01 16:14:19 UTC (rev 4537)
+++ rl/branches/newton20/engine/ui/src/MovementControlState.cpp	2008-10-01 16:22:07 UTC (rev 4538)
@@ -1012,7 +1012,7 @@
                 CollisionFound = true;
                 Real hitBodyVel = info.mBody->getVelocity().dotProduct(diff.normalisedCopy());
                 hitBodyVel = std::min(0.0f, hitBodyVel); // if the body moves, try to avoid it
-                Real dist = std::max(info.mDistance + (hitBodyVel*timestep - 0.1)/diff.length(), 0.0);
+                Real dist = std::max(info.mDistance + (hitBodyVel*timestep - 0.01)/diff.length(), 0.0);
                 diff *= dist;
 
                 mLastCameraCollision = 0;



From melven at mail.berlios.de  Wed Oct  1 18:14:22 2008
From: melven at mail.berlios.de (melven at mail.berlios.de)
Date: Wed, 1 Oct 2008 18:14:22 +0200
Subject: [Dsa-hl-svn] r4537 - in dependencies/OgreNewt_ngt: inc src
Message-ID: <200810011614.m91GEM02005404@sheep.berlios.de>

Author: melven
Date: 2008-10-01 18:14:19 +0200 (Wed, 01 Oct 2008)
New Revision: 4537

Modified:
   dependencies/OgreNewt_ngt/inc/OgreNewt_Debugger.h
   dependencies/OgreNewt_ngt/inc/OgreNewt_Tools.h
   dependencies/OgreNewt_ngt/src/OgreNewt_BasicFrameListener.cpp
   dependencies/OgreNewt_ngt/src/OgreNewt_Debugger.cpp
   dependencies/OgreNewt_ngt/src/OgreNewt_Tools.cpp
Log:
improved debugging, the debug lines can now be updated every frame and an informative text (mass, position, velocity...) is shown above each body


Modified: dependencies/OgreNewt_ngt/inc/OgreNewt_Debugger.h
===================================================================
--- dependencies/OgreNewt_ngt/inc/OgreNewt_Debugger.h	2008-09-29 15:43:00 UTC (rev 4536)
+++ dependencies/OgreNewt_ngt/inc/OgreNewt_Debugger.h	2008-10-01 16:14:19 UTC (rev 4537)
@@ -15,6 +15,8 @@
 #include <Ogre.h>
 #include <Newton.h>
 #include "OgreNewt_World.h"
+#include "OgreNewt_Body.h"
+#include "OgreNewt_Tools.h"
 
 namespace OgreNewt
 {
@@ -43,13 +45,13 @@
 
 		//! show the newton world
 		/*!
-			Draws the Newton world as 3D lines.
+			Draws the Newton world as 3D lines with informative text above each body
 			\param world pointer to the OgreNewt::World
 		*/
-		void showLines( OgreNewt::World* world );
+		void showDebugInformation( OgreNewt::World* world );
 
-		//! remove lines drawn.
-		void hideLines();
+		//! remove lines and text drawn
+		void hideDebugInformation();
 	
         //! set default color
         void setDefaultColor(Ogre::ColourValue col);
@@ -62,12 +64,23 @@
 	
 	private:
 		Ogre::SceneNode*		m_debugnode;
-		Ogre::ManualObject*		m_debuglines;
         typedef std::map<int, Ogre::ColourValue> MaterialIdColorMap;
         MaterialIdColorMap      m_materialcolors;
         Ogre::ColourValue       m_defaultcolor;
 
+        struct BodyDebugData
+        {
+            BodyDebugData() : m_lastcol(NULL), m_node(NULL), m_lines(NULL), m_text(NULL), m_updated(false) {}
+            const Collision* m_lastcol;
+            Ogre::SceneNode* m_node;
+            Ogre::ManualObject* m_lines;
+            OgreNewt::OgreAddons::MovableText* m_text;
+            int m_updated;
+        };            
+        typedef std::map<OgreNewt::Body*, BodyDebugData> BodyDebugDataMap;
+        BodyDebugDataMap m_cachemap;
 
+
 		static void newtonPerBody( const NewtonBody* body );
 		static void _CDECL newtonPerPoly( void* userData, int vertexCount, const float* faceVertec, int id );
 	};

Modified: dependencies/OgreNewt_ngt/inc/OgreNewt_Tools.h
===================================================================
--- dependencies/OgreNewt_ngt/inc/OgreNewt_Tools.h	2008-09-29 15:43:00 UTC (rev 4536)
+++ dependencies/OgreNewt_ngt/inc/OgreNewt_Tools.h	2008-10-01 16:14:19 UTC (rev 4537)
@@ -13,6 +13,8 @@
 
 
 #include <Ogre.h>
+#include <OgreMovableObject.h>
+#include <OgreRenderable.h>
 #include <Newton.h>
 #include "OgreNewt_World.h"
 #include "OgreNewt_Collision.h"
@@ -175,6 +177,115 @@
 	
 	}	// end namespace SPRINGS
 
+        namespace OgreAddons
+        {
+            /**
+            * File: MovableText.h
+            *
+            * description: This create create a billboarding object that display a text.
+            * 
+            * @author  2003 by cTh see gavocanov at rambler.ru
+            * @update  2006 by barraq see nospam at barraquand.com
+            */
+
+
+            using namespace Ogre;
+
+            class MovableText : public MovableObject, public Renderable
+            {
+                /******************************** MovableText data ****************************/
+            public:
+                enum HorizontalAlignment    {H_LEFT, H_CENTER};
+                enum VerticalAlignment      {V_BELOW, V_ABOVE, V_CENTER};
+            
+            protected:
+                String          mFontName;
+                String          mType;
+                String          mName;
+                String          mCaption;
+                HorizontalAlignment mHorizontalAlignment;
+                VerticalAlignment   mVerticalAlignment;
+            
+                ColourValue     mColor;
+                RenderOperation mRenderOp;
+                AxisAlignedBox  mAABB;
+                LightList       mLList;
+            
+                Real            mCharHeight;
+                Real            mSpaceWidth;
+            
+                bool            mNeedUpdate;
+                bool            mUpdateColors;
+                bool            mOnTop;
+            
+                Real            mTimeUntilNextToggle;
+                Real            mRadius;
+            
+                Vector3            mGlobalTranslation;
+                Vector3            mLocalTranslation;
+            
+                Camera          *mpCam;
+                RenderWindow    *mpWin;
+                Font            *mpFont;
+                MaterialPtr     mpMaterial;
+                MaterialPtr     mpBackgroundMaterial;
+            
+                /******************************** public methods ******************************/
+            public:
+                MovableText(const String &name, const String &caption, const String &fontName, Real charHeight, const ColourValue &color = ColourValue::White);
+                virtual ~MovableText();
+            
+                // Set settings
+                void    setFontName(const String &fontName);
+                void    setCaption(const String &caption);
+                void    setColor(const ColourValue &color);
+                void    setCharacterHeight(Real height);
+                void    setSpaceWidth(Real width);
+                void    setTextAlignment(const HorizontalAlignment& horizontalAlignment, const VerticalAlignment& verticalAlignment);
+                void    setGlobalTranslation( Vector3 trans );
+                void    setLocalTranslation( Vector3 trans );
+                void    showOnTop(bool show=true);
+            
+                // Get settings
+                const   String          &getFontName() const {return mFontName;}
+                const   String          &getCaption() const {return mCaption;}
+                const   ColourValue     &getColor() const {return mColor;}
+                
+                Real    getCharacterHeight() const {return mCharHeight;}
+                Real    getSpaceWidth() const {return mSpaceWidth;}
+                Vector3    getGlobalTranslation() const {return mGlobalTranslation;}
+                Vector3    getLocalTranslation() const {return mLocalTranslation;}
+                bool    getShowOnTop() const {return mOnTop;}
+                AxisAlignedBox          GetAABB(void) { return mAABB; }
+            
+                /******************************** protected methods and overload **************/
+            protected:
+            
+                // from MovableText, create the object
+                void    _setupGeometry();
+                void    _updateColors();
+            
+                // from MovableObject
+                void    getWorldTransforms(Matrix4 *xform) const;
+                Real    getBoundingRadius(void) const {return mRadius;};
+                Real    getSquaredViewDepth(const Camera *cam) const {return 0;};
+                const   Quaternion        &getWorldOrientation(void) const;
+                const   Vector3           &getWorldPosition(void) const;
+                const   AxisAlignedBox    &getBoundingBox(void) const {return mAABB;};
+                const   String            &getName(void) const {return mName;};
+                const   String            &getMovableType(void) const {static Ogre::String movType = "MovableText"; return movType;};
+            
+                void    _notifyCurrentCamera(Camera *cam);
+                void    _updateRenderQueue(RenderQueue* queue);
+            
+                // from renderable
+                void    getRenderOperation(RenderOperation &op);
+                const   MaterialPtr       &getMaterial(void) const {assert(!mpMaterial.isNull());return mpMaterial;};
+                const   LightList         &getLights(void) const {return mLList;};
+            };
+
+        }
+
 }	// end NAMESPACE OgreNewt
 
 #endif

Modified: dependencies/OgreNewt_ngt/src/OgreNewt_BasicFrameListener.cpp
===================================================================
--- dependencies/OgreNewt_ngt/src/OgreNewt_BasicFrameListener.cpp	2008-09-29 15:43:00 UTC (rev 4536)
+++ dependencies/OgreNewt_ngt/src/OgreNewt_BasicFrameListener.cpp	2008-10-01 16:14:19 UTC (rev 4537)
@@ -83,11 +83,11 @@
 
 	if (mKeyboard->isKeyDown(OIS::KC_F3))
 	{
-		Debugger::getSingleton().showLines( m_World );
+		Debugger::getSingleton().showDebugInformation( m_World );
 	}
 	else
 	{
-		Debugger::getSingleton().hideLines();
+		Debugger::getSingleton().hideDebugInformation();
 	}
 
 	

Modified: dependencies/OgreNewt_ngt/src/OgreNewt_Debugger.cpp
===================================================================
--- dependencies/OgreNewt_ngt/src/OgreNewt_Debugger.cpp	2008-09-29 15:43:00 UTC (rev 4536)
+++ dependencies/OgreNewt_ngt/src/OgreNewt_Debugger.cpp	2008-10-01 16:14:19 UTC (rev 4537)
@@ -1,4 +1,5 @@
 #include "OgreNewt_Debugger.h"
+#include <sstream>
 
 namespace OgreNewt
 {
@@ -8,61 +9,72 @@
 //////////////////////////////////////////////////////////
 Debugger::Debugger()
 {
-	m_debuglines = NULL;
-	m_debugnode = NULL;
+    m_debugnode = NULL;
     m_defaultcolor = Ogre::ColourValue::White;
 }
 
 Debugger::~Debugger()
 {
-	Debugger::getSingleton().deInit();
+    Debugger::getSingleton().deInit();
 }
 
 Debugger& Debugger::getSingleton()
 {
-	static Debugger instance;
-	return instance;
+    static Debugger instance;
+    return instance;
 }
 		
 void Debugger::init( Ogre::SceneManager* smgr )
 {
-	m_debugnode = smgr->getRootSceneNode()->createChildSceneNode("__OgreNewt__Debugger__");
-	m_debuglines = NULL;
-	m_debuglines = new Ogre::ManualObject("__OgreNewt__Debugger__");
+    if( !m_debugnode )
+    {
+        m_debugnode = smgr->getRootSceneNode()->createChildSceneNode("__OgreNewt__Debugger__Node__");
+        //m_debuglines = new Ogre::ManualObject("__OgreNewt__Debugger__Lines__");
+    }
 }
 
 void Debugger::deInit()
 {
 	if (m_debugnode)
 	{
-		m_debugnode->detachAllObjects();
-		if (m_debuglines) { delete m_debuglines; m_debuglines = NULL; }
+		m_debugnode->removeAndDestroyAllChildren();
 		m_debugnode->getParentSceneNode()->removeAndDestroyChild( m_debugnode->getName() );
 		m_debugnode = NULL;
 	}
+
+        for(BodyDebugDataMap::iterator it = m_cachemap.begin(); it != m_cachemap.end(); it++)
+        {
+            Ogre::ManualObject* mo = it->second.m_lines;
+            if( mo )
+                delete mo;
+        }
+        m_cachemap.clear();
 }
 
 
-void Debugger::showLines( OgreNewt::World* world )
+void Debugger::showDebugInformation( OgreNewt::World* world )
 {
-	m_debugnode->detachAllObjects();
-	m_debuglines->clear();
-	m_debuglines->begin("BaseWhiteNoLighting", Ogre::RenderOperation::OT_LINE_LIST );
+    m_debugnode->removeAllChildren();
 
     // make the new lines.
     for( const NewtonBody* body = NewtonWorldGetFirstBody(world->getNewtonWorld()); body; body = NewtonWorldGetNextBody(world->getNewtonWorld(), body) )
         newtonPerBody(body);
 
-    m_debuglines->end();
-	m_debugnode->attachObject(m_debuglines); 
-	
+
+    // delete old entries
+    BodyDebugDataMap newmap;
+    for(BodyDebugDataMap::iterator it = Debugger::getSingleton().m_cachemap.begin(); it != Debugger::getSingleton().m_cachemap.end(); it++)
+    {
+        if( it->second.m_updated )
+            newmap.insert(*it);
+    }
+    Debugger::getSingleton().m_cachemap.swap(newmap);
 }
 
-void Debugger::hideLines()
+void Debugger::hideDebugInformation()
 {
 	// erase any existing lines!
-	m_debugnode->detachAllObjects();
-	m_debuglines->clear(); 
+	m_debugnode->removeAllChildren();
 }
 
 void Debugger::setMaterialColor(const MaterialID* mat, Ogre::ColourValue col)
@@ -81,29 +93,115 @@
     MaterialIdColorMap::iterator it = 
         debugger.m_materialcolors.find( NewtonBodyGetMaterialGroupID(body) );
 
-    if( it != debugger.m_materialcolors.end() )
-        debugger.m_debuglines->colour(it->second);
+
+    Body *bod = (OgreNewt::Body*)NewtonBodyGetUserData(body);
+    Ogre::Vector3 pos;
+    Ogre::Quaternion ori;
+    bod->getPositionOrientation(pos, ori);
+
+
+    // ----------- create debug-text ------------
+    std::ostringstream oss_name;
+    oss_name << "__OgreNewt__Debugger__Body__" << bod << "__";
+    std::ostringstream oss_info;
+    oss_info.precision(2);
+    oss_info.setf(std::ios::fixed,std::ios::floatfield);
+    Ogre::Vector3 inertia;
+    Ogre::Real mass;
+    bod->getMassMatrix(mass, inertia);
+    oss_info << "mass: " << mass << std::endl << "inertia: " << inertia << std::endl;
+    oss_info << "pos: " << pos << std::endl << "ori: " << ori << std::endl;
+    oss_info << "vel: " << bod->getVelocity() << std::endl << "omega: " << bod->getOmega() << std::endl;
+    // ----------- ------------------ ------------
+
+
+
+    // look for cached data
+    BodyDebugData* data = &Debugger::getSingleton().m_cachemap[bod];
+    if( data->m_lastcol == bod->getCollision() ) // use cached data
+    {
+        // set new position...
+        data->m_node->setPosition(pos);
+        data->m_node->setOrientation(ori);
+        data->m_updated = 1;
+        Debugger::getSingleton().m_debugnode->addChild(data->m_node);
+        data->m_text->setCaption(oss_info.str());
+        data->m_text->setLocalTranslation(bod->getAABB().getSize().y*1.1*Ogre::Vector3::UNIT_Y);
+    }
     else
-        debugger.m_debuglines->colour(debugger.m_defaultcolor);
+    {
+        data->m_lastcol = bod->getCollision();
+        data->m_updated = 1;
 
-    float matrix[16];
-    NewtonBodyGetMatrix(body, &matrix[0]);
-    NewtonCollisionForEachPolygonDo( NewtonBodyGetCollision(body), &matrix[0], newtonPerPoly, NULL );
+        if( data->m_node )
+        {
+            data->m_node->detachAllObjects();
+            data->m_node->setPosition(pos);
+            data->m_node->setOrientation(ori);
+        }
+        else
+            data->m_node = Debugger::getSingleton().m_debugnode->createChildSceneNode(pos, ori);
+
+        if( data->m_lines )
+            data->m_lines->clear();
+        else
+        {
+            std::ostringstream oss;
+            oss << "__OgreNewt__Debugger__Lines__" << body << "__";
+            data->m_lines = new Ogre::ManualObject(oss.str());
+        }
+
+        if( data->m_text )
+        {
+            data->m_text->setCaption(oss_info.str());
+            data->m_text->setLocalTranslation(bod->getAABB().getMaximum().y*1.1*Ogre::Vector3::UNIT_Y);
+        }
+        else
+        {
+            data->m_text = new OgreNewt::OgreAddons::MovableText( oss_name.str(), oss_info.str(), "VeraSerifBold-16",0.2);
+            data->m_text->setLocalTranslation(bod->getAABB().getMaximum().y/2*Ogre::Vector3::UNIT_Y+Ogre::Vector3::UNIT_Y*0.1);
+            data->m_text->setTextAlignment( OgreNewt::OgreAddons::MovableText::H_LEFT, OgreNewt::OgreAddons::MovableText::V_ABOVE );
+        }
+        data->m_node->attachObject(data->m_text);
+        
+
+
+        data->m_lines->begin("BaseWhiteNoLighting", Ogre::RenderOperation::OT_LINE_LIST );
+
+        // set color
+        if( it != debugger.m_materialcolors.end() )
+            data->m_lines->colour(it->second);
+        else
+            data->m_lines->colour(debugger.m_defaultcolor);
+
+        float matrix[16];
+        Converters::QuatPosToMatrix(Ogre::Quaternion::IDENTITY, Ogre::Vector3::ZERO, &matrix[0]);
+        
+        NewtonCollisionForEachPolygonDo( NewtonBodyGetCollision(body), &matrix[0], newtonPerPoly, data );
+        
+        data->m_lines->end();
+        data->m_node->attachObject(data->m_lines);
+    }
 }
 
 void _CDECL Debugger::newtonPerPoly( void* userData, int vertexCount, const float* faceVertec, int id )
 {
+        BodyDebugData* data = (BodyDebugData*)userData;
 	Ogre::Vector3 p0, p1;
 
+        if( vertexCount < 2 )
+            return;
+
 	int i= vertexCount - 1;
 	p0 = Ogre::Vector3( faceVertec[(i*3) + 0], faceVertec[(i*3) + 1], faceVertec[(i*3) + 2] );
 
+
 	for (i=0;i<vertexCount;i++)
 	{
 		p1 = Ogre::Vector3( faceVertec[(i*3) + 0], faceVertec[(i*3) + 1], faceVertec[(i*3) + 2] );
 
-		Debugger::getSingleton().m_debuglines->position( p0 );
-		Debugger::getSingleton().m_debuglines->position( p1 );
+		data->m_lines->position( p0 );
+		data->m_lines->position( p1 );
 
 		p0 = p1;
 	}

Modified: dependencies/OgreNewt_ngt/src/OgreNewt_Tools.cpp
===================================================================
--- dependencies/OgreNewt_ngt/src/OgreNewt_Tools.cpp	2008-09-29 15:43:00 UTC (rev 4536)
+++ dependencies/OgreNewt_ngt/src/OgreNewt_Tools.cpp	2008-10-01 16:14:19 UTC (rev 4537)
@@ -1,6 +1,6 @@
 #include "OgreNewt_Tools.h"
 #include <iostream>
-using namespace std;
+#include <OgreFontManager.h>
 
 namespace OgreNewt
 {
@@ -190,5 +190,542 @@
 		}
 	}
 
+
+        namespace OgreAddons
+        {
+            /**
+             * File: MovableText.cpp
+             *
+             * description: This create create a billboarding object that display a text.
+             * 
+             * @author  2003 by cTh see gavocanov at rambler.ru
+             * @update  2006 by barraq see nospam at barraquand.com
+            */
+
+
+            using namespace Ogre;
+
+            const unsigned short POS_TEX_BINDING = 0;
+            const unsigned short COLOUR_BINDING = 1;
+
+            MovableText::MovableText(const String &name, const String &caption, const String &fontName, Real charHeight, const ColourValue &color)
+                : mpCam(NULL)
+                  , mpWin(NULL)
+                  , mpFont(NULL)
+                  , mName(name)
+                  , mCaption(caption)
+                  , mFontName(fontName)
+                  , mCharHeight(charHeight)
+                  , mColor(color)
+                  , mType("MovableText")
+                  , mTimeUntilNextToggle(0)
+                  , mSpaceWidth(0)
+                  , mUpdateColors(true)
+                  , mOnTop(false)
+                  , mHorizontalAlignment(H_LEFT)
+                  , mVerticalAlignment(V_BELOW)
+                  , mGlobalTranslation(0.0)
+                  , mLocalTranslation(0.0)
+            {
+                if (name == "")
+                    throw Exception(Exception::ERR_INVALIDPARAMS, "Trying to create MovableText without name", "MovableText::MovableText");
+
+                if (caption == "")
+                    throw Exception(Exception::ERR_INVALIDPARAMS, "Trying to create MovableText without caption", "MovableText::MovableText");
+
+                mRenderOp.vertexData = NULL;
+                this->setFontName(mFontName);
+                this->_setupGeometry();
+            }
+
+            MovableText::~MovableText()
+            {
+                if (mRenderOp.vertexData)
+                    delete mRenderOp.vertexData;
+                // May cause crashing... check this and comment if it does
+                if (!mpMaterial.isNull())
+                    MaterialManager::getSingletonPtr()->remove(mpMaterial->getName());
+            }
+
+            void MovableText::setFontName(const String &fontName)
+            {
+                if((Ogre::MaterialManager::getSingletonPtr()->resourceExists(mName + "Material"))) 
+                { 
+                    Ogre::MaterialManager::getSingleton().remove(mName + "Material"); 
+                }
+
+                if (mFontName != fontName || mpMaterial.isNull() || !mpFont)
+                {
+                    mFontName = fontName;
+                    mpFont = (Font *)FontManager::getSingleton().getByName(mFontName).getPointer();
+                    if (!mpFont)
+                        throw Exception(Exception::ERR_ITEM_NOT_FOUND, "Could not find font " + fontName, "MovableText::setFontName");
+
+                    mpFont->load();
+                    if (!mpMaterial.isNull())
+                    {
+                        MaterialManager::getSingletonPtr()->remove(mpMaterial->getName());
+                        mpMaterial.setNull();
+                    }
+
+                    mpMaterial = mpFont->getMaterial()->clone(mName + "Material");
+                    if (!mpMaterial->isLoaded())
+                        mpMaterial->load();
+
+                    mpMaterial->setDepthCheckEnabled(!mOnTop);
+                    mpMaterial->setDepthBias(1.0,1.0);
+                    mpMaterial->setDepthWriteEnabled(mOnTop);
+                    mpMaterial->setLightingEnabled(false);
+                    mNeedUpdate = true;
+                }
+            }
+
+            void MovableText::setCaption(const String &caption)
+            {
+                if (caption != mCaption)
+                {
+                    mCaption = caption;
+                    mNeedUpdate = true;
+                }
+            }
+
+            void MovableText::setColor(const ColourValue &color)
+            {
+                if (color != mColor)
+                {
+                    mColor = color;
+                    mUpdateColors = true;
+                }
+            }
+
+            void MovableText::setCharacterHeight(Real height)
+            {
+                if (height != mCharHeight)
+                {
+                    mCharHeight = height;
+                    mNeedUpdate = true;
+                }
+            }
+
+            void MovableText::setSpaceWidth(Real width)
+            {
+                if (width != mSpaceWidth)
+                {
+                    mSpaceWidth = width;
+                    mNeedUpdate = true;
+                }
+            }
+
+            void MovableText::setTextAlignment(const HorizontalAlignment& horizontalAlignment, const VerticalAlignment& verticalAlignment)
+            {
+                if(mHorizontalAlignment != horizontalAlignment)
+                {
+                    mHorizontalAlignment = horizontalAlignment;
+                    mNeedUpdate = true;
+                }
+                if(mVerticalAlignment != verticalAlignment)
+                {
+                    mVerticalAlignment = verticalAlignment;
+                    mNeedUpdate = true;
+                }
+            }
+
+            void MovableText::setGlobalTranslation( Vector3 trans )
+            {
+                mGlobalTranslation = trans;
+            }
+
+            void MovableText::setLocalTranslation( Vector3 trans )
+            {
+                mLocalTranslation = trans;
+            }
+
+            void MovableText::showOnTop(bool show)
+            {
+                if( mOnTop != show && !mpMaterial.isNull() )
+                {
+                    mOnTop = show;
+                    mpMaterial->setDepthBias(1.0,1.0);
+                    mpMaterial->setDepthCheckEnabled(!mOnTop);
+                    mpMaterial->setDepthWriteEnabled(mOnTop);
+                }
+            }
+
+            void MovableText::_setupGeometry()
+            {
+                assert(mpFont);
+                assert(!mpMaterial.isNull());
+
+                unsigned int vertexCount = static_cast<unsigned int>(mCaption.size() * 6);
+
+                if (mRenderOp.vertexData)
+                {
+                    // Removed this test as it causes problems when replacing a caption
+                    // of the same size: replacing "Hello" with "hello"
+                    // as well as when changing the text alignment
+                    //if (mRenderOp.vertexData->vertexCount != vertexCount)
+                    {
+                        delete mRenderOp.vertexData;
+                        mRenderOp.vertexData = NULL;
+                        mUpdateColors = true;
+                    }
+                }
+
+                if (!mRenderOp.vertexData)
+                    mRenderOp.vertexData = new VertexData();
+
+                mRenderOp.indexData = 0;
+                mRenderOp.vertexData->vertexStart = 0;
+                mRenderOp.vertexData->vertexCount = vertexCount;
+                mRenderOp.operationType = RenderOperation::OT_TRIANGLE_LIST; 
+                mRenderOp.useIndexes = false; 
+
+                VertexDeclaration  *decl = mRenderOp.vertexData->vertexDeclaration;
+                VertexBufferBinding   *bind = mRenderOp.vertexData->vertexBufferBinding;
+                size_t offset = 0;
+
+                // create/bind positions/tex.ccord. buffer
+                if (!decl->findElementBySemantic(VES_POSITION))
+                    decl->addElement(POS_TEX_BINDING, offset, VET_FLOAT3, VES_POSITION);
+
+                offset += VertexElement::getTypeSize(VET_FLOAT3);
+
+                if (!decl->findElementBySemantic(VES_TEXTURE_COORDINATES))
+                    decl->addElement(POS_TEX_BINDING, offset, Ogre::VET_FLOAT2, Ogre::VES_TEXTURE_COORDINATES, 0);
+
+                HardwareVertexBufferSharedPtr ptbuf = HardwareBufferManager::getSingleton().createVertexBuffer(decl->getVertexSize(POS_TEX_BINDING),
+                        mRenderOp.vertexData->vertexCount,
+                        HardwareBuffer::HBU_DYNAMIC_WRITE_ONLY);
+                bind->setBinding(POS_TEX_BINDING, ptbuf);
+
+                // Colours - store these in a separate buffer because they change less often
+                if (!decl->findElementBySemantic(VES_DIFFUSE))
+                    decl->addElement(COLOUR_BINDING, 0, VET_COLOUR, VES_DIFFUSE);
+
+                HardwareVertexBufferSharedPtr cbuf = HardwareBufferManager::getSingleton().createVertexBuffer(decl->getVertexSize(COLOUR_BINDING),
+                        mRenderOp.vertexData->vertexCount,
+                        HardwareBuffer::HBU_DYNAMIC_WRITE_ONLY);
+                bind->setBinding(COLOUR_BINDING, cbuf);
+
+                size_t charlen = mCaption.size();
+                float *pPCBuff = static_cast<float*>(ptbuf->lock(HardwareBuffer::HBL_DISCARD));
+
+                float largestWidth = 0;
+                float left = 0 * 2.0 - 1.0;
+                float top = -((0 * 2.0) - 1.0);
+
+                Real spaceWidth = mSpaceWidth;
+                // Derive space width from a capital A
+                if (spaceWidth == 0)
+                    spaceWidth = mpFont->getGlyphAspectRatio('A') * mCharHeight * 2.0;
+
+                // for calculation of AABB
+                Ogre::Vector3 min, max, currPos;
+                Ogre::Real maxSquaredRadius;
+                bool first = true;
+
+                // Use iterator
+                String::iterator i, iend;
+                iend = mCaption.end();
+                bool newLine = true;
+                Real len = 0.0f;
+
+                Real verticalOffset = 0;
+                switch (mVerticalAlignment)
+                {
+                    case MovableText::V_ABOVE:
+                        verticalOffset = mCharHeight;
+                        break;
+                    case MovableText::V_CENTER:
+                        verticalOffset = 0.5*mCharHeight;
+                        break;
+                    case MovableText::V_BELOW:
+                        verticalOffset = 0;
+                        break;
+                }
+                // Raise the first line of the caption
+                top += verticalOffset;
+                for (i = mCaption.begin(); i != iend; ++i)
+                {
+                    if (*i == '\n')
+                        top += verticalOffset * 2.0;
+                }
+
+                for (i = mCaption.begin(); i != iend; ++i)
+                {
+                    if (newLine)
+                    {
+                        len = 0.0f;
+                        for (String::iterator j = i; j != iend && *j != '\n'; j++)
+                        {
+                            if (*j == ' ')
+                                len += spaceWidth;
+                            else 
+                                len += mpFont->getGlyphAspectRatio(*j) * mCharHeight * 2.0;
+                        }
+                        newLine = false;
+                    }
+
+                    if (*i == '\n')
+                    {
+                        left = 0 * 2.0 - 1.0;
+                        top -= mCharHeight * 2.0;
+                        newLine = true;
+                        continue;
+                    }
+
+                    if (*i == ' ')
+                    {
+                        // Just leave a gap, no tris
+                        left += spaceWidth;
+                        // Also reduce tri count
+                        mRenderOp.vertexData->vertexCount -= 6;
+                        continue;
+                    }
+
+                    Real horiz_height = mpFont->getGlyphAspectRatio(*i);
+                    Real u1, u2, v1, v2; 
+                    Ogre::Font::UVRect utmp;
+                    utmp = mpFont->getGlyphTexCoords(*i);
+                    u1 = utmp.left;
+                    u2 = utmp.right;
+                    v1 = utmp.top;
+                    v2 = utmp.bottom;
+
+                    // each vert is (x, y, z, u, v)
+                    //-------------------------------------------------------------------------------------
+                    // First tri
+                    //
+                    // Upper left
+                    if(mHorizontalAlignment == MovableText::H_LEFT)
+                        *pPCBuff++ = left;
+                    else
+                        *pPCBuff++ = left - (len / 2);
+                    *pPCBuff++ = top;
+                    *pPCBuff++ = -1.0;
+                    *pPCBuff++ = u1;
+                    *pPCBuff++ = v1;
+
+                    // Deal with bounds
+                    if(mHorizontalAlignment == MovableText::H_LEFT)
+                        currPos = Ogre::Vector3(left, top, -1.0);
+                    else
+                        currPos = Ogre::Vector3(left - (len / 2), top, -1.0);
+                    if (first)
+                    {
+                        min = max = currPos;
+                        maxSquaredRadius = currPos.squaredLength();
+                        first = false;
+                    }
+                    else
+                    {
+                        min.makeFloor(currPos);
+                        max.makeCeil(currPos);
+                        maxSquaredRadius = std::max(maxSquaredRadius, currPos.squaredLength());
+                    }
+
+                    top -= mCharHeight * 2.0;
+
+                    // Bottom left
+                    if(mHorizontalAlignment == MovableText::H_LEFT)
+                        *pPCBuff++ = left;
+                    else
+                        *pPCBuff++ = left - (len / 2);
+                    *pPCBuff++ = top;
+                    *pPCBuff++ = -1.0;
+                    *pPCBuff++ = u1;
+                    *pPCBuff++ = v2;
+
+                    // Deal with bounds
+                    if(mHorizontalAlignment == MovableText::H_LEFT)
+                        currPos = Ogre::Vector3(left, top, -1.0);
+                    else
+                        currPos = Ogre::Vector3(left - (len / 2), top, -1.0);
+                    min.makeFloor(currPos);
+                    max.makeCeil(currPos);
+                    maxSquaredRadius = std::max(maxSquaredRadius, currPos.squaredLength());
+
+                    top += mCharHeight * 2.0;
+                    left += horiz_height * mCharHeight * 2.0;
+
+                    // Top right
+                    if(mHorizontalAlignment == MovableText::H_LEFT)
+                        *pPCBuff++ = left;
+                    else
+                        *pPCBuff++ = left - (len / 2);
+                    *pPCBuff++ = top;
+                    *pPCBuff++ = -1.0;
+                    *pPCBuff++ = u2;
+                    *pPCBuff++ = v1;
+                    //-------------------------------------------------------------------------------------
+
+                    // Deal with bounds
+                    if(mHorizontalAlignment == MovableText::H_LEFT)
+                        currPos = Ogre::Vector3(left, top, -1.0);
+                    else
+                        currPos = Ogre::Vector3(left - (len / 2), top, -1.0);
+                    min.makeFloor(currPos);
+                    max.makeCeil(currPos);
+                    maxSquaredRadius = std::max(maxSquaredRadius, currPos.squaredLength());
+
+                    //-------------------------------------------------------------------------------------
+                    // Second tri
+                    //
+                    // Top right (again)
+                    if(mHorizontalAlignment == MovableText::H_LEFT)
+                        *pPCBuff++ = left;
+                    else
+                        *pPCBuff++ = left - (len / 2);
+                    *pPCBuff++ = top;
+                    *pPCBuff++ = -1.0;
+                    *pPCBuff++ = u2;
+                    *pPCBuff++ = v1;
+
+                    currPos = Ogre::Vector3(left, top, -1.0);
+                    min.makeFloor(currPos);
+                    max.makeCeil(currPos);
+                    maxSquaredRadius = std::max(maxSquaredRadius, currPos.squaredLength());
+
+                    top -= mCharHeight * 2.0;
+                    left -= horiz_height  * mCharHeight * 2.0;
+
+                    // Bottom left (again)
+                    if(mHorizontalAlignment == MovableText::H_LEFT)
+                        *pPCBuff++ = left;
+                    else
+                        *pPCBuff++ = left - (len / 2);
+                    *pPCBuff++ = top;
+                    *pPCBuff++ = -1.0;
+                    *pPCBuff++ = u1;
+                    *pPCBuff++ = v2;
+
+                    currPos = Ogre::Vector3(left, top, -1.0);
+                    min.makeFloor(currPos);
+                    max.makeCeil(currPos);
+                    maxSquaredRadius = std::max(maxSquaredRadius, currPos.squaredLength());
+
+                    left += horiz_height  * mCharHeight * 2.0;
+
+                    // Bottom right
+                    if(mHorizontalAlignment == MovableText::H_LEFT)
+                        *pPCBuff++ = left;
+                    else
+                        *pPCBuff++ = left - (len / 2);
+                    *pPCBuff++ = top;
+                    *pPCBuff++ = -1.0;
+                    *pPCBuff++ = u2;
+                    *pPCBuff++ = v2;
+                    //-------------------------------------------------------------------------------------
+
+                    currPos = Ogre::Vector3(left, top, -1.0);
+                    min.makeFloor(currPos);
+                    max.makeCeil(currPos);
+                    maxSquaredRadius = std::max(maxSquaredRadius, currPos.squaredLength());
+
+                    // Go back up with top
+                    top += mCharHeight * 2.0;
+
+                    float currentWidth = (left + 1)/2 - 0;
+                    if (currentWidth > largestWidth)
+                        largestWidth = currentWidth;
+                }
+
+                // Unlock vertex buffer
+                ptbuf->unlock();
+
+                // update AABB/Sphere radius
+                mAABB = Ogre::AxisAlignedBox(min, max);
+                mRadius = Ogre::Math::Sqrt(maxSquaredRadius);
+
+                if (mUpdateColors)
+                    this->_updateColors();
+
+                mNeedUpdate = false;
+            }
+
+            void MovableText::_updateColors(void)
+            {
+                assert(mpFont);
+                assert(!mpMaterial.isNull());
+
+                // Convert to system-specific
+                RGBA color;
+                Root::getSingleton().convertColourValue(mColor, &color);
+                HardwareVertexBufferSharedPtr vbuf = mRenderOp.vertexData->vertexBufferBinding->getBuffer(COLOUR_BINDING);
+                RGBA *pDest = static_cast<RGBA*>(vbuf->lock(HardwareBuffer::HBL_DISCARD));
+                for (int i = 0; i < (int)mRenderOp.vertexData->vertexCount; ++i)
+                    *pDest++ = color;
+                vbuf->unlock();
+                mUpdateColors = false;
+            }
+
+            const Quaternion& MovableText::getWorldOrientation(void) const
+            {
+                assert(mpCam);
+                return const_cast<Quaternion&>(mpCam->getDerivedOrientation());
+            }
+
+            const Vector3& MovableText::getWorldPosition(void) const
+            {
+                assert(mParentNode);
+                return mParentNode->_getDerivedPosition();
+            }
+
+            void MovableText::getWorldTransforms(Matrix4 *xform) const 
+            {
+                if (this->isVisible() && mpCam)
+                {
+                    Matrix3 rot3x3, scale3x3 = Matrix3::IDENTITY;
+
+                    // store rotation in a matrix
+                    mpCam->getDerivedOrientation().ToRotationMatrix(rot3x3);
+
+                    // parent node position
+                    Vector3 ppos = mParentNode->_getDerivedPosition() + Vector3::UNIT_Y*mGlobalTranslation;
+                    ppos += rot3x3*mLocalTranslation;
+
+                    // apply scale
+                    scale3x3[0][0] = mParentNode->_getDerivedScale().x / 2;
+                    scale3x3[1][1] = mParentNode->_getDerivedScale().y / 2;
+                    scale3x3[2][2] = mParentNode->_getDerivedScale().z / 2;
+
+                    // apply all transforms to xform       
+                    *xform = (rot3x3 * scale3x3);
+                    xform->setTrans(ppos);
+                }
+            }
+
+            void MovableText::getRenderOperation(RenderOperation &op)
+            {
+                if (this->isVisible())
+                {
+                    if (mNeedUpdate)
+                        this->_setupGeometry();
+                    if (mUpdateColors)
+                        this->_updateColors();
+                    op = mRenderOp;
+                }
+            }
+
+            void MovableText::_notifyCurrentCamera(Camera *cam)
+            {
+                mpCam = cam;
+            }
+
+            void MovableText::_updateRenderQueue(RenderQueue* queue)
+            {
+                if (this->isVisible())
+                {
+                    if (mNeedUpdate)
+                        this->_setupGeometry();
+                    if (mUpdateColors)
+                        this->_updateColors();
+
+                    queue->addRenderable(this, mRenderQueueID, OGRE_RENDERABLE_DEFAULT_PRIORITY);
+                    //queue->addRenderable(this, mRenderQueueID, RENDER_QUEUE_SKIES_LATE);
+                }
+            }
+
+        }
 }
 



From blakharaz at mail.berlios.de  Thu Oct  2 08:13:35 2008
From: blakharaz at mail.berlios.de (blakharaz at mail.berlios.de)
Date: Thu, 2 Oct 2008 08:13:35 +0200
Subject: [Dsa-hl-svn] r4540 - in rl/trunk/engine/core: include src
Message-ID: <200810020613.m926DZq2029864@sheep.berlios.de>

Author: blakharaz
Date: 2008-10-02 08:13:34 +0200 (Thu, 02 Oct 2008)
New Revision: 4540

Modified:
   rl/trunk/engine/core/include/MessagePump.h
   rl/trunk/engine/core/src/MessagePump.cpp
Log:
Moved non-template methods to cpp file

Modified: rl/trunk/engine/core/include/MessagePump.h
===================================================================
--- rl/trunk/engine/core/include/MessagePump.h	2008-10-01 16:51:11 UTC (rev 4539)
+++ rl/trunk/engine/core/include/MessagePump.h	2008-10-02 06:13:34 UTC (rev 4540)
@@ -1,292 +1,234 @@
-/* This source file is part of Rastullahs Lockenpracht.
-* Copyright (C) 2003-2008 Team Pantheon. http://www.team-pantheon.de
-* 
-*  This program is free software; you can redistribute it and/or modify
-*  it under the terms of the Clarified Artistic License.
-*
-*  This program is distributed in the hope that it will be useful,
-*  but WITHOUT ANY WARRANTY; without even the implied warranty of
-*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-*  Clarified Artistic License for more details.
-*
-*  You should have received a copy of the Clarified Artistic License
-*  along with this program; if not you can get it here
-*  http://www.jpaulmorrison.com/fbp/artistic2.htm.
-*/
-
-#ifndef __Rl_MessagePump_H__
-#define __Rl_MessagePump_H__
-
-#include "CorePrerequisites.h"
-
-#include "MessageType.h"
-#include "GameTask.h"
-
-
-#include <map>
-#include <queue>
-
-#include <boost/noncopyable.hpp>
-
-namespace rl
-{
-
-    class MessageHandlerWrapperBase
-    {
-    public:
-        virtual ~MessageHandlerWrapperBase() {}
-        virtual bool Invoke(MessageObjectBase* obj) = 0;
-    };
-
-    template<class _MessageType>
-    class MessageHandlerWrapper : public MessageHandlerWrapperBase
-    {
-    public:
-        typedef typename _MessageType::MessageObjectType MessageObjectType;
-        typedef typename _MessageType::HandlerType HandlerType;
-
-        MessageHandlerWrapper(const HandlerType& handler)
-            : mHandler(handler)
-        {
-        }
-
-        virtual bool Invoke(MessageObjectBase* obj)
-        {
-            MessageObjectType* obj2 = static_cast<MessageObjectType*>(obj);
-            return obj2->Invoke(mHandler);
-        }
-
-    private:
-        HandlerType mHandler;
-    };
-
-    class _RlCoreExport MessagePump : public GameTask, public Ogre::Singleton<MessagePump>
-    {
-    public:
-        class Connection
-        {
-            friend class MessagePump;
-        public:
-            Connection()
-                : connectionId(-1), pump(NULL)
-            {}
-            void disconnect()
-            {
-                if(pump && connectionId != -1)
-                    pump->disconnectHandler(connectionId);
-            }
-        private:
-            MessagePump* pump;
-            int connectionId;
-        };
-
-        class ScopedConnection : boost::noncopyable
-        {
-        public:
-            ScopedConnection()
-            {}
-            ScopedConnection(const Connection& conn)
-                : mConnection(conn)
-            {}
-            ScopedConnection& operator =(const Connection& conn)
-            {
-                mConnection.disconnect();
-                mConnection = conn;
-                return *this;
-            }
-            ~ScopedConnection()
-            {
-                mConnection.disconnect();
-            }
-        private:
-            Connection mConnection;
-        };
-
-    private:
-        struct MessageHandlerMapEntry
-        {
-            int connectionId;
-            MessageHandlerWrapperBase* handlerWrapper;
-        };
-
-        typedef std::vector<MessageHandlerMapEntry> MessageHandlerMapEntries;
-        typedef std::map<int, MessageHandlerMapEntries*> MessageHandlerMap;
-        typedef std::queue<MessageObjectBase*> MessageQueue;
-
-    public:
-        MessagePump() : mNextConnectionId(0) {}
-        ~MessagePump();
-
-        template<typename _MessageType>
-        Connection addMessageHandler( const typename _MessageType::HandlerType& handler )
-        {
-            MessageHandlerWrapper<_MessageType>* wrapper =
-                new MessageHandlerWrapper<_MessageType>(handler);
-
-            MessageHandlerMapEntries* entries = getOrCreateMapEntries(_MessageType::MessageTypeId);
-            MessageHandlerMapEntry entry = {mNextConnectionId++, wrapper};
-            entries->push_back(entry);
-
-            LOG_MESSAGE("MessagePump", 
-                "Added message handler for message type " 
-                + Ogre::StringConverter::toString(_MessageType::MessageTypeId));
-
-            Connection con;
-            con.pump = this;
-            con.connectionId = entry.connectionId;
-            return con;
-        }
-
-        /*
-        * sendMessage and postMessage is implemented for all possible parameter counts
-        * Thanks to the idea of SFINAE, the compiler will choose 
-        * the correct implementation for all MessageTypes at compile time
-        *
-        * sendMessage processes the message immediatly, while postMessage delays the 
-        * processing to a later frame
-        */
-        template<typename _MessageType>
-        bool sendMessage()
-        {
-            MessageObjectBase* obj = _MessageType::MessageObjectType::Build();
-            return doSend(obj);
-        }
-
-        template<typename _MessageType>
-        bool sendMessage(const typename _MessageType::MessageObjectType::Param1& p1)
-        {
-            MessageObjectBase* obj = _MessageType::MessageObjectType::Build(p1);
-            return doSend(obj);
-        }
-
-        template<typename _MessageType>
-        bool sendMessage(const typename _MessageType::MessageObjectType::Param1& p1,
-            const typename _MessageType::MessageObjectType::Param2& p2)
-        {
-            MessageObjectBase* obj = _MessageType::MessageObjectType::Build(p1, p2);
-            return doSend(obj);
-        }
-
-        template<typename _MessageType>
-        bool sendMessage(const typename _MessageType::MessageObjectType::Param1& p1,
-            const typename _MessageType::MessageObjectType::Param2& p2,
-            const typename _MessageType::MessageObjectType::Param2& p3)
-        {
-            MessageObjectBase* obj = _MessageType::MessageObjectType::Build(p1, p2, p3);
-            return doSend(obj);
-        }
-
-        ////////////////////////////////
-
-        template<typename _MessageType>
-        void postMessage()
-        {
-            MessageObjectBase* obj = _MessageType::MessageObjectType::Build();
-            doPost(obj);
-        }
-
-        template<typename _MessageType>
-        void postMessage(const typename _MessageType::MessageObjectType::Param1& p1)
-        {
-            MessageObjectBase* obj = _MessageType::MessageObjectType::Build(p1);
-            doPost(obj);
-        }
-
-        template<typename _MessageType>
-        void postMessage(const typename _MessageType::MessageObjectType::Param1& p1,
-            const typename _MessageType::MessageObjectType::Param2& p2)
-        {
-            MessageObjectBase* obj = _MessageType::MessageObjectType::Build(p1,p2);
-            doPost(obj);
-        }
-
-        template<typename _MessageType>
-        void postMessage(const typename _MessageType::MessageObjectType::Param1& p1,
-            const typename _MessageType::MessageObjectType::Param2& p2,
-            const typename _MessageType::MessageObjectType::Param2& p3)
-        {
-            MessageObjectBase* obj = _MessageType::MessageObjectType::Build(p1, p2, p3);
-            doPost(obj);
-        }
-
-        void sendPending()
-        {
-            while(!mMessageQueue.empty())
-            {
-                doSend(mMessageQueue.front());
-                mMessageQueue.pop();
-            }
-        }
-
-        // overloads from GameTask
-
-        virtual void run(Ogre::Real elapsedTime);
-
-        virtual const Ogre::String& getName() const;
-
-    private:
-        MessageHandlerMapEntries* getOrCreateMapEntries(int id) 
-        {
-            LOG_MESSAGE("MessagePump", "Create or get id " + Ogre::StringConverter::toString(id));
-            MessageHandlerMap::iterator it = mMessageHandlerMap.find(id);
-            if(it == mMessageHandlerMap.end())
-            {
-                MessageHandlerMapEntries* entries = new MessageHandlerMapEntries();
-                mMessageHandlerMap[id] = entries;
-                return entries;
-            }
-            return it->second;
-        }
-
-        bool doSend(MessageObjectBase* msg)
-        {
-            bool msgHandled = false;
-            MessageHandlerMapEntries* entries = getOrCreateMapEntries(msg->getMessageTypeId());
-            for(MessageHandlerMapEntries::iterator it = entries->begin(); it != entries->end(); ++it)
-            {
-                if((*it).handlerWrapper->Invoke(msg))
-                {
-                    msgHandled = true;
-                }
-            }
-            delete msg;
-            return msgHandled;;
-        }
-
-        void doPost(MessageObjectBase* msg)
-        {
-            mMessageQueue.push(msg);
-        }
-
-        friend class Connection;
-        void disconnectHandler(int connectionId)
-        {
-            //not very performant...definitely needs improvement
-            for (MessageHandlerMap::iterator it = mMessageHandlerMap.begin();
-                it != mMessageHandlerMap.end(); ++it)
-            {
-                MessageHandlerMapEntries* en = it->second;
-                for (MessageHandlerMapEntries::iterator jt = en->begin(); jt != en->end(); ++jt)
-                {
-                    if (jt->connectionId == connectionId)
-                    {
-                        delete jt->handlerWrapper;
-                        en->erase(jt);
-                        if (en->empty())
-                        {
-                            delete en;
-                            mMessageHandlerMap.erase(it);
-                        }
-                        return;
-                    }
-                }
-            }
-        }
-
-    private:
-        int mNextConnectionId;
-        MessageHandlerMap mMessageHandlerMap;
-        MessageQueue mMessageQueue;
-    };
-}
-#endif
+/* This source file is part of Rastullahs Lockenpracht.
+* Copyright (C) 2003-2008 Team Pantheon. http://www.team-pantheon.de
+* 
+*  This program is free software; you can redistribute it and/or modify
+*  it under the terms of the Clarified Artistic License.
+*
+*  This program is distributed in the hope that it will be useful,
+*  but WITHOUT ANY WARRANTY; without even the implied warranty of
+*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+*  Clarified Artistic License for more details.
+*
+*  You should have received a copy of the Clarified Artistic License
+*  along with this program; if not you can get it here
+*  http://www.jpaulmorrison.com/fbp/artistic2.htm.
+*/
+
+#ifndef __Rl_MessagePump_H__
+#define __Rl_MessagePump_H__
+
+#include "CorePrerequisites.h"
+
+#include "MessageType.h"
+#include "GameTask.h"
+
+
+#include <map>
+#include <queue>
+
+#include <boost/noncopyable.hpp>
+
+namespace rl
+{
+
+    class MessageHandlerWrapperBase
+    {
+    public:
+        virtual ~MessageHandlerWrapperBase() {}
+        virtual bool Invoke(MessageObjectBase* obj) = 0;
+    };
+
+    template<class _MessageType>
+    class MessageHandlerWrapper : public MessageHandlerWrapperBase
+    {
+    public:
+        typedef typename _MessageType::MessageObjectType MessageObjectType;
+        typedef typename _MessageType::HandlerType HandlerType;
+
+        MessageHandlerWrapper(const HandlerType& handler)
+            : mHandler(handler)
+        {
+        }
+
+        virtual bool Invoke(MessageObjectBase* obj)
+        {
+            MessageObjectType* obj2 = static_cast<MessageObjectType*>(obj);
+            return obj2->Invoke(mHandler);
+        }
+
+    private:
+        HandlerType mHandler;
+    };
+
+    class _RlCoreExport MessagePump : public GameTask, public Ogre::Singleton<MessagePump>
+    {
+    public:
+        class Connection
+        {
+            friend class MessagePump;
+        public:
+            Connection()
+                : connectionId(-1), pump(NULL)
+            {}
+            void disconnect()
+            {
+                if(pump && connectionId != -1)
+                    pump->disconnectHandler(connectionId);
+            }
+        private:
+            MessagePump* pump;
+            int connectionId;
+        };
+
+        class ScopedConnection : boost::noncopyable
+        {
+        public:
+            ScopedConnection()
+            {}
+            ScopedConnection(const Connection& conn)
+                : mConnection(conn)
+            {}
+            ScopedConnection& operator =(const Connection& conn)
+            {
+                mConnection.disconnect();
+                mConnection = conn;
+                return *this;
+            }
+            ~ScopedConnection()
+            {
+                mConnection.disconnect();
+            }
+        private:
+            Connection mConnection;
+        };
+
+    private:
+        struct MessageHandlerMapEntry
+        {
+            int connectionId;
+            MessageHandlerWrapperBase* handlerWrapper;
+        };
+
+        typedef std::vector<MessageHandlerMapEntry> MessageHandlerMapEntries;
+        typedef std::map<int, MessageHandlerMapEntries*> MessageHandlerMap;
+        typedef std::queue<MessageObjectBase*> MessageQueue;
+
+    public:
+        MessagePump() : mNextConnectionId(0) {}
+        ~MessagePump();
+
+        template<typename _MessageType>
+        Connection addMessageHandler( const typename _MessageType::HandlerType& handler )
+        {
+            MessageHandlerWrapper<_MessageType>* wrapper =
+                new MessageHandlerWrapper<_MessageType>(handler);
+
+            MessageHandlerMapEntries* entries = getOrCreateMapEntries(_MessageType::MessageTypeId);
+            MessageHandlerMapEntry entry = {mNextConnectionId++, wrapper};
+            entries->push_back(entry);
+
+            LOG_MESSAGE("MessagePump", 
+                "Added message handler for message type " 
+                + Ogre::StringConverter::toString(_MessageType::MessageTypeId));
+
+            Connection con;
+            con.pump = this;
+            con.connectionId = entry.connectionId;
+            return con;
+        }
+
+        /*
+        * sendMessage and postMessage is implemented for all possible parameter counts
+        * Thanks to the idea of SFINAE, the compiler will choose 
+        * the correct implementation for all MessageTypes at compile time
+        *
+        * sendMessage processes the message immediatly, while postMessage delays the 
+        * processing to a later frame
+        */
+        template<typename _MessageType>
+        bool sendMessage()
+        {
+            MessageObjectBase* obj = _MessageType::MessageObjectType::Build();
+            return doSend(obj);
+        }
+
+        template<typename _MessageType>
+        bool sendMessage(const typename _MessageType::MessageObjectType::Param1& p1)
+        {
+            MessageObjectBase* obj = _MessageType::MessageObjectType::Build(p1);
+            return doSend(obj);
+        }
+
+        template<typename _MessageType>
+        bool sendMessage(const typename _MessageType::MessageObjectType::Param1& p1,
+            const typename _MessageType::MessageObjectType::Param2& p2)
+        {
+            MessageObjectBase* obj = _MessageType::MessageObjectType::Build(p1, p2);
+            return doSend(obj);
+        }
+
+        template<typename _MessageType>
+        bool sendMessage(const typename _MessageType::MessageObjectType::Param1& p1,
+            const typename _MessageType::MessageObjectType::Param2& p2,
+            const typename _MessageType::MessageObjectType::Param2& p3)
+        {
+            MessageObjectBase* obj = _MessageType::MessageObjectType::Build(p1, p2, p3);
+            return doSend(obj);
+        }
+
+        ////////////////////////////////
+
+        template<typename _MessageType>
+        void postMessage()
+        {
+            MessageObjectBase* obj = _MessageType::MessageObjectType::Build();
+            doPost(obj);
+        }
+
+        template<typename _MessageType>
+        void postMessage(const typename _MessageType::MessageObjectType::Param1& p1)
+        {
+            MessageObjectBase* obj = _MessageType::MessageObjectType::Build(p1);
+            doPost(obj);
+        }
+
+        template<typename _MessageType>
+        void postMessage(const typename _MessageType::MessageObjectType::Param1& p1,
+            const typename _MessageType::MessageObjectType::Param2& p2)
+        {
+            MessageObjectBase* obj = _MessageType::MessageObjectType::Build(p1,p2);
+            doPost(obj);
+        }
+
+        template<typename _MessageType>
+        void postMessage(const typename _MessageType::MessageObjectType::Param1& p1,
+            const typename _MessageType::MessageObjectType::Param2& p2,
+            const typename _MessageType::MessageObjectType::Param2& p3)
+        {
+            MessageObjectBase* obj = _MessageType::MessageObjectType::Build(p1, p2, p3);
+            doPost(obj);
+        }
+
+        void sendPending();
+
+        // overloads from GameTask
+
+        virtual void run(Ogre::Real elapsedTime);
+
+        virtual const Ogre::String& getName() const;
+
+    private:
+        MessageHandlerMapEntries* getOrCreateMapEntries(int id); 
+        bool doSend(MessageObjectBase* msg);
+        void doPost(MessageObjectBase* msg);
+
+        friend class Connection;
+        void disconnectHandler(int connectionId);
+
+    private:
+        int mNextConnectionId;
+        MessageHandlerMap mMessageHandlerMap;
+        MessageQueue mMessageQueue;
+    };
+}
+#endif

Modified: rl/trunk/engine/core/src/MessagePump.cpp
===================================================================
--- rl/trunk/engine/core/src/MessagePump.cpp	2008-10-01 16:51:11 UTC (rev 4539)
+++ rl/trunk/engine/core/src/MessagePump.cpp	2008-10-02 06:13:34 UTC (rev 4540)
@@ -1,57 +1,126 @@
-/* This source file is part of Rastullahs Lockenpracht.
- * Copyright (C) 2003-2008 Team Pantheon. http://www.team-pantheon.de
- * 
- *  This program is free software; you can redistribute it and/or modify
- *  it under the terms of the Clarified Artistic License.
- *
- *  This program is distributed in the hope that it will be useful,
- *  but WITHOUT ANY WARRANTY; without even the implied warranty of
- *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- *  Clarified Artistic License for more details.
- *
- *  You should have received a copy of the Clarified Artistic License
- *  along with this program; if not you can get it here
- *  http://www.jpaulmorrison.com/fbp/artistic2.htm.
- */
-#include "stdinc.h"
-
-#include "MessagePump.h"
-
-template<> rl::MessagePump* Ogre::Singleton<rl::MessagePump>::ms_Singleton = 0;
-
-namespace rl
-{
-    MessagePump::~MessagePump()
-    {
-
-        while(!mMessageQueue.empty())
-        {
-        
-            delete mMessageQueue.front();
-            mMessageQueue.pop();    
-        }
-
-        MessageHandlerMap::iterator it = mMessageHandlerMap.begin();
-        for( ; it != mMessageHandlerMap.end(); it++ )
-            if( it->second != NULL )
-                delete it->second;
-    }
-
-    void MessagePump::run(Ogre::Real elapsedTime)
-    {
-        static bool sending = false;
-        if(!sending)
-        {
-            sending = true;
-            sendPending();
-            sending = false;  
-        }
-    }
-
-    const Ogre::String& MessagePump::getName() const
-    {
-        static Ogre::String name = "MessagePump";
-        return name;
-    }
-
-}
+/* This source file is part of Rastullahs Lockenpracht.
+ * Copyright (C) 2003-2008 Team Pantheon. http://www.team-pantheon.de
+ * 
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the Clarified Artistic License.
+ *
+ *  This program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  Clarified Artistic License for more details.
+ *
+ *  You should have received a copy of the Clarified Artistic License
+ *  along with this program; if not you can get it here
+ *  http://www.jpaulmorrison.com/fbp/artistic2.htm.
+ */
+#include "stdinc.h"
+
+#include "MessagePump.h"
+
+template<> rl::MessagePump* Ogre::Singleton<rl::MessagePump>::ms_Singleton = 0;
+
+namespace rl
+{
+    MessagePump::~MessagePump()
+    {
+
+        while(!mMessageQueue.empty())
+        {
+        
+            delete mMessageQueue.front();
+            mMessageQueue.pop();    
+        }
+
+        MessageHandlerMap::iterator it = mMessageHandlerMap.begin();
+        for( ; it != mMessageHandlerMap.end(); it++ )
+            if( it->second != NULL )
+                delete it->second;
+    }
+
+    void MessagePump::run(Ogre::Real elapsedTime)
+    {
+        static bool sending = false;
+        if(!sending)
+        {
+            sending = true;
+            sendPending();
+            sending = false;  
+        }
+    }
+
+    const Ogre::String& MessagePump::getName() const
+    {
+        static Ogre::String name = "MessagePump";
+        return name;
+    }
+    
+    void MessagePump::sendPending()
+    {
+        while(!mMessageQueue.empty())
+        {
+            doSend(mMessageQueue.front());
+            mMessageQueue.pop();
+        }
+    }
+    
+    
+    MessagePump::MessageHandlerMapEntries* MessagePump::getOrCreateMapEntries(int id)
+    {
+        // if (id != 0x1000204){
+        //     LOG_MESSAGE("MessagePump", "Create or get id " + Ogre::StringConverter::toString(id));                
+        // }
+        MessageHandlerMap::iterator it = mMessageHandlerMap.find(id);
+        if(it == mMessageHandlerMap.end())
+        {
+            MessageHandlerMapEntries* entries = new MessageHandlerMapEntries();
+            mMessageHandlerMap[id] = entries;
+            return entries;
+        }
+        return it->second;
+    }
+    
+    bool MessagePump::doSend(MessageObjectBase* msg)
+    {
+        bool msgHandled = false;
+        MessageHandlerMapEntries* entries = getOrCreateMapEntries(msg->getMessageTypeId());
+        for(MessageHandlerMapEntries::iterator it = entries->begin(); it != entries->end(); ++it)
+        {
+            if((*it).handlerWrapper->Invoke(msg))
+            {
+                msgHandled = true;
+            }
+        }
+        delete msg;
+        return msgHandled;;
+    }
+    
+    void MessagePump::doPost(MessageObjectBase* msg)
+    {
+        mMessageQueue.push(msg);
+    }
+    
+    void MessagePump::disconnectHandler(int connectionId)
+    {
+        //not very performant...definitely needs improvement
+        for (MessageHandlerMap::iterator it = mMessageHandlerMap.begin();
+             it != mMessageHandlerMap.end(); ++it)
+        {
+            MessageHandlerMapEntries* en = it->second;
+            for (MessageHandlerMapEntries::iterator jt = en->begin(); jt != en->end(); ++jt)
+            {
+                if (jt->connectionId == connectionId)
+                {
+                    delete jt->handlerWrapper;
+                    en->erase(jt);
+                    if (en->empty())
+                    {
+                        delete en;
+                        mMessageHandlerMap.erase(it);
+                    }
+                    return;
+                }
+            }
+        }
+    }
+    
+}



From blakharaz at mail.berlios.de  Thu Oct  2 08:14:39 2008
From: blakharaz at mail.berlios.de (blakharaz at mail.berlios.de)
Date: Thu, 2 Oct 2008 08:14:39 +0200
Subject: [Dsa-hl-svn] r4541 - in modules: common/scripts regressiontest/dsa
	regressiontest/scripts regressiontest/scripts/maps
Message-ID: <200810020614.m926EdUV031515@sheep.berlios.de>

Author: blakharaz
Date: 2008-10-02 08:14:36 +0200 (Thu, 02 Oct 2008)
New Revision: 4541

Added:
   modules/regressiontest/scripts/FetchItemJobTest.rb
Modified:
   modules/common/scripts/truhe.rb
   modules/regressiontest/dsa/gameobjectdefinitions.gof
   modules/regressiontest/scripts/maps/regressiontest.rb
   modules/regressiontest/scripts/moduleconfig.rb
Log:
Added test for FetchItemJob

Modified: modules/common/scripts/truhe.rb
===================================================================
--- modules/common/scripts/truhe.rb	2008-10-02 06:13:34 UTC (rev 4540)
+++ modules/common/scripts/truhe.rb	2008-10-02 06:14:36 UTC (rev 4541)
@@ -6,6 +6,8 @@
 # Inwiefern ist Deferred Construction sinnvoll?
 load "embed.rb"
 
+require "gameobjectprops.rb"
+
 class OpenContainerAction < Action
   def initialize
     super("opencontainer", "?ffnen");

Modified: modules/regressiontest/dsa/gameobjectdefinitions.gof
===================================================================
--- modules/regressiontest/dsa/gameobjectdefinitions.gof	2008-10-02 06:13:34 UTC (rev 4540)
+++ modules/regressiontest/dsa/gameobjectdefinitions.gof	2008-10-02 06:14:36 UTC (rev 4541)
@@ -32,6 +32,24 @@
             <property type="STRING" data="DefaultIdleBehaviour"/>
             <property type="STRING" data="DialogBehaviour"/>
         </property>
+   		<property name="inventory" type="MAP">
+			<property name="slots" type="ARRAY">
+				<!-- Left hand -->
+				<property type="MAP"> 
+					<property name="name" type="STRING" data="Left Hand"/>
+					<property name="type" type="STRING" data="bone"/>
+					<property name="bone" type="STRING" data="l_hand"/>
+					<property name="readies" type="INT" data="3"/> <!-- Weapons | Shields -->
+				</property>
+				<!-- Right hand -->
+				<property type="MAP"> 
+					<property name="name" type="STRING" data="Right Hand"/>
+					<property name="type" type="STRING" data="bone"/>
+					<property name="bone" type="STRING" data="r_hand"/>
+					<property name="readies" type="INT" data="3"/> <!-- Weapons | Shields -->
+				</property>
+			</property>
+		</property>
 		<property name="eigenschaften" type="MAP">
 			<property name="MU" type="INT" data="12"/>
 			<property name="KL" type="INT" data="8"/>

Added: modules/regressiontest/scripts/FetchItemJobTest.rb
===================================================================
--- modules/regressiontest/scripts/FetchItemJobTest.rb	2008-10-02 06:13:34 UTC (rev 4540)
+++ modules/regressiontest/scripts/FetchItemJobTest.rb	2008-10-02 06:14:36 UTC (rev 4541)
@@ -0,0 +1,29 @@
+require "testcase.rb"
+
+class FetchItemJobTest < TestCase
+    def setUp()
+        @fetchingCreature = $GOM.createGameObject("TestPerson");
+        @fetchingCreature.placeIntoScene();
+        @fetchingCreature.setPosition(getCenter());
+        @fetchingCreature.modifyAu(1000);
+        
+        @fetchItem1 = $GOM.createGameObject("Kurzschwert");
+        @fetchItem1.setPosition(rel_pos([-5, 0, 0]));
+        @fetchItem1.placeIntoScene();
+        
+        @fetchItem2 = $GOM.createGameObject("Kurzschwert");
+        @chest = $GOM.createGameObject("chest");
+        @chest.addItem(@fetchItem2);
+        @chest.setPosition(rel_pos([0, 0, 5]));
+        @chest.placeIntoScene();
+    end
+    
+    def execute()
+        setUp();
+        
+        queue = JobQueue.new();
+        queue.add(FetchItemJob.new(@fetchingCreature, @fetchItem1, "Left Hand", 9999999999));
+        queue.add(FetchItemJob.new(@fetchingCreature, @fetchItem2, "Right Hand", 9999999999));
+        $JS.addJob(queue);
+    end
+end

Modified: modules/regressiontest/scripts/maps/regressiontest.rb
===================================================================
--- modules/regressiontest/scripts/maps/regressiontest.rb	2008-10-02 06:13:34 UTC (rev 4540)
+++ modules/regressiontest/scripts/maps/regressiontest.rb	2008-10-02 06:14:36 UTC (rev 4541)
@@ -24,6 +24,7 @@
 require 'doortest.rb'
 require 'effecttest.rb'
 require 'ErrorHandlingTest.rb'
+require 'FetchItemJobTest.rb'
 require 'GameObjectCreationTest.rb'
 require 'InventoryTest.rb'
 require 'JobSequenceTest.rb'
@@ -75,6 +76,7 @@
 		runTest(TimeTest, [ -5, 0, -5])
 		runTest(WalkJobTest, [  0, 0, -3])
 		runTest(CombatTest, [15, 0, 15])
+   		runTest(FetchItemJobTest, [-15, 0, 15])
 
 		if @mErrors > 0
 		  MessageBox.showModal(

Modified: modules/regressiontest/scripts/moduleconfig.rb
===================================================================
--- modules/regressiontest/scripts/moduleconfig.rb	2008-10-02 06:13:34 UTC (rev 4540)
+++ modules/regressiontest/scripts/moduleconfig.rb	2008-10-02 06:14:36 UTC (rev 4541)
@@ -24,6 +24,7 @@
     def start()
         require "mckhero.rb"
         require "hero.rb"
+        require "truhe.rb"
         MapLoader.new("regressiontest").loadMap("regressiontest.scene")
         load "regressiontest.rb"
     end



From blakharaz at mail.berlios.de  Thu Oct  2 18:24:04 2008
From: blakharaz at mail.berlios.de (blakharaz at mail.berlios.de)
Date: Thu, 2 Oct 2008 18:24:04 +0200
Subject: [Dsa-hl-svn] r4542 - modules/common/dsa modules/common/scripts
	modules/regressiontest/scripts rl/trunk/engine/rules/src
Message-ID: <200810021624.m92GO4FN030335@sheep.berlios.de>

Author: blakharaz
Date: 2008-10-02 18:24:02 +0200 (Thu, 02 Oct 2008)
New Revision: 4542

Modified:
   modules/common/dsa/items.gof
   modules/common/scripts/truhe.rb
   modules/regressiontest/scripts/FetchItemJobTest.rb
   rl/trunk/engine/rules/src/FetchItemJob.cpp
Log:
Fix FetchItemJobTest

Modified: modules/common/dsa/items.gof
===================================================================
--- modules/common/dsa/items.gof	2008-10-02 06:14:36 UTC (rev 4541)
+++ modules/common/dsa/items.gof	2008-10-02 16:24:02 UTC (rev 4542)
@@ -8,6 +8,8 @@
 		<property name="mass" type="REAL" data="0"/>
 		<property name="meshfile" type="STRING" data="ver_truhe_gross01.mesh"/>
 <!--		<property name="sound" type="STRING" data="doorcreak.ogg"/>-->
+        <property name="capacity" type="REAL" data="200.0"/>
+        <property name="volume" type="INTPAIR" data="12,12"/>
 	</gameobjectclass>
 
 	<gameobjectclass classid="torch" baseclass="Torch">

Modified: modules/common/scripts/truhe.rb
===================================================================
--- modules/common/scripts/truhe.rb	2008-10-02 06:14:36 UTC (rev 4541)
+++ modules/common/scripts/truhe.rb	2008-10-02 16:24:02 UTC (rev 4542)
@@ -10,7 +10,7 @@
 
 class OpenContainerAction < Action
   def initialize
-    super("opencontainer", "?ffnen");
+    super("open", "?ffnen");
   end
 
   # Die Methode pr?ft, ob die Aktion ?berhaupt angeboten wird.
@@ -25,7 +25,7 @@
 
 class CloseContainerAction < Action
   def initialize
-    super("closecontainer", "Schlie?en");
+    super("close", "Schlie?en");
   end
 
   # Die Methode pr?ft, ob die Aktion ?berhaupt angeboten wird.
@@ -38,6 +38,22 @@
   end
 end
 
+class ShowContainerContentAction < Action
+  def initialize
+    super("showcontent", "Hineinsehen");
+  end
+
+  # Die Methode pr?ft, ob die Aktion ?berhaupt angeboten wird.
+  def canDo(container, user)
+    true
+  end
+
+  def doAction(container, user, target)
+    container.showContent(user)
+  end
+end
+
+
 class Chest < Container
 
   include GameObjectProperties
@@ -50,6 +66,7 @@
     # @todo: Make these actions global actions (add to ActionManager)
     addAction(OpenContainerAction.new);
     addAction(CloseContainerAction.new);
+    addAction(ShowContainerContentAction.new);
     $SCRIPT.log("truhe.rb - Aktionen hinzugefuegt.");
   end
   
@@ -73,7 +90,13 @@
     chestActor.getControlledObject().replaceAnimation("zu", "auf", 1.0, 1);
     knarzActor = chestActor.getChildByName(chestActor.getName()+"_knarzen");
     knarzActor.getControlledObject().play();
-    setOpen( true);
+    setOpen( true);    
+  end
+  
+  def showContent(actor)
+    if not isOpen()
+        open()
+    end
     $WF.showContainerContent(self);
   end
 

Modified: modules/regressiontest/scripts/FetchItemJobTest.rb
===================================================================
--- modules/regressiontest/scripts/FetchItemJobTest.rb	2008-10-02 06:14:36 UTC (rev 4541)
+++ modules/regressiontest/scripts/FetchItemJobTest.rb	2008-10-02 16:24:02 UTC (rev 4542)
@@ -8,14 +8,14 @@
         @fetchingCreature.modifyAu(1000);
         
         @fetchItem1 = $GOM.createGameObject("Kurzschwert");
-        @fetchItem1.setPosition(rel_pos([-5, 0, 0]));
+        @fetchItem1.setPosition(rel_pos([-15, 0, 2]));
         @fetchItem1.placeIntoScene();
         
         @fetchItem2 = $GOM.createGameObject("Kurzschwert");
-        @chest = $GOM.createGameObject("chest");
-        @chest.addItem(@fetchItem2);
-        @chest.setPosition(rel_pos([0, 0, 5]));
-        @chest.placeIntoScene();
+        chest = $GOM.createGameObject("chest");
+        chest.addItem(@fetchItem2);
+        chest.setPosition(rel_pos([2, 0, 15]));
+        chest.placeIntoScene();
     end
     
     def execute()

Modified: rl/trunk/engine/rules/src/FetchItemJob.cpp
===================================================================
--- rl/trunk/engine/rules/src/FetchItemJob.cpp	2008-10-02 06:14:36 UTC (rev 4541)
+++ rl/trunk/engine/rules/src/FetchItemJob.cpp	2008-10-02 16:24:02 UTC (rev 4542)
@@ -52,15 +52,34 @@
 			|| mItem->getState() == GOS_UNLOADED
 			|| mItem->getState() == GOS_LOADED)
 		{
+            if (!mItem) 
+            {
+                LOG_WARNING("FetchItemJob", "Item not set or it has a strange state.");
+            }
+            else if (mTimeLeft < 0)
+            {
+                LOG_MESSAGE("FetchItemJob", "Time is up.");
+            }
+            else
+            {
+                LOG_WARNING("FetchItemJob", "Item has a strange state (" 
+                        + StringConverter::toString(mItem->getState()) + ")");
+            }
+
 			// Stay put where ever we are.
 			mActor->setMovement(CreatureController::MT_STEHEN, Vector3::ZERO, Vector3::ZERO);
 			return true;
 		}
 
-		Vector3 targetPos = mItem->getPosition();
+        Item* target = mItem;
+        while (target->getState() == GOS_IN_POSSESSION)
+        {
+            target = target->getParentContainer();
+        }
+		Vector3 targetPos = target->getPosition();
 
 		// Are we there now?
-		Ogre::Real distance = MathUtil::distance(mItem->getWorldBoundingBox(),
+		Ogre::Real distance = MathUtil::distance(target->getWorldBoundingBox(),
 			mActor->getCreature()->getWorldBoundingBox());
 		if (distance < 1.0f)
 		{
@@ -68,9 +87,9 @@
             
             if (mItem->getState() == GOS_IN_SCENE)
             {
-                    // @todo play pickup animation
-                    mActor->getCreature()->getInventory()->hold(mItem, mTargetSlot);
-                    return true;
+                // @todo play pickup animation
+                mActor->getCreature()->getInventory()->hold(mItem, mTargetSlot);
+                return true;
 			}
             else if (mItem->getState() == GOS_IN_POSSESSION)
 			{
@@ -86,8 +105,8 @@
             else if (mItem->getState() == GOS_READY
 					 || mItem->getState() == GOS_HELD)
 			{
-                    LOG_WARNING("FetchItemJob", "Target item is held by someone");
-                    return true;
+                LOG_WARNING("FetchItemJob", "Target item is held by someone");
+                return true;
             }
 
             return false;



From blakharaz at mail.berlios.de  Fri Oct  3 09:31:14 2008
From: blakharaz at mail.berlios.de (blakharaz at mail.berlios.de)
Date: Fri, 3 Oct 2008 09:31:14 +0200
Subject: [Dsa-hl-svn] r4543 - modules/common/gui/windows
	rl/trunk/engine/ui/src
Message-ID: <200810030731.m937VEYZ021098@sheep.berlios.de>

Author: blakharaz
Date: 2008-10-03 09:31:12 +0200 (Fri, 03 Oct 2008)
New Revision: 4543

Modified:
   modules/common/gui/windows/gameoverwindow.xml
   rl/trunk/engine/ui/src/UiSubsystem.cpp
Log:
Show Game Over Window when the whole party is dead

Modified: modules/common/gui/windows/gameoverwindow.xml
===================================================================
--- modules/common/gui/windows/gameoverwindow.xml	2008-10-02 16:24:02 UTC (rev 4542)
+++ modules/common/gui/windows/gameoverwindow.xml	2008-10-03 07:31:12 UTC (rev 4543)
@@ -1,30 +1,37 @@
 <GUILayout xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="GUILayout.xsd">
-    <Window Type="RastullahLook/FrameWindow" Name="CloseConfirmationWindow">
+    <Window Type="RastullahLook/FrameWindow" Name="GameOverWindow">
         <Property Name="UnifiedPosition" Value="{{0,0},{0,0}}"/>
-        <Property Name="UnifiedSize" Value="{{0,400},{0,171}}"/>
-		<Property Name="Text" Value="Rastullahs Lockenpracht beenden"/>
+        <Property Name="UnifiedSize" Value="{{0,400},{0,250}}"/>
+		<Property Name="Text" Value="Game Over"/>
 
-		<Window Type="RastullahLook/StaticText" Name="CloseConfirmationWindow/Text">
+		<Window Type="RastullahLook/StaticText" Name="GameOverWindow/Text">
             <Property Name="UnifiedPosition" Value="{{0,15},{0,26}}"/>
             <Property Name="UnifiedSize" Value="{{0,370},{0,50}}"/>
 			<Property Name="FrameEnabled" Value="False"/>
-			<Property Name="Text" Value="Soll Rastullahs Lockenpracht wirklich beendet werden?" />
+			<Property Name="Text" Value="All your characters have died." />
             <Property Name="HorzFormatting" Value="WordWrapCentred" />
 		</Window>
 
-		<Window Type="RastullahLook/Button" Name="CloseConfirmationWindow/YesButton">
-            <Property Name="UnifiedPosition" Value="{{0,50},{0,125}}"/>
+		<Window Type="RastullahLook/Button" Name="GameOverWindow/MainMenuButton">
+            <Property Name="UnifiedPosition" Value="{{0.5,-60},{0,125}}"/>
             <Property Name="UnifiedSize" Value="{{0,125},{0,28}}"/>
 			<Property Name="Font" Value="Vera Serif-10"/>
-			<Property Name="Text" Value="Ja"/>
+			<Property Name="Text" Value="Main Menu"/>
 		</Window>
 
-		<Window Type="RastullahLook/Button" Name="CloseConfirmationWindow/NoButton">
-            <Property Name="UnifiedPosition" Value="{{0,225},{0,125}}"/>
+		<Window Type="RastullahLook/Button" Name="GameOverWindow/QuitButton">
+            <Property Name="UnifiedPosition" Value="{{0.5,-60},{0,165}}"/>
             <Property Name="UnifiedSize" Value="{{0,125},{0,28}}"/>
 			<Property Name="Font" Value="Vera Serif-10"/>
-			<Property Name="Text" Value="Nein"/>
+			<Property Name="Text" Value="Quit"/>
 		</Window>
+
+		<Window Type="RastullahLook/Button" Name="GameOverWindow/CheatButton">
+            <Property Name="UnifiedPosition" Value="{{0.5,-60},{0,205}}"/>
+            <Property Name="UnifiedSize" Value="{{0,125},{0,28}}"/>
+			<Property Name="Font" Value="Vera Serif-10"/>
+			<Property Name="Text" Value="Cheat"/>
+		</Window>
     </Window>
 </GUILayout>
 

Modified: rl/trunk/engine/ui/src/UiSubsystem.cpp
===================================================================
--- rl/trunk/engine/ui/src/UiSubsystem.cpp	2008-10-02 16:24:02 UTC (rev 4542)
+++ rl/trunk/engine/ui/src/UiSubsystem.cpp	2008-10-03 07:31:12 UTC (rev 4543)
@@ -62,6 +62,7 @@
         mGuiResourceProvider(NULL),
         mGuiSystem(NULL)
     {
+        mWindowFactory = new WindowFactory();
         mSceneClearingConnection =
             MessagePump::getSingleton().addMessageHandler<MessageType_SceneClearing>(
 			    boost::bind(&UiSubsystem::onBeforeClearScene, this));
@@ -74,7 +75,9 @@
         mActiveCharacterChangedConnection = 
             MessagePump::getSingleton().addMessageHandler<MessageType_ActivePlayerCharChanged>(
                 boost::bind(&UiSubsystem::onActiveCharacterChanged, this, _1, _2));
-        mWindowFactory = new WindowFactory();
+        mAllPlayerCharactersDiedConnection =
+            MessagePump::getSingleton().addMessageHandler<MessageType_AllPlayerCharsDied>(
+                boost::bind(&UiSubsystem::onAllPlayerCharactersDied, this));
     }
 
     UiSubsystem::~UiSubsystem()
@@ -98,7 +101,7 @@
         World* world = CoreSubsystem::getSingleton().getWorld();
         SceneManager* sceneMgr = world->getSceneManager();
         
-        CEGUI::System::setDefaultXMLParserName("XercesParser");
+//        CEGUI::System::setDefaultXMLParserName("XercesParser");
 
         LOG_MESSAGE2(Logger::UI,
             "Initializing CEGUI Renderer.", "UiSubsystem::initializeUiSubsystem");



From blakharaz at mail.berlios.de  Fri Oct  3 09:34:41 2008
From: blakharaz at mail.berlios.de (blakharaz at mail.berlios.de)
Date: Fri, 3 Oct 2008 09:34:41 +0200
Subject: [Dsa-hl-svn] r4544 - rl/trunk/engine/rules/src
Message-ID: <200810030734.m937YfG0021365@sheep.berlios.de>

Author: blakharaz
Date: 2008-10-03 09:34:40 +0200 (Fri, 03 Oct 2008)
New Revision: 4544

Modified:
   rl/trunk/engine/rules/src/Combat.cpp
Log:
Fix removeItem

Modified: rl/trunk/engine/rules/src/Combat.cpp
===================================================================
--- rl/trunk/engine/rules/src/Combat.cpp	2008-10-03 07:31:12 UTC (rev 4543)
+++ rl/trunk/engine/rules/src/Combat.cpp	2008-10-03 07:34:40 UTC (rev 4544)
@@ -72,9 +72,11 @@
 		  mNextActionId(0),
 		  mAnimationSequenceTicket(0)
     {
+        LOG_MESSAGE("Combat", "Register message handler");
 		mLifeStateChangeConnection =
             MessagePump::getSingleton().addMessageHandler<MessageType_GameObjectLifeStateChanged>(
 			    boost::bind(&Combat::onGameObjectLifeStateChanged, this, _1, _2, _3));
+        LOG_MESSAGE("Combat", "Registering message handler done");
     }
 
     Combat::~Combat()



From fusion2 at mail.berlios.de  Sat Oct 11 19:26:06 2008
From: fusion2 at mail.berlios.de (fusion2 at mail.berlios.de)
Date: Sat, 11 Oct 2008 19:26:06 +0200
Subject: [Dsa-hl-svn] r4545 - in rl/trunk/editors/Lockenwickler: . src
Message-ID: <200810111726.m9BHQ6Rq026888@sheep.berlios.de>

Author: fusion2
Date: 2008-10-11 19:25:56 +0200 (Sat, 11 Oct 2008)
New Revision: 4545

Added:
   rl/trunk/editors/Lockenwickler/.eric4project/
   rl/trunk/editors/Lockenwickler/src/Property.py
Removed:
   rl/trunk/editors/Lockenwickler/Lockenwickler.e4q
   rl/trunk/editors/Lockenwickler/Lockenwickler.e4t
   rl/trunk/editors/Lockenwickler/src/ui_FourPanelView.py
   rl/trunk/editors/Lockenwickler/src/ui_obj_prop.py
Modified:
   rl/trunk/editors/Lockenwickler/Lockenwickler.e4p
   rl/trunk/editors/Lockenwickler/src/ConsoleWindow.py
   rl/trunk/editors/Lockenwickler/src/Lockenwickler.py
   rl/trunk/editors/Lockenwickler/src/ModuleManager.py
   rl/trunk/editors/Lockenwickler/src/MovePivot.py
   rl/trunk/editors/Lockenwickler/src/ObjectPropertyWin.py
   rl/trunk/editors/Lockenwickler/src/OgreMainWindow.py
   rl/trunk/editors/Lockenwickler/src/Plugins-linux.cfg
Log:
- objects can be moved and rotated

Modified: rl/trunk/editors/Lockenwickler/Lockenwickler.e4p
===================================================================
--- rl/trunk/editors/Lockenwickler/Lockenwickler.e4p	2008-10-03 07:34:40 UTC (rev 4544)
+++ rl/trunk/editors/Lockenwickler/Lockenwickler.e4p	2008-10-11 17:25:56 UTC (rev 4545)
@@ -1,9 +1,9 @@
 <?xml version="1.0" encoding="UTF-8"?>
-<!DOCTYPE Project SYSTEM "Project-4.4.dtd">
+<!DOCTYPE Project SYSTEM "Project-4.5.dtd">
 <!-- eric4 project file for project Lockenwickler -->
-<!-- Saved: 2008-09-20, 20:03:11 -->
+<!-- Saved: 2008-10-08, 20:52:14 -->
 <!-- Copyright (C) 2008 Stefan Stammberger, sstammberger at web.de -->
-<Project version="4.4">
+<Project version="4.5">
   <ProgLanguage mixed="0">Python</ProgLanguage>
   <ProjectType>Qt4</ProjectType>
   <Description>Lockenwickler is an Editor application for the Rastulahs Lockenpracht game.</Description>
@@ -23,10 +23,8 @@
     <Source>src/PreferencesDialog.py</Source>
     <Source>src/PythonOgreConfig.py</Source>
     <Source>src/ui_ConsoleWindow.py</Source>
-    <Source>src/ui_FourPanelView.py</Source>
     <Source>src/ui_lw.py</Source>
     <Source>src/ui_model_prev.py</Source>
-    <Source>src/ui_obj_prop.py</Source>
     <Source>src/ui_pref_dialog.py</Source>
     <Source>ui files/batch_convert_ui.py</Source>
     <Source>ui files/ui_ConsoleWindow.py</Source>
@@ -36,6 +34,7 @@
     <Source>ui files/ui_obj_prop.py</Source>
     <Source>ui files/ui_pref_dialog.py</Source>
     <Source>src/SceneExplorer.py</Source>
+    <Source>src/Property.py</Source>
   </Sources>
   <Forms>
     <Form>ui files/console_window.ui</Form>
@@ -170,9 +169,11 @@
   <FiletypeAssociations>
     <FiletypeAssociation pattern="*.ui" type="FORMS" />
     <FiletypeAssociation pattern="*.idl" type="INTERFACES" />
+    <FiletypeAssociation pattern="*.qm" type="TRANSLATIONS" />
     <FiletypeAssociation pattern="*.ptl" type="SOURCES" />
     <FiletypeAssociation pattern="*.pyw" type="SOURCES" />
     <FiletypeAssociation pattern="*.ui.h" type="FORMS" />
+    <FiletypeAssociation pattern="*.ts" type="TRANSLATIONS" />
     <FiletypeAssociation pattern="*.py" type="SOURCES" />
     <FiletypeAssociation pattern="*.qrc" type="RESOURCES" />
   </FiletypeAssociations>

Deleted: rl/trunk/editors/Lockenwickler/Lockenwickler.e4q
===================================================================
--- rl/trunk/editors/Lockenwickler/Lockenwickler.e4q	2008-10-03 07:34:40 UTC (rev 4544)
+++ rl/trunk/editors/Lockenwickler/Lockenwickler.e4q	2008-10-11 17:25:56 UTC (rev 4545)
@@ -1,7 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<!DOCTYPE UserProject SYSTEM "UserProject-4.0.dtd">
-<!-- eric4 user project file for project Lockenwickler -->
-<!-- Saved: 2008-06-23, 19:40:36 -->
-<!-- Copyright (C) 2008 Stefan Stammberger, sstammberger at web.de -->
-<UserProject version="4.0">
-</UserProject>
\ No newline at end of file

Deleted: rl/trunk/editors/Lockenwickler/Lockenwickler.e4t
===================================================================
--- rl/trunk/editors/Lockenwickler/Lockenwickler.e4t	2008-10-03 07:34:40 UTC (rev 4544)
+++ rl/trunk/editors/Lockenwickler/Lockenwickler.e4t	2008-10-11 17:25:56 UTC (rev 4545)
@@ -1,6 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<!DOCTYPE Tasks SYSTEM "Tasks-4.1.dtd">
-<!-- eric4 tasks file for project Lockenwickler -->
-<!-- Saved: 2008-06-23, 19:40:36 -->
-<Tasks version="4.1">
-</Tasks>
\ No newline at end of file

Modified: rl/trunk/editors/Lockenwickler/src/ConsoleWindow.py
===================================================================
--- rl/trunk/editors/Lockenwickler/src/ConsoleWindow.py	2008-10-03 07:34:40 UTC (rev 4544)
+++ rl/trunk/editors/Lockenwickler/src/ConsoleWindow.py	2008-10-11 17:25:56 UTC (rev 4545)
@@ -1,7 +1,12 @@
 import sys
+from PyQt4.QtCore import *
+from PyQt4.QtGui import *
+
 from ui_ConsoleWindow import *
 import ogre.renderer.OGRE as og
 
+
+
 class LockenLog(og.LogListener):
     def __init__(self, logFunction):
         og.LogListener.__init__(self)
@@ -24,6 +29,13 @@
         sys.stdout = self
         sys.stderr = self
 
+        clearAction= QAction("Clear Window",  self)
+        self.consoleWindow.textEdit.addAction(clearAction)
+        self.consoleWindow.textEdit.setContextMenuPolicy(Qt.ActionsContextMenu)
+        clearAction.setShortcut("Ctrl + R")
+        self.connect(clearAction, SIGNAL("triggered()"), self.consoleWindow.textEdit.clear)
+
+
     def write(self, text):
         if self.filterLog:
             if text.isspace():
@@ -34,6 +46,11 @@
             elif text.startswith("OGRE EXCEPTION"):
                 self.consoleWindow.textEdit.append(text)
                 return
+            elif text.startswith("dbg:"):
+                self.consoleWindow.textEdit.append(text)
+                return
         else:
             self.consoleWindow.textEdit.append(text)
 
+    def clear(self):
+        self.consoleWindow.textEdit.clear()

Modified: rl/trunk/editors/Lockenwickler/src/Lockenwickler.py
===================================================================
--- rl/trunk/editors/Lockenwickler/src/Lockenwickler.py	2008-10-03 07:34:40 UTC (rev 4544)
+++ rl/trunk/editors/Lockenwickler/src/Lockenwickler.py	2008-10-11 17:25:56 UTC (rev 4545)
@@ -2,8 +2,8 @@
 import sys
 import platform
 
-#sys.path.insert(0,'..')
-#import PythonOgreConfig
+sys.path.insert(0,'..')
+import PythonOgreConfig
 
 from random import randint
 from os.path import isfile
@@ -25,7 +25,7 @@
 
         self.setupUi()
 
-        self.consoleWindow = ConsoleWindow(False,  self)
+        self.consoleWindow = ConsoleWindow(True,  self)
 
         self.setupOgre()
 
@@ -106,7 +106,7 @@
         self.statusbar.setObjectName("statusbar")
         self.setStatusBar(self.statusbar)
 
-        self.actionNeu = QtGui.QAction(QtGui.QIcon("media/icons/package.png"), "&New",  self)
+        self.actionNeu =self.createAction("&New",  self.close,  "Ctrl + N",  "filenew.png",  "New")
         self.actionNeu.setObjectName("actionNeu")
 
         self.actionClose = self.createAction("Quit",  self.close,  "Alt + Q",  "exit.png",  "Quit")
@@ -120,7 +120,7 @@
         self.actionRotate = self.createAction("&Rotate",  self.actionRotateSlot,  "r",  "rotate.png",  "Rotate selected object")
         self.actionRotate.setObjectName("actionRotate")
 
-        self.actionScale = self.createAction("&Scale",  self.actionScaleSlot,  "s",  "resizecol.png",  "Scale selected object")
+        self.actionScale = self.createAction("&Scale",  self.actionScaleSlot,  "x",  "resizecol.png",  "Scale selected object")
         self.actionRotate.setObjectName("actionRotate")
 
 
@@ -199,16 +199,24 @@
         oglog.addListener(self.consoleWindow.lockenLog)
 
     def update(self):
+#        try:
+#            self.OgreMainWinSceneMgr.getSceneNode("saeule_076_node").yaw(0.02)
+#        except Exception,  e:
+#            pass
+
         self.ogreRoot.renderOneFrame()
 
     def actionMoveSlot(self):
-        print "MOVE!!!!!!!!!!!"
+        self.moduleManager.pivot.setMoveMode()
+        return
 
     def actionRotateSlot(self):
-        print "ROTATE!!!!!!!!!"
+        self.moduleManager.pivot.setRotateMode()
+        return
 
     def actionScaleSlot(self):
-        print "Scale!!!!!!!!"
+        self.moduleManager.pivot.setScaleMode()
+        return
 
     def togglePreferencesWindow(self):
         if self.prefDialog.isHidden():
@@ -362,7 +370,7 @@
         if reply == QtGui.QMessageBox.Cancel:
             return False
         if reply == QtGui.QMessageBox.Yes:
-            print "SAVE!!!!"
+            print""
             #TODO: implement save here
         return True
 

Modified: rl/trunk/editors/Lockenwickler/src/ModuleManager.py
===================================================================
--- rl/trunk/editors/Lockenwickler/src/ModuleManager.py	2008-10-03 07:34:40 UTC (rev 4544)
+++ rl/trunk/editors/Lockenwickler/src/ModuleManager.py	2008-10-11 17:25:56 UTC (rev 4545)
@@ -9,6 +9,7 @@
 # a class to store information about a object that got selected
 class SelectionObject():
     def __init__(self,  entity,  distance):
+        self.entityName = entity.getName()
         self.entity = entity #the selected entity
         self.distance = distance # the distance from camera at the time of selection
         self.isPivot = False
@@ -20,6 +21,12 @@
         else:
             self.entity.getParentNode().showBoundingBox(False)
 
+    def __eq__(self, other):
+        return self.entity.getName() == other.entity.getName()
+
+    def __ne__(self, other):
+        return self.entity.getName() != other.entity.getName()
+
 class MyRaySceneQueryListener ( og.RaySceneQueryListener ):
     def __init__( self ):
         super ( MyRaySceneQueryListener, self ).__init__()
@@ -45,7 +52,7 @@
             return -1
 
     def queryResult ( self, entity, distance ):
-        print entity.getName()
+        #print entity.getName()
         if distance == 0.0: #camera is in the bounding box, ignore this selection
             return True
         elif entity.getName() == "rayLine" :
@@ -84,14 +91,11 @@
         return True
 
     def reset(self):
-        for so in self.selectionList:
-            so.setSelected(False)
-
         self.previousSelected = -1
         self.currentSelected = -1
+        del self.selectionList[:]
+        #self.selectionList = []
 
-        self.selectionList = []
-
     def iterateEntityUnderMouse(self):
         self.previousSelected = self.currentSelected
         if len(self.selectionList) >= self.currentSelected: # would mean we are out of bounds
@@ -120,11 +124,9 @@
         pMesh = entity.getMesh()
 
         pos =    entity.getParentNode().getWorldPosition()
+        orient = entity.getParentNode().getWorldOrientation()
         scale =  entity.getParentNode().getScale()
-        orient = entity.getParentNode().getWorldOrientation()
 
-
-
         for i in range ( pMesh.getNumSubMeshes() ):
             pSubMesh = pMesh.getSubMesh(i)
             if pSubMesh.useSharedVertices:
@@ -207,7 +209,7 @@
 
             ih = 0
             for blah in self.mVertexList:
-                print str(ih) + ": "  +  str(blah)
+                #print str(ih) + ": "  +  str(blah)
                 ih += 1
 
 #            for blah in self.mIndexList:
@@ -229,15 +231,38 @@
 
 
     def rayCastToPolygonLevelOnSingleMesh(self,  ray,  entity):
+        return True
         self.getMeshInformation(entity)
+        name = entity.getName()
+        print "dbg: " + name
+
+        temp = []
+        for vec in self.mVertexList:
+            temp.append(vec.x)
+            temp.append(vec.y)
+            temp.append(vec.z)
+
         globalPosition = entity.getParentNode().getWorldPosition()
+        globalOrientation = entity.getParentNode().getWorldOrientation()
 
+
         i = 0
         while i <= (len(self.mIndexList) - 3):
-            result = og.Math.intersects(ray, globalPosition + self.mVertexList[self.mIndexList[i]], globalPosition + self.mVertexList[self.mIndexList[i+1]],
-                                                                                                                                                          globalPosition + self.mVertexList[self.mIndexList[i+2]], True, False)
+            verta = globalPosition + self.mVertexList[self.mIndexList[i]]
+            vertb = globalPosition + self.mVertexList[self.mIndexList[i+1]]
+            vertc = globalPosition + self.mVertexList[self.mIndexList[i+2]]
 
+            verta = globalOrientation * verta
+            vertb = globalOrientation * vertb
+            vertc = globalOrientation * vertc
+            normal = og.Math.calculateBasicFaceNormal(verta, vertb, vertc)
+
+            result = og.Math.intersects(ray, verta, vertb, vertc, True, True)
+            #result = og.Math.intersects(ray, globalPosition + self.mVertexList[self.mIndexList[i]], globalPosition + self.mVertexList[self.mIndexList[i+1]],
+            #                                                                                                                                              globalPosition + self.mVertexList[self.mIndexList[i+2]], normal,  True, True)
+
             if result.first:
+                print "dbg: Treffer!!!!!!!!!"
                 return True
 
             i += 3
@@ -291,6 +316,7 @@
                 self.parseSceneNodes(node)
 
         self.pivot = Pivot(self.sceneManager)
+        self.pivot.hide()
 
     def parseSceneNodes(self,  nodeList):
         for ent in nodeList:
@@ -330,16 +356,17 @@
                 print "Warning: Meshfile " + meshFile + " could not be found."
                 return
 
-            n = self.sceneManager.getRootSceneNode().createChild()
+            n = self.sceneManager.getRootSceneNode().createChild(entityName + "_node")
             n.attachObject(e)
             n.setPosition(nodePosition)
-            n.setOrientation(nodeRotation)
+            #n.setOrientation(nodeRotation)
             n.setScale(nodeScale)
 
         pass
 
     # called when a click into Main Ogre Window occurs
     def selectionClick(self,  ray,  controlDown=False,  shiftDown=False):
+        self.listenerDings.reset()
         self.lastRay = ray
         self.listenerDings.currentRay = ray
         self.raySceneQuery.Ray = ray
@@ -356,21 +383,26 @@
                     self.updatePivots()
                 elif controlDown and not shiftDown:
                     so.setSelected(True)
+
+                    for soFromList in self.userSelectionList:
+                        if soFromList == so:
+                            return # object already selected
+
                     self.userSelectionList.append(so)
                     self.updatePivots()
+
                 elif not controlDown and shiftDown:
                     for selo in self.userSelectionList:
-                        if so.entity.getName() == selo.entity.getName():
+                        if so == selo:
                             so.setSelected(False)
                             self.userSelectionList.remove(selo)
                     self.updatePivots()
             else:
-                print "isPivot: " + str(so.entity.getName())
                 self.pivot.startTransforming(so.entity,  self.userSelectionList)
         else:
-            print "noneee"
             self.resetSelection() # click in empty space, deselect everything
-            self.pivot.hide()
+            if self.pivot is not None:
+                self.pivot.hide()
 
         if self.rayLine == None:
             self.rayLine = self.sceneManager.createManualObject("rayLine")
@@ -393,7 +425,7 @@
             self.rayLine.end()
 
     def leftMouseUp(self):
-        if self.pivot.isTransforming:
+        if self.pivot is not None and self.pivot.isTransforming:
             self.pivot.stopTransforming()
 
     def iterateEntityUnderMouse(self):

Modified: rl/trunk/editors/Lockenwickler/src/MovePivot.py
===================================================================
--- rl/trunk/editors/Lockenwickler/src/MovePivot.py	2008-10-03 07:34:40 UTC (rev 4544)
+++ rl/trunk/editors/Lockenwickler/src/MovePivot.py	2008-10-11 17:25:56 UTC (rev 4545)
@@ -98,6 +98,7 @@
         self.pivotNode.setPosition(pos)
 
     def startTransforming(self, dirEntity, soList):
+        print "dbg: transforming....."
         self.moveDirection = dirEntity.getName()
         self.selectionList = soList
         self.isTransforming = True
@@ -108,42 +109,68 @@
         pass
 
     def hide(self):
-        self.pivotNode.setVisible(False)
+        self.pivotNode.removeAllChildren()
 
     def show(self):
+        self.hide()
         if self.mode == 1:
-            self.xMoveNode.setVisible(True)
-            self.yMoveNode.setVisible(True)
-            self.zMoveNode.setVisible(True)
-            self.freeMoveNode.setVisible(True)
+            self.pivotNode.addChild(self.xMoveNode)
+            self.pivotNode.addChild(self.yMoveNode)
+            self.pivotNode.addChild(self.zMoveNode)
         elif self.mode == 2:
-            self.xRotateNode.setVisible(True)
-            self.yRotateNode.setVisible(True)
-            self.zRotateNode.setVisible(True)
+            self.pivotNode.addChild(self.xRotateNode)
+            self.pivotNode.addChild(self.yRotateNode)
+            self.pivotNode.addChild(self.zRotateNode)
         elif self.mode == 3:
             pass
 
     def setMoveMode(self):
         self.hide()
         self.mode = 1
-        self.xMoveNode.setVisible(True)
-        self.yMoveNode.setVisible(True)
-        self.zMoveNode.setVisible(True)
-        self.freeMoveNode.setVisible(False)
-
+        self.pivotNode.addChild(self.xMoveNode)
+        self.pivotNode.addChild(self.yMoveNode)
+        self.pivotNode.addChild(self.zMoveNode)
         pass
 
     def setRotateMode(self):
         self.hide()
         self.mode = 2
-        self.xRotateNode.setVisible(True)
-        self.yRotateNode.setVisible(True)
-        self.zRotateNode.setVisible(True)
+        self.pivotNode.addChild(self.xRotateNode)
+        self.pivotNode.addChild(self.yRotateNode)
+        self.pivotNode.addChild(self.zRotateNode)
         pass
 
-    def __setScaleMode(self):
+    def settScaleMode(self):
         pass
 
     def onMouseMoved(self, globalX, globalY, incX, incY):
-        print self.moveDirection
+        # move mode
+        if self.mode == 1:
+            transVec = None
+            if self.moveDirection == "EditorXArrow":
+                transVec = og.Vector3(-incX, 0.0 , 0.0)
+            elif self.moveDirection == "EditorYArrow":
+                transVec = og.Vector3(0.0, -incY, 0.0)
+            elif self.moveDirection == "EditorZArrow":
+                transVec = og.Vector3(0.0, 0.0, -incX)
+
+            for so in self.selectionList:
+                so.entity.getParentNode().translate(transVec)
+
+            self.pivotNode.translate(transVec)
+
+        # rotate mode
+        elif self.mode == 2:
+            rotValue = (incX + incY) * 0.05
+
+            if self.moveDirection == "EditorXRotator":
+                for so in self.selectionList:
+                    so.entity.getParentNode().pitch(rotValue)
+            if self.moveDirection == "EditorYRotator":
+                for so in self.selectionList:
+                    so.entity.getParentNode().yaw(rotValue)
+            if self.moveDirection == "EditorZRotator":
+                for so in self.selectionList:
+                    so.entity.getParentNode().roll(rotValue)
+
         pass

Modified: rl/trunk/editors/Lockenwickler/src/ObjectPropertyWin.py
===================================================================
--- rl/trunk/editors/Lockenwickler/src/ObjectPropertyWin.py	2008-10-03 07:34:40 UTC (rev 4544)
+++ rl/trunk/editors/Lockenwickler/src/ObjectPropertyWin.py	2008-10-11 17:25:56 UTC (rev 4545)
@@ -1,17 +1,51 @@
 import sys
-from ui_obj_prop import *
 
-class ObjectPropertyWin(QtGui.QDialog):
+from PyQt4.QtCore import *
+from PyQt4.QtGui import *
+
+class ObjectPropertyWin(QDialog):
     def __init__(self, parent=None):
-        QtGui.QDialog.__init__(self, parent)
-        
-        self.propWin = Ui_ObjectPropertys()
-        self.propWin.setupUi(self)
-        
-        QtCore.QObject.connect(self.propWin.treeWidget, QtCore.SIGNAL("itemDoubleClicked (QTreeWidgetItem *,int)"), 
+        super(QDialog, self).__init__(parent)
+        self.setupUi()
+
+        self.connect(self.treeWidget, SIGNAL("itemDoubleClicked (QTreeWidgetItem *,int)"),
                                self.onItemClicked)
-        
-        
+
+
+    def setupUi(self):
+        self.setObjectName("ObjectPropertys")
+        self.resize(QSize(QRect(0,0,761,724).size()).expandedTo(self.minimumSizeHint()))
+
+        self.treeWidget = QTreeWidget(self)
+        self.treeWidget.setGeometry(QRect(0,0,901,721))
+        self.treeWidget.setMinimumSize(QSize(400,400))
+        self.treeWidget.setObjectName("treeWidget")
+
+        self.retranslateUi()
+        QMetaObject.connectSlotsByName(self)
+
+    def retranslateUi(self):
+        self.setWindowTitle(QApplication.translate("ObjectPropertys", "Object Properties", None, QApplication.UnicodeUTF8))
+        self.treeWidget.headerItem().setText(0,QApplication.translate("ObjectPropertys", "Property", None, QApplication.UnicodeUTF8))
+        self.treeWidget.headerItem().setText(1,QApplication.translate("ObjectPropertys", "Value", None, QApplication.UnicodeUTF8))
+        self.treeWidget.clear()
+
+        item = QTreeWidgetItem(self.treeWidget)
+        item.setText(0,QApplication.translate("ObjectPropertys", "Position", None, QApplication.UnicodeUTF8))
+        item.setText(1,"")
+
+        item1 = QTreeWidgetItem(item)
+        item1.setText(0,QApplication.translate("ObjectPropertys", "X", None, QApplication.UnicodeUTF8))
+        item1.setText(1,"")
+
+        item2 = QTreeWidgetItem(item)
+        item2.setText(0,QApplication.translate("ObjectPropertys", "Y", None, QApplication.UnicodeUTF8))
+        item2.setText(1,"")
+
+        item3 = QTreeWidgetItem(item)
+        item3.setText(0,QApplication.translate("ObjectPropertys", "Z", None, QApplication.UnicodeUTF8))
+        item3.setText(1,"")
+
     def onItemClicked(self, item, column):
         print item.text(0)
-        print column
\ No newline at end of file
+        print column

Modified: rl/trunk/editors/Lockenwickler/src/OgreMainWindow.py
===================================================================
--- rl/trunk/editors/Lockenwickler/src/OgreMainWindow.py	2008-10-03 07:34:40 UTC (rev 4544)
+++ rl/trunk/editors/Lockenwickler/src/OgreMainWindow.py	2008-10-11 17:25:56 UTC (rev 4545)
@@ -22,7 +22,7 @@
         self.middleMouseDown = False
         self.rightMouseDown = False
 
-        self.dollyCamera = False
+        self.mDollyCamera = False
 
         self.moveCamForward = False
         self.moveCamBackward = False
@@ -130,7 +130,7 @@
                 self.moduleManager.leftMouseDown = True
 
                 if self.rightMouseDown: #if right mouse button is already pressed dolly the camera
-                    self.dollyCamera = True
+                    self.mDollyCamera = True
                 else:
                     self.calculateSelectionRay(event)
 
@@ -150,8 +150,8 @@
                 self.moduleManager.leftMouseDown = False
                 self.moduleManager.leftMouseUp()
 
-                if self.dollyCamera == True: #if we dolly the camera set it to false
-                    self.dollyCamera = False
+                if self.mDollyCamera == True: #if we dolly the camera set it to false
+                    self.mDollyCamera = False
 
             elif event.button() == 2: # right mouse button is released
                 self.rightMouseDown = False
@@ -161,37 +161,41 @@
                 self.moduleManager.middleMouseDown = False
 
             if not self.rightMouseDown:
-                self.dollyCamera = False
+                self.mDollyCamera = False
                 self.camUpdateTimer.stop()
 
+            self.lastMousePosX = 0
+            self.lastMousePosY = 0
+
         elif event.type() == 5: #mouse moved while button down
+            if self.lastMousePosX == 0: # check to avoid to huge values which may happen when the user clicks and lastMousePosX/Y is zero
+                self.lastMousePosX = event.globalX()
+            if self.lastMousePosY == 0:# check to avoid to huge values which may happen when the user clicks and lastMousePosX/Y is zero
+                self.lastMousePosY = event.globalY()
+
             incX =  (event.globalX() - self.lastMousePosX)
             incY =  (event.globalY() - self.lastMousePosY)
 
-            if self.leftMouseDown and not self.middleMouseDown and not self.rightMouseDown:
+            if self.moduleManager.pivot is not None and  self.leftMouseDown and not self.middleMouseDown and not self.rightMouseDown:
                 self.moduleManager.pivot.onMouseMoved(event.globalX,  event.globalY,  incX,  incY)
 
+
             rotX = incX * 0.01
             rotY = incY * 0.01
 
-            if (rotX < 0.3 and rotY < 0.3) and (rotX > -0.3 and rotY > -0.3): # check to avoid to huge values which may happen when the user clicks and lastMousePosX/Y is zero
-                if self.dollyCamera:
-                    self.focusedWindow.dollyCamera(og.Vector3( rotX, -rotY,  0))
-                elif self.rightMouseDown:
-                    obj.orbitCamera(-rotX,  rotY)
+            if self.mDollyCamera:
+                obj.dollyCamera(og.Vector3(rotX, -rotY,  0) * 3)
+            elif self.rightMouseDown:
+                obj.orbitCamera(-rotX,  rotY)
 
             self.lastMousePosX = event.globalX()
             self.lastMousePosY = event.globalY()
 
-        elif event.type() == 3: # mouse released
-            self.lastMousePosX = 0
-            self.lastMousePosY = 0
-
         return False
 
     #calculates the the selection ray and notifies the ModuleManager that something is about to be selected
     def calculateSelectionRay(self,  event):
-        relMousePos = self.focusedWindow.mapFromGlobal(QtCore.QPoint(event.globalX(),  event.globalY())) # get the mose position relative to the focused window
+        relMousePos = self.ogreRenderWindow.mapFromGlobal(QtCore.QPoint(event.globalX(),  event.globalY())) # get the mose position relative to the ogre window
 
         if self.lastSelectionClick != None:
             if self.lastSelectionClick.x() == relMousePos.x() and self.lastSelectionClick.y() == relMousePos.y(): # mouse didn't move
@@ -201,9 +205,11 @@
                 return
 
         self.lastSelectionClick = relMousePos
-        mouseRay = self.focusedWindow.getCamera().getCameraToViewportRay(relMousePos.x()/float(self.focusedWindow.viewport.getActualHeight()),
-                                                                                                                                           relMousePos.y()/float(self.focusedWindow.viewport.getActualWidth()))
+        screenX = relMousePos.x()/float(self.ogreRenderWindow.viewport.getActualWidth())
+        screenY = relMousePos.y()/float(self.ogreRenderWindow.viewport.getActualHeight())
 
+        mouseRay = self.ogreRenderWindow.getCamera().getCameraToViewportRay(screenX, screenY)
+
         if event.modifiers() == QtCore.Qt.ControlModifier:
             self.moduleManager.selectionClick(mouseRay,  True,  False)
         elif event.modifiers() == QtCore.Qt.ShiftModifier:

Modified: rl/trunk/editors/Lockenwickler/src/Plugins-linux.cfg
===================================================================
--- rl/trunk/editors/Lockenwickler/src/Plugins-linux.cfg	2008-10-03 07:34:40 UTC (rev 4544)
+++ rl/trunk/editors/Lockenwickler/src/Plugins-linux.cfg	2008-10-11 17:25:56 UTC (rev 4545)
@@ -1,12 +1,12 @@
-# Defines plugins to load
-
-# Define plugin folder
-PluginFolder=/usr/lib/OGRE
-
-# default plugins installed with the libogre14 package
-Plugin=RenderSystem_GL.so
-Plugin=Plugin_ParticleFX.so
-Plugin=Plugin_OctreeSceneManager.so
-#Plugin=Plugin_CgProgramManager
-
-
+# Defines plugins to load
+
+# Define plugin folder
+PluginFolder=/home/stefan/development/root/usr/lib/OGRE/
+
+# default plugins installed with the libogre14 package
+Plugin=RenderSystem_GL.so
+Plugin=Plugin_ParticleFX.so
+Plugin=Plugin_OctreeSceneManager.so
+#Plugin=Plugin_CgProgramManager
+
+

Added: rl/trunk/editors/Lockenwickler/src/Property.py
===================================================================
--- rl/trunk/editors/Lockenwickler/src/Property.py	2008-10-03 07:34:40 UTC (rev 4544)
+++ rl/trunk/editors/Lockenwickler/src/Property.py	2008-10-11 17:25:56 UTC (rev 4545)
@@ -0,0 +1,8 @@
+class Property():
+    def __init__(self):
+
+    def setValue(self):
+
+    def getValue(self):
+
+    def createEditor(self):

Deleted: rl/trunk/editors/Lockenwickler/src/ui_FourPanelView.py
===================================================================
--- rl/trunk/editors/Lockenwickler/src/ui_FourPanelView.py	2008-10-03 07:34:40 UTC (rev 4544)
+++ rl/trunk/editors/Lockenwickler/src/ui_FourPanelView.py	2008-10-11 17:25:56 UTC (rev 4545)
@@ -1,50 +0,0 @@
-# -*- coding: utf-8 -*-
-
-# Form implementation generated from reading ui file 'FourPanelView.ui'
-#
-# Created: Mon May 12 15:09:24 2008
-#      by: PyQt4 UI code generator 4.3.3
-#
-# WARNING! All changes made in this file will be lost!
-
-from PyQt4 import QtCore, QtGui
-
-class Ui_FourPaneView(object):
-    def setupUi(self, FourPaneView):
-        FourPaneView.setObjectName("FourPaneView")
-        FourPaneView.resize(QtCore.QSize(QtCore.QRect(0,0,827,856).size()).expandedTo(FourPaneView.minimumSizeHint()))
-
-        self.gridlayout = QtGui.QGridLayout(FourPaneView)
-        self.gridlayout.setObjectName("gridlayout")
-
-        self.splitter_3 = QtGui.QSplitter(FourPaneView)
-        self.splitter_3.setOrientation(QtCore.Qt.Horizontal)
-        self.splitter_3.setObjectName("splitter_3")
-
-        self.splitter = QtGui.QSplitter(self.splitter_3)
-        self.splitter.setOrientation(QtCore.Qt.Vertical)
-        self.splitter.setObjectName("splitter")
-
-        self.widget = QtGui.QWidget(self.splitter)
-        self.widget.setObjectName("widget")
-
-        self.widget_4 = QtGui.QWidget(self.splitter)
-        self.widget_4.setObjectName("widget_4")
-
-        self.splitter_2 = QtGui.QSplitter(self.splitter_3)
-        self.splitter_2.setOrientation(QtCore.Qt.Vertical)
-        self.splitter_2.setObjectName("splitter_2")
-
-        self.widget_2 = QtGui.QWidget(self.splitter_2)
-        self.widget_2.setObjectName("widget_2")
-
-        self.widget_3 = QtGui.QWidget(self.splitter_2)
-        self.widget_3.setObjectName("widget_3")
-        self.gridlayout.addWidget(self.splitter_3,0,0,1,1)
-
-        self.retranslateUi(FourPaneView)
-        QtCore.QMetaObject.connectSlotsByName(FourPaneView)
-
-    def retranslateUi(self, FourPaneView):
-        FourPaneView.setWindowTitle(QtGui.QApplication.translate("FourPaneView", "Form", None, QtGui.QApplication.UnicodeUTF8))
-

Deleted: rl/trunk/editors/Lockenwickler/src/ui_obj_prop.py
===================================================================
--- rl/trunk/editors/Lockenwickler/src/ui_obj_prop.py	2008-10-03 07:34:40 UTC (rev 4544)
+++ rl/trunk/editors/Lockenwickler/src/ui_obj_prop.py	2008-10-11 17:25:56 UTC (rev 4545)
@@ -1,46 +0,0 @@
-# -*- coding: utf-8 -*-
-
-# Form implementation generated from reading ui file 'object_property.ui'
-#
-# Created: Mon May 12 15:09:23 2008
-#      by: PyQt4 UI code generator 4.3.3
-#
-# WARNING! All changes made in this file will be lost!
-
-from PyQt4 import QtCore, QtGui
-
-class Ui_ObjectPropertys(object):
-    def setupUi(self, ObjectPropertys):
-        ObjectPropertys.setObjectName("ObjectPropertys")
-        ObjectPropertys.resize(QtCore.QSize(QtCore.QRect(0,0,761,724).size()).expandedTo(ObjectPropertys.minimumSizeHint()))
-
-        self.treeWidget = QtGui.QTreeWidget(ObjectPropertys)
-        self.treeWidget.setGeometry(QtCore.QRect(0,0,901,721))
-        self.treeWidget.setMinimumSize(QtCore.QSize(400,400))
-        self.treeWidget.setObjectName("treeWidget")
-
-        self.retranslateUi(ObjectPropertys)
-        QtCore.QMetaObject.connectSlotsByName(ObjectPropertys)
-
-    def retranslateUi(self, ObjectPropertys):
-        ObjectPropertys.setWindowTitle(QtGui.QApplication.translate("ObjectPropertys", "Object Properties", None, QtGui.QApplication.UnicodeUTF8))
-        self.treeWidget.headerItem().setText(0,QtGui.QApplication.translate("ObjectPropertys", "Property", None, QtGui.QApplication.UnicodeUTF8))
-        self.treeWidget.headerItem().setText(1,QtGui.QApplication.translate("ObjectPropertys", "Value", None, QtGui.QApplication.UnicodeUTF8))
-        self.treeWidget.clear()
-
-        item = QtGui.QTreeWidgetItem(self.treeWidget)
-        item.setText(0,QtGui.QApplication.translate("ObjectPropertys", "Position", None, QtGui.QApplication.UnicodeUTF8))
-        item.setText(1,"")
-
-        item1 = QtGui.QTreeWidgetItem(item)
-        item1.setText(0,QtGui.QApplication.translate("ObjectPropertys", "X", None, QtGui.QApplication.UnicodeUTF8))
-        item1.setText(1,"")
-
-        item2 = QtGui.QTreeWidgetItem(item)
-        item2.setText(0,QtGui.QApplication.translate("ObjectPropertys", "Y", None, QtGui.QApplication.UnicodeUTF8))
-        item2.setText(1,"")
-
-        item3 = QtGui.QTreeWidgetItem(item)
-        item3.setText(0,QtGui.QApplication.translate("ObjectPropertys", "Z", None, QtGui.QApplication.UnicodeUTF8))
-        item3.setText(1,"")
-



From timm at mail.berlios.de  Sun Oct 12 14:14:56 2008
From: timm at mail.berlios.de (timm at mail.berlios.de)
Date: Sun, 12 Oct 2008 14:14:56 +0200
Subject: [Dsa-hl-svn] r4546 - in rl/branches/persistence: ai/include ai/src
	core/include core/src rules/include rules/src script/src
	script/swig ui/src
Message-ID: <200810121214.m9CCEuV5030783@sheep.berlios.de>

Author: timm
Date: 2008-10-12 14:14:27 +0200 (Sun, 12 Oct 2008)
New Revision: 4546

Modified:
   rl/branches/persistence/ai/include/CreatureWalkPathJob.h
   rl/branches/persistence/ai/src/CreatureWalkPathJob.cpp
   rl/branches/persistence/core/include/Job.h
   rl/branches/persistence/core/include/JobQueue.h
   rl/branches/persistence/core/include/MessagePump.h
   rl/branches/persistence/core/include/PlayAnimationJob.h
   rl/branches/persistence/core/include/StartAnimationJob.h
   rl/branches/persistence/core/src/Job.cpp
   rl/branches/persistence/core/src/JobQueue.cpp
   rl/branches/persistence/core/src/MessagePump.cpp
   rl/branches/persistence/core/src/PlayAnimationJob.cpp
   rl/branches/persistence/core/src/PlaySoundJob.cpp
   rl/branches/persistence/core/src/SaveAbleFactory.cpp
   rl/branches/persistence/core/src/SoundFadeJob.cpp
   rl/branches/persistence/core/src/StartAnimationJob.cpp
   rl/branches/persistence/rules/include/FetchItemJob.h
   rl/branches/persistence/rules/include/GoToJob.h
   rl/branches/persistence/rules/include/WaitJob.h
   rl/branches/persistence/rules/src/ApplyDamageJob.cpp
   rl/branches/persistence/rules/src/Combat.cpp
   rl/branches/persistence/rules/src/Combatant.cpp
   rl/branches/persistence/rules/src/FetchItemJob.cpp
   rl/branches/persistence/rules/src/GoToJob.cpp
   rl/branches/persistence/rules/src/WaitJob.cpp
   rl/branches/persistence/script/src/GameObjectNodeProcessor.cpp
   rl/branches/persistence/script/swig/RlAi.swig
   rl/branches/persistence/script/swig/RlCore.swig
   rl/branches/persistence/script/swig/RlRules.swig
   rl/branches/persistence/ui/src/InputManager.cpp
   rl/branches/persistence/ui/src/UiSubsystem.cpp
   rl/branches/persistence/ui/src/WindowFadeJob.cpp
Log:
- merged trunk with branch
- making jobs semi-persistent
- making it compile
- modules in trunk doesn't work anymore
- first success in loading game objects

Modified: rl/branches/persistence/ai/include/CreatureWalkPathJob.h
===================================================================
--- rl/branches/persistence/ai/include/CreatureWalkPathJob.h	2008-10-11 17:25:56 UTC (rev 4545)
+++ rl/branches/persistence/ai/include/CreatureWalkPathJob.h	2008-10-12 12:14:27 UTC (rev 4546)
@@ -41,7 +41,7 @@
         * @param movingCreature the job has to know a moving creature
         * @param startLandmark first landmark, the moving creature has to go to
         */
-        CreatureWalkPathJob(const Ogre::String& name, Creature* movingCreature, Landmark* startLandmark);
+        CreatureWalkPathJob(const CeGuiString &id, const Ogre::String& name, Creature* movingCreature, Landmark* startLandmark);
         //destructor
         virtual ~CreatureWalkPathJob();
 

Modified: rl/branches/persistence/ai/src/CreatureWalkPathJob.cpp
===================================================================
--- rl/branches/persistence/ai/src/CreatureWalkPathJob.cpp	2008-10-11 17:25:56 UTC (rev 4545)
+++ rl/branches/persistence/ai/src/CreatureWalkPathJob.cpp	2008-10-12 12:14:27 UTC (rev 4546)
@@ -28,8 +28,8 @@
     const CeGuiString CreatureWalkPathJob::PROPERTY_NEXTLANDMARKS = "nextlandmarks";
     const CeGuiString CreatureWalkPathJob::PROPERTY_GAMEOBJECTID = "go_id";
 
-    CreatureWalkPathJob::CreatureWalkPathJob(const Ogre::String& name, Creature* movingCreature, Landmark* startLandmark)
-        : Job(false, true, TimeSource::GAMETIME, Job::PERSISTENT), 
+    CreatureWalkPathJob::CreatureWalkPathJob(const CeGuiString &id, const Ogre::String& name, Creature* movingCreature, Landmark* startLandmark)
+        : Job(id, false, true, TimeSource::GAMETIME, Job::PERSISTENT), 
         mLandmarkPath("LandmarkPath" + name), 
         mWayPoints(NULL),
         mUpdatedDirection(false),

Modified: rl/branches/persistence/core/include/Job.h
===================================================================
--- rl/branches/persistence/core/include/Job.h	2008-10-11 17:25:56 UTC (rev 4545)
+++ rl/branches/persistence/core/include/Job.h	2008-10-12 12:14:27 UTC (rev 4546)
@@ -121,7 +121,7 @@
          *         Job, after execution is finished. This should usually be the case, but
          *         sometimes it is sensible to pool a number of Jobs for reuse.
          */
-        Job(bool isDiscardable, 
+        Job(const CeGuiString &id, bool isDiscardable, 
             bool destroyWhenDone, 
             TimeSource::TimeSourceType type = TimeSource::REALTIME_CONTINUOUS, 
             JobPersistenceType persistence = NOT_PERSISTENT);

Modified: rl/branches/persistence/core/include/JobQueue.h
===================================================================
--- rl/branches/persistence/core/include/JobQueue.h	2008-10-11 17:25:56 UTC (rev 4545)
+++ rl/branches/persistence/core/include/JobQueue.h	2008-10-12 12:14:27 UTC (rev 4546)
@@ -26,7 +26,7 @@
     class _RlCoreExport JobQueue : public AbstractJob
     {
     public:
-        JobQueue();
+        JobQueue(const CeGuiString &id);
         ~JobQueue();
 
         void add(AbstractJob* job);
@@ -44,7 +44,7 @@
     class _RlCoreExport JobSet : public AbstractJob
     {
     public:
-        JobSet();
+        JobSet(const CeGuiString &id);
         ~JobSet();
 
         void add(AbstractJob* job);

Modified: rl/branches/persistence/core/include/MessagePump.h
===================================================================
--- rl/branches/persistence/core/include/MessagePump.h	2008-10-11 17:25:56 UTC (rev 4545)
+++ rl/branches/persistence/core/include/MessagePump.h	2008-10-12 12:14:27 UTC (rev 4546)
@@ -1,292 +1,234 @@
-/* This source file is part of Rastullahs Lockenpracht.
-* Copyright (C) 2003-2008 Team Pantheon. http://www.team-pantheon.de
-* 
-*  This program is free software; you can redistribute it and/or modify
-*  it under the terms of the Clarified Artistic License.
-*
-*  This program is distributed in the hope that it will be useful,
-*  but WITHOUT ANY WARRANTY; without even the implied warranty of
-*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-*  Clarified Artistic License for more details.
-*
-*  You should have received a copy of the Clarified Artistic License
-*  along with this program; if not you can get it here
-*  http://www.jpaulmorrison.com/fbp/artistic2.htm.
-*/
-
-#ifndef __Rl_MessagePump_H__
-#define __Rl_MessagePump_H__
-
-#include "CorePrerequisites.h"
-
-#include "MessageType.h"
-#include "GameTask.h"
-
-
-#include <map>
-#include <queue>
-
-#include <boost/noncopyable.hpp>
-
-namespace rl
-{
-
-    class MessageHandlerWrapperBase
-    {
-    public:
-        virtual ~MessageHandlerWrapperBase() {}
-        virtual bool Invoke(MessageObjectBase* obj) = 0;
-    };
-
-    template<class _MessageType>
-    class MessageHandlerWrapper : public MessageHandlerWrapperBase
-    {
-    public:
-        typedef typename _MessageType::MessageObjectType MessageObjectType;
-        typedef typename _MessageType::HandlerType HandlerType;
-
-        MessageHandlerWrapper(const HandlerType& handler)
-            : mHandler(handler)
-        {
-        }
-
-        virtual bool Invoke(MessageObjectBase* obj)
-        {
-            MessageObjectType* obj2 = static_cast<MessageObjectType*>(obj);
-            return obj2->Invoke(mHandler);
-        }
-
-    private:
-        HandlerType mHandler;
-    };
-
-    class _RlCoreExport MessagePump : public GameTask, public Ogre::Singleton<MessagePump>
-    {
-    public:
-        class Connection
-        {
-            friend class MessagePump;
-        public:
-            Connection()
-                : connectionId(-1), pump(NULL)
-            {}
-            void disconnect()
-            {
-                if(pump && connectionId != -1)
-                    pump->disconnectHandler(connectionId);
-            }
-        private:
-            MessagePump* pump;
-            int connectionId;
-        };
-
-        class ScopedConnection : boost::noncopyable
-        {
-        public:
-            ScopedConnection()
-            {}
-            ScopedConnection(const Connection& conn)
-                : mConnection(conn)
-            {}
-            ScopedConnection& operator =(const Connection& conn)
-            {
-                mConnection.disconnect();
-                mConnection = conn;
-                return *this;
-            }
-            ~ScopedConnection()
-            {
-                mConnection.disconnect();
-            }
-        private:
-            Connection mConnection;
-        };
-
-    private:
-        struct MessageHandlerMapEntry
-        {
-            int connectionId;
-            MessageHandlerWrapperBase* handlerWrapper;
-        };
-
-        typedef std::vector<MessageHandlerMapEntry> MessageHandlerMapEntries;
-        typedef std::map<int, MessageHandlerMapEntries*> MessageHandlerMap;
-        typedef std::queue<MessageObjectBase*> MessageQueue;
-
-    public:
-        MessagePump() : mNextConnectionId(0) {}
-        ~MessagePump();
-
-        template<typename _MessageType>
-        Connection addMessageHandler( const typename _MessageType::HandlerType& handler )
-        {
-            MessageHandlerWrapper<_MessageType>* wrapper =
-                new MessageHandlerWrapper<_MessageType>(handler);
-
-            MessageHandlerMapEntries* entries = getOrCreateMapEntries(_MessageType::MessageTypeId);
-            MessageHandlerMapEntry entry = {mNextConnectionId++, wrapper};
-            entries->push_back(entry);
-
-            LOG_MESSAGE("MessagePump", 
-                "Added message handler for message type " 
-                + Ogre::StringConverter::toString(_MessageType::MessageTypeId));
-
-            Connection con;
-            con.pump = this;
-            con.connectionId = entry.connectionId;
-            return con;
-        }
-
-        /*
-        * sendMessage and postMessage is implemented for all possible parameter counts
-        * Thanks to the idea of SFINAE, the compiler will choose 
-        * the correct implementation for all MessageTypes at compile time
-        *
-        * sendMessage processes the message immediatly, while postMessage delays the 
-        * processing to a later frame
-        */
-        template<typename _MessageType>
-        bool sendMessage()
-        {
-            MessageObjectBase* obj = _MessageType::MessageObjectType::Build();
-            return doSend(obj);
-        }
-
-        template<typename _MessageType>
-        bool sendMessage(const typename _MessageType::MessageObjectType::Param1& p1)
-        {
-            MessageObjectBase* obj = _MessageType::MessageObjectType::Build(p1);
-            return doSend(obj);
-        }
-
-        template<typename _MessageType>
-        bool sendMessage(const typename _MessageType::MessageObjectType::Param1& p1,
-            const typename _MessageType::MessageObjectType::Param2& p2)
-        {
-            MessageObjectBase* obj = _MessageType::MessageObjectType::Build(p1, p2);
-            return doSend(obj);
-        }
-
-        template<typename _MessageType>
-        bool sendMessage(const typename _MessageType::MessageObjectType::Param1& p1,
-            const typename _MessageType::MessageObjectType::Param2& p2,
-            const typename _MessageType::MessageObjectType::Param2& p3)
-        {
-            MessageObjectBase* obj = _MessageType::MessageObjectType::Build(p1, p2, p3);
-            return doSend(obj);
-        }
-
-        ////////////////////////////////
-
-        template<typename _MessageType>
-        void postMessage()
-        {
-            MessageObjectBase* obj = _MessageType::MessageObjectType::Build();
-            doPost(obj);
-        }
-
-        template<typename _MessageType>
-        void postMessage(const typename _MessageType::MessageObjectType::Param1& p1)
-        {
-            MessageObjectBase* obj = _MessageType::MessageObjectType::Build(p1);
-            doPost(obj);
-        }
-
-        template<typename _MessageType>
-        void postMessage(const typename _MessageType::MessageObjectType::Param1& p1,
-            const typename _MessageType::MessageObjectType::Param2& p2)
-        {
-            MessageObjectBase* obj = _MessageType::MessageObjectType::Build(p1,p2);
-            doPost(obj);
-        }
-
-        template<typename _MessageType>
-        void postMessage(const typename _MessageType::MessageObjectType::Param1& p1,
-            const typename _MessageType::MessageObjectType::Param2& p2,
-            const typename _MessageType::MessageObjectType::Param2& p3)
-        {
-            MessageObjectBase* obj = _MessageType::MessageObjectType::Build(p1, p2, p3);
-            doPost(obj);
-        }
-
-        void sendPending()
-        {
-            while(!mMessageQueue.empty())
-            {
-                doSend(mMessageQueue.front());
-                mMessageQueue.pop();
-            }
-        }
-
-        // overloads from GameTask
-
-        virtual void run(Ogre::Real elapsedTime);
-
-        virtual const Ogre::String& getName() const;
-
-    private:
-        MessageHandlerMapEntries* getOrCreateMapEntries(int id) 
-        {
-            LOG_MESSAGE("MessagePump", "Create or get id " + Ogre::StringConverter::toString(id));
-            MessageHandlerMap::iterator it = mMessageHandlerMap.find(id);
-            if(it == mMessageHandlerMap.end())
-            {
-                MessageHandlerMapEntries* entries = new MessageHandlerMapEntries();
-                mMessageHandlerMap[id] = entries;
-                return entries;
-            }
-            return it->second;
-        }
-
-        bool doSend(MessageObjectBase* msg)
-        {
-            bool msgHandled = false;
-            MessageHandlerMapEntries* entries = getOrCreateMapEntries(msg->getMessageTypeId());
-            for(MessageHandlerMapEntries::iterator it = entries->begin(); it != entries->end(); ++it)
-            {
-                if((*it).handlerWrapper->Invoke(msg))
-                {
-                    msgHandled = true;
-                }
-            }
-            delete msg;
-            return msgHandled;;
-        }
-
-        void doPost(MessageObjectBase* msg)
-        {
-            mMessageQueue.push(msg);
-        }
-
-        friend class Connection;
-        void disconnectHandler(int connectionId)
-        {
-            //not very performant...definitely needs improvement
-            for (MessageHandlerMap::iterator it = mMessageHandlerMap.begin();
-                it != mMessageHandlerMap.end(); ++it)
-            {
-                MessageHandlerMapEntries* en = it->second;
-                for (MessageHandlerMapEntries::iterator jt = en->begin(); jt != en->end(); ++jt)
-                {
-                    if (jt->connectionId == connectionId)
-                    {
-                        delete jt->handlerWrapper;
-                        en->erase(jt);
-                        if (en->empty())
-                        {
-                            delete en;
-                            mMessageHandlerMap.erase(it);
-                        }
-                        return;
-                    }
-                }
-            }
-        }
-
-    private:
-        int mNextConnectionId;
-        MessageHandlerMap mMessageHandlerMap;
-        MessageQueue mMessageQueue;
-    };
-}
-#endif
+/* This source file is part of Rastullahs Lockenpracht.
+* Copyright (C) 2003-2008 Team Pantheon. http://www.team-pantheon.de
+* 
+*  This program is free software; you can redistribute it and/or modify
+*  it under the terms of the Clarified Artistic License.
+*
+*  This program is distributed in the hope that it will be useful,
+*  but WITHOUT ANY WARRANTY; without even the implied warranty of
+*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+*  Clarified Artistic License for more details.
+*
+*  You should have received a copy of the Clarified Artistic License
+*  along with this program; if not you can get it here
+*  http://www.jpaulmorrison.com/fbp/artistic2.htm.
+*/
+
+#ifndef __Rl_MessagePump_H__
+#define __Rl_MessagePump_H__
+
+#include "CorePrerequisites.h"
+
+#include "MessageType.h"
+#include "GameTask.h"
+
+
+#include <map>
+#include <queue>
+
+#include <boost/noncopyable.hpp>
+
+namespace rl
+{
+
+    class MessageHandlerWrapperBase
+    {
+    public:
+        virtual ~MessageHandlerWrapperBase() {}
+        virtual bool Invoke(MessageObjectBase* obj) = 0;
+    };
+
+    template<class _MessageType>
+    class MessageHandlerWrapper : public MessageHandlerWrapperBase
+    {
+    public:
+        typedef typename _MessageType::MessageObjectType MessageObjectType;
+        typedef typename _MessageType::HandlerType HandlerType;
+
+        MessageHandlerWrapper(const HandlerType& handler)
+            : mHandler(handler)
+        {
+        }
+
+        virtual bool Invoke(MessageObjectBase* obj)
+        {
+            MessageObjectType* obj2 = static_cast<MessageObjectType*>(obj);
+            return obj2->Invoke(mHandler);
+        }
+
+    private:
+        HandlerType mHandler;
+    };
+
+    class _RlCoreExport MessagePump : public GameTask, public Ogre::Singleton<MessagePump>
+    {
+    public:
+        class Connection
+        {
+            friend class MessagePump;
+        public:
+            Connection()
+                : connectionId(-1), pump(NULL)
+            {}
+            void disconnect()
+            {
+                if(pump && connectionId != -1)
+                    pump->disconnectHandler(connectionId);
+            }
+        private:
+            MessagePump* pump;
+            int connectionId;
+        };
+
+        class ScopedConnection : boost::noncopyable
+        {
+        public:
+            ScopedConnection()
+            {}
+            ScopedConnection(const Connection& conn)
+                : mConnection(conn)
+            {}
+            ScopedConnection& operator =(const Connection& conn)
+            {
+                mConnection.disconnect();
+                mConnection = conn;
+                return *this;
+            }
+            ~ScopedConnection()
+            {
+                mConnection.disconnect();
+            }
+        private:
+            Connection mConnection;
+        };
+
+    private:
+        struct MessageHandlerMapEntry
+        {
+            int connectionId;
+            MessageHandlerWrapperBase* handlerWrapper;
+        };
+
+        typedef std::vector<MessageHandlerMapEntry> MessageHandlerMapEntries;
+        typedef std::map<int, MessageHandlerMapEntries*> MessageHandlerMap;
+        typedef std::queue<MessageObjectBase*> MessageQueue;
+
+    public:
+        MessagePump() : mNextConnectionId(0) {}
+        ~MessagePump();
+
+        template<typename _MessageType>
+        Connection addMessageHandler( const typename _MessageType::HandlerType& handler )
+        {
+            MessageHandlerWrapper<_MessageType>* wrapper =
+                new MessageHandlerWrapper<_MessageType>(handler);
+
+            MessageHandlerMapEntries* entries = getOrCreateMapEntries(_MessageType::MessageTypeId);
+            MessageHandlerMapEntry entry = {mNextConnectionId++, wrapper};
+            entries->push_back(entry);
+
+            LOG_MESSAGE("MessagePump", 
+                "Added message handler for message type " 
+                + Ogre::StringConverter::toString(_MessageType::MessageTypeId));
+
+            Connection con;
+            con.pump = this;
+            con.connectionId = entry.connectionId;
+            return con;
+        }
+
+        /*
+        * sendMessage and postMessage is implemented for all possible parameter counts
+        * Thanks to the idea of SFINAE, the compiler will choose 
+        * the correct implementation for all MessageTypes at compile time
+        *
+        * sendMessage processes the message immediatly, while postMessage delays the 
+        * processing to a later frame
+        */
+        template<typename _MessageType>
+        bool sendMessage()
+        {
+            MessageObjectBase* obj = _MessageType::MessageObjectType::Build();
+            return doSend(obj);
+        }
+
+        template<typename _MessageType>
+        bool sendMessage(const typename _MessageType::MessageObjectType::Param1& p1)
+        {
+            MessageObjectBase* obj = _MessageType::MessageObjectType::Build(p1);
+            return doSend(obj);
+        }
+
+        template<typename _MessageType>
+        bool sendMessage(const typename _MessageType::MessageObjectType::Param1& p1,
+            const typename _MessageType::MessageObjectType::Param2& p2)
+        {
+            MessageObjectBase* obj = _MessageType::MessageObjectType::Build(p1, p2);
+            return doSend(obj);
+        }
+
+        template<typename _MessageType>
+        bool sendMessage(const typename _MessageType::MessageObjectType::Param1& p1,
+            const typename _MessageType::MessageObjectType::Param2& p2,
+            const typename _MessageType::MessageObjectType::Param2& p3)
+        {
+            MessageObjectBase* obj = _MessageType::MessageObjectType::Build(p1, p2, p3);
+            return doSend(obj);
+        }
+
+        ////////////////////////////////
+
+        template<typename _MessageType>
+        void postMessage()
+        {
+            MessageObjectBase* obj = _MessageType::MessageObjectType::Build();
+            doPost(obj);
+        }
+
+        template<typename _MessageType>
+        void postMessage(const typename _MessageType::MessageObjectType::Param1& p1)
+        {
+            MessageObjectBase* obj = _MessageType::MessageObjectType::Build(p1);
+            doPost(obj);
+        }
+
+        template<typename _MessageType>
+        void postMessage(const typename _MessageType::MessageObjectType::Param1& p1,
+            const typename _MessageType::MessageObjectType::Param2& p2)
+        {
+            MessageObjectBase* obj = _MessageType::MessageObjectType::Build(p1,p2);
+            doPost(obj);
+        }
+
+        template<typename _MessageType>
+        void postMessage(const typename _MessageType::MessageObjectType::Param1& p1,
+            const typename _MessageType::MessageObjectType::Param2& p2,
+            const typename _MessageType::MessageObjectType::Param2& p3)
+        {
+            MessageObjectBase* obj = _MessageType::MessageObjectType::Build(p1, p2, p3);
+            doPost(obj);
+        }
+
+        void sendPending();
+
+        // overloads from GameTask
+
+        virtual void run(Ogre::Real elapsedTime);
+
+        virtual const Ogre::String& getName() const;
+
+    private:
+        MessageHandlerMapEntries* getOrCreateMapEntries(int id); 
+        bool doSend(MessageObjectBase* msg);
+        void doPost(MessageObjectBase* msg);
+
+        friend class Connection;
+        void disconnectHandler(int connectionId);
+
+    private:
+        int mNextConnectionId;
+        MessageHandlerMap mMessageHandlerMap;
+        MessageQueue mMessageQueue;
+    };
+}
+#endif

Modified: rl/branches/persistence/core/include/PlayAnimationJob.h
===================================================================
--- rl/branches/persistence/core/include/PlayAnimationJob.h	2008-10-11 17:25:56 UTC (rev 4545)
+++ rl/branches/persistence/core/include/PlayAnimationJob.h	2008-10-12 12:14:27 UTC (rev 4546)
@@ -39,7 +39,7 @@
         * @param replaceAllAnims <code>true</code> if all other animations should be stopped,
         *                        when this animation is started, <code>false</code> else.
         */
-        PlayAnimationJob(Actor* actor, const Ogre::String& anim, Ogre::Real duration,
+        PlayAnimationJob(const CeGuiString &id, Actor* actor, const Ogre::String& anim, Ogre::Real duration,
             bool replaceAllAnims=true);
 
         /**
@@ -51,7 +51,7 @@
         * @param replaceAllAnims <code>true</code> if all other animations should be stopped,
         *                        when this animation is started, <code>false</code> else.
         */
-        PlayAnimationJob(Actor* actor, const Ogre::String& anim, int loops = 1,
+        PlayAnimationJob(const CeGuiString &id, Actor* actor, const Ogre::String& anim, int loops = 1,
             bool replaceAllAnims=true);
 
         virtual ~PlayAnimationJob();

Modified: rl/branches/persistence/core/include/StartAnimationJob.h
===================================================================
--- rl/branches/persistence/core/include/StartAnimationJob.h	2008-10-11 17:25:56 UTC (rev 4545)
+++ rl/branches/persistence/core/include/StartAnimationJob.h	2008-10-12 12:14:27 UTC (rev 4546)
@@ -38,7 +38,7 @@
         * @param replaceAllAnims <code>true</code> if all other animations should be stopped,
         *                        when this animation is started, <code>false</code> else.
         */
-        StartAnimationJob(Actor* actor, const Ogre::String& anim, bool doLoop=false,
+        StartAnimationJob(const CeGuiString &id, Actor* actor, const Ogre::String& anim, bool doLoop=false,
             bool replaceAllAnims=true);
         virtual ~StartAnimationJob();
 

Modified: rl/branches/persistence/core/src/Job.cpp
===================================================================
--- rl/branches/persistence/core/src/Job.cpp	2008-10-11 17:25:56 UTC (rev 4545)
+++ rl/branches/persistence/core/src/Job.cpp	2008-10-12 12:14:27 UTC (rev 4546)
@@ -20,10 +20,8 @@
 
 namespace rl
 {
-    AbstractJob::AbstractJob(bool isDiscardable, bool destroyWhenDone)
     AbstractJob::AbstractJob(const CeGuiString &id, bool isDiscardable, bool destroyWhenDone)
         : mIsDiscardable(isDiscardable), 
-        mDestroyWhenDone(destroyWhenDone)
         mDestroyWhenDone(destroyWhenDone),
 		SaveAble(id)
     {
@@ -112,8 +110,8 @@
         return keys;
     }
 
-    Job::Job(bool isDiscardable, bool destroyWhenDone, TimeSource::TimeSourceType timesource, JobPersistenceType persistence)
-        : AbstractJob(isDiscardable, destroyWhenDone),
+    Job::Job(const CeGuiString &id, bool isDiscardable, bool destroyWhenDone, TimeSource::TimeSourceType timesource, JobPersistenceType persistence)
+        : AbstractJob(id, isDiscardable, destroyWhenDone),
         mTimeSource(timesource),
         mPersistence(persistence)
     {

Modified: rl/branches/persistence/core/src/JobQueue.cpp
===================================================================
--- rl/branches/persistence/core/src/JobQueue.cpp	2008-10-11 17:25:56 UTC (rev 4545)
+++ rl/branches/persistence/core/src/JobQueue.cpp	2008-10-12 12:14:27 UTC (rev 4546)
@@ -20,8 +20,8 @@
 namespace rl
 {
 
-JobQueue::JobQueue()
-: AbstractJob(false, true),
+JobQueue::JobQueue(const CeGuiString &id)
+: AbstractJob(id, false, true),
     mTimeSource(TimeSource::REALTIME_CONTINUOUS)
 {
 }
@@ -96,8 +96,8 @@
     return "JobQueue";
 }
 
-JobSet::JobSet()
-: AbstractJob(false, true),
+JobSet::JobSet(const CeGuiString &id)
+: AbstractJob(id, false, true),
     mTimeSource(TimeSource::REALTIME_CONTINUOUS)
 {
 }

Modified: rl/branches/persistence/core/src/MessagePump.cpp
===================================================================
--- rl/branches/persistence/core/src/MessagePump.cpp	2008-10-11 17:25:56 UTC (rev 4545)
+++ rl/branches/persistence/core/src/MessagePump.cpp	2008-10-12 12:14:27 UTC (rev 4546)
@@ -1,57 +1,126 @@
-/* This source file is part of Rastullahs Lockenpracht.
- * Copyright (C) 2003-2008 Team Pantheon. http://www.team-pantheon.de
- * 
- *  This program is free software; you can redistribute it and/or modify
- *  it under the terms of the Clarified Artistic License.
- *
- *  This program is distributed in the hope that it will be useful,
- *  but WITHOUT ANY WARRANTY; without even the implied warranty of
- *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- *  Clarified Artistic License for more details.
- *
- *  You should have received a copy of the Clarified Artistic License
- *  along with this program; if not you can get it here
- *  http://www.jpaulmorrison.com/fbp/artistic2.htm.
- */
-#include "stdinc.h"
-
-#include "MessagePump.h"
-
-template<> rl::MessagePump* Ogre::Singleton<rl::MessagePump>::ms_Singleton = 0;
-
-namespace rl
-{
-    MessagePump::~MessagePump()
-    {
-
-        while(!mMessageQueue.empty())
-        {
-        
-            delete mMessageQueue.front();
-            mMessageQueue.pop();    
-        }
-
-        MessageHandlerMap::iterator it = mMessageHandlerMap.begin();
-        for( ; it != mMessageHandlerMap.end(); it++ )
-            if( it->second != NULL )
-                delete it->second;
-    }
-
-    void MessagePump::run(Ogre::Real elapsedTime)
-    {
-        static bool sending = false;
-        if(!sending)
-        {
-            sending = true;
-            sendPending();
-            sending = false;  
-        }
-    }
-
-    const Ogre::String& MessagePump::getName() const
-    {
-        static Ogre::String name = "MessagePump";
-        return name;
-    }
-
-}
+/* This source file is part of Rastullahs Lockenpracht.
+ * Copyright (C) 2003-2008 Team Pantheon. http://www.team-pantheon.de
+ * 
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the Clarified Artistic License.
+ *
+ *  This program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  Clarified Artistic License for more details.
+ *
+ *  You should have received a copy of the Clarified Artistic License
+ *  along with this program; if not you can get it here
+ *  http://www.jpaulmorrison.com/fbp/artistic2.htm.
+ */
+#include "stdinc.h"
+
+#include "MessagePump.h"
+
+template<> rl::MessagePump* Ogre::Singleton<rl::MessagePump>::ms_Singleton = 0;
+
+namespace rl
+{
+    MessagePump::~MessagePump()
+    {
+
+        while(!mMessageQueue.empty())
+        {
+        
+            delete mMessageQueue.front();
+            mMessageQueue.pop();    
+        }
+
+        MessageHandlerMap::iterator it = mMessageHandlerMap.begin();
+        for( ; it != mMessageHandlerMap.end(); it++ )
+            if( it->second != NULL )
+                delete it->second;
+    }
+
+    void MessagePump::run(Ogre::Real elapsedTime)
+    {
+        static bool sending = false;
+        if(!sending)
+        {
+            sending = true;
+            sendPending();
+            sending = false;  
+        }
+    }
+
+    const Ogre::String& MessagePump::getName() const
+    {
+        static Ogre::String name = "MessagePump";
+        return name;
+    }
+    
+    void MessagePump::sendPending()
+    {
+        while(!mMessageQueue.empty())
+        {
+            doSend(mMessageQueue.front());
+            mMessageQueue.pop();
+        }
+    }
+    
+    
+    MessagePump::MessageHandlerMapEntries* MessagePump::getOrCreateMapEntries(int id)
+    {
+        // if (id != 0x1000204){
+        //     LOG_MESSAGE("MessagePump", "Create or get id " + Ogre::StringConverter::toString(id));                
+        // }
+        MessageHandlerMap::iterator it = mMessageHandlerMap.find(id);
+        if(it == mMessageHandlerMap.end())
+        {
+            MessageHandlerMapEntries* entries = new MessageHandlerMapEntries();
+            mMessageHandlerMap[id] = entries;
+            return entries;
+        }
+        return it->second;
+    }
+    
+    bool MessagePump::doSend(MessageObjectBase* msg)
+    {
+        bool msgHandled = false;
+        MessageHandlerMapEntries* entries = getOrCreateMapEntries(msg->getMessageTypeId());
+        for(MessageHandlerMapEntries::iterator it = entries->begin(); it != entries->end(); ++it)
+        {
+            if((*it).handlerWrapper->Invoke(msg))
+            {
+                msgHandled = true;
+            }
+        }
+        delete msg;
+        return msgHandled;;
+    }
+    
+    void MessagePump::doPost(MessageObjectBase* msg)
+    {
+        mMessageQueue.push(msg);
+    }
+    
+    void MessagePump::disconnectHandler(int connectionId)
+    {
+        //not very performant...definitely needs improvement
+        for (MessageHandlerMap::iterator it = mMessageHandlerMap.begin();
+             it != mMessageHandlerMap.end(); ++it)
+        {
+            MessageHandlerMapEntries* en = it->second;
+            for (MessageHandlerMapEntries::iterator jt = en->begin(); jt != en->end(); ++jt)
+            {
+                if (jt->connectionId == connectionId)
+                {
+                    delete jt->handlerWrapper;
+                    en->erase(jt);
+                    if (en->empty())
+                    {
+                        delete en;
+                        mMessageHandlerMap.erase(it);
+                    }
+                    return;
+                }
+            }
+        }
+    }
+    
+}

Modified: rl/branches/persistence/core/src/PlayAnimationJob.cpp
===================================================================
--- rl/branches/persistence/core/src/PlayAnimationJob.cpp	2008-10-11 17:25:56 UTC (rev 4545)
+++ rl/branches/persistence/core/src/PlayAnimationJob.cpp	2008-10-12 12:14:27 UTC (rev 4546)
@@ -24,9 +24,9 @@
 namespace rl
 {
 
-    PlayAnimationJob::PlayAnimationJob(Actor* actor, const Ogre::String& anim, Ogre::Real duration,
+    PlayAnimationJob::PlayAnimationJob(const CeGuiString &id, Actor* actor, const Ogre::String& anim, Ogre::Real duration,
         bool replaceAllAnims)
-        : Job(false, true, TimeSource::REALTIME_INTERRUPTABLE),
+        : Job(id, false, true, TimeSource::REALTIME_INTERRUPTABLE),
           mActor(actor),
           mAnimName(anim),
           mDuration(duration),
@@ -39,9 +39,9 @@
     {
     }
 
-    PlayAnimationJob::PlayAnimationJob(Actor* actor, const Ogre::String& anim, int loops,
+    PlayAnimationJob::PlayAnimationJob(const CeGuiString &id, Actor* actor, const Ogre::String& anim, int loops,
         bool replaceAllAnims)
-        : Job(false, true, TimeSource::REALTIME_INTERRUPTABLE),
+        : Job(id, false, true, TimeSource::REALTIME_INTERRUPTABLE),
           mActor(actor),
           mAnimName(anim),
           mLoops(loops),

Modified: rl/branches/persistence/core/src/PlaySoundJob.cpp
===================================================================
--- rl/branches/persistence/core/src/PlaySoundJob.cpp	2008-10-11 17:25:56 UTC (rev 4545)
+++ rl/branches/persistence/core/src/PlaySoundJob.cpp	2008-10-12 12:14:27 UTC (rev 4546)
@@ -26,7 +26,7 @@
 {
 
 	PlaySound2dJob::PlaySound2dJob(const Ogre::String& sound, Real volume, int priority)
-        : Job(false, true), mSound(NULL), mExecuted(false)
+        : Job("", false, true), mSound(NULL), mExecuted(false)
     {
         mSound = SoundManager::getSingleton().createSound(sound, ST_SAMPLE);
         mSound->set3d(false);
@@ -53,7 +53,7 @@
     }
 
 	PlaySound3dJob::PlaySound3dJob(const Ogre::String& sound, const Ogre::Vector3& pos, Real volume, int priority)
-        : Job(false, true), mSound(NULL), mExecuted(false)
+        : Job("", false, true), mSound(NULL), mExecuted(false)
     {
         mSound = SoundManager::getSingleton().createSound(sound, ST_SAMPLE);
         mSound->set3d(true);

Modified: rl/branches/persistence/core/src/SaveAbleFactory.cpp
===================================================================
--- rl/branches/persistence/core/src/SaveAbleFactory.cpp	2008-10-11 17:25:56 UTC (rev 4545)
+++ rl/branches/persistence/core/src/SaveAbleFactory.cpp	2008-10-12 12:14:27 UTC (rev 4546)
@@ -16,4 +16,32 @@
 
 #include "stdinc.h"
 
-#include "SaveAbleFactory.h"
\ No newline at end of file
+#include "SaveAbleFactory.h"
+
+namespace rl
+{
+	void SaveAbleFactoryPool::registerFactory(const Ogre::String &key, rl::SaveAbleFactory *fac)
+	{
+		if(mFactories.find(key) != mFactories.end())
+			LOG_ERROR("CORE", "SaveAbleFactory already registered!");
+		mFactories[key] = fac;
+	}
+
+	void SaveAbleFactoryPool::unregisterFactory(const Ogre::String &key)
+	{
+		std::map<Ogre::String,SaveAbleFactory*>::iterator it = mFactories.find(key);
+		mFactories.erase(it);
+	}
+
+	void SaveAbleFactoryPool::unregisterFactory(rl::SaveAbleFactory *fac)
+	{
+	}
+
+	SaveAbleFactory* SaveAbleFactoryPool::getFactory(const Ogre::String &key)
+	{
+		std::map<Ogre::String,SaveAbleFactory*>::iterator it = mFactories.find(key);
+		if(it == mFactories.end())
+			return NULL;
+		return it->second;
+	}
+}
\ No newline at end of file

Modified: rl/branches/persistence/core/src/SoundFadeJob.cpp
===================================================================
--- rl/branches/persistence/core/src/SoundFadeJob.cpp	2008-10-11 17:25:56 UTC (rev 4545)
+++ rl/branches/persistence/core/src/SoundFadeJob.cpp	2008-10-12 12:14:27 UTC (rev 4546)
@@ -23,7 +23,7 @@
 namespace rl
 {
     SoundFadeJob::SoundFadeJob(SoundObject* soundObject, SoundFadeFunctor* fadeFunctor, bool destroyWhenDone)
-        : Job(true, destroyWhenDone),
+        : Job("", true, destroyWhenDone),
         mSoundObject(soundObject),
         mSoundFadeFunctor(fadeFunctor),
         mTime(0)

Modified: rl/branches/persistence/core/src/StartAnimationJob.cpp
===================================================================
--- rl/branches/persistence/core/src/StartAnimationJob.cpp	2008-10-11 17:25:56 UTC (rev 4545)
+++ rl/branches/persistence/core/src/StartAnimationJob.cpp	2008-10-12 12:14:27 UTC (rev 4546)
@@ -23,9 +23,9 @@
 namespace rl
 {
 
-    StartAnimationJob::StartAnimationJob(Actor* actor, const Ogre::String& anim, bool doLoop,
+    StartAnimationJob::StartAnimationJob(const CeGuiString &id, Actor* actor, const Ogre::String& anim, bool doLoop,
         bool replaceAllAnims)
-        : Job(false, true, TimeSource::REALTIME_INTERRUPTABLE),
+        : Job(id, false, true, TimeSource::REALTIME_INTERRUPTABLE),
           mActor(actor),
           mAnimName(anim),
           mLoop(doLoop),

Modified: rl/branches/persistence/rules/include/FetchItemJob.h
===================================================================
--- rl/branches/persistence/rules/include/FetchItemJob.h	2008-10-11 17:25:56 UTC (rev 4545)
+++ rl/branches/persistence/rules/include/FetchItemJob.h	2008-10-12 12:14:27 UTC (rev 4546)
@@ -31,7 +31,7 @@
     {
     public:
 
-		FetchItemJob(Creature* actor, Item* item, const Ogre::String& targetSlot, Ogre::Real duration);
+		FetchItemJob(const CeGuiString &id, Creature* actor, Item* item, const Ogre::String& targetSlot, Ogre::Real duration);
         virtual ~FetchItemJob();
 
         virtual bool execute(Ogre::Real time);

Modified: rl/branches/persistence/rules/include/GoToJob.h
===================================================================
--- rl/branches/persistence/rules/include/GoToJob.h	2008-10-11 17:25:56 UTC (rev 4545)
+++ rl/branches/persistence/rules/include/GoToJob.h	2008-10-12 12:14:27 UTC (rev 4546)
@@ -31,9 +31,9 @@
     {
     public:
 
-		GoToJob(Creature* actor, const Ogre::Vector3& targetPos,
+		GoToJob(const CeGuiString &id, Creature* actor, const Ogre::Vector3& targetPos,
 			Ogre::Real maxDistance, Ogre::Real duration);
-		GoToJob(Creature* actor, GameObject* target, Ogre::Real maxDistance, Ogre::Real duration);
+		GoToJob(const CeGuiString &id, Creature* actor, GameObject* target, Ogre::Real maxDistance, Ogre::Real duration);
         virtual ~GoToJob();
 
         virtual bool execute(Ogre::Real time);

Modified: rl/branches/persistence/rules/include/WaitJob.h
===================================================================
--- rl/branches/persistence/rules/include/WaitJob.h	2008-10-11 17:25:56 UTC (rev 4545)
+++ rl/branches/persistence/rules/include/WaitJob.h	2008-10-12 12:14:27 UTC (rev 4546)
@@ -29,8 +29,8 @@
         public Job
     {
     public:
-        WaitJob(const Date& dsatime);
-        WaitJob(const Ogre::Real& realtime);
+        WaitJob(const CeGuiString &id, const Date& dsatime);
+        WaitJob(const CeGuiString &id, const Ogre::Real& realtime);
         ~WaitJob();
 
         virtual bool execute(Ogre::Real time);

Modified: rl/branches/persistence/rules/src/ApplyDamageJob.cpp
===================================================================
--- rl/branches/persistence/rules/src/ApplyDamageJob.cpp	2008-10-11 17:25:56 UTC (rev 4545)
+++ rl/branches/persistence/rules/src/ApplyDamageJob.cpp	2008-10-12 12:14:27 UTC (rev 4546)
@@ -22,7 +22,7 @@
 {
 
 ApplyDamageJob::ApplyDamageJob(Creature* target, int tp)
-:   Job(false, true, TimeSource::GAMETIME, AbstractJob::PERSISTENT),
+:   Job("",false, true, TimeSource::GAMETIME, AbstractJob::PERSISTENT),
     mTarget(target), 
     mTp(tp)
 {

Modified: rl/branches/persistence/rules/src/Combat.cpp
===================================================================
--- rl/branches/persistence/rules/src/Combat.cpp	2008-10-11 17:25:56 UTC (rev 4545)
+++ rl/branches/persistence/rules/src/Combat.cpp	2008-10-12 12:14:27 UTC (rev 4546)
@@ -72,9 +72,11 @@
 		  mNextActionId(0),
 		  mAnimationSequenceTicket(0)
     {
+        LOG_MESSAGE("Combat", "Register message handler");
 		mLifeStateChangeConnection =
             MessagePump::getSingleton().addMessageHandler<MessageType_GameObjectLifeStateChanged>(
 			    boost::bind(&Combat::onGameObjectLifeStateChanged, this, _1, _2, _3));
+        LOG_MESSAGE("Combat", "Registering message handler done");
     }
 
     Combat::~Combat()
@@ -321,15 +323,15 @@
 		// Auf gehts!
 
 		// Prepare JobQueue for animations.
-		JobQueue* jobQueue = new JobQueue();
+		JobQueue* jobQueue = new JobQueue("AnimationQueue");
 
 		for (size_t actionIndex = 0; actionIndex < 3; ++actionIndex)
 		{
 			for (CombatantQueue::iterator it = mCombatantQueue.begin();
 				it != mCombatantQueue.end(); ++it)
 			{
-			    JobSet* jobSetAnims = new JobSet();
-                JobSet* jobSetOutcome = new JobSet(); // damage is applied after combat animations to prevent premature reactions
+			    JobSet* jobSetAnims = new JobSet("jobSetAnims");
+                JobSet* jobSetOutcome = new JobSet("jobSetOutcome"); // damage is applied after combat animations to prevent premature reactions
 
                 Combatant* combatant = it->second;
 

Modified: rl/branches/persistence/rules/src/Combatant.cpp
===================================================================
--- rl/branches/persistence/rules/src/Combatant.cpp	2008-10-11 17:25:56 UTC (rev 4545)
+++ rl/branches/persistence/rules/src/Combatant.cpp	2008-10-12 12:14:27 UTC (rev 4546)
@@ -136,7 +136,7 @@
 
 		// Get real animation name
 		Creature::AnimationSpeedPair asp = getCreature()->getAnimation(ani);
-		PlayAnimationJob* job = new PlayAnimationJob(getCreature()->getActor(), asp.first);
+		PlayAnimationJob* job = new PlayAnimationJob("Animation" + ani + getCreature()->getId(), getCreature()->getActor(), asp.first);
         job->setHoldOnEnd(false);
         jobSet->add(job);
 	}
@@ -164,7 +164,7 @@
 
 		// Get real animation name
 		Creature::AnimationSpeedPair asp = getCreature()->getAnimation(ani);
-		PlayAnimationJob* job = new PlayAnimationJob(getCreature()->getActor(), asp.first);
+		PlayAnimationJob* job = new PlayAnimationJob("Animation" + ani + getCreature()->getId(), getCreature()->getActor(), asp.first);
         job->setHoldOnEnd(false);
         jobSet->add(job);
 	}
@@ -173,20 +173,20 @@
 	{
 		// Get real animation name
 		Creature::AnimationSpeedPair asp = getCreature()->getAnimation("kampf_getroffen");
-		PlayAnimationJob* job = new PlayAnimationJob(getCreature()->getActor(), asp.first);
+		PlayAnimationJob* job = new PlayAnimationJob("Animation" + Ogre::String("kampf_getroffen") + getCreature()->getId(), getCreature()->getActor(), asp.first);
         job->setHoldOnEnd(false);
 		jobSet->add(job);
 	}
 
 	void Combatant::doBewegen(JobSet* jobSet, const Ogre::Vector3& targetPos)
 	{
-		Job* job = new GoToJob(getCreature(), targetPos, 0.0f, 3.0f);
+		Job* job = new GoToJob("GoTo" + getCreature()->getId(), getCreature(), targetPos, 0.0f, 3.0f);
 		jobSet->add(job);
 	}
 
 	void Combatant::doFolgen(JobSet* jobSet, Combatant* target)
 	{
-		Job* job = new GoToJob(getCreature(), target->getCreature(),
+		Job* job = new GoToJob("GoTo" + getCreature()->getId(), getCreature(), target->getCreature(),
 			getActiveWeapon()->getMaximumDistance(), 3.0f);
 		jobSet->add(job);
 	}

Modified: rl/branches/persistence/rules/src/FetchItemJob.cpp
===================================================================
--- rl/branches/persistence/rules/src/FetchItemJob.cpp	2008-10-11 17:25:56 UTC (rev 4545)
+++ rl/branches/persistence/rules/src/FetchItemJob.cpp	2008-10-12 12:14:27 UTC (rev 4546)
@@ -30,8 +30,8 @@
 
 namespace rl
 {
-	FetchItemJob::FetchItemJob(Creature* actor, Item* item, const Ogre::String& targetSlot, Ogre::Real duration)
-		: Job(false, true, TimeSource::REALTIME_INTERRUPTABLE),
+	FetchItemJob::FetchItemJob(const CeGuiString &id, Creature* actor, Item* item, const Ogre::String& targetSlot, Ogre::Real duration)
+		: Job(id, false, true, TimeSource::REALTIME_INTERRUPTABLE),
 		  mActor(CreatureControllerManager::getSingleton().getCreatureController(actor)),
 		  mItem(item),
 		  mTargetSlot(targetSlot),
@@ -52,15 +52,34 @@
 			|| mItem->getState() == GOS_UNLOADED
 			|| mItem->getState() == GOS_LOADED)
 		{
+            if (!mItem) 
+            {
+                LOG_WARNING("FetchItemJob", "Item not set or it has a strange state.");
+            }
+            else if (mTimeLeft < 0)
+            {
+                LOG_MESSAGE("FetchItemJob", "Time is up.");
+            }
+            else
+            {
+                LOG_WARNING("FetchItemJob", "Item has a strange state (" 
+                        + StringConverter::toString(mItem->getState()) + ")");
+            }
+
 			// Stay put where ever we are.
 			mActor->setMovement(CreatureController::MT_STEHEN, Vector3::ZERO, Vector3::ZERO);
 			return true;
 		}
 
-		Vector3 targetPos = mItem->getPosition();
+        Item* target = mItem;
+        while (target->getState() == GOS_IN_POSSESSION)
+        {
+            target = target->getParentContainer();
+        }
+		Vector3 targetPos = target->getPosition();
 
 		// Are we there now?
-		Ogre::Real distance = MathUtil::distance(mItem->getWorldBoundingBox(),
+		Ogre::Real distance = MathUtil::distance(target->getWorldBoundingBox(),
 			mActor->getCreature()->getWorldBoundingBox());
 		if (distance < 1.0f)
 		{
@@ -68,9 +87,9 @@
             
             if (mItem->getState() == GOS_IN_SCENE)
             {
-                    // @todo play pickup animation
-                    mActor->getCreature()->getInventory()->hold(mItem, mTargetSlot);
-                    return true;
+                // @todo play pickup animation
+                mActor->getCreature()->getInventory()->hold(mItem, mTargetSlot);
+                return true;
 			}
             else if (mItem->getState() == GOS_IN_POSSESSION)
 			{
@@ -86,8 +105,8 @@
             else if (mItem->getState() == GOS_READY
 					 || mItem->getState() == GOS_HELD)
 			{
-                    LOG_WARNING("FetchItemJob", "Target item is held by someone");
-                    return true;
+                LOG_WARNING("FetchItemJob", "Target item is held by someone");
+                return true;
             }
 
             return false;

Modified: rl/branches/persistence/rules/src/GoToJob.cpp
===================================================================
--- rl/branches/persistence/rules/src/GoToJob.cpp	2008-10-11 17:25:56 UTC (rev 4545)
+++ rl/branches/persistence/rules/src/GoToJob.cpp	2008-10-12 12:14:27 UTC (rev 4546)
@@ -25,8 +25,8 @@
 
 namespace rl
 {
-	GoToJob::GoToJob(Creature* actor, const Vector3& targetPos, Real maxDistance, Real duration)
-		: Job(false, true, TimeSource::REALTIME_INTERRUPTABLE),
+	GoToJob::GoToJob(const CeGuiString &id, Creature* actor, const Vector3& targetPos, Real maxDistance, Real duration)
+		: Job(id, false, true, TimeSource::REALTIME_INTERRUPTABLE),
 		  mActor(NULL),
 		  mTarget(NULL),
 		  mTargetPos(targetPos),
@@ -36,8 +36,8 @@
 		mActor = CreatureControllerManager::getSingleton().getCreatureController(actor);
 	}
 
-	GoToJob::GoToJob(Creature* actor, GameObject* target, Real maxDistance, Real duration)
-		: Job(false, true, TimeSource::REALTIME_INTERRUPTABLE),
+	GoToJob::GoToJob(const CeGuiString &id, Creature* actor, GameObject* target, Real maxDistance, Real duration)
+		: Job(id, false, true, TimeSource::REALTIME_INTERRUPTABLE),
 		  mActor(NULL),
 		  mTarget(target),
 		  mTargetPos(Vector3::ZERO),

Modified: rl/branches/persistence/rules/src/WaitJob.cpp
===================================================================
--- rl/branches/persistence/rules/src/WaitJob.cpp	2008-10-11 17:25:56 UTC (rev 4545)
+++ rl/branches/persistence/rules/src/WaitJob.cpp	2008-10-12 12:14:27 UTC (rev 4546)
@@ -21,14 +21,14 @@
 namespace rl
 {
 
-    WaitJob::WaitJob(const Date& dsatime)
-        : Job(false, true, TimeSource::GAMETIME, Job::PERSISTENT),
+    WaitJob::WaitJob(const CeGuiString &id, const Date& dsatime)
+        : Job(id, false, true, TimeSource::GAMETIME, Job::PERSISTENT),
         mTime(dsatime.toReal())
     {
     }
 
-    WaitJob::WaitJob(const Ogre::Real& realtime)
-        : Job(false, true, TimeSource::REALTIME_INTERRUPTABLE, Job::PERSISTENT),
+    WaitJob::WaitJob(const CeGuiString &id, const Ogre::Real& realtime)
+        : Job(id, false, true, TimeSource::REALTIME_INTERRUPTABLE, Job::PERSISTENT),
         mTime(realtime)
     {
     }

Modified: rl/branches/persistence/script/src/GameObjectNodeProcessor.cpp
===================================================================
--- rl/branches/persistence/script/src/GameObjectNodeProcessor.cpp	2008-10-11 17:25:56 UTC (rev 4545)
+++ rl/branches/persistence/script/src/GameObjectNodeProcessor.cpp	2008-10-12 12:14:27 UTC (rev 4546)
@@ -44,13 +44,14 @@
 
         if (hasAttribute(nodeElem, "id"))
         {
-            goid = getAttributeValueAsInteger(nodeElem, "id");
+            goid = getAttributeValueAsString(nodeElem, "id");
         }
 
         GameObject* go = GameObjectManager::getSingleton().getGameObject(goid);
         if(!go)
         {
             go = GameObjectManager::getSingleton().createGameObject(classname, goid);
+			LOG_MESSAGE("Maploader", "Created GameObject with id: " + goid);
 
             DOMElement* posElem = getChildNamed(nodeElem, "position");
             if (posElem != NULL)

Modified: rl/branches/persistence/script/swig/RlAi.swig
===================================================================
--- rl/branches/persistence/script/swig/RlAi.swig	2008-10-11 17:25:56 UTC (rev 4545)
+++ rl/branches/persistence/script/swig/RlAi.swig	2008-10-12 12:14:27 UTC (rev 4546)
@@ -284,7 +284,7 @@
 	class CreatureWalkPathJob : public Job
     {
     public:
-        CreatureWalkPathJob(const Ogre::String& name, rl::Creature* movingCreature, rl::Landmark* startLandmark);
+        CreatureWalkPathJob(const rl::CeGuiString &id, const Ogre::String& name, rl::Creature* movingCreature, rl::Landmark* startLandmark);
 
         void addLandmark(const Ogre::String& name, const Ogre::Vector3& position);
         void addLandmark(rl::Landmark* lm);

Modified: rl/branches/persistence/script/swig/RlCore.swig
===================================================================
--- rl/branches/persistence/script/swig/RlCore.swig	2008-10-11 17:25:56 UTC (rev 4545)
+++ rl/branches/persistence/script/swig/RlCore.swig	2008-10-12 12:14:27 UTC (rev 4546)
@@ -989,7 +989,7 @@
 %apply SWIGTYPE *DYNAMIC { Job * };
 
 %feature("director") Job;
-class Job
+class Job : public SaveAble
 {
 public:
     /**
@@ -1004,7 +1004,7 @@
      *         Job, after execution is finished. This should usually be the case, but
      *         sometimes it is sensible to pool a number of Jobs for reuse.
      */
-	Job( bool isDiscardable, bool destroyWhenDone );
+	Job(const rl::CeGuiString &id, bool isDiscardable, bool destroyWhenDone );
 	virtual ~Job();
 	
 	/**
@@ -1052,9 +1052,9 @@
 class PlayAnimationJob : public rl::Job
 {
 public:
-    PlayAnimationJob(Actor* actor, const Ogre::String& anim, Ogre::Real duration,
+    PlayAnimationJob(const rl::CeGuiString &id, Actor* actor, const Ogre::String& anim, Ogre::Real duration,
 		bool replaceAllAnims=true);
-    PlayAnimationJob(Actor* actor, const Ogre::String& anim, int loops = 1,
+    PlayAnimationJob(const rl::CeGuiString &id, Actor* actor, const Ogre::String& anim, int loops = 1,
 		bool replaceAllAnims=true);
     virtual ~PlayAnimationJob();
     
@@ -1065,7 +1065,7 @@
 class StartAnimationJob : public rl::Job
 {
 public:
-    StartAnimationJob(Actor* actor, const Ogre::String& anim, bool doLoop=false,
+    StartAnimationJob(const rl::CeGuiString &id, Actor* actor, const Ogre::String& anim, bool doLoop=false,
 		bool replaceAllAnims=true);
     virtual ~StartAnimationJob();
     
@@ -1085,7 +1085,7 @@
 class JobQueue : public rl::Job
 {
 public:
-    JobQueue();
+    JobQueue(const rl::CeGuiString &id);
     virtual ~JobQueue();
     void add(Job* job);
     
@@ -1096,7 +1096,7 @@
 class JobSet : public rl::Job
 {
 public:
-    JobSet();
+    JobSet(const rl::CeGuiString &id);
     virtual ~JobSet();
     void add(Job* job);
     

Modified: rl/branches/persistence/script/swig/RlRules.swig
===================================================================
--- rl/branches/persistence/script/swig/RlRules.swig	2008-10-11 17:25:56 UTC (rev 4545)
+++ rl/branches/persistence/script/swig/RlRules.swig	2008-10-12 12:14:27 UTC (rev 4546)
@@ -439,15 +439,15 @@
     class WaitJob : public rl::Job
     {
     public:
-        WaitJob(const rl::Date& dsatime);
-        WaitJob(const Ogre::Real& realtime);
+        WaitJob(const rl::CeGuiString &id, const rl::Date& dsatime);
+        WaitJob(const rl::CeGuiString &id, const Ogre::Real& realtime);
     };
     
     class GoToJob : public rl::Job
     {
     public:
 
-		GoToJob(rl::Creature* actor, const Ogre::Vector3& targetPos,
+		GoToJob(const rl::CeGuiString &id, rl::Creature* actor, const Ogre::Vector3& targetPos,
 			Ogre::Real maxDistance, Ogre::Real duration);
 		// Unclear what version is called from ruby, so uncomment second ctor.
 		//GoToJob(rl::Creature* actor, rl::GameObject* target, Ogre::Real maxDistance, Ogre::Real duration);
@@ -458,7 +458,7 @@
     {
     public:
 
-		FetchItemJob(rl::Creature* actor, rl::Item* item, const Ogre::String& targetSlot, Ogre::Real duration);
+		FetchItemJob(const rl::CeGuiString &id, rl::Creature* actor, rl::Item* item, const Ogre::String& targetSlot, Ogre::Real duration);
     };
     
     %feature("director") Item;

Modified: rl/branches/persistence/ui/src/InputManager.cpp
===================================================================
--- rl/branches/persistence/ui/src/InputManager.cpp	2008-10-11 17:25:56 UTC (rev 4545)
+++ rl/branches/persistence/ui/src/InputManager.cpp	2008-10-12 12:14:27 UTC (rev 4546)
@@ -578,7 +578,7 @@
 
 
         KeyRepeatJob(AbstractWindow* window, OIS::KeyCode key) :
-          Job(false, true),
+          Job("",false, true),
           mWindow(window),
           mKey(key),
           mLastTime(0)

Modified: rl/branches/persistence/ui/src/UiSubsystem.cpp
===================================================================
--- rl/branches/persistence/ui/src/UiSubsystem.cpp	2008-10-11 17:25:56 UTC (rev 4545)
+++ rl/branches/persistence/ui/src/UiSubsystem.cpp	2008-10-12 12:14:27 UTC (rev 4546)
@@ -62,6 +62,7 @@
         mGuiResourceProvider(NULL),
         mGuiSystem(NULL)
     {
+        mWindowFactory = new WindowFactory();
         mSceneClearingConnection =
             MessagePump::getSingleton().addMessageHandler<MessageType_SceneClearing>(
 			    boost::bind(&UiSubsystem::onBeforeClearScene, this));
@@ -74,7 +75,9 @@
         mActiveCharacterChangedConnection = 
             MessagePump::getSingleton().addMessageHandler<MessageType_ActivePlayerCharChanged>(
                 boost::bind(&UiSubsystem::onActiveCharacterChanged, this, _1, _2));
-        mWindowFactory = new WindowFactory();
+        mAllPlayerCharactersDiedConnection =
+            MessagePump::getSingleton().addMessageHandler<MessageType_AllPlayerCharsDied>(
+                boost::bind(&UiSubsystem::onAllPlayerCharactersDied, this));
     }
 
     UiSubsystem::~UiSubsystem()
@@ -98,7 +101,7 @@
         World* world = CoreSubsystem::getSingleton().getWorld();
         SceneManager* sceneMgr = world->getSceneManager();
         
-        CEGUI::System::setDefaultXMLParserName("XercesParser");
+//        CEGUI::System::setDefaultXMLParserName("XercesParser");
 
         LOG_MESSAGE2(Logger::UI,
             "Initializing CEGUI Renderer.", "UiSubsystem::initializeUiSubsystem");

Modified: rl/branches/persistence/ui/src/WindowFadeJob.cpp
===================================================================
--- rl/branches/persistence/ui/src/WindowFadeJob.cpp	2008-10-11 17:25:56 UTC (rev 4545)
+++ rl/branches/persistence/ui/src/WindowFadeJob.cpp	2008-10-12 12:14:27 UTC (rev 4546)
@@ -29,7 +29,7 @@
 namespace rl
 {
     WindowFadeJob::WindowFadeJob(AbstractWindow* window, Mode mode, Real targetAlpha, Real changeRate)
-        : Job(true, true),
+        : Job("", true, true),
         mAbstractWindow(window),
         mCEGUIWindow(window->getWindow()),
         mItemDragContainer(NULL),
@@ -44,7 +44,7 @@
     }
 
     WindowFadeJob::WindowFadeJob(CEGUI::Window* window, Mode mode, Real targetAlpha, Real changeRate)
-        : Job(true, true),
+        : Job("", true, true),
         mAbstractWindow(NULL),
         mCEGUIWindow(window),
         mItemDragContainer(NULL),
@@ -59,7 +59,7 @@
     }
 
     WindowFadeJob::WindowFadeJob(ItemDragContainer* window, Mode mode, Real targetAlpha, Real changeRate)
-        : Job(true, true),
+        : Job("", true, true),
         mAbstractWindow(NULL),
         mCEGUIWindow(window),
         mItemDragContainer(window),



From timm at mail.berlios.de  Sun Oct 12 17:17:13 2008
From: timm at mail.berlios.de (timm at mail.berlios.de)
Date: Sun, 12 Oct 2008 17:17:13 +0200
Subject: [Dsa-hl-svn] r4547 - in rl/branches/persistence: rules/include
	rules/src script/src script/swig
Message-ID: <200810121517.m9CFHDc1015710@sheep.berlios.de>

Author: timm
Date: 2008-10-12 17:17:01 +0200 (Sun, 12 Oct 2008)
New Revision: 4547

Modified:
   rl/branches/persistence/rules/include/Quest.h
   rl/branches/persistence/rules/src/Quest.cpp
   rl/branches/persistence/script/src/MapLoader.cpp
   rl/branches/persistence/script/swig/RlRules.swig
Log:
- Quest is SaveAble now

Modified: rl/branches/persistence/rules/include/Quest.h
===================================================================
--- rl/branches/persistence/rules/include/Quest.h	2008-10-12 12:14:27 UTC (rev 4546)
+++ rl/branches/persistence/rules/include/Quest.h	2008-10-12 15:17:01 UTC (rev 4547)
@@ -21,6 +21,7 @@
 #include <vector>
 
 #include "Properties.h"
+#include "SaveAble.h"
 
 namespace rl {
 
@@ -33,7 +34,7 @@
     /**
     * @brief Verwaltet einen Quest oder Subquest
     */
-    class _RlRulesExport Quest : public PropertyHolder
+    class _RlRulesExport Quest : public SaveAble
     {
     public:
         enum State
@@ -67,11 +68,6 @@
         virtual ~Quest();
 
         /**
-        * @return die Quest-ID
-        */
-        const CeGuiString getId() const;
-
-        /**
         * @return der Titel des Quests
         */
         const CeGuiString getName() const;
@@ -172,7 +168,6 @@
         static const int UNKNOWN = 0;
 
         QuestVector mSubquests;
-        CeGuiString mId;
         CeGuiString mName;
         CeGuiString mDescription;
         int mPartsToDo;

Modified: rl/branches/persistence/rules/src/Quest.cpp
===================================================================
--- rl/branches/persistence/rules/src/Quest.cpp	2008-10-12 12:14:27 UTC (rev 4546)
+++ rl/branches/persistence/rules/src/Quest.cpp	2008-10-12 15:17:01 UTC (rev 4547)
@@ -52,7 +52,7 @@
 const Ogre::String Quest::PROPERTY_PARTSDONE = "partsdone";
 
 Quest::Quest(const CeGuiString& id, const CeGuiString& name, const CeGuiString& description)
-:       mId(id),
+:       SaveAble(id),
         mName(name),
         mDescription(description),
         mPartsToDo(1),
@@ -76,11 +76,6 @@
     mSubquests.clear();
 }
 
-const CeGuiString Quest::getId() const
-{
-	return mId;
-}
-
 const CeGuiString Quest::getName() const
 {
 	return mName;

Modified: rl/branches/persistence/script/src/MapLoader.cpp
===================================================================
--- rl/branches/persistence/script/src/MapLoader.cpp	2008-10-12 12:14:27 UTC (rev 4546)
+++ rl/branches/persistence/script/src/MapLoader.cpp	2008-10-12 15:17:01 UTC (rev 4547)
@@ -130,7 +130,7 @@
         }
         if(!mapLoaded)
         {
-            LOG_MESSAGE(Logger::RULES, "Loading map " + mapresource);
+			LOG_MESSAGE(Logger::SCRIPT, "Loading map " + mapresource);
 
   		    initializeXml();
 

Modified: rl/branches/persistence/script/swig/RlRules.swig
===================================================================
--- rl/branches/persistence/script/swig/RlRules.swig	2008-10-12 12:14:27 UTC (rev 4546)
+++ rl/branches/persistence/script/swig/RlRules.swig	2008-10-12 15:17:01 UTC (rev 4547)
@@ -188,7 +188,7 @@
         rl::CeGuiString getText() const;
     };
     
-    class Quest
+    class Quest : public SaveAble
     {
     public:
         enum State



From timm at mail.berlios.de  Sun Oct 12 17:27:44 2008
From: timm at mail.berlios.de (timm at mail.berlios.de)
Date: Sun, 12 Oct 2008 17:27:44 +0200
Subject: [Dsa-hl-svn] r4548 - in rl/branches/persistence/rules: include src
Message-ID: <200810121527.m9CFRi6E016358@sheep.berlios.de>

Author: timm
Date: 2008-10-12 17:27:38 +0200 (Sun, 12 Oct 2008)
New Revision: 4548

Modified:
   rl/branches/persistence/rules/include/QuestBook.h
   rl/branches/persistence/rules/src/QuestBook.cpp
Log:
QuestBook will be a SaveAbleFactory

Modified: rl/branches/persistence/rules/include/QuestBook.h
===================================================================
--- rl/branches/persistence/rules/include/QuestBook.h	2008-10-12 15:17:01 UTC (rev 4547)
+++ rl/branches/persistence/rules/include/QuestBook.h	2008-10-12 15:27:38 UTC (rev 4548)
@@ -27,7 +27,7 @@
 #include "Quest.h"
 #include "QuestEvent.h"
 #include "QuestListener.h"
-#include "SaveGameData.h"
+#include "SaveAbleFactory.h"
 #include "XmlProcessor.h"
 
 #include <vector>
@@ -39,8 +39,8 @@
     public Ogre::ScriptLoader,
     public EventSource, 
     public PropertyHolder, 
-    public SaveGameData,
-    public XmlProcessor
+    public XmlProcessor,
+	public SaveAbleFactory
 {
 public:
     static const Ogre::String PROPERTY_QUESTS;
@@ -59,10 +59,17 @@
 
 	/**
 	 * Fuegt einen Quest hinzu
-	 * @param quest der Qubquest
+	 * @param quest der Subquest
 	 */
 	void addQuest(Quest* quest);
 
+	/** TODO
+	 *Inheritated from SaveAbleFactory
+	 *@param params Params needed for creation
+	 *@return SaveAble which has been created
+	 */
+	SaveAblePtr createSaveAble(PropertyRecordPtr params);
+
     /**
      *  Adds a journal entry to the quest book.
      */
@@ -84,14 +91,6 @@
     void setQuestsProperty(PropertyArray array, Quest* rootQuest);
     virtual PropertyKeys getAllPropertyKeys() const;
 
-    /// Override from SaveGameData
-    /// Manages saving and loading from the SaveGameFile
-
-    virtual CeGuiString getXmlNodeIdentifier() const;
-    virtual void writeData(SaveGameFileWriter* writer);
-    virtual void readData(SaveGameFileReader* reader);
-    virtual int getPriority() const;
-
     //loading quests from xml
     virtual const Ogre::StringVector &getScriptPatterns(void) const;
     virtual void parseScript(Ogre::DataStreamPtr &,const Ogre::String &);

Modified: rl/branches/persistence/rules/src/QuestBook.cpp
===================================================================
--- rl/branches/persistence/rules/src/QuestBook.cpp	2008-10-12 15:17:01 UTC (rev 4547)
+++ rl/branches/persistence/rules/src/QuestBook.cpp	2008-10-12 15:27:38 UTC (rev 4548)
@@ -36,12 +36,10 @@
     {
         mScriptPatterns.push_back("*.quests");
         createRoot();
-        SaveGameManager::getSingleton().registerSaveGameData(this);
     }
 
     QuestBook::~QuestBook()
     {
-        SaveGameManager::getSingleton().unregisterSaveGameData(this);
 	    delete mRootQuest;
         for( vector<JournalEntry*>::iterator it = mJournalEntries.begin();
             it != mJournalEntries.end(); it++ )
@@ -86,6 +84,10 @@
 	    mRootQuest->addSubquest(quest);
     }
 
+	SaveAblePtr QuestBook::createSaveAble(PropertyRecordPtr params)
+	{
+	}
+
     void QuestBook::_fireQuestBookChanged(Quest *quest, int reason)
     {
 	    QuestEvent* evt = new QuestEvent(this, reason);
@@ -305,28 +307,6 @@
         return quests;
     }
 
-    CeGuiString QuestBook::getXmlNodeIdentifier() const
-    {
-        return "questbook";
-    }
-
-    void QuestBook::writeData(SaveGameFileWriter *writer)
-    {
-        LOG_MESSAGE(Logger::RULES, "Saving questbook");
-
-        PropertyRecordPtr set = getAllProperties();
-        writer->writeEachProperty(this, set->toPropertyMap());
-    }
-
-    void QuestBook::readData(SaveGameFileReader* reader)
-    {
-        LOG_MESSAGE(Logger::RULES, "Loading questbook");
-
-        clear();
-        PropertyRecordPtr properties = reader->getAllPropertiesAsRecord(this);
-        setProperties(properties);
-    }
-
     void QuestBook::clear()
     {
         delete mRootQuest;
@@ -342,11 +322,6 @@
         createRoot();
     }
 
-    int QuestBook::getPriority() const
-    {
-        return 101;
-    }
-
     const Ogre::StringVector &QuestBook::getScriptPatterns(void) const
     {
         return mScriptPatterns;



From fusion2 at mail.berlios.de  Sun Oct 12 20:04:54 2008
From: fusion2 at mail.berlios.de (fusion2 at mail.berlios.de)
Date: Sun, 12 Oct 2008 20:04:54 +0200
Subject: [Dsa-hl-svn] r4549 - in rl/trunk/editors/Lockenwickler: . src
Message-ID: <200810121804.m9CI4saf019357@sheep.berlios.de>

Author: fusion2
Date: 2008-10-12 20:04:43 +0200 (Sun, 12 Oct 2008)
New Revision: 4549

Added:
   rl/trunk/editors/Lockenwickler/src/ViewportGrid.py
Removed:
   rl/trunk/editors/Lockenwickler/src/OdeManager.py
   rl/trunk/editors/Lockenwickler/src/ui_lw.py
   rl/trunk/editors/Lockenwickler/src/ui_model_prev.py
Modified:
   rl/trunk/editors/Lockenwickler/Lockenwickler.e4p
   rl/trunk/editors/Lockenwickler/src/ConsoleWindow.py
   rl/trunk/editors/Lockenwickler/src/Lockenwickler.py
   rl/trunk/editors/Lockenwickler/src/ModelSelectionDialog.py
   rl/trunk/editors/Lockenwickler/src/ModuleManager.py
   rl/trunk/editors/Lockenwickler/src/MovePivot.py
   rl/trunk/editors/Lockenwickler/src/ObjectPropertyWin.py
   rl/trunk/editors/Lockenwickler/src/OgreMainWindow.py
   rl/trunk/editors/Lockenwickler/src/OgreWidget.py
   rl/trunk/editors/Lockenwickler/src/PreferencesDialog.py
   rl/trunk/editors/Lockenwickler/src/Property.py
   rl/trunk/editors/Lockenwickler/src/PythonOgreConfig.py
   rl/trunk/editors/Lockenwickler/src/SceneExplorer.py
Log:
- added GPL headers to all source files
- Object placement works
- added a ViewportGrid class

Modified: rl/trunk/editors/Lockenwickler/Lockenwickler.e4p
===================================================================
--- rl/trunk/editors/Lockenwickler/Lockenwickler.e4p	2008-10-12 15:27:38 UTC (rev 4548)
+++ rl/trunk/editors/Lockenwickler/Lockenwickler.e4p	2008-10-12 18:04:43 UTC (rev 4549)
@@ -1,7 +1,7 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <!DOCTYPE Project SYSTEM "Project-4.5.dtd">
 <!-- eric4 project file for project Lockenwickler -->
-<!-- Saved: 2008-10-08, 20:52:14 -->
+<!-- Saved: 2008-10-12, 20:02:34 -->
 <!-- Copyright (C) 2008 Stefan Stammberger, sstammberger at web.de -->
 <Project version="4.5">
   <ProgLanguage mixed="0">Python</ProgLanguage>
@@ -17,14 +17,11 @@
     <Source>src/ModuleManager.py</Source>
     <Source>src/MovePivot.py</Source>
     <Source>src/ObjectPropertyWin.py</Source>
-    <Source>src/OdeManager.py</Source>
     <Source>src/OgreMainWindow.py</Source>
     <Source>src/OgreWidget.py</Source>
     <Source>src/PreferencesDialog.py</Source>
     <Source>src/PythonOgreConfig.py</Source>
     <Source>src/ui_ConsoleWindow.py</Source>
-    <Source>src/ui_lw.py</Source>
-    <Source>src/ui_model_prev.py</Source>
     <Source>src/ui_pref_dialog.py</Source>
     <Source>ui files/batch_convert_ui.py</Source>
     <Source>ui files/ui_ConsoleWindow.py</Source>
@@ -35,6 +32,7 @@
     <Source>ui files/ui_pref_dialog.py</Source>
     <Source>src/SceneExplorer.py</Source>
     <Source>src/Property.py</Source>
+    <Source>src/ViewportGrid.py</Source>
   </Sources>
   <Forms>
     <Form>ui files/console_window.ui</Form>

Modified: rl/trunk/editors/Lockenwickler/src/ConsoleWindow.py
===================================================================
--- rl/trunk/editors/Lockenwickler/src/ConsoleWindow.py	2008-10-12 15:27:38 UTC (rev 4548)
+++ rl/trunk/editors/Lockenwickler/src/ConsoleWindow.py	2008-10-12 18:04:43 UTC (rev 4549)
@@ -1,3 +1,22 @@
+#################################################
+ # Copyright (C) 2008  Stefan Stammberger
+ #
+ # This library is free software; you can redistribute it and/or
+ # modify it under the terms of the GNU Lesser General Public
+ # License as published by the Free Software Foundation; either
+ # version 2.1 of the License, or (at your option) any later version.
+ #
+ # This library is distributed in the hope that it will be useful,
+ # but WITHOUT ANY WARRANTY; without even the implied warranty of
+ # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ # Lesser General Public License for more details.
+ #
+ # You should have received a copy of the GNU Lesser General Public
+ # License along with this library; if not, write to the Free Software
+ # Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ #################################################
+
+
 import sys
 from PyQt4.QtCore import *
 from PyQt4.QtGui import *
@@ -23,7 +42,6 @@
         self.consoleWindow = Ui_ConsoleWindow()
         self.consoleWindow.setupUi(self)
         self.consoleWindow.textEdit.setReadOnly(True)
-
         self.lockenLog = LockenLog(self.write)
 
         sys.stdout = self

Modified: rl/trunk/editors/Lockenwickler/src/Lockenwickler.py
===================================================================
--- rl/trunk/editors/Lockenwickler/src/Lockenwickler.py	2008-10-12 15:27:38 UTC (rev 4548)
+++ rl/trunk/editors/Lockenwickler/src/Lockenwickler.py	2008-10-12 18:04:43 UTC (rev 4549)
@@ -1,3 +1,22 @@
+#################################################
+ # Copyright (C) 2008  Stefan Stammberger
+ #
+ # This library is free software; you can redistribute it and/or
+ # modify it under the terms of the GNU Lesser General Public
+ # License as published by the Free Software Foundation; either
+ # version 2.1 of the License, or (at your option) any later version.
+ #
+ # This library is distributed in the hope that it will be useful,
+ # but WITHOUT ANY WARRANTY; without even the implied warranty of
+ # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ # Lesser General Public License for more details.
+ #
+ # You should have received a copy of the GNU Lesser General Public
+ # License along with this library; if not, write to the Free Software
+ # Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ #################################################
+
+
 import os
 import sys
 import platform

Modified: rl/trunk/editors/Lockenwickler/src/ModelSelectionDialog.py
===================================================================
--- rl/trunk/editors/Lockenwickler/src/ModelSelectionDialog.py	2008-10-12 15:27:38 UTC (rev 4548)
+++ rl/trunk/editors/Lockenwickler/src/ModelSelectionDialog.py	2008-10-12 18:04:43 UTC (rev 4549)
@@ -1,3 +1,22 @@
+#################################################
+ # Copyright (C) 2008  Stefan Stammberger
+ #
+ # This library is free software; you can redistribute it and/or
+ # modify it under the terms of the GNU Lesser General Public
+ # License as published by the Free Software Foundation; either
+ # version 2.1 of the License, or (at your option) any later version.
+ #
+ # This library is distributed in the hope that it will be useful,
+ # but WITHOUT ANY WARRANTY; without even the implied warranty of
+ # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ # Lesser General Public License for more details.
+ #
+ # You should have received a copy of the GNU Lesser General Public
+ # License along with this library; if not, write to the Free Software
+ # Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ #################################################
+
+
 import sys
 import os
 from os.path import isdir
@@ -3,19 +22,37 @@
 from os.path import isfile
 
+from PyQt4.QtGui import *
+from PyQt4.QtCore import *
+
 import OgreWidget
 import ogre.renderer.OGRE as og
-from PyQt4 import QtGui, QtCore
 
-class ModelSelectionDialog(QtGui.QDialog):
+
+class MyListWidget(QListWidget):
+    def __init__(self,  parent):
+        super(MyListWidget, self).__init__(parent)
+        self.setDragEnabled(True)
+
+    def startDrag(self,  dropActions):
+        data = QByteArray()
+        stream = QDataStream(data,  QIODevice.WriteOnly)
+        stream << self.currentItem().text()
+        mimeData = QMimeData()
+        mimeData.setData("application/x-text", data)
+        drag = QDrag(self)
+        drag.setMimeData(mimeData)
+        drag.start(Qt.CopyAction)
+
+class ModelSelectionDialog(QDialog):
     def __init__(self, ogreRoot, parent=None):
-        QtGui.QDialog.__init__(self, parent)
+        QDialog.__init__(self, parent)
         self.ogreRoot = ogreRoot
 
         self.setupUi()
 
-        QtCore.QObject.connect(self.modelSearchBox, QtCore.SIGNAL("textChanged(QString)"),
+        self.connect(self.modelSearchBox, SIGNAL("textChanged(QString)"),
                                self.updateModelList)
 
-        QtCore.QObject.connect(self.listWidget, QtCore.SIGNAL("itemSelectionChanged ()"),
+        self.connect(self.listWidget, SIGNAL("itemSelectionChanged ()"),
                                self.setPreviewedModel)
 
@@ -31,37 +68,39 @@
         self.lastMousePosX = 0
         self.lastMousePosY = 0
 
+
+
     def setupUi(self):
         self.setObjectName("modelPreviewDialog")
-        self.resize(QtCore.QSize(QtCore.QRect(0,0,272,744).size()).expandedTo(self.minimumSizeHint()))
+        self.resize(QSize(QRect(0,0,272,744).size()).expandedTo(self.minimumSizeHint()))
 
-        self.gridlayout = QtGui.QGridLayout(self)
+        self.gridlayout = QGridLayout(self)
         self.gridlayout.setObjectName("gridlayout")
 
-        self.modelSearchBox = QtGui.QLineEdit(self)
+        self.modelSearchBox = QLineEdit(self)
         self.modelSearchBox.setObjectName("modelSearchBox")
         self.gridlayout.addWidget(self.modelSearchBox,0,0,1,1)
 
-        self.splitter = QtGui.QSplitter(self)
-        self.splitter.setOrientation(QtCore.Qt.Vertical)
+        self.splitter = QSplitter(self)
+        self.splitter.setOrientation(Qt.Vertical)
         self.splitter.setObjectName("splitter")
 
-        self.listWidget = QtGui.QListWidget(self.splitter)
+        self.listWidget = MyListWidget(self.splitter)
         self.listWidget.setObjectName("listWidget")
 
         self.ogreModelPrevWindowSceneMgr = self.ogreRoot.createSceneManager(og.ST_GENERIC,"ogreModelPrevWindowSceneMgr")
         self.ogreModelPrevWindow = OgreWidget.OgreWidget("ModelPrevWin", self.ogreRoot, self.ogreModelPrevWindowSceneMgr, "PrevCam",
                                                          self.splitter)
-        self.ogreModelPrevWindow.setMinimumSize(QtCore.QSize(200,200))
+        self.ogreModelPrevWindow.setMinimumSize(QSize(200,200))
         self.ogreModelPrevWindow.setObjectName("modelPreviewWindow")
         self.gridlayout.addWidget(self.splitter,1,0,1,1)
 
         self.retranslateUi()
-        QtCore.QObject.connect(self.modelSearchBox,QtCore.SIGNAL("textChanged(QString)"),self.listWidget.clearSelection)
-        QtCore.QMetaObject.connectSlotsByName(self)
+        QObject.connect(self.modelSearchBox,SIGNAL("textChanged(QString)"),self.listWidget.clearSelection)
+        QMetaObject.connectSlotsByName(self)
 
     def retranslateUi(self):
-        self.setWindowTitle(QtGui.QApplication.translate("modelPreviewDialog", "Dialog", None, QtGui.QApplication.UnicodeUTF8))
+        self.setWindowTitle(QApplication.translate("modelPreviewDialog", "Dialog", None, QApplication.UnicodeUTF8))
 
     def setPreviewedModel(self):
         if self.ent != None:
@@ -99,7 +138,13 @@
 
         self.listWidget.sortItems()
 
+    def eventFilter(self, obj, event):
+        if event.type() == 5:
+            self.startDrag()
+            event.accept()
 
+        return False
+
     def event(self, event):
         if event.type() == 31: # scroll wheel turned
             if event.delta() < 0:
@@ -108,17 +153,18 @@
                 self.ogreModelPrevWindow.zoomCamera( 5)
 
         if event.type() == 5: #mouse moved while button down
-           rotX = (event.globalX() - self.lastMousePosX) * 0.01
-           rotY = (event.globalY() - self.lastMousePosY) * 0.01
+            rotX = (event.globalX() - self.lastMousePosX) * 0.01
+            rotY = (event.globalY() - self.lastMousePosY) * 0.01
 
-           if rotX < 0.1 and rotY < 0.1: # first click, don't do anything at all here
-               self.ogreModelPrevWindow.orbitCamera(-rotX,  rotY)
+            if rotX < 0.1 and rotY < 0.1: # first click, don't do anything at all here
+                self.ogreModelPrevWindow.orbitCamera(-rotX,  rotY)
 
-           self.lastMousePosX = event.globalX()
-           self.lastMousePosY = event.globalY()
+            self.lastMousePosX = event.globalX()
+            self.lastMousePosY = event.globalY()
 
         if event.type() == 3: # mouse released
             self.lastMousePosX = 0
             self.lastMousePosY = 0
 
         return False
+

Modified: rl/trunk/editors/Lockenwickler/src/ModuleManager.py
===================================================================
--- rl/trunk/editors/Lockenwickler/src/ModuleManager.py	2008-10-12 15:27:38 UTC (rev 4548)
+++ rl/trunk/editors/Lockenwickler/src/ModuleManager.py	2008-10-12 18:04:43 UTC (rev 4549)
@@ -1,3 +1,21 @@
+#################################################
+ # Copyright (C) 2008  Stefan Stammberger
+ #
+ # This library is free software; you can redistribute it and/or
+ # modify it under the terms of the GNU Lesser General Public
+ # License as published by the Free Software Foundation; either
+ # version 2.1 of the License, or (at your option) any later version.
+ #
+ # This library is distributed in the hope that it will be useful,
+ # but WITHOUT ANY WARRANTY; without even the implied warranty of
+ # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ # Lesser General Public License for more details.
+ #
+ # You should have received a copy of the GNU Lesser General Public
+ # License along with this library; if not, write to the Free Software
+ # Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ #################################################
+
 import sys
 import xml.dom.minidom as xml
 
@@ -52,10 +70,12 @@
             return -1
 
     def queryResult ( self, entity, distance ):
-        #print entity.getName()
+        #print "dbg: " + entity.getName()
         if distance == 0.0: #camera is in the bounding box, ignore this selection
             return True
-        elif entity.getName() == "rayLine" :
+#        elif entity.getName() == "rayLine" :
+#            return True
+        elif entity.getName() == "OgreMainWin::0::ViewportGrid":
             return True
         elif entity.isVisible() and entity.getName() == "EditorXArrow":
             so = SelectionObject(entity,  distance)
@@ -296,7 +316,7 @@
         self.listenerDings = MyRaySceneQueryListener()
 
         self.lastRay = None
-        self.rayLine = None
+#        self.rayLine = None
 
         self.pivot = None
         self.movingPivot = False
@@ -305,6 +325,11 @@
         self.middleMouseDown = False
         self.rightMouseDown = False
 
+        self.dropCount = 0
+        self.dropNode = None
+        self.dropEntity = None
+        self.dropCollisionPlane = og.Plane(og.Vector3.UNIT_Y, og.Vector3.ZERO)
+
     def load(self,  moduleName,  mapFiles):
         self.moduleName = moduleName
         self.mapFiles = mapFiles
@@ -375,7 +400,8 @@
         so = self.listenerDings.rayCastToPolygonLevel(ray)
         if so is not None:
             if not so.isPivot:
-                self.pivot.show()
+                if self.pivot is not None:
+                    self.pivot.show()
                 if not controlDown and not shiftDown:
                     self.resetSelection()
                     so.setSelected(True)
@@ -404,26 +430,26 @@
             if self.pivot is not None:
                 self.pivot.hide()
 
-        if self.rayLine == None:
-            self.rayLine = self.sceneManager.createManualObject("rayLine")
-            self.rayLine.setDynamic(True)
-            self.sceneManager.getRootSceneNode().createChildSceneNode("raynode").attachObject(self.rayLine)
+#        if self.rayLine == None:
+#            self.rayLine = self.sceneManager.createManualObject("rayLine")
+#            self.rayLine.setDynamic(True)
+#            self.sceneManager.getRootSceneNode().createChildSceneNode("raynode").attachObject(self.rayLine)
+#
+#            self.rayLine.begin("BaseWhiteNoLighting", og.RenderOperation.OT_LINE_STRIP)
+#
+#            self.rayLine.position(ray.getOrigin())
+#            self.rayLine.position( ray.getPoint(10000))
+#
+#            self.rayLine.end()
+#
+#        else:
+#            self.rayLine.beginUpdate(0)
+#
+#            self.rayLine.position(ray.getOrigin())
+#            self.rayLine.position( ray.getPoint(10000))
+#
+#            self.rayLine.end()
 
-            self.rayLine.begin("BaseWhiteNoLighting", og.RenderOperation.OT_LINE_STRIP)
-
-            self.rayLine.position(ray.getOrigin())
-            self.rayLine.position( ray.getPoint(10000))
-
-            self.rayLine.end()
-
-        else:
-            self.rayLine.beginUpdate(0)
-
-            self.rayLine.position(ray.getOrigin())
-            self.rayLine.position( ray.getPoint(10000))
-
-            self.rayLine.end()
-
     def leftMouseUp(self):
         if self.pivot is not None and self.pivot.isTransforming:
             self.pivot.stopTransforming()
@@ -448,14 +474,35 @@
 
         for so in self.userSelectionList:
             newPivotPosition += so.entity.getParentNode().getPosition()
+        if self.pivot is not None:
+            self.pivot.setPosition(newPivotPosition / len(self.userSelectionList))
 
-        self.pivot.setPosition(newPivotPosition / len(self.userSelectionList))
-
     def unload(self,  saveOnUnload=True):
         pass
 
     def save(self):
         pass
 
+    def startDropModelAction(self, meshFile, ray):
+        self.dropEntity = self.sceneManager.createEntity("dropMesh" + str(self.dropCount), str(meshFile))
+        self.dropNode = self.sceneManager.getRootSceneNode().createChild("dropNode" + str(self.dropCount))
+        self.dropNode.attachObject(self.dropEntity)
 
+        result = og.Math.intersects(ray, self.dropCollisionPlane)
+        if result.first == True:
+            self.dropNode.setPosition(ray.getPoint(result.second))
+        else:
+            self.dropNode.setPosition(ray.getPoint(50))
 
+        self.dropCount += 1
+
+    def moveDropModelAction(self, ray):
+        result = og.Math.intersects(ray, self.dropCollisionPlane)
+        if result.first == True:
+            self.dropNode.setPosition(ray.getPoint(result.second))
+        else:
+            self.dropNode.setPosition(ray.getPoint(50))
+
+
+    def stopDropModelAction(self, ray):
+        pass

Modified: rl/trunk/editors/Lockenwickler/src/MovePivot.py
===================================================================
--- rl/trunk/editors/Lockenwickler/src/MovePivot.py	2008-10-12 15:27:38 UTC (rev 4548)
+++ rl/trunk/editors/Lockenwickler/src/MovePivot.py	2008-10-12 18:04:43 UTC (rev 4549)
@@ -1,7 +1,25 @@
+#################################################
+ # Copyright (C) 2008  Stefan Stammberger
+ #
+ # This library is free software; you can redistribute it and/or
+ # modify it under the terms of the GNU Lesser General Public
+ # License as published by the Free Software Foundation; either
+ # version 2.1 of the License, or (at your option) any later version.
+ #
+ # This library is distributed in the hope that it will be useful,
+ # but WITHOUT ANY WARRANTY; without even the implied warranty of
+ # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ # Lesser General Public License for more details.
+ #
+ # You should have received a copy of the GNU Lesser General Public
+ # License along with this library; if not, write to the Free Software
+ # Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ #################################################
+
+
 import sys
 import ogre.renderer.OGRE as og
 
-
 class Pivot():
     def __init__(self,  sceneManager):
         self.sceneManager = sceneManager
@@ -146,14 +164,16 @@
     def onMouseMoved(self, globalX, globalY, incX, incY):
         # move mode
         if self.mode == 1:
+            transFactor = 0.1
             transVec = None
             if self.moveDirection == "EditorXArrow":
                 transVec = og.Vector3(-incX, 0.0 , 0.0)
             elif self.moveDirection == "EditorYArrow":
                 transVec = og.Vector3(0.0, -incY, 0.0)
             elif self.moveDirection == "EditorZArrow":
-                transVec = og.Vector3(0.0, 0.0, -incX)
+                transVec = og.Vector3(0.0, 0.0, incX)
 
+            transVec = transVec * transFactor
             for so in self.selectionList:
                 so.entity.getParentNode().translate(transVec)
 

Modified: rl/trunk/editors/Lockenwickler/src/ObjectPropertyWin.py
===================================================================
--- rl/trunk/editors/Lockenwickler/src/ObjectPropertyWin.py	2008-10-12 15:27:38 UTC (rev 4548)
+++ rl/trunk/editors/Lockenwickler/src/ObjectPropertyWin.py	2008-10-12 18:04:43 UTC (rev 4549)
@@ -1,3 +1,22 @@
+#################################################
+ # Copyright (C) 2008  Stefan Stammberger
+ #
+ # This library is free software; you can redistribute it and/or
+ # modify it under the terms of the GNU Lesser General Public
+ # License as published by the Free Software Foundation; either
+ # version 2.1 of the License, or (at your option) any later version.
+ #
+ # This library is distributed in the hope that it will be useful,
+ # but WITHOUT ANY WARRANTY; without even the implied warranty of
+ # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ # Lesser General Public License for more details.
+ #
+ # You should have received a copy of the GNU Lesser General Public
+ # License along with this library; if not, write to the Free Software
+ # Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ #################################################
+
+
 import sys
 
 from PyQt4.QtCore import *

Deleted: rl/trunk/editors/Lockenwickler/src/OdeManager.py
===================================================================
--- rl/trunk/editors/Lockenwickler/src/OdeManager.py	2008-10-12 15:27:38 UTC (rev 4548)
+++ rl/trunk/editors/Lockenwickler/src/OdeManager.py	2008-10-12 18:04:43 UTC (rev 4549)
@@ -1 +0,0 @@
-as

Modified: rl/trunk/editors/Lockenwickler/src/OgreMainWindow.py
===================================================================
--- rl/trunk/editors/Lockenwickler/src/OgreMainWindow.py	2008-10-12 15:27:38 UTC (rev 4548)
+++ rl/trunk/editors/Lockenwickler/src/OgreMainWindow.py	2008-10-12 18:04:43 UTC (rev 4549)
@@ -1,3 +1,22 @@
+#################################################
+ # Copyright (C) 2008  Stefan Stammberger
+ #
+ # This library is free software; you can redistribute it and/or
+ # modify it under the terms of the GNU Lesser General Public
+ # License as published by the Free Software Foundation; either
+ # version 2.1 of the License, or (at your option) any later version.
+ #
+ # This library is distributed in the hope that it will be useful,
+ # but WITHOUT ANY WARRANTY; without even the implied warranty of
+ # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ # Lesser General Public License for more details.
+ #
+ # You should have received a copy of the GNU Lesser General Public
+ # License along with this library; if not, write to the Free Software
+ # Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ #################################################
+
+
 import os
 import sys
 import platform
@@ -2,4 +21,7 @@
 
-from PyQt4 import QtGui, QtCore
+from PyQt4.QtGui import *
+from PyQt4.QtCore import *
 
+from ViewportGrid import *
+
 import OgreWidget
@@ -9,9 +31,9 @@
 
 # this class is the heart of the 3d part
 # it manages the two ogre render windows and recieves events from the windows through the event filter
-class OgreMainWindow(QtGui.QWidget):
+class OgreMainWindow(QWidget):
     def __init__(self, moduleManager,  ogreRoot, OgreMainWinSceneMgr,  parent):
-        QtGui.QWidget.__init__(self, parent)
+        QWidget.__init__(self, parent)
         self.moduleManager = moduleManager
         self.ogreRoot = ogreRoot
         self.OgreMainWinSceneMgr = OgreMainWinSceneMgr
@@ -29,38 +51,39 @@
         self.strafeCamLeft = False
         self.strafeCamRight = False
 
-        self.camUpdateTimer = QtCore.QTimer(self)
-        self.camUpdateTimer.connect(self.camUpdateTimer, QtCore.SIGNAL("timeout()"), self.updateCamera)
+        self.camUpdateTimer = QTimer(self)
+        self.camUpdateTimer.connect(self.camUpdateTimer, SIGNAL("timeout()"), self.updateCamera)
 
         self.lastSelectionClick = None # Qpoint wich saves the last selection click mouse position
 
         self.setupUi(self)
 
+
     def setupUi(self, Form):
         Form.setObjectName("Form")
-        Form.resize(QtCore.QSize(QtCore.QRect(0,0,935,843).size()).expandedTo(Form.minimumSizeHint()))
+        Form.resize(QSize(QRect(0,0,935,843).size()).expandedTo(Form.minimumSizeHint()))
 
-        self.gridlayout = QtGui.QGridLayout(Form)
+        self.gridlayout = QGridLayout(Form)
         self.gridlayout.setObjectName("gridlayout")
 
         # create the vertical splitter ( contains the preferences buttons and the horizontal splitter with the two render windows )
-        self.splitterV = QtGui.QSplitter(Form)
+        self.splitterV = QSplitter(Form)
 
-        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.MinimumExpanding,QtGui.QSizePolicy.MinimumExpanding)
+        sizePolicy = QSizePolicy(QSizePolicy.MinimumExpanding,QSizePolicy.MinimumExpanding)
         sizePolicy.setHorizontalStretch(0)
         sizePolicy.setVerticalStretch(0)
         sizePolicy.setHeightForWidth(self.splitterV.sizePolicy().hasHeightForWidth())
         self.splitterV.setSizePolicy(sizePolicy)
-        self.splitterV.setOrientation(QtCore.Qt.Vertical)
+        self.splitterV.setOrientation(Qt.Vertical)
         self.splitterV.setObjectName("splitter")
 
         # create the preferences buttons and connect the signals
-        self.ogreWindowOptions = QtGui.QToolButton(self)
-        QtCore.QObject.connect(self.ogreWindowOptions, QtCore.SIGNAL("clicked()"),
+        self.ogreWindowOptions = QToolButton(self)
+        QObject.connect(self.ogreWindowOptions, SIGNAL("clicked()"),
                                     self.onPreferencesButton)
         self.ogreWindowOptions.hide()
 
-        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Maximum,QtGui.QSizePolicy.Minimum)
+        sizePolicy = QSizePolicy(QSizePolicy.Maximum,QSizePolicy.Minimum)
         sizePolicy.setHorizontalStretch(0)
         sizePolicy.setVerticalStretch(0)
         sizePolicy.setHeightForWidth(self.ogreWindowOptions.sizePolicy().hasHeightForWidth())
@@ -72,9 +95,9 @@
 
         ##################################
         self.ogreRenderWindow = OgreWidget.OgreWidget("OgreMainWin", self.ogreRoot, self.OgreMainWinSceneMgr, "MainCam", self.splitterV,  0)
-        self.ogreRenderWindow.setMinimumSize(QtCore.QSize(250,250))
+        self.ogreRenderWindow.setMinimumSize(QSize(250,250))
 
-        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Maximum,QtGui.QSizePolicy.Maximum)
+        sizePolicy = QSizePolicy(QSizePolicy.Maximum,QSizePolicy.Maximum)
         sizePolicy.setHorizontalStretch(0)
         sizePolicy.setVerticalStretch(0)
         sizePolicy.setHeightForWidth(self.ogreRenderWindow.sizePolicy().hasHeightForWidth())
@@ -89,38 +112,40 @@
         # register the eventfilters for the render windows
         # this is needed to catch mouse enter and mouse leave events for these windows
         self.ogreRenderWindow.installEventFilter(self)
-
+        self.ogreRenderWindow.setAcceptDrops(True)
         self.lastMousePosX = 0
         self.lastMousePosY = 0
 
         self.retranslateUi(Form)
-        QtCore.QMetaObject.connectSlotsByName(Form)
+        QMetaObject.connectSlotsByName(Form)
 
+        self.viewportGrid = ViewportGrid(self.OgreMainWinSceneMgr, self.ogreRenderWindow.viewport)
+        self.viewportGrid.enable()
     def retranslateUi(self, Form):
-        Form.setWindowTitle(QtGui.QApplication.translate("Form", "Form", None, QtGui.QApplication.UnicodeUTF8))
-        self.ogreWindowOptions.setText(QtGui.QApplication.translate("Form", "...", None, QtGui.QApplication.UnicodeUTF8))
+        Form.setWindowTitle(QApplication.translate("Form", "Form", None, QApplication.UnicodeUTF8))
+        self.ogreWindowOptions.setText(QApplication.translate("Form", "...", None, QApplication.UnicodeUTF8))
 
     def onPreferencesButton(self):
-        self.splitterH.setOrientation(QtCore.Qt.Vertical)
+        self.splitterH.setOrientation(Qt.Vertical)
 
     def keyPressEvent(self,  event):
-        if event.key() == QtCore.Qt.Key_W:
+        if event.key() == Qt.Key_W:
             self.moveCamForward = True
-        elif event.key() == QtCore.Qt.Key_S:
+        elif event.key() == Qt.Key_S:
             self.moveCamBackward = True
-        elif event.key() == QtCore.Qt.Key_A:
+        elif event.key() == Qt.Key_A:
             self.strafeCamLeft = True
-        elif event.key() == QtCore.Qt.Key_D:
+        elif event.key() == Qt.Key_D:
             self.strafeCamRight= True
 
     def keyReleaseEvent(self,  event):
-        if event.key() == QtCore.Qt.Key_W:
+        if event.key() == Qt.Key_W:
             self.moveCamForward = False
-        elif event.key() == QtCore.Qt.Key_S:
+        elif event.key() == Qt.Key_S:
             self.moveCamBackward = False
-        elif event.key() == QtCore.Qt.Key_A:
+        elif event.key() == Qt.Key_A:
             self.strafeCamLeft = False
-        elif event.key() == QtCore.Qt.Key_D:
+        elif event.key() == Qt.Key_D:
             self.strafeCamRight= False
 
     def eventFilter(self, obj, event):
@@ -179,7 +204,6 @@
             if self.moduleManager.pivot is not None and  self.leftMouseDown and not self.middleMouseDown and not self.rightMouseDown:
                 self.moduleManager.pivot.onMouseMoved(event.globalX,  event.globalY,  incX,  incY)
 
-
             rotX = incX * 0.01
             rotY = incY * 0.01
 
@@ -191,11 +215,53 @@
             self.lastMousePosX = event.globalX()
             self.lastMousePosY = event.globalY()
 
+        if event.type() == 60: #drag enter
+            self.dragEnterEvent(event)
+        if event.type() == 61: #drag move
+            self.dragMoveEvent(event)
+        if event.type() == 62:
+            print "dbg: DragLeave"
+        if event.type() == 63:
+            self.dropEvent(event)
+
         return False
 
+    def dragEnterEvent(self, event):
+        if event.mimeData().hasFormat("application/x-text"):
+            data = event.mimeData().data("application/x-text")
+            stream = QDataStream(data, QIODevice.ReadOnly)
+            text = QString()
+            stream >> text
+
+            self.moduleManager.startDropModelAction(text, self.getCameraToViewportRay()) #start the model draging
+
+            event.setDropAction(Qt.CopyAction)
+            event.accept()
+
+        else:
+            event.ignore()
+
+
+    def dragMoveEvent(self, event):
+        self.moduleManager.moveDropModelAction(self.getCameraToViewportRay()) #move it with the mouse
+
+        event.accept()
+
+    def dropEvent(self, event):
+        self.moduleManager.stopDropModelAction(self.getCameraToViewportRay()) # place it down
+        event.accept()
+
+    def getCameraToViewportRay(self):
+        relMousePos = self.ogreRenderWindow.mapFromGlobal(QCursor.pos())
+
+        screenX = relMousePos.x()/float(self.ogreRenderWindow.viewport.getActualWidth())
+        screenY = relMousePos.y()/float(self.ogreRenderWindow.viewport.getActualHeight())
+
+        return self.ogreRenderWindow.getCamera().getCameraToViewportRay(screenX, screenY)
+
     #calculates the the selection ray and notifies the ModuleManager that something is about to be selected
     def calculateSelectionRay(self,  event):
-        relMousePos = self.ogreRenderWindow.mapFromGlobal(QtCore.QPoint(event.globalX(),  event.globalY())) # get the mose position relative to the ogre window
+        relMousePos = self.ogreRenderWindow.mapFromGlobal(QPoint(event.globalX(),  event.globalY())) # get the mose position relative to the ogre window
 
         if self.lastSelectionClick != None:
             if self.lastSelectionClick.x() == relMousePos.x() and self.lastSelectionClick.y() == relMousePos.y(): # mouse didn't move
@@ -210,13 +276,14 @@
 
         mouseRay = self.ogreRenderWindow.getCamera().getCameraToViewportRay(screenX, screenY)
 
-        if event.modifiers() == QtCore.Qt.ControlModifier:
+        if event.modifiers() == Qt.ControlModifier:
             self.moduleManager.selectionClick(mouseRay,  True,  False)
-        elif event.modifiers() == QtCore.Qt.ShiftModifier:
+        elif event.modifiers() == Qt.ShiftModifier:
             self.moduleManager.selectionClick(mouseRay,  False,  True)
         else:
             self.moduleManager.selectionClick(mouseRay)
 
+
     def updateCamera(self):
         if self.moveCamForward:
             self.ogreRenderWindow.dollyCamera(og.Vector3( 0, 0,-0.2))

Modified: rl/trunk/editors/Lockenwickler/src/OgreWidget.py
===================================================================
--- rl/trunk/editors/Lockenwickler/src/OgreWidget.py	2008-10-12 15:27:38 UTC (rev 4548)
+++ rl/trunk/editors/Lockenwickler/src/OgreWidget.py	2008-10-12 18:04:43 UTC (rev 4549)
@@ -1,3 +1,22 @@
+#################################################
+ # Copyright (C) 2008  Stefan Stammberger
+ #
+ # This library is free software; you can redistribute it and/or
+ # modify it under the terms of the GNU Lesser General Public
+ # License as published by the Free Software Foundation; either
+ # version 2.1 of the License, or (at your option) any later version.
+ #
+ # This library is distributed in the hope that it will be useful,
+ # but WITHOUT ANY WARRANTY; without even the implied warranty of
+ # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ # Lesser General Public License for more details.
+ #
+ # You should have received a copy of the GNU Lesser General Public
+ # License along with this library; if not, write to the Free Software
+ # Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ #################################################
+
+
 import sys
 import platform
 import os
@@ -15,7 +34,6 @@
         self.camDistFromFocusNode = camDistFromFocusNode
         self.initOgreWindow(renderWindowName,cameraName)
 
-
     def initOgreWindow(self, renderWindowName, cameraName):
         self.renderParameters = og.NameValuePairList()
 

Modified: rl/trunk/editors/Lockenwickler/src/PreferencesDialog.py
===================================================================
--- rl/trunk/editors/Lockenwickler/src/PreferencesDialog.py	2008-10-12 15:27:38 UTC (rev 4548)
+++ rl/trunk/editors/Lockenwickler/src/PreferencesDialog.py	2008-10-12 18:04:43 UTC (rev 4549)
@@ -1,3 +1,22 @@
+#################################################
+ # Copyright (C) 2008  Stefan Stammberger
+ #
+ # This library is free software; you can redistribute it and/or
+ # modify it under the terms of the GNU Lesser General Public
+ # License as published by the Free Software Foundation; either
+ # version 2.1 of the License, or (at your option) any later version.
+ #
+ # This library is distributed in the hope that it will be useful,
+ # but WITHOUT ANY WARRANTY; without even the implied warranty of
+ # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ # Lesser General Public License for more details.
+ #
+ # You should have received a copy of the GNU Lesser General Public
+ # License along with this library; if not, write to the Free Software
+ # Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ #################################################
+
+
 import sys
 import platform
 import string

Modified: rl/trunk/editors/Lockenwickler/src/Property.py
===================================================================
--- rl/trunk/editors/Lockenwickler/src/Property.py	2008-10-12 15:27:38 UTC (rev 4548)
+++ rl/trunk/editors/Lockenwickler/src/Property.py	2008-10-12 18:04:43 UTC (rev 4549)
@@ -1,8 +1,31 @@
+#################################################
+ # Copyright (C) 2008  Stefan Stammberger
+ #
+ # This library is free software; you can redistribute it and/or
+ # modify it under the terms of the GNU Lesser General Public
+ # License as published by the Free Software Foundation; either
+ # version 2.1 of the License, or (at your option) any later version.
+ #
+ # This library is distributed in the hope that it will be useful,
+ # but WITHOUT ANY WARRANTY; without even the implied warranty of
+ # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ # Lesser General Public License for more details.
+ #
+ # You should have received a copy of the GNU Lesser General Public
+ # License along with this library; if not, write to the Free Software
+ # Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ #################################################
+
+
 class Property():
     def __init__(self):
+        pass
 
     def setValue(self):
+        pass
 
     def getValue(self):
+        pass
 
     def createEditor(self):
+        pass

Modified: rl/trunk/editors/Lockenwickler/src/PythonOgreConfig.py
===================================================================
--- rl/trunk/editors/Lockenwickler/src/PythonOgreConfig.py	2008-10-12 15:27:38 UTC (rev 4548)
+++ rl/trunk/editors/Lockenwickler/src/PythonOgreConfig.py	2008-10-12 18:04:43 UTC (rev 4549)
@@ -1,3 +1,22 @@
+#################################################
+ # Copyright (C) 2008  Stefan Stammberger
+ #
+ # This library is free software; you can redistribute it and/or
+ # modify it under the terms of the GNU Lesser General Public
+ # License as published by the Free Software Foundation; either
+ # version 2.1 of the License, or (at your option) any later version.
+ #
+ # This library is distributed in the hope that it will be useful,
+ # but WITHOUT ANY WARRANTY; without even the implied warranty of
+ # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ # Lesser General Public License for more details.
+ #
+ # You should have received a copy of the GNU Lesser General Public
+ # License along with this library; if not, write to the Free Software
+ # Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ #################################################
+
+
 #
 # a single config file that is imported 'first' by the Python-Ogre demos
 # this is primarly used to manage Linux demos when we have binaries in non standard (safe) locations

Modified: rl/trunk/editors/Lockenwickler/src/SceneExplorer.py
===================================================================
--- rl/trunk/editors/Lockenwickler/src/SceneExplorer.py	2008-10-12 15:27:38 UTC (rev 4548)
+++ rl/trunk/editors/Lockenwickler/src/SceneExplorer.py	2008-10-12 18:04:43 UTC (rev 4549)
@@ -1,3 +1,22 @@
+#################################################
+ # Copyright (C) 2008  Stefan Stammberger
+ #
+ # This library is free software; you can redistribute it and/or
+ # modify it under the terms of the GNU Lesser General Public
+ # License as published by the Free Software Foundation; either
+ # version 2.1 of the License, or (at your option) any later version.
+ #
+ # This library is distributed in the hope that it will be useful,
+ # but WITHOUT ANY WARRANTY; without even the implied warranty of
+ # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ # Lesser General Public License for more details.
+ #
+ # You should have received a copy of the GNU Lesser General Public
+ # License along with this library; if not, write to the Free Software
+ # Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ #################################################
+
+
 import sys
 from PyQt4.QtCore import *
 from PyQt4.QtGui import *

Added: rl/trunk/editors/Lockenwickler/src/ViewportGrid.py
===================================================================
--- rl/trunk/editors/Lockenwickler/src/ViewportGrid.py	2008-10-12 15:27:38 UTC (rev 4548)
+++ rl/trunk/editors/Lockenwickler/src/ViewportGrid.py	2008-10-12 18:04:43 UTC (rev 4549)
@@ -0,0 +1,525 @@
+#-----------------------------------------------------------------------------
+#Copyright (c) 2007 Jeroen Dierckx
+#Python Version by Stefan Stammberger
+#
+#This program is free software you can redistribute it and/or modify it under
+#the terms of the GNU Lesser General Public License as published by the Free Software
+#Foundation either version 2 of the License, or (at your option) any later
+#version.
+#
+#This program is distributed in the hope that it will be useful, but WITHOUT
+#ANY WARRANTY without even the implied warranty of MERCHANTABILITY or FITNESS
+#FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
+#
+#You should have received a copy of the GNU Lesser General Public License along with
+#this program if not, write to the Free Software Foundation, Inc., 59 Temple
+#Place - Suite 330, Boston, MA 02111-1307, USA, or go to
+#http://www.gnu.org/copyleft/lesser.txt.
+#-----------------------------------------------------------------------------
+
+import ogre.renderer.OGRE as og
+
+RL_BEHIND = 1
+INFRONT = 2
+
+class ViewportGrid(og.RenderTargetListener):
+    def __init__(self, pSceneMgr, pViewport):
+        super(ViewportGrid, self).__init__()
+
+        self.m_pSceneMgr = pSceneMgr
+        self.m_pViewport = pViewport
+        self.m_enabled = False
+        self.m_layer = None
+
+        self.m_pPrevCamera = None
+        self.m_prevOrtho = False
+        self.m_prevCamPos = None
+        self.m_prevNear = None
+        self.m_prevFOVy = None
+        self.m_prevAspectRatio = None
+        self.m_forceUpdate = True
+
+        self.m_pGrid = None
+        self.m_created = False
+        self.m_pNode = None
+
+        self.m_colour1 = og.ColourValue(0.7, 0.7, 0.7)
+        self.m_colour2 = og.ColourValue(0.7, 0.7, 0.7)
+        self.m_division = 10
+        self.m_perspSize = 100
+        self.m_renderScale = True
+        self.m_renderMiniAxes = True
+
+        self.sMatName = "ViewportGrid"
+
+        self.__createGrid()
+        self.setRenderLayer(RL_BEHIND)
+
+        # Add this as a render target listener
+        self.m_pViewport.getTarget().addListener(self)
+
+
+    def getColour(self):
+        return m_colour1
+
+    def setColour(self, colour):
+        # Force alpha = 1 for the primary colour
+        self.m_colour1 = colour
+        self.m_colour1.a = 1.0
+        self.m_colour2 = m_colour1
+        self.forceUpdate()
+
+    #Grid division (the number of new lines that are created when zooming in).
+    def getDivision(self):
+        return m_division
+
+    def setDivision(self, division):
+        self.m_division = division
+        self.forceUpdate()
+
+    #//! Grid render layer (behind of in front of the objects).
+    def getRenderLayer(self):
+        return m_layer
+
+    def setRenderLayer(self, layer):
+        self.m_layer = layer
+
+        if self.m_layer == RL_BEHIND:
+            # Render just before the world geometry
+            self.m_pGrid.setRenderQueueGroup(og.RENDER_QUEUE_WORLD_GEOMETRY_1 - 1)
+        elif self.m_layer == RL_INFRONT:
+            # Render just before the overlays
+            self.m_pGrid.setRenderQueueGroup(og.RENDER_QUEUE_OVERLAY - 1)
+
+
+    def getPerspectiveSize(self):
+        return m_perspSize
+
+    def setPerspectiveSize(self, size):
+        self.m_perspSize = size
+        self.forceUpdate()
+
+#       //! Render scaling info? Defaults to true.
+#       //! @todo Implement this
+    def getRenderScale(self):
+        return m_renderScale
+
+    def setRenderScale(self, enabled = True):
+        self.m_renderScale = enabled
+        self.forceUpdate()
+
+#       //! Render mini axes? Defaults to true.
+#       //! @todo Implement this
+    def getRenderMiniAxes(self):
+        return m_renderMiniAxes
+
+    def setRenderMiniAxes(self, enabled = True):
+        self.m_renderMiniAxes = enabled
+        self.forceUpdate()
+
+    #// Enable / disable
+    def isEnabled(self):
+        return m_enabled
+
+    def enable(self):
+        self.m_enabled = True
+
+        if not self.m_pGrid.isAttached():
+            self.m_pNode.attachObject(self.m_pGrid)
+
+        self.forceUpdate()
+
+
+    def disable(self):
+        self.m_enabled = False
+
+        if self.m_pGrid.isAttached():
+            self.m_pNode.detachObject(self.m_pGrid)
+
+
+
+    def  toggle(self):
+        self.setEnabled(not self.m_enabled)
+
+    def setEnabled(self, enabled):
+        if enabled:
+            self.enable()
+        else:
+            self.disable()
+
+
+    def forceUpdate(self):
+        self.m_forceUpdate = True
+
+    def preViewportUpdate(self, evt):
+       #TODO find out why evt.souce and self.m_pViewport differ in their memory address
+       # if evt.source != self.m_pViewport:
+           # return
+
+        self.m_pGrid.setVisible(True)
+
+        if self.m_enabled:
+            self.__update()
+
+    def postViewportUpdate(self, evt):
+       # if evt.source != self.m_pViewport:
+           # return
+        self.m_pGrid.setVisible(False)
+
+    def __createGrid(self):
+        name = self.m_pViewport.getTarget().getName() + "::"
+        name += str(self.m_pViewport.getZOrder()) + "::ViewportGrid"
+
+        #// Create the manual object
+        self.m_pGrid = self.m_pSceneMgr.createManualObject(name)
+        self.m_pGrid.setDynamic(True)
+
+        #// Create the scene node (not attached yet)
+        self.m_pNode = self.m_pSceneMgr.getRootSceneNode().createChildSceneNode(name)
+        self.m_enabled = False
+
+        #// Make sure the material is created
+        #//! @todo Should we destroy the material somewhere?
+        matMgr = og.MaterialManager.getSingleton()
+        if not matMgr.resourceExists(self.sMatName):
+            pMaterial = matMgr.create(self.sMatName, og.ResourceGroupManager.DEFAULT_RESOURCE_GROUP_NAME)
+            pMaterial.setLightingEnabled(False)
+            pMaterial.setSceneBlending(og.SBT_TRANSPARENT_ALPHA)
+
+
+
+    def __destroyGrid(self):
+        self.m_pSceneMgr.destroyManualObject(self.m_pGrid)
+        self.m_pGrid = None
+
+        self.m_pSceneMgr.destroySceneNode(self.m_pNode.getName())
+        self.m_pNode = None
+
+
+    def __update(self):
+        if not self.m_enabled:
+            return
+
+        pCamera = self.m_pViewport.getCamera()
+        if not pCamera:
+            return
+
+        # Check if an update is necessary
+        if not self.__checkUpdate() and not self.m_forceUpdate:
+            return
+
+        if pCamera.getProjectionType() == og.PT_ORTHOGRAPHIC:
+            self.__updateOrtho()
+        else:
+            self.__updatePersp()
+
+        self.m_forceUpdate = False
+
+
+
+    def __updateOrtho(self):
+        # Screen dimensions
+        width = self.m_pViewport.getActualWidth()
+        height = self.m_pViewport.getActualHeight()
+
+        #Camera information
+        pCamera = m_pViewport.getCamera()
+        camPos = pCamera.getPosition()
+        camDir = pCamera.getDirection()
+        camUp = pCamera.getUp()
+        camRight = pCamera.getRight()
+
+        # Translation in grid space
+        dx = camPos.dotProduct(camRight)
+        dy = camPos.dotProduct(camUp)
+
+        # Frustum dimensions
+        # Note: Tan calculates the opposite side of a _right_ triangle given its angle, so we make sure it is one, and double the result
+        worldWidth = 2 * og.Math.Tan(pCamera.getFOVy() / 2) * pCamera.getAspectRatio() * pCamera.getNearClipDistance()
+        worldHeight = worldWidth / pCamera.getAspectRatio()
+        worldLeft = dx - worldWidth / 2
+        worldRight = dx + worldWidth / 2
+        worldBottom = dy - worldHeight / 2
+        worldTop = dy + worldHeight / 2
+
+        # Conversion values (note: same as working with the height values)
+        worldToScreen = width / worldWidth
+        screenToWorld = worldWidth / width
+
+        # TODO Treshold should be dependent on window width/height (min? max?) so there are no more then m_division full alpha-lines
+        treshold = 10 # Treshhold in pixels
+
+        # Calculate the spacing multiplier
+        mult = 0
+        exp = 0
+        temp = worldToScreen # 1 world unit
+        if worldToScreen < treshold:
+            while temp < treshold:
+                exp = exp +1
+                temp = temp * treshold # TODO maybe wrong
+
+            mult = og.Math.Pow(self.m_division, exp)
+        else:
+            while temp > (self.m_division * treshold):
+                exp = exp +1
+                temp = temp / treshold # TODO maybe wrong
+
+            mult = og.Math.Pow(1.0 / self.m_division, exp)
+
+        # Interpolate alpha for (multiplied) spacing between treshold and m_division * treshold
+        self.m_colour2.a = worldToScreen * mult / (m_division * treshold - treshold)
+        if m_colour2.a > 1.0:
+           self.m_colour2.a = 1.0
+
+        # Calculate the horizontal zero-axis color
+        camRightX = og.Math.Abs(camRight.x)
+        camRightY = og.Math.Abs(camRight.y)
+        camRightZ = og.Math.Abs(camRight.z)
+
+        if og.Math.RealEqual(camRightX, 1.0):
+            horAxisColor = og.ColourValue.Red
+        elif og.Math.RealEqual(camRightY, 1.0):
+            horAxisColor = og.ColourValue.Green
+        elif og.Math.RealEqual(camRightZ, 1.0):
+            horAxisColor = og.ColourValue.Blue
+        else:
+            horAxisColor = self.m_colour1
+
+        # Calculate the vertical zero-axis color
+        camUpX = og.Math.Abs(camUp.x)
+        camUpY = og.Math.Abs(camUp.y)
+        camUpZ = og.Math.Abs(camUp.z)
+
+        if og.Math.RealEqual(camUpX, 1.0):
+            horAxisColor = og.ColourValue.Red
+        elif og.Math.RealEqual(camUpY, 1.0):
+            horAxisColor = og.ColourValue.Green
+        elif og.Math.RealEqual(camUpZ, 1.0):
+            horAxisColor = og.ColourValue.Blue
+        else:
+            horAxisColor = self.m_colour1
+
+        # The number of lines
+        numLinesWidth = int((worldWidth / mult) + 1)
+        numLinesHeight = int((worldHeight / mult) + 1)
+
+        # Start creating or updating the grid
+        self.m_pGrid.estimateVertexCount(2 * numLinesWidth + 2 * numLinesHeight)
+        if m_created:
+            self.m_pGrid.beginUpdate(0)
+        else:
+            self.m_pGrid.begin(self.sMatName, og.RenderOperation.OT_LINE_LIST)
+            self.m_created = True
+
+        # Vertical lines
+        startX = mult * int(worldLeft / mult)
+        x = startX
+        while x <= worldRight:
+            # Get the right color for this line
+            if x == 0:
+                multX = x
+            elif x < 0:
+                multX = int(x / mult - 0.5)
+            else:
+                multX = int(x / mult + 0.5)
+
+
+            if multX == 0:
+                colour = vertAxisColor
+            elif multX % (int(self.m_division)):
+                self.m_colour2
+            else:
+                self.m_colour1
+
+
+
+
+            # Add the line
+            self.m_pGrid.position(x, worldBottom, 0)
+            self.m_pGrid.colour(colour)
+            self.m_pGrid.position(x, worldTop, 0)
+            self.m_pGrid.colour(colour)
+
+            x += mult
+
+        # Horizontal lines
+        startY = mult * int(worldBottom / mult)
+        y = startY
+        while y <= worldTop:
+            # Get the right color for this line
+            #multY = (y == 0) ? y : (y < 0) ? int(y / mult - 0.5f) : int(y / mult + 0.5f)
+            if y == 0:
+                multY = y
+            elif y < 0:
+                multY = int(y / mult - 0.5)
+            else:
+                multY = int(y / mult + 0.5)
+
+            #colour = (multY == 0) ? horAxisColor : (multY % int(m_division)) ? self.m_colour2 : self.m_colour1
+            if multY == 0:
+                colour = horAxisColor
+            elif multY % (int(self.m_division)):
+                self.m_colour2
+            else:
+                self.m_colour1
+
+            self.m_pGrid.position(worldLeft, y, 0)
+            self.m_pGrid.colour(colour)
+            self.m_pGrid.position(worldRight, y, 0)
+            self.m_pGrid.colour(colour)
+
+            y += mult
+
+        self.m_pGrid.end()
+
+        self.m_pNode.setOrientation(pCamera.getOrientation())
+
+
+    def __updatePersp(self):
+        #! @todo Calculate the spacing multiplier
+        mult = 1
+
+        #! @todo Interpolate alpha
+        self.m_colour2.a = 0.5
+        #if(m_colour2.a > 1.0f) m_colour2.a = 1.0f
+
+        # Calculate the horizontal zero-axis color
+        horAxisColor = og.ColourValue.Red
+
+        # Calculate the vertical zero-axis color
+        vertAxisColor = og.ColourValue.Blue
+
+        # The number of lines
+        numLines = int(self.m_perspSize / mult) + 1
+
+        # Start creating or updating the grid
+        self.m_pGrid.estimateVertexCount(4 * numLines)
+        if self.m_created:
+            self.m_pGrid.beginUpdate(0)
+        else:
+            self.m_pGrid.begin(self.sMatName, og.RenderOperation.OT_LINE_LIST)
+            self.m_created = True
+
+        # Vertical lines
+        start = mult * int(-self.m_perspSize / 2 / mult)
+        x = start
+        while x <= (self.m_perspSize / 2):
+            # Get the right color for this line
+            #multX = (x == 0) ? x : (x < 0) ? int(x / mult - 0.5f) : int(x / mult + 0.5f)
+            if x == 0:
+                multX = x
+            elif x < 0:
+                multX = int(x / mult - 0.5)
+            else:
+                multX = int(x / mult +0.5)
+
+            #colour = (multX == 0) ? vertAxisColor : (multX % (int) self.m_division) ? self.m_colour2 : self.m_colour1
+            if multX == 0:
+                colour = vertAxisColor
+            elif multX % int(self.m_division):
+                colour = self.m_colour2
+            else:
+                colour = self.m_colour1
+
+            # Add the line
+            self.m_pGrid.position(x, 0, -self.m_perspSize / 2)
+            self.m_pGrid.colour(colour)
+            self.m_pGrid.position(x, 0, self.m_perspSize / 2)
+            self.m_pGrid.colour(colour)
+
+            x += mult
+
+        # Horizontal lines
+        y = start
+        while y <= (self.m_perspSize / 2):
+            # Get the right color for this line
+            #multY = (y == 0) ? y : (y < 0) ? int(y / mult - 0.5f) : int(y / mult + 0.5f)
+            if y == 0:
+                multY = y
+            elif y < 0:
+                multY = int(y / mult - 0.5)
+            else:
+                multY = int(y / mult +0.5)
+
+            #colour = (multY == 0) ? horAxisColor : (multY % int(self.m_division)) ? self.m_colour2 : self.m_colour1
+            if multY == 0:
+                colour = horAxisColor
+            elif multY % int(self.m_division):
+                colour = self.m_colour2
+            else:
+                colour = self.m_colour1
+            # Add the line
+            self.m_pGrid.position(-self.m_perspSize / 2, 0, y)
+            self.m_pGrid.colour(colour)
+            self.m_pGrid.position(self.m_perspSize / 2, 0, y)
+            self.m_pGrid.colour(colour)
+
+            y += mult
+
+        self.m_pGrid.end()
+
+        # Normal orientation, grid in the X-Z plane
+        self.m_pNode.resetOrientation()
+
+
+    def __checkUpdate(self):
+        update = False
+
+        pCamera = self.m_pViewport.getCamera()
+        if not pCamera:
+            return False
+
+        if pCamera is not self.m_pPrevCamera:
+            self.m_pPrevCamera = pCamera
+            update = True
+
+
+        ortho = (pCamera.getProjectionType() == og.PT_ORTHOGRAPHIC)
+        if ortho is not self.m_prevOrtho:
+            self.m_prevOrtho = ortho
+            update = True
+
+            # Set correct material properties
+            pMaterial = MaterialManager.getSingleton().getByName(self.sMatName)
+            if not pMaterial.isNull():
+                pMaterial.setDepthWriteEnabled(not ortho)
+                pMaterial.setDepthCheckEnabled(not ortho)
+
+        #return update || ortho ? checkUpdateOrtho() : checkUpdatePersp()
+        if update:
+            if ortho:
+                return self.__checkUpdateOrtho()
+            else:
+                return self.__checkUpdatePersp()
+
+        return False
+
+
+    def __checkUpdateOrtho(self):
+        update = False
+
+        pCamera = self.m_pViewport.getCamera()
+        if not pCamera:
+            return False
+
+        if pCamera.getPosition() is not self.m_prevCamPos:
+            self.m_prevCamPos = pCamera.getPosition()
+            update = True
+
+        if pCamera.getNearClipDistance() is not self.m_prevNear:
+            self.m_prevNear = pCamera.getNearClipDistance()
+            update = True
+
+        if pCamera.getFOVy() is not self.m_prevFOVy:
+            self.m_prevFOVy = pCamera.getFOVy()
+            update = True
+
+        if pCamera.getAspectRatio() is not self.m_prevAspectRatio:
+            self.m_prevAspectRatio = pCamera.getAspectRatio()
+            update = True
+
+        return update
+
+
+    def __checkUpdatePersp(self):
+        return False

Deleted: rl/trunk/editors/Lockenwickler/src/ui_lw.py
===================================================================
--- rl/trunk/editors/Lockenwickler/src/ui_lw.py	2008-10-12 15:27:38 UTC (rev 4548)
+++ rl/trunk/editors/Lockenwickler/src/ui_lw.py	2008-10-12 18:04:43 UTC (rev 4549)
@@ -1 +0,0 @@
-

Deleted: rl/trunk/editors/Lockenwickler/src/ui_model_prev.py
===================================================================
--- rl/trunk/editors/Lockenwickler/src/ui_model_prev.py	2008-10-12 15:27:38 UTC (rev 4548)
+++ rl/trunk/editors/Lockenwickler/src/ui_model_prev.py	2008-10-12 18:04:43 UTC (rev 4549)
@@ -1,13 +0,0 @@
-# -*- coding: utf-8 -*-
-
-# Form implementation generated from reading ui file 'model_preview.ui'
-#
-# Created: Mon May 12 15:09:24 2008
-#      by: PyQt4 UI code generator 4.3.3
-#
-# WARNING! All changes made in this file will be lost!
-
-from PyQt4 import QtCore, QtGui
-
-class Ui_modelPreviewDialog(object):
-



From fusion2 at mail.berlios.de  Thu Oct 16 19:33:30 2008
From: fusion2 at mail.berlios.de (fusion2 at mail.berlios.de)
Date: Thu, 16 Oct 2008 19:33:30 +0200
Subject: [Dsa-hl-svn] r4550 - in rl/trunk/editors/Lockenwickler: . src
	src/media
Message-ID: <200810161733.m9GHXUw3010153@sheep.berlios.de>

Author: fusion2
Date: 2008-10-16 19:33:16 +0200 (Thu, 16 Oct 2008)
New Revision: 4550

Added:
   rl/trunk/editors/Lockenwickler/src/ObjectPropertyModel.py
Modified:
   rl/trunk/editors/Lockenwickler/Lockenwickler.e4p
   rl/trunk/editors/Lockenwickler/src/Lockenwickler.py
   rl/trunk/editors/Lockenwickler/src/ModuleManager.py
   rl/trunk/editors/Lockenwickler/src/MovePivot.py
   rl/trunk/editors/Lockenwickler/src/ObjectPropertyWin.py
   rl/trunk/editors/Lockenwickler/src/OgreMainWindow.py
   rl/trunk/editors/Lockenwickler/src/Property.py
   rl/trunk/editors/Lockenwickler/src/ViewportGrid.py
   rl/trunk/editors/Lockenwickler/src/media/Pivot_Point.material
Log:
- delete and copy commands work

Modified: rl/trunk/editors/Lockenwickler/Lockenwickler.e4p
===================================================================
--- rl/trunk/editors/Lockenwickler/Lockenwickler.e4p	2008-10-12 18:04:43 UTC (rev 4549)
+++ rl/trunk/editors/Lockenwickler/Lockenwickler.e4p	2008-10-16 17:33:16 UTC (rev 4550)
@@ -1,7 +1,7 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <!DOCTYPE Project SYSTEM "Project-4.5.dtd">
 <!-- eric4 project file for project Lockenwickler -->
-<!-- Saved: 2008-10-12, 20:02:34 -->
+<!-- Saved: 2008-10-16, 19:21:23 -->
 <!-- Copyright (C) 2008 Stefan Stammberger, sstammberger at web.de -->
 <Project version="4.5">
   <ProgLanguage mixed="0">Python</ProgLanguage>
@@ -33,6 +33,7 @@
     <Source>src/SceneExplorer.py</Source>
     <Source>src/Property.py</Source>
     <Source>src/ViewportGrid.py</Source>
+    <Source>src/ObjectPropertyModel.py</Source>
   </Sources>
   <Forms>
     <Form>ui files/console_window.ui</Form>

Modified: rl/trunk/editors/Lockenwickler/src/Lockenwickler.py
===================================================================
--- rl/trunk/editors/Lockenwickler/src/Lockenwickler.py	2008-10-12 18:04:43 UTC (rev 4549)
+++ rl/trunk/editors/Lockenwickler/src/Lockenwickler.py	2008-10-16 17:33:16 UTC (rev 4550)
@@ -116,6 +116,9 @@
         self.menuFile = QtGui.QMenu(self.menubar)
         self.menuFile.setObjectName("menuFile")
 
+        self.menuEdit = QtGui.QMenu(self.menubar)
+        self.menuEdit.setObjectName("menuEdit")
+
         self.menuView = QtGui.QMenu(self.menubar)
         self.menuView.setObjectName("menuView")
         self.setMenuBar(self.menubar)
@@ -125,14 +128,28 @@
         self.statusbar.setObjectName("statusbar")
         self.setStatusBar(self.statusbar)
 
-        self.actionNeu =self.createAction("&New",  self.close,  "Ctrl + N",  "filenew.png",  "New")
+#####################################
+        self.actionNeu =self.createAction("&New",  self.actionNewSlot,  QKeySequence.New,  "filenew.png",  "New")
         self.actionNeu.setObjectName("actionNeu")
 
-        self.actionClose = self.createAction("Quit",  self.close,  "Alt + Q",  "exit.png",  "Quit")
-        self.actionClose.setObjectName("actionClose")
+        self.actionClose = self.createAction("Quit",  self.actionQuitSlot,  "Alt + Q",  "exit.png",  "Quit")
+        self.actionClose.setObjectName("actionQuit")
+#####################################
 
 
+#####################################
+        self.actionDelete = self.createAction("Delete",  self.actionDeleteSlot,  QKeySequence.Delete,  "editdelete.png",  "Delete")
+        self.actionDelete.setObjectName("actionDelete")
 
+        self.actionCopy = self.createAction("Copy",  self.actionCopySlot,  QKeySequence.Copy,  "editcopy.png",  "Copy")
+        self.actionCopy.setObjectName("actionCopy")
+
+        self.actionCut = self.createAction("Cut",  self.actionCutSlot,  QKeySequence.Cut,  "editcut.png",  "Cut")
+        self.actionCut.setObjectName("actionCut")
+
+        self.actionPaste = self.createAction("Paste",  self.actionPasteSlot,  QKeySequence.Paste,  "editpaste.png",  "Paste")
+        self.actionPaste.setObjectName("actionPaste")
+
         self.actionMove = self.createAction("&Move",  self.actionMoveSlot,  "g",  "move.png",  "Move selected object")
         self.actionMove.setObjectName("actionMove")
 
@@ -143,6 +160,8 @@
         self.actionRotate.setObjectName("actionRotate")
 
 
+#####################################
+#####################################
         self.actionSceneExplorer = self.createAction("&Scene Exlporer",  self.toggleSceneExplorer,  "Alt + E",  "view_tree.png",  "Scene Explorer",  False)
         self.actionSceneExplorer.setObjectName("actionSceneExplorer")
 
@@ -158,15 +177,29 @@
         self.actionConsole_Window = self.createAction("&Console Window",  self.toggleConsoleWindow,  "Alt + C",  "console.png",  "Console Window")
         self.actionConsole_Window.setObjectName("actionConsole_Window")
 
+#####################################
+#####################################
 
+
         self.menuFile.addAction(self.actionNeu)
         self.menuFile.addAction(self.actionClose)
+
+        self.menuEdit.addAction(self.actionMove)
+        self.menuEdit.addAction(self.actionRotate)
+        self.menuEdit.addAction(self.actionScale)
+        self.menuEdit.addSeparator()
+        self.menuEdit.addAction(self.actionDelete)
+        self.menuEdit.addAction(self.actionCopy)
+        self.menuEdit.addAction(self.actionCut)
+        self.menuEdit.addAction(self.actionPaste)
+
         self.menuView.addAction(self.actionSceneExplorer)
         self.menuView.addAction(self.actionPreferences)
         self.menuView.addAction(self.actionProperty_Window)
         self.menuView.addAction(self.actionObject_Selection)
         self.menuView.addAction(self.actionConsole_Window)
         self.menubar.addAction(self.menuFile.menuAction())
+        self.menubar.addAction(self.menuEdit.menuAction())
         self.menubar.addAction(self.menuView.menuAction())
 
         self.retranslateUi()
@@ -175,6 +208,7 @@
     def retranslateUi(self):
         self.setWindowTitle(QtGui.QApplication.translate("MainWindow", "MainWindow", None, QtGui.QApplication.UnicodeUTF8))
         self.menuFile.setTitle(QtGui.QApplication.translate("MainWindow", "File", None, QtGui.QApplication.UnicodeUTF8))
+        self.menuEdit.setTitle(QtGui.QApplication.translate("MainWindow", "Edit", None, QtGui.QApplication.UnicodeUTF8))
         self.menuView.setTitle(QtGui.QApplication.translate("MainWindow", "View", None, QtGui.QApplication.UnicodeUTF8))
         self.actionNeu.setText(QtGui.QApplication.translate("MainWindow", "New", None, QtGui.QApplication.UnicodeUTF8))
         self.actionMove.setText(QtGui.QApplication.translate("MainWindow", "Move", None, QtGui.QApplication.UnicodeUTF8))
@@ -225,17 +259,33 @@
 
         self.ogreRoot.renderOneFrame()
 
+    def actionNewSlot(self):
+        print "dbg: new"
+        return
+
+    def actionQuitSlot(self):
+        self.close()
+
+    def actionDeleteSlot(self):
+        self.moduleManager.deleteObjects()
+
+    def actionCopySlot(self):
+        self.moduleManager.copyObjects()
+
+    def actionCutSlot(self):
+        self.moduleManager.cutObjects()
+
+    def actionPasteSlot(self):
+        self.moduleManager.pasteObjects()
+
     def actionMoveSlot(self):
         self.moduleManager.pivot.setMoveMode()
-        return
 
     def actionRotateSlot(self):
         self.moduleManager.pivot.setRotateMode()
-        return
 
     def actionScaleSlot(self):
         self.moduleManager.pivot.setScaleMode()
-        return
 
     def togglePreferencesWindow(self):
         if self.prefDialog.isHidden():

Modified: rl/trunk/editors/Lockenwickler/src/ModuleManager.py
===================================================================
--- rl/trunk/editors/Lockenwickler/src/ModuleManager.py	2008-10-12 18:04:43 UTC (rev 4549)
+++ rl/trunk/editors/Lockenwickler/src/ModuleManager.py	2008-10-16 17:33:16 UTC (rev 4550)
@@ -116,23 +116,23 @@
         del self.selectionList[:]
         #self.selectionList = []
 
-    def iterateEntityUnderMouse(self):
-        self.previousSelected = self.currentSelected
-        if len(self.selectionList) >= self.currentSelected: # would mean we are out of bounds
-            self.selectionList[self.currentSelected].setSelected(False)
+#    def iterateEntityUnderMouse(self):
+#        self.previousSelected = self.currentSelected
+#        if len(self.selectionList) >= self.currentSelected: # would mean we are out of bounds
+#            self.selectionList[self.currentSelected].setSelected(False)
+#
+#        self.currentSelected += 1
+#
+#        if len(self.selectionList) == self.currentSelected: # means we are out of bounds and reached the end of the list, reset it to zero
+#            self.currentSelected = 0
+#
+#        if len(self.selectionList) >= self.currentSelected: # would mean we are out of bounds
+#            #print str(self.selectionList[self.currentSelected].distance) + " "  + self.selectionList[self.currentSelected].entity.getName()
+#            if self.rayCastToPolygonLevelOnCurrentSelection():
+#                self.selectionList[self.currentSelected].setSelected(True)
+#                return self.selectionList[self.currentSelected]
 
-        self.currentSelected += 1
 
-        if len(self.selectionList) == self.currentSelected: # means we are out of bounds and reached the end of the list, reset it to zero
-            self.currentSelected = 0
-
-        if len(self.selectionList) >= self.currentSelected: # would mean we are out of bounds
-            #print str(self.selectionList[self.currentSelected].distance) + " "  + self.selectionList[self.currentSelected].entity.getName()
-            if self.rayCastToPolygonLevelOnCurrentSelection():
-                self.selectionList[self.currentSelected].setSelected(True)
-                return self.selectionList[self.currentSelected]
-
-
     def getMeshInformation(self,  entity):
         numVertices = 0
         numIndices = 0
@@ -330,6 +330,8 @@
         self.dropEntity = None
         self.dropCollisionPlane = og.Plane(og.Vector3.UNIT_Y, og.Vector3.ZERO)
 
+        self.numerOfCopys = 0 #everytime a copy is made this numer is increased to generate unique node and mesh names
+
     def load(self,  moduleName,  mapFiles):
         self.moduleName = moduleName
         self.mapFiles = mapFiles
@@ -417,6 +419,7 @@
                     self.userSelectionList.append(so)
                     self.updatePivots()
 
+
                 elif not controlDown and shiftDown:
                     for selo in self.userSelectionList:
                         if so == selo:
@@ -424,6 +427,7 @@
                             self.userSelectionList.remove(selo)
                     self.updatePivots()
             else:
+                #so.entity is the pivot direction that was clicked
                 self.pivot.startTransforming(so.entity,  self.userSelectionList)
         else:
             self.resetSelection() # click in empty space, deselect everything
@@ -450,15 +454,78 @@
 #
 #            self.rayLine.end()
 
+    def deleteObjects(self):
+        if len(self.userSelectionList) < 1:
+            return
+
+        self.pivot.hide()
+
+        for so in self.userSelectionList:
+            self.sceneManager.destroySceneNode(so.entity.getParentNode().getName())
+            del so
+
+        self.userSelectionList = []
+
+    def incrementNameSuffixNumber(self, name):
+        newName = ""
+        split = name.split("_")
+        lastPart = len(split)-1
+        newName = name.rstrip(split[lastPart])
+        newName = newName + str(self.numerOfCopys)
+
+#        if split[lastPart].isdigit() and not split[lastPart].startswith("0"):
+#            num = int(split[lastPart])
+#            num = num + 1
+#            newName = name.rstrip(split[lastPart])
+#            newName = newName + str(num)
+#        else:
+#            newName = name + "_1"
+
+        self.numerOfCopys = self.numerOfCopys + 1
+        return newName
+
+    def copyObjects(self):
+        if len(self.userSelectionList) < 1:
+            return
+
+        newSelectionList = []
+        print "dbg: "
+        for so in self.userSelectionList:
+            nodeName = self.incrementNameSuffixNumber(so.entity.getParentNode().getName())
+            newNode = self.sceneManager.getRootSceneNode().createChild(nodeName)
+
+            entityName = self.incrementNameSuffixNumber(so.entity.getName())
+            newEntity = self.sceneManager.createEntity(entityName, so.entity.getMesh().getName())
+
+            newNode.attachObject(newEntity)
+            newNode.setPosition(so.entity.getParentNode().getPosition())
+            newNode.setOrientation(so.entity.getParentNode().getOrientation())
+            newNode.setScale(so.entity.getParentNode().getScale())
+
+            newSO = SelectionObject(newEntity, so.distance)
+            newSO.setSelected(True)
+            newSelectionList.append(newSO)
+
+        self.resetSelection()
+        self.userSelectionList = newSelectionList
+
+    def cutObjects(self):
+        if len(self.userSelectionList) < 1:
+            return
+        print "dbg: cut"
+
+    def pasteObjects(self):
+        print "dbg: paste"
+
     def leftMouseUp(self):
         if self.pivot is not None and self.pivot.isTransforming:
             self.pivot.stopTransforming()
 
-    def iterateEntityUnderMouse(self):
-        self.listenerDings.iterateEntityUnderMouse()
+#    def iterateEntityUnderMouse(self):
+#        self.listenerDings.iterateEntityUnderMouse()
+#
+#        pass
 
-        pass
-
     def resetSelection(self):
         for so in self.userSelectionList:
             so.setSelected(False)
@@ -506,3 +573,4 @@
 
     def stopDropModelAction(self, ray):
         pass
+

Modified: rl/trunk/editors/Lockenwickler/src/MovePivot.py
===================================================================
--- rl/trunk/editors/Lockenwickler/src/MovePivot.py	2008-10-12 18:04:43 UTC (rev 4549)
+++ rl/trunk/editors/Lockenwickler/src/MovePivot.py	2008-10-16 17:33:16 UTC (rev 4550)
@@ -23,8 +23,10 @@
 class Pivot():
     def __init__(self,  sceneManager):
         self.sceneManager = sceneManager
+        self.camera = self.sceneManager.getCamera("MainCam")
 
         self.mode = None
+        self.isHidden = True
 
         self.meshManager = og.MeshManager.getSingleton ()
 
@@ -42,6 +44,9 @@
     def __createMovePivot(self):
         self.xMoveEntity = self.sceneManager.createEntity("EditorXArrow",  "Pivot_Arrow.mesh")
         self.xMoveEntity.setMaterialName("Lockenwickler_Pivot_X")
+#        self.xMoveEntity.getSubEntity(0).getMaterial().setDepthCheckEnabled(False)
+#        self.xMoveEntity.getSubEntity(0).getMaterial().setDepthWriteEnabled(False)
+        self.xMoveEntity.setRenderQueueGroup(og.RENDER_QUEUE_OVERLAY)
         self.xMoveNode = self.pivotNode.createChildSceneNode()
         self.xMoveNode.attachObject(self.xMoveEntity)
         self.xMoveNode.translate(og.Vector3(2, 0, 0))
@@ -59,6 +64,7 @@
 
         self.yMoveEntity = self.sceneManager.createEntity("EditorYArrow",  "Pivot_Arrow.mesh")
         self.yMoveEntity.setMaterialName("Lockenwickler_Pivot_Y")
+        self.yMoveEntity.setRenderQueueGroup(og.RENDER_QUEUE_OVERLAY)
         self.yMoveNode = self.pivotNode.createChildSceneNode()
         self.yMoveNode.attachObject(self.yMoveEntity)
         self.yMoveNode.translate(og.Vector3(0, 2, 0))
@@ -76,6 +82,7 @@
 
         self.zMoveEntity = self.sceneManager.createEntity("EditorZArrow",  "Pivot_Arrow.mesh")
         self.zMoveEntity.setMaterialName("Lockenwickler_Pivot_Z")
+        self.zMoveEntity.setRenderQueueGroup(og.RENDER_QUEUE_OVERLAY)
         self.zMoveNode = self.pivotNode.createChildSceneNode()
         self.zMoveNode.attachObject(self.zMoveEntity)
         self.zMoveNode.translate(og.Vector3(0, 0, 2))
@@ -90,6 +97,7 @@
     def __createRotatePivot(self):
         self.xRotateEntity = self.sceneManager.createEntity("EditorXRotator",  "Rotate_Torus.mesh")
         self.xRotateEntity.setMaterialName("Lockenwickler_Pivot_X")
+        self.xRotateEntity.setRenderQueueGroup(og.RENDER_QUEUE_OVERLAY)
         self.xRotateNode = self.pivotNode.createChildSceneNode()
         self.xRotateNode.attachObject(self.xRotateEntity)
         #self.xRotateNode.translate(0, 0, -5)
@@ -97,6 +105,7 @@
 
         self.yRotateEntity = self.sceneManager.createEntity("EditorYRotator",  "Rotate_Torus.mesh")
         self.yRotateEntity.setMaterialName("Lockenwickler_Pivot_Y")
+        self.yRotateEntity.setRenderQueueGroup(og.RENDER_QUEUE_OVERLAY)
         self.yRotateNode = self.pivotNode.createChildSceneNode()
         self.yRotateNode.attachObject(self.yRotateEntity)
         #self.yRotateNode.translate(0, 0, -10)
@@ -104,10 +113,10 @@
 
         self.zRotateEntity = self.sceneManager.createEntity("EditorZRotator",  "Rotate_Torus.mesh")
         self.zRotateEntity.setMaterialName("Lockenwickler_Pivot_Z")
+        self.zRotateEntity.setRenderQueueGroup(og.RENDER_QUEUE_OVERLAY)
         self.zRotateNode = self.pivotNode.createChildSceneNode()
         self.zRotateNode.attachObject(self.zRotateEntity)
 
-        pass
 
     def __createScalePivot(self):
         pass
@@ -128,6 +137,7 @@
 
     def hide(self):
         self.pivotNode.removeAllChildren()
+        self.isHidden = True
 
     def show(self):
         self.hide()
@@ -140,7 +150,8 @@
             self.pivotNode.addChild(self.yRotateNode)
             self.pivotNode.addChild(self.zRotateNode)
         elif self.mode == 3:
-            pass
+            return
+        self.isHidden = False
 
     def setMoveMode(self):
         self.hide()
@@ -163,34 +174,42 @@
 
     def onMouseMoved(self, globalX, globalY, incX, incY):
         # move mode
-        if self.mode == 1:
-            transFactor = 0.1
-            transVec = None
-            if self.moveDirection == "EditorXArrow":
-                transVec = og.Vector3(-incX, 0.0 , 0.0)
-            elif self.moveDirection == "EditorYArrow":
-                transVec = og.Vector3(0.0, -incY, 0.0)
-            elif self.moveDirection == "EditorZArrow":
-                transVec = og.Vector3(0.0, 0.0, incX)
+        if self.isTransforming:
+            if self.mode == 1:
+                transFactor = 0.1
+                transVec = og.Vector3()
+                if self.moveDirection == "EditorXArrow":
+                    transVec = og.Vector3(-incX, 0.0 , 0.0)
+                elif self.moveDirection == "EditorYArrow":
+                    transVec = og.Vector3(0.0, -incY, 0.0)
+                elif self.moveDirection == "EditorZArrow":
+                    transVec = og.Vector3(0.0, 0.0, incX)
 
-            transVec = transVec * transFactor
-            for so in self.selectionList:
-                so.entity.getParentNode().translate(transVec)
+                transVec = transVec * transFactor
+                for so in self.selectionList:
+                    so.entity.getParentNode().translate(transVec)
 
-            self.pivotNode.translate(transVec)
+                self.pivotNode.translate(transVec)
 
-        # rotate mode
-        elif self.mode == 2:
-            rotValue = (incX + incY) * 0.05
+            # rotate mode
+            elif self.mode == 2:
+                rotValue = (incX + incY) * 0.05
 
-            if self.moveDirection == "EditorXRotator":
-                for so in self.selectionList:
-                    so.entity.getParentNode().pitch(rotValue)
-            if self.moveDirection == "EditorYRotator":
-                for so in self.selectionList:
-                    so.entity.getParentNode().yaw(rotValue)
-            if self.moveDirection == "EditorZRotator":
-                for so in self.selectionList:
-                    so.entity.getParentNode().roll(rotValue)
+                if self.moveDirection == "EditorXRotator":
+                    for so in self.selectionList:
+                        so.entity.getParentNode().pitch(rotValue)
+                if self.moveDirection == "EditorYRotator":
+                    for so in self.selectionList:
+                        so.entity.getParentNode().yaw(rotValue)
+                if self.moveDirection == "EditorZRotator":
+                    for so in self.selectionList:
+                        so.entity.getParentNode().roll(rotValue)
 
-        pass
+        self.update()
+
+    def update(self):
+        if not self.isHidden:
+            dist = self.camera.getPosition().distance(self.pivotNode.getPosition())
+            self.pivotNode.setScale(og.Vector3(0.5,  0.5,  0.5) * (dist / 30))
+
+

Added: rl/trunk/editors/Lockenwickler/src/ObjectPropertyModel.py
===================================================================
--- rl/trunk/editors/Lockenwickler/src/ObjectPropertyModel.py	2008-10-12 18:04:43 UTC (rev 4549)
+++ rl/trunk/editors/Lockenwickler/src/ObjectPropertyModel.py	2008-10-16 17:33:16 UTC (rev 4550)
@@ -0,0 +1,38 @@
+#################################################
+ # Copyright (C) 2008  Stefan Stammberger
+ #
+ # This library is free software; you can redistribute it and/or
+ # modify it under the terms of the GNU Lesser General Public
+ # License as published by the Free Software Foundation; either
+ # version 2.1 of the License, or (at your option) any later version.
+ #
+ # This library is distributed in the hope that it will be useful,
+ # but WITHOUT ANY WARRANTY; without even the implied warranty of
+ # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ # Lesser General Public License for more details.
+ #
+ # You should have received a copy of the GNU Lesser General Public
+ # License along with this library; if not, write to the Free Software
+ # Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ #################################################
+
+import sys
+
+from Property import *
+
+class ObjectPropertyModel():
+    def __init__(self):
+        self.numProperties = 0
+        self.currentObject = None
+        self.properties = []
+
+    def getNumProperies(self):
+        return self.numProperties
+
+    # sets the current object whose properties are displayed
+    def setSingleObject(self, so):
+        self.currentObject = so
+        self.__parseProperties()
+
+    def __parseProperties(self):
+        node = self.currentObject.entity.getParentNode()

Modified: rl/trunk/editors/Lockenwickler/src/ObjectPropertyWin.py
===================================================================
--- rl/trunk/editors/Lockenwickler/src/ObjectPropertyWin.py	2008-10-12 18:04:43 UTC (rev 4549)
+++ rl/trunk/editors/Lockenwickler/src/ObjectPropertyWin.py	2008-10-16 17:33:16 UTC (rev 4550)
@@ -22,6 +22,8 @@
 from PyQt4.QtCore import *
 from PyQt4.QtGui import *
 
+from Property import *
+
 class ObjectPropertyWin(QDialog):
     def __init__(self, parent=None):
         super(QDialog, self).__init__(parent)
@@ -30,7 +32,6 @@
         self.connect(self.treeWidget, SIGNAL("itemDoubleClicked (QTreeWidgetItem *,int)"),
                                self.onItemClicked)
 
-
     def setupUi(self):
         self.setObjectName("ObjectPropertys")
         self.resize(QSize(QRect(0,0,761,724).size()).expandedTo(self.minimumSizeHint()))
@@ -44,27 +45,10 @@
         QMetaObject.connectSlotsByName(self)
 
     def retranslateUi(self):
-        self.setWindowTitle(QApplication.translate("ObjectPropertys", "Object Properties", None, QApplication.UnicodeUTF8))
         self.treeWidget.headerItem().setText(0,QApplication.translate("ObjectPropertys", "Property", None, QApplication.UnicodeUTF8))
         self.treeWidget.headerItem().setText(1,QApplication.translate("ObjectPropertys", "Value", None, QApplication.UnicodeUTF8))
         self.treeWidget.clear()
 
-        item = QTreeWidgetItem(self.treeWidget)
-        item.setText(0,QApplication.translate("ObjectPropertys", "Position", None, QApplication.UnicodeUTF8))
-        item.setText(1,"")
 
-        item1 = QTreeWidgetItem(item)
-        item1.setText(0,QApplication.translate("ObjectPropertys", "X", None, QApplication.UnicodeUTF8))
-        item1.setText(1,"")
-
-        item2 = QTreeWidgetItem(item)
-        item2.setText(0,QApplication.translate("ObjectPropertys", "Y", None, QApplication.UnicodeUTF8))
-        item2.setText(1,"")
-
-        item3 = QTreeWidgetItem(item)
-        item3.setText(0,QApplication.translate("ObjectPropertys", "Z", None, QApplication.UnicodeUTF8))
-        item3.setText(1,"")
-
     def onItemClicked(self, item, column):
-        print item.text(0)
-        print column
+        pass

Modified: rl/trunk/editors/Lockenwickler/src/OgreMainWindow.py
===================================================================
--- rl/trunk/editors/Lockenwickler/src/OgreMainWindow.py	2008-10-12 18:04:43 UTC (rev 4549)
+++ rl/trunk/editors/Lockenwickler/src/OgreMainWindow.py	2008-10-16 17:33:16 UTC (rev 4550)
@@ -263,12 +263,12 @@
     def calculateSelectionRay(self,  event):
         relMousePos = self.ogreRenderWindow.mapFromGlobal(QPoint(event.globalX(),  event.globalY())) # get the mose position relative to the ogre window
 
-        if self.lastSelectionClick != None:
-            if self.lastSelectionClick.x() == relMousePos.x() and self.lastSelectionClick.y() == relMousePos.y(): # mouse didn't move
-                # we don't initiate a new selection based on bounding boxes here, we just iterate through the list generated last time a selection was made
-                # this is based on how far the distance of the object is from the camera (as returned by ogre)
-                self.moduleManager.iterateEntityUnderMouse() # don't select something new, switch through the currently selected models
-                return
+#        if self.lastSelectionClick != None:
+#            if self.lastSelectionClick.x() == relMousePos.x() and self.lastSelectionClick.y() == relMousePos.y(): # mouse didn't move
+#                # we don't initiate a new selection based on bounding boxes here, we just iterate through the list generated last time a selection was made
+#                # this is based on how far the distance of the object is from the camera (as returned by ogre)
+#                self.moduleManager.iterateEntityUnderMouse() # don't select something new, switch through the currently selected models
+#                return
 
         self.lastSelectionClick = relMousePos
         screenX = relMousePos.x()/float(self.ogreRenderWindow.viewport.getActualWidth())

Modified: rl/trunk/editors/Lockenwickler/src/Property.py
===================================================================
--- rl/trunk/editors/Lockenwickler/src/Property.py	2008-10-12 18:04:43 UTC (rev 4549)
+++ rl/trunk/editors/Lockenwickler/src/Property.py	2008-10-16 17:33:16 UTC (rev 4550)
@@ -16,16 +16,31 @@
  # Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  #################################################
 
+from PyQt4.QtCore import *
+from PyQt4.QtGui import *
 
-class Property():
+class Vector3Property():
     def __init__(self):
         pass
 
-    def setValue(self):
-        pass
+    def __parseValues(self):
+        self.vector3 = self.so.entity.getParentNode().getPosition()
+        self.__createTree()
 
-    def getValue(self):
-        pass
+    def __createTree(self):
+        item = QTreeWidgetItem(self.treeWidget)
+        item.setText(0,QApplication.translate("ObjectPropertys", "Position", None, QApplication.UnicodeUTF8))
+        item.setText(1, str(self.vector3.x) + " , " + str(self.vector3.y) +" , " + str(self.vector3.z))
 
-    def createEditor(self):
-        pass
+        item1 = QTreeWidgetItem(item)
+        item1.setText(0,QApplication.translate("ObjectPropertys", "X", None, QApplication.UnicodeUTF8))
+        item1.setText(1, str(self.vector3.x))
+
+        item2 = QTreeWidgetItem(item)
+        item2.setText(0,QApplication.translate("ObjectPropertys", "Y", None, QApplication.UnicodeUTF8))
+        item2.setText(1, str(self.vector3.y))
+
+        item3 = QTreeWidgetItem(item)
+        item3.setText(0,QApplication.translate("ObjectPropertys", "Z", None, QApplication.UnicodeUTF8))
+        item3.setText(1, str(self.vector3.z))
+

Modified: rl/trunk/editors/Lockenwickler/src/ViewportGrid.py
===================================================================
--- rl/trunk/editors/Lockenwickler/src/ViewportGrid.py	2008-10-12 18:04:43 UTC (rev 4549)
+++ rl/trunk/editors/Lockenwickler/src/ViewportGrid.py	2008-10-16 17:33:16 UTC (rev 4550)
@@ -26,29 +26,29 @@
     def __init__(self, pSceneMgr, pViewport):
         super(ViewportGrid, self).__init__()
 
-        self.m_pSceneMgr = pSceneMgr
-        self.m_pViewport = pViewport
-        self.m_enabled = False
-        self.m_layer = None
+        self.sceneManager = pSceneMgr
+        self.viewport = pViewport
+        self.enabled = False
+        self.layer = None
 
-        self.m_pPrevCamera = None
-        self.m_prevOrtho = False
-        self.m_prevCamPos = None
-        self.m_prevNear = None
-        self.m_prevFOVy = None
-        self.m_prevAspectRatio = None
-        self.m_forceUpdate = True
+        self.prevCamera = None
+        self.prevOrtho = False
+        self.prevCamPos = None
+        self.prevNear = None
+        self.prevOrtho = None
+        self.prevAspectRatio = None
+        self.bForceUpdate = True
 
-        self.m_pGrid = None
-        self.m_created = False
-        self.m_pNode = None
+        self.pGrid = None
+        self.created = False
+        self.pNode = None
 
-        self.m_colour1 = og.ColourValue(0.7, 0.7, 0.7)
-        self.m_colour2 = og.ColourValue(0.7, 0.7, 0.7)
-        self.m_division = 10
-        self.m_perspSize = 100
-        self.m_renderScale = True
-        self.m_renderMiniAxes = True
+        self.colour1 = og.ColourValue(0.7, 0.7, 0.7)
+        self.colour2 = og.ColourValue(0.7, 0.7, 0.7)
+        self.division = 10
+        self.perspSize = 100
+        self.renderScale = True
+        self.renderMiniAxes = True
 
         self.sMatName = "ViewportGrid"
 
@@ -56,90 +56,90 @@
         self.setRenderLayer(RL_BEHIND)
 
         # Add this as a render target listener
-        self.m_pViewport.getTarget().addListener(self)
+        self.viewport.getTarget().addListener(self)
 
 
     def getColour(self):
-        return m_colour1
+        return colour1
 
     def setColour(self, colour):
         # Force alpha = 1 for the primary colour
-        self.m_colour1 = colour
-        self.m_colour1.a = 1.0
-        self.m_colour2 = m_colour1
+        self.colour1 = colour
+        self.colour1.a = 1.0
+        self.colour2 = colour1
         self.forceUpdate()
 
     #Grid division (the number of new lines that are created when zooming in).
     def getDivision(self):
-        return m_division
+        return division
 
     def setDivision(self, division):
-        self.m_division = division
+        self.division = division
         self.forceUpdate()
 
     #//! Grid render layer (behind of in front of the objects).
     def getRenderLayer(self):
-        return m_layer
+        return layer
 
     def setRenderLayer(self, layer):
-        self.m_layer = layer
+        self.layer = layer
 
-        if self.m_layer == RL_BEHIND:
+        if self.layer == RL_BEHIND:
             # Render just before the world geometry
-            self.m_pGrid.setRenderQueueGroup(og.RENDER_QUEUE_WORLD_GEOMETRY_1 - 1)
-        elif self.m_layer == RL_INFRONT:
+            self.pGrid.setRenderQueueGroup(og.RENDER_QUEUE_WORLD_GEOMETRY_1 - 1)
+        elif self.layer == RL_INFRONT:
             # Render just before the overlays
-            self.m_pGrid.setRenderQueueGroup(og.RENDER_QUEUE_OVERLAY - 1)
+            self.pGrid.setRenderQueueGroup(og.RENDER_QUEUE_OVERLAY - 1)
 
 
     def getPerspectiveSize(self):
-        return m_perspSize
+        return perspSize
 
     def setPerspectiveSize(self, size):
-        self.m_perspSize = size
+        self.perspSize = size
         self.forceUpdate()
 
 #       //! Render scaling info? Defaults to true.
 #       //! @todo Implement this
     def getRenderScale(self):
-        return m_renderScale
+        return renderScale
 
     def setRenderScale(self, enabled = True):
-        self.m_renderScale = enabled
+        self.renderScale = enabled
         self.forceUpdate()
 
 #       //! Render mini axes? Defaults to true.
 #       //! @todo Implement this
     def getRenderMiniAxes(self):
-        return m_renderMiniAxes
+        return renderMiniAxes
 
     def setRenderMiniAxes(self, enabled = True):
-        self.m_renderMiniAxes = enabled
+        self.renderMiniAxes = enabled
         self.forceUpdate()
 
     #// Enable / disable
     def isEnabled(self):
-        return m_enabled
+        return self.enabled
 
     def enable(self):
-        self.m_enabled = True
+        self.enabled = True
 
-        if not self.m_pGrid.isAttached():
-            self.m_pNode.attachObject(self.m_pGrid)
+        if not self.pGrid.isAttached():
+            self.pNode.attachObject(self.pGrid)
 
         self.forceUpdate()
 
 
     def disable(self):
-        self.m_enabled = False
+        self.enabled = False
 
-        if self.m_pGrid.isAttached():
-            self.m_pNode.detachObject(self.m_pGrid)
+        if self.pGrid.isAttached():
+            self.pNode.detachObject(self.pGrid)
 
 
 
     def  toggle(self):
-        self.setEnabled(not self.m_enabled)
+        self.setEnabled(not self.enabled)
 
     def setEnabled(self, enabled):
         if enabled:
@@ -149,34 +149,34 @@
 
 
     def forceUpdate(self):
-        self.m_forceUpdate = True
+        self.bForceUpdate = True
 
     def preViewportUpdate(self, evt):
-       #TODO find out why evt.souce and self.m_pViewport differ in their memory address
-       # if evt.source != self.m_pViewport:
+       #TODO find out why evt.souce and self.viewport differ in their memory address
+       # if evt.source != self.viewport:
            # return
 
-        self.m_pGrid.setVisible(True)
+        self.pGrid.setVisible(True)
 
-        if self.m_enabled:
+        if self.enabled:
             self.__update()
 
     def postViewportUpdate(self, evt):
-       # if evt.source != self.m_pViewport:
+       # if evt.source != self.viewport:
            # return
-        self.m_pGrid.setVisible(False)
+        self.pGrid.setVisible(False)
 
     def __createGrid(self):
-        name = self.m_pViewport.getTarget().getName() + "::"
-        name += str(self.m_pViewport.getZOrder()) + "::ViewportGrid"
+        name = self.viewport.getTarget().getName() + "::"
+        name += str(self.viewport.getZOrder()) + "::ViewportGrid"
 
         #// Create the manual object
-        self.m_pGrid = self.m_pSceneMgr.createManualObject(name)
-        self.m_pGrid.setDynamic(True)
+        self.pGrid = self.sceneManager.createManualObject(name)
+        self.pGrid.setDynamic(True)
 
         #// Create the scene node (not attached yet)
-        self.m_pNode = self.m_pSceneMgr.getRootSceneNode().createChildSceneNode(name)
-        self.m_enabled = False
+        self.pNode = self.sceneManager.getRootSceneNode().createChildSceneNode(name)
+        self.enabled = False
 
         #// Make sure the material is created
         #//! @todo Should we destroy the material somewhere?
@@ -189,23 +189,23 @@
 
 
     def __destroyGrid(self):
-        self.m_pSceneMgr.destroyManualObject(self.m_pGrid)
-        self.m_pGrid = None
+        self.sceneManager.destroyManualObject(self.pGrid)
+        self.pGrid = None
 
-        self.m_pSceneMgr.destroySceneNode(self.m_pNode.getName())
-        self.m_pNode = None
+        self.sceneManager.destroySceneNode(self.pNode.getName())
+        self.pNode = None
 
 
     def __update(self):
-        if not self.m_enabled:
+        if not self.enabled:
             return
 
-        pCamera = self.m_pViewport.getCamera()
+        pCamera = self.viewport.getCamera()
         if not pCamera:
             return
 
         # Check if an update is necessary
-        if not self.__checkUpdate() and not self.m_forceUpdate:
+        if not self.__checkUpdate() and not self.bForceUpdate:
             return
 
         if pCamera.getProjectionType() == og.PT_ORTHOGRAPHIC:
@@ -213,17 +213,17 @@
         else:
             self.__updatePersp()
 
-        self.m_forceUpdate = False
+        self.bForceUpdate = False
 
 
 
     def __updateOrtho(self):
         # Screen dimensions
-        width = self.m_pViewport.getActualWidth()
-        height = self.m_pViewport.getActualHeight()
+        width = self.viewport.getActualWidth()
+        height = self.viewport.getActualHeight()
 
         #Camera information
-        pCamera = m_pViewport.getCamera()
+        pCamera = pViewport.getCamera()
         camPos = pCamera.getPosition()
         camDir = pCamera.getDirection()
         camUp = pCamera.getUp()
@@ -246,7 +246,7 @@
         worldToScreen = width / worldWidth
         screenToWorld = worldWidth / width
 
-        # TODO Treshold should be dependent on window width/height (min? max?) so there are no more then m_division full alpha-lines
+        # TODO Treshold should be dependent on window width/height (min? max?) so there are no more then division full alpha-lines
         treshold = 10 # Treshhold in pixels
 
         # Calculate the spacing multiplier
@@ -258,18 +258,18 @@
                 exp = exp +1
                 temp = temp * treshold # TODO maybe wrong
 
-            mult = og.Math.Pow(self.m_division, exp)
+            mult = og.Math.Pow(self.division, exp)
         else:
-            while temp > (self.m_division * treshold):
+            while temp > (self.division * treshold):
                 exp = exp +1
                 temp = temp / treshold # TODO maybe wrong
 
-            mult = og.Math.Pow(1.0 / self.m_division, exp)
+            mult = og.Math.Pow(1.0 / self.division, exp)
 
-        # Interpolate alpha for (multiplied) spacing between treshold and m_division * treshold
-        self.m_colour2.a = worldToScreen * mult / (m_division * treshold - treshold)
-        if m_colour2.a > 1.0:
-           self.m_colour2.a = 1.0
+        # Interpolate alpha for (multiplied) spacing between treshold and division * treshold
+        self.colour2.a = worldToScreen * mult / (division * treshold - treshold)
+        if colour2.a > 1.0:
+           self.colour2.a = 1.0
 
         # Calculate the horizontal zero-axis color
         camRightX = og.Math.Abs(camRight.x)
@@ -283,7 +283,7 @@
         elif og.Math.RealEqual(camRightZ, 1.0):
             horAxisColor = og.ColourValue.Blue
         else:
-            horAxisColor = self.m_colour1
+            horAxisColor = self.colour1
 
         # Calculate the vertical zero-axis color
         camUpX = og.Math.Abs(camUp.x)
@@ -297,19 +297,19 @@
         elif og.Math.RealEqual(camUpZ, 1.0):
             horAxisColor = og.ColourValue.Blue
         else:
-            horAxisColor = self.m_colour1
+            horAxisColor = self.colour1
 
         # The number of lines
         numLinesWidth = int((worldWidth / mult) + 1)
         numLinesHeight = int((worldHeight / mult) + 1)
 
         # Start creating or updating the grid
-        self.m_pGrid.estimateVertexCount(2 * numLinesWidth + 2 * numLinesHeight)
-        if m_created:
-            self.m_pGrid.beginUpdate(0)
+        self.pGrid.estimateVertexCount(2 * numLinesWidth + 2 * numLinesHeight)
+        if created:
+            self.pGrid.beginUpdate(0)
         else:
-            self.m_pGrid.begin(self.sMatName, og.RenderOperation.OT_LINE_LIST)
-            self.m_created = True
+            self.pGrid.begin(self.sMatName, og.RenderOperation.OT_LINE_LIST)
+            self.created = True
 
         # Vertical lines
         startX = mult * int(worldLeft / mult)
@@ -326,19 +326,19 @@
 
             if multX == 0:
                 colour = vertAxisColor
-            elif multX % (int(self.m_division)):
-                self.m_colour2
+            elif multX % (int(self.division)):
+                self.colour2
             else:
-                self.m_colour1
+                self.colour1
 
 
 
 
             # Add the line
-            self.m_pGrid.position(x, worldBottom, 0)
-            self.m_pGrid.colour(colour)
-            self.m_pGrid.position(x, worldTop, 0)
-            self.m_pGrid.colour(colour)
+            self.pGrid.position(x, worldBottom, 0)
+            self.pGrid.colour(colour)
+            self.pGrid.position(x, worldTop, 0)
+            self.pGrid.colour(colour)
 
             x += mult
 
@@ -355,24 +355,24 @@
             else:
                 multY = int(y / mult + 0.5)
 
-            #colour = (multY == 0) ? horAxisColor : (multY % int(m_division)) ? self.m_colour2 : self.m_colour1
+            #colour = (multY == 0) ? horAxisColor : (multY % int(division)) ? self.colour2 : self.colour1
             if multY == 0:
                 colour = horAxisColor
-            elif multY % (int(self.m_division)):
-                self.m_colour2
+            elif multY % (int(self.division)):
+                self.colour2
             else:
-                self.m_colour1
+                self.colour1
 
-            self.m_pGrid.position(worldLeft, y, 0)
-            self.m_pGrid.colour(colour)
-            self.m_pGrid.position(worldRight, y, 0)
-            self.m_pGrid.colour(colour)
+            self.pGrid.position(worldLeft, y, 0)
+            self.pGrid.colour(colour)
+            self.pGrid.position(worldRight, y, 0)
+            self.pGrid.colour(colour)
 
             y += mult
 
-        self.m_pGrid.end()
+        self.pGrid.end()
 
-        self.m_pNode.setOrientation(pCamera.getOrientation())
+        self.pNode.setOrientation(pCamera.getOrientation())
 
 
     def __updatePersp(self):
@@ -380,8 +380,8 @@
         mult = 1
 
         #! @todo Interpolate alpha
-        self.m_colour2.a = 0.5
-        #if(m_colour2.a > 1.0f) m_colour2.a = 1.0f
+        self.colour2.a = 0.5
+        #if(colour2.a > 1.0f) colour2.a = 1.0f
 
         # Calculate the horizontal zero-axis color
         horAxisColor = og.ColourValue.Red
@@ -390,20 +390,20 @@
         vertAxisColor = og.ColourValue.Blue
 
         # The number of lines
-        numLines = int(self.m_perspSize / mult) + 1
+        numLines = int(self.perspSize / mult) + 1
 
         # Start creating or updating the grid
-        self.m_pGrid.estimateVertexCount(4 * numLines)
-        if self.m_created:
-            self.m_pGrid.beginUpdate(0)
+        self.pGrid.estimateVertexCount(4 * numLines)
+        if self.created:
+            self.pGrid.beginUpdate(0)
         else:
-            self.m_pGrid.begin(self.sMatName, og.RenderOperation.OT_LINE_LIST)
-            self.m_created = True
+            self.pGrid.begin(self.sMatName, og.RenderOperation.OT_LINE_LIST)
+            self.created = True
 
         # Vertical lines
-        start = mult * int(-self.m_perspSize / 2 / mult)
+        start = mult * int(-self.perspSize / 2 / mult)
         x = start
-        while x <= (self.m_perspSize / 2):
+        while x <= (self.perspSize / 2):
             # Get the right color for this line
             #multX = (x == 0) ? x : (x < 0) ? int(x / mult - 0.5f) : int(x / mult + 0.5f)
             if x == 0:
@@ -413,25 +413,25 @@
             else:
                 multX = int(x / mult +0.5)
 
-            #colour = (multX == 0) ? vertAxisColor : (multX % (int) self.m_division) ? self.m_colour2 : self.m_colour1
+            #colour = (multX == 0) ? vertAxisColor : (multX % (int) self.division) ? self.colour2 : self.colour1
             if multX == 0:
                 colour = vertAxisColor
-            elif multX % int(self.m_division):
-                colour = self.m_colour2
+            elif multX % int(self.division):
+                colour = self.colour2
             else:
-                colour = self.m_colour1
+                colour = self.colour1
 
             # Add the line
-            self.m_pGrid.position(x, 0, -self.m_perspSize / 2)
-            self.m_pGrid.colour(colour)
-            self.m_pGrid.position(x, 0, self.m_perspSize / 2)
-            self.m_pGrid.colour(colour)
+            self.pGrid.position(x, 0, -self.perspSize / 2)
+            self.pGrid.colour(colour)
+            self.pGrid.position(x, 0, self.perspSize / 2)
+            self.pGrid.colour(colour)
 
             x += mult
 
         # Horizontal lines
         y = start
-        while y <= (self.m_perspSize / 2):
+        while y <= (self.perspSize / 2):
             # Get the right color for this line
             #multY = (y == 0) ? y : (y < 0) ? int(y / mult - 0.5f) : int(y / mult + 0.5f)
             if y == 0:
@@ -441,50 +441,50 @@
             else:
                 multY = int(y / mult +0.5)
 
-            #colour = (multY == 0) ? horAxisColor : (multY % int(self.m_division)) ? self.m_colour2 : self.m_colour1
+            #colour = (multY == 0) ? horAxisColor : (multY % int(self.division)) ? self.colour2 : self.colour1
             if multY == 0:
                 colour = horAxisColor
-            elif multY % int(self.m_division):
-                colour = self.m_colour2
+            elif multY % int(self.division):
+                colour = self.colour2
             else:
-                colour = self.m_colour1
+                colour = self.colour1
             # Add the line
-            self.m_pGrid.position(-self.m_perspSize / 2, 0, y)
-            self.m_pGrid.colour(colour)
-            self.m_pGrid.position(self.m_perspSize / 2, 0, y)
-            self.m_pGrid.colour(colour)
+            self.pGrid.position(-self.perspSize / 2, 0, y)
+            self.pGrid.colour(colour)
+            self.pGrid.position(self.perspSize / 2, 0, y)
+            self.pGrid.colour(colour)
 
             y += mult
 
-        self.m_pGrid.end()
+        self.pGrid.end()
 
         # Normal orientation, grid in the X-Z plane
-        self.m_pNode.resetOrientation()
+        self.pNode.resetOrientation()
 
 
     def __checkUpdate(self):
         update = False
 
-        pCamera = self.m_pViewport.getCamera()
+        pCamera = self.viewport.getCamera()
         if not pCamera:
             return False
 
-        if pCamera is not self.m_pPrevCamera:
-            self.m_pPrevCamera = pCamera
+        if pCamera is not self.prevCamera:
+            self.prevCamera = pCamera
             update = True
 
 
         ortho = (pCamera.getProjectionType() == og.PT_ORTHOGRAPHIC)
-        if ortho is not self.m_prevOrtho:
-            self.m_prevOrtho = ortho
+        if ortho is not self.prevOrtho:
+            self.prevOrtho = ortho
             update = True
 
             # Set correct material properties
-            pMaterial = MaterialManager.getSingleton().getByName(self.sMatName)
-            if not pMaterial.isNull():
-                pMaterial.setDepthWriteEnabled(not ortho)
-                pMaterial.setDepthCheckEnabled(not ortho)
+            pMaterial = og.MaterialManager.getSingleton().getByName(self.sMatName)
 
+            pMaterial.setDepthWriteEnabled(not ortho)
+            pMaterial.setDepthCheckEnabled(not ortho)
+
         #return update || ortho ? checkUpdateOrtho() : checkUpdatePersp()
         if update:
             if ortho:
@@ -498,24 +498,24 @@
     def __checkUpdateOrtho(self):
         update = False
 
-        pCamera = self.m_pViewport.getCamera()
+        pCamera = self.viewport.getCamera()
         if not pCamera:
             return False
 
-        if pCamera.getPosition() is not self.m_prevCamPos:
-            self.m_prevCamPos = pCamera.getPosition()
+        if pCamera.getPosition() is not self.prevCamPos:
+            self.prevCamPos = pCamera.getPosition()
             update = True
 
-        if pCamera.getNearClipDistance() is not self.m_prevNear:
-            self.m_prevNear = pCamera.getNearClipDistance()
+        if pCamera.getNearClipDistance() is not self.prevNear:
+            self.prevNear = pCamera.getNearClipDistance()
             update = True
 
-        if pCamera.getFOVy() is not self.m_prevFOVy:
-            self.m_prevFOVy = pCamera.getFOVy()
+        if pCamera.getFOVy() is not self.prevOrtho:
+            self.prevOrtho = pCamera.getFOVy()
             update = True
 
-        if pCamera.getAspectRatio() is not self.m_prevAspectRatio:
-            self.m_prevAspectRatio = pCamera.getAspectRatio()
+        if pCamera.getAspectRatio() is not self.prevAspectRatio:
+            self.prevAspectRatio = pCamera.getAspectRatio()
             update = True
 
         return update

Modified: rl/trunk/editors/Lockenwickler/src/media/Pivot_Point.material
===================================================================
--- rl/trunk/editors/Lockenwickler/src/media/Pivot_Point.material	2008-10-12 18:04:43 UTC (rev 4549)
+++ rl/trunk/editors/Lockenwickler/src/media/Pivot_Point.material	2008-10-16 17:33:16 UTC (rev 4550)
@@ -4,10 +4,12 @@
 	{
 		pass
 		{
-			ambient 1.0 0.0 0.0 1.0
-			diffuse 1.0 0.0 0.0 1.0
-			specular 1.0 0.0 0.0 1.0 12.5
-			emissive 1.0 0.0 0.0 1.0
+                        depth_check off
+                        depth_write off
+			ambient 1.0 0.0 0.0 0.5
+			diffuse 1.0 0.0 0.0 0.5
+			specular 1.0 0.0 0.0 0.5 12.5
+			emissive 1.0 0.0 0.0 0.5
 		}
 	}
 }
@@ -16,12 +18,15 @@
 {
 	technique
 	{
+
 		pass
 		{
-			ambient 0.0 0.0 1.0 1.0
-			diffuse 0.0 0.0 1.0 1.0
-			specular 0.0 0.0 1.0 1.0 12.5
-			emissive 0.0 0.0 1.0 1.0
+                        depth_check off
+                        depth_write off
+			ambient 0.0 0.0 1.0 0.5
+			diffuse 0.0 0.0 1.0 0.5
+			specular 0.0 0.0 1.0 0.5 12.5
+			emissive 0.0 0.0 1.0 0.5
 		}
 	}
 }
@@ -32,10 +37,12 @@
 	{
 		pass
 		{
-			ambient 0.0 1.0 0.0 1.0
-			diffuse 0.0 1.0 0.0 1.0
-			specular 0.0 1.0 0.0 1.0 12.5
-			emissive 0.0 1.0 0.0 1.0
+                        depth_check off
+                        depth_write off
+			ambient 0.0 1.0 0.0 0.5
+			diffuse 0.0 1.0 0.0 0.5
+			specular 0.0 1.0 0.0 0.5 12.5
+			emissive 0.0 1.0 0.0 0.5
 		}
 	}
 }
@@ -46,10 +53,10 @@
 	{
 		pass
 		{
-			ambient 0.0 0.0 0.0 1.0
-			diffuse 0.0 0.0 0.0 1.0
-			specular 0.0 0.0 0.0 1.0 12.5
-			emissive 0.0 0.0 0.0 1.0
+			ambient 0.0 0.0 0.0 0.5
+			diffuse 0.0 0.0 0.0 0.5
+			specular 0.0 0.0 0.0 0.5 12.5
+			emissive 0.0 0.0 0.0 0.5
 		}
 	}
 }



From timm at mail.berlios.de  Fri Oct 17 18:15:00 2008
From: timm at mail.berlios.de (timm at mail.berlios.de)
Date: Fri, 17 Oct 2008 18:15:00 +0200
Subject: [Dsa-hl-svn] r4551 - in rl/branches/persistence/core: . include src
Message-ID: <200810171615.m9HGF0AA007305@sheep.berlios.de>

Author: timm
Date: 2008-10-17 18:14:48 +0200 (Fri, 17 Oct 2008)
New Revision: 4551

Removed:
   rl/branches/persistence/core/include/DotSceneLoader.h
   rl/branches/persistence/core/src/DotSceneLoader.cpp
Modified:
   rl/branches/persistence/core/RlCore2005.vcproj
   rl/branches/persistence/core/include/CoreSubsystem.h
   rl/branches/persistence/core/include/DotSceneOctreeWorld.h
   rl/branches/persistence/core/include/World.h
   rl/branches/persistence/core/src/CoreSubsystem.cpp
   rl/branches/persistence/core/src/DotSceneOctreeWorld.cpp
Log:
- removed old dotsceneloader

Modified: rl/branches/persistence/core/RlCore2005.vcproj
===================================================================
--- rl/branches/persistence/core/RlCore2005.vcproj	2008-10-16 17:33:16 UTC (rev 4550)
+++ rl/branches/persistence/core/RlCore2005.vcproj	2008-10-17 16:14:48 UTC (rev 4551)
@@ -416,10 +416,6 @@
 				>
 			</File>
 			<File
-				RelativePath=".\include\DotSceneLoader.h"
-				>
-			</File>
-			<File
 				RelativePath=".\include\DotSceneOctreeWorld.h"
 				>
 			</File>
@@ -761,10 +757,6 @@
 				>
 			</File>
 			<File
-				RelativePath=".\src\DotSceneLoader.cpp"
-				>
-			</File>
-			<File
 				RelativePath=".\src\DotSceneOctreeWorld.cpp"
 				>
 			</File>

Modified: rl/branches/persistence/core/include/CoreSubsystem.h
===================================================================
--- rl/branches/persistence/core/include/CoreSubsystem.h	2008-10-16 17:33:16 UTC (rev 4550)
+++ rl/branches/persistence/core/include/CoreSubsystem.h	2008-10-17 16:14:48 UTC (rev 4551)
@@ -69,8 +69,6 @@
     void renderOneFrame(bool executeTasks = true);
 
     World* getWorld();
-    void loadMap(const Ogre::String type, const Ogre::String filename,
-        const Ogre::String module);
 
     RubyInterpreter* getRubyInterpreter();
 

Deleted: rl/branches/persistence/core/include/DotSceneLoader.h
===================================================================
--- rl/branches/persistence/core/include/DotSceneLoader.h	2008-10-16 17:33:16 UTC (rev 4550)
+++ rl/branches/persistence/core/include/DotSceneLoader.h	2008-10-17 16:14:48 UTC (rev 4551)
@@ -1,155 +0,0 @@
-/* This source file is part of Rastullahs Lockenpracht.
- * Copyright (C) 2003-2008 Team Pantheon. http://www.team-pantheon.de
- * 
- *  This program is free software; you can redistribute it and/or modify
- *  it under the terms of the Clarified Artistic License.
- *
- *  This program is distributed in the hope that it will be useful,
- *  but WITHOUT ANY WARRANTY; without even the implied warranty of
- *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- *  Clarified Artistic License for more details.
- *
- *  You should have received a copy of the Clarified Artistic License
- *  along with this program; if not you can get it here
- *  http://www.jpaulmorrison.com/fbp/artistic2.htm.
- */
-
-#ifndef __DotSceneLoader_H__
-#define __DotSceneLoader_H__
-
-#include "CorePrerequisites.h"
-
-#ifdef __APPLE__
-#   include <OgreNewt/OgreNewt.h>
-#else
-#   include <OgreNewt.h>
-#endif
-
-#include <string>
-#include <map>
-
-#include "XmlResourceManager.h"
-#include "XmlPropertyReader.h"
-
-class Ogre::SceneNode;
-class XERCES_CPP_NAMESPACE::DOMElement;
-
-namespace rl {
-
-	/** Diese Klasse parst eine .scene.xml Datei.
-	 *  
-	 *  Zur Zeit sind folgenende Dinge (partiell) unterst?tzt 
-	 *   - Nodes ( Name, Hierarchie + Platzierung + Skalierung + Rotation )
-	 *   - Entities ( Name, TriMeshPhysik )
-	 */
-    class DotSceneLoader : private XmlPropertyReader
-	{
-	public:
-		/// Erstellt einen Dotscene Loader, der das gew?nschte File einliest
-        DotSceneLoader(const std::string& filename, const std::string& resourceGroup);
-		/// Standard Destruktor
-		virtual ~DotSceneLoader();
-
-		/// Laden der Szene
-		void initializeScene(Ogre::SceneManager* sceneManager);
-
-	private:
-        struct NodeUserData
-        {
-            std::string physical_body;
-			Ogre::Real renderingdistance;
-			int staticgeom_group;
-            bool is_dynamic;
-			bool is_inheriting;
-			OgreNewt::CollisionPtr collision;
-        };
-
-		// wird verwendet um einen Zeiger auf eine vorherige identische
-        // Collision zu erhalten
-        struct AlreadyUsedCollision
-        {
-        public:
-            std::string Type;
-            Ogre::Vector3 Scale;
-            OgreNewt::CollisionPtr ColPtr;
-        };
-
-
-		/// Geht alle Nodes in der .scene durch
-		void processNodes(XERCES_CPP_NAMESPACE::DOMElement* rootNodesXml, 
-			Ogre::SceneManager* sceneManager,
-			Ogre::SceneNode* parentNode );
-		/// Node und alle Unterelemente
-		void processNode(XERCES_CPP_NAMESPACE::DOMElement* rootNodeXml, 
-			Ogre::SceneManager* sceneManager,
-			Ogre::SceneNode* parentNode, NodeUserData* parentUserData );
-		/// Eine Entity+Attribute
-		void processEntity( XERCES_CPP_NAMESPACE::DOMElement* rootEntityXml, 
-			Ogre::SceneManager* sceneManager, Ogre::SceneNode* parentNode, 
-			Ogre::Real renderingDistance, const std::string &bodyproxy_type );
-        /// Ein benutzerdefinierter Bereich im Node
-        void processNodeUserData( XERCES_CPP_NAMESPACE::DOMElement* rootUserDataXml, 
-			NodeUserData* userData );
-		/// Ein benutzerdefinierter Bereich in der Szene
-		void processSceneUserData( XERCES_CPP_NAMESPACE::DOMElement* rootUserDataXml );
-
-		/** Liest einen Vector aus einem XML Element, ?ber die Attribute x, y, z
-		 *  Sollten die Attribute nicht korrekt definiert sein, gibt es Vector::ZERO zur?ck (0,0,0)
-		 */
-		Ogre::Vector3 processPosition( XERCES_CPP_NAMESPACE::DOMElement* rootPositionXml );
-
-		/** Liest einen Vector aus einem XML Element, ?ber die Attribute x, y, z
-		*  Sollten die Attribute nicht korrekt definiert sein, gibt es Vector::UNIT_SCALE zur?ck (1,1,1)
-		*/
-		Ogre::Vector3 processScale( XERCES_CPP_NAMESPACE::DOMElement* rootPositionXml );
-		/** Liest einen Vector aus einem XML Element, ?ber die Attribute x, y, z
-		*  Sollten die Attribute nicht korrekt definiert sein, wird error auf true gesetzt.
-		*/
-		Ogre::Vector3 processVector( XERCES_CPP_NAMESPACE::DOMElement* rootPositionXml, bool &error );
-		/** Liest ein Quaternion aus einem XML Element, 
-		*  ?ber die Attribute qw, qx, qy, qz  ODER angle, axisX, axisY, axisZ
-		*  Sollten die Attribute nicht korrekt definiert sein, gibt es Quaternion::IDENTITY zur?ck (1,0,0,0)
-		*/
-		Ogre::Quaternion processRotation( XERCES_CPP_NAMESPACE::DOMElement* rootQuatXml );
-		/** Liest eine Liste von ein bis mehreren Bodyproxies (Collisions)
-		* SceneUserData ein.
-		* Sollten die Attribute falsch gesetzt sein, gibt es NULL zur?ck; Dadurch wird keine Collision verwendet
-		*/
-		void processCollisions( XERCES_CPP_NAMESPACE::DOMElement* rootCollisionXml );
-
-        std::string getRandomName(const std::string& baseName);
-        /// Builds a string from a xerces exception
-        std::string toString( const std::string& type, const XERCES_CPP_NAMESPACE::SAXParseException& exc ) const;
-
-		/// Der Node der Scene
-		Ogre::SceneNode* mSceneNode;
-		/// Alle statischen GeometrieNodes
-		std::map<int,Ogre::SceneNode*> mStaticNodes;
-
-		/// Alle bodyproxies, die schon automatisch erstellt worden sind
-		typedef std::map<const std::string,AlreadyUsedCollision>
-			USEDCOLLISIONSMAP;
-		USEDCOLLISIONSMAP mAutoCreatedCollisions;
-        std::vector<OgreNewt::CollisionPtr> mCollisions;
-
-		Ogre::Real mRenderingDistance;
-		std::map<int,Ogre::Real> mStaticgeomRenderingDistances;
-		std::map<int,Ogre::Real> mStaticgeomBatchSizes;
-		
-		/// Der Name der Scene
-		const std::string mSceneName;
-        /// ResourceGroup der dotscene-Resource
-        const std::string mResourceGroup;
-
-        /// Have any errors occured
-        int mErrorCount;
-
-        /// The Ressource
-        XmlPtr mRessource;
-        // The Parser
-        XERCES_CPP_NAMESPACE::XercesDOMParser* mParser;
-	};
-
-}
-
-#endif

Modified: rl/branches/persistence/core/include/DotSceneOctreeWorld.h
===================================================================
--- rl/branches/persistence/core/include/DotSceneOctreeWorld.h	2008-10-16 17:33:16 UTC (rev 4550)
+++ rl/branches/persistence/core/include/DotSceneOctreeWorld.h	2008-10-17 16:14:48 UTC (rev 4551)
@@ -32,7 +32,6 @@
         virtual void clearScene();
         virtual void initializeDefaultCamera();	
 		virtual void setCastShadows(bool enabled);
-        virtual void loadScene(const Ogre::String& levelName, const Ogre::String& module);
     };
 
 }

Modified: rl/branches/persistence/core/include/World.h
===================================================================
--- rl/branches/persistence/core/include/World.h	2008-10-16 17:33:16 UTC (rev 4550)
+++ rl/branches/persistence/core/include/World.h	2008-10-17 16:14:48 UTC (rev 4551)
@@ -42,8 +42,6 @@
         virtual Ogre::Vector3 getStartPoint() const;
 
         virtual void clearScene(void) = 0;
-        virtual void loadScene(const Ogre::String& levelName,
-            const Ogre::String& module) = 0;
 
         //Enables / disables a 'sky plane' i.e.
         virtual void setSkyPlane(bool enable, const Ogre::Plane &plane,

Modified: rl/branches/persistence/core/src/CoreSubsystem.cpp
===================================================================
--- rl/branches/persistence/core/src/CoreSubsystem.cpp	2008-10-16 17:33:16 UTC (rev 4550)
+++ rl/branches/persistence/core/src/CoreSubsystem.cpp	2008-10-17 16:14:48 UTC (rev 4551)
@@ -566,12 +566,6 @@
         return mModules;
     }
 
-    void CoreSubsystem::loadMap(const Ogre::String type, const Ogre::String filename,
-        const Ogre::String module)
-    {
-        mWorld->loadScene(filename, module);
-    }
-
     void CoreSubsystem::loadPlugins()
     {
         mSoundManager->applySettings(rl::ConfigurationManager::getSingleton().getSettings("Sound"));

Deleted: rl/branches/persistence/core/src/DotSceneLoader.cpp
===================================================================
--- rl/branches/persistence/core/src/DotSceneLoader.cpp	2008-10-16 17:33:16 UTC (rev 4550)
+++ rl/branches/persistence/core/src/DotSceneLoader.cpp	2008-10-17 16:14:48 UTC (rev 4551)
@@ -1,1080 +0,0 @@
-/* This source file is part of Rastullahs Lockenpracht.
- * Copyright (C) 2003-2008 Team Pantheon. http://www.team-pantheon.de
- *
- *  This program is free software; you can redistribute it and/or modify
- *  it under the terms of the Clarified Artistic License.
- *
- *  This program is distributed in the hope that it will be useful,
- *  but WITHOUT ANY WARRANTY; without even the implied warranty of
- *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- *  Clarified Artistic License for more details.
- *
- *  You should have received a copy of the Clarified Artistic License
- *  along with this program; if not you can get it here
- *  http://www.jpaulmorrison.com/fbp/artistic2.htm.
- */
-#include "stdinc.h" //precompiled header
-
-#include <xercesc/dom/DOM.hpp>
-
-#include "DotSceneLoader.h"
-#include "World.h"
-
-#include "PhysicsManager.h"
-#include "ActorManager.h"
-#include "CoreSubsystem.h"
-#include "ConfigurationManager.h"
-
-#include "Property.h"
-
-#include "Exception.h"
-
-#include <cstdlib>
-#include <ctime>
-
-using namespace XERCES_CPP_NAMESPACE;
-using namespace std;
-using namespace Ogre;
-
-namespace rl {
-    using XERCES_CPP_NAMESPACE::DOMDocument;
-
-    DotSceneLoader::DotSceneLoader(const string& filename, const string& resourceGroup)
-        : mSceneName(filename),
-          mResourceGroup(resourceGroup),
-          mStaticNodes(),
-          mRenderingDistance(ActorManager::getSingleton().getDefaultActorRenderingDistance()),
-          mStaticgeomRenderingDistances(),
-          mStaticgeomBatchSizes(),
-          mRessource(NULL),
-          mParser(NULL),
-          mErrorCount(0)
-    {
-        srand(static_cast<unsigned int>(time(NULL)));
-    }
-
-    DotSceneLoader::~DotSceneLoader()
-    {
-        if (!mRessource.isNull() && mRessource->isLoaded())
-        {
-            XmlResourceManager::getSingleton().unload(mSceneName);
-            XmlResourceManager::getSingleton().remove(mRessource->getHandle());
-        }
-    }
-
-    void DotSceneLoader::initializeScene(SceneManager* sceneManager)
-    {
-        initializeXml();
-
-        LOG_MESSAGE(Logger::CORE, "Loading Scene from " + mSceneName);
-        DOMDocument* doc = loadDocument(mSceneName, mResourceGroup);
-
-        // Durch alle Unterelemente iterieren
-        DOMNode* child = doc->getDocumentElement()->getFirstChild();
-
-        while(child != NULL)
-        {
-            // Ein Node
-            if (XMLString::compareIString(child->getNodeName(), AutoXMLCh("userData").data()) == 0 )
-            {
-                processSceneUserData(static_cast<DOMElement*>(child));
-            }
-            child = child->getNextSibling();
-        }
-
-        LOG_DEBUG(Logger::CORE, " Beginne parsen der Unterelemente");
-        DOMElement* nodes = getChildNamed(doc->getDocumentElement(), "nodes");
-
-        // Eine .scene wird in einem SceneNode mit dem Namen der .scene befestigt
-        mSceneNode = sceneManager->getRootSceneNode()->createChildSceneNode(mSceneName);
-        processNodes(nodes, sceneManager, mSceneNode);
-
-        // Find out, if static geometry should be used
-        Ogre::String temp = ConfigurationManager::getSingleton().getStringSetting(
-            "Video", "Use Static Geometry");
-        bool useStaticGeometry;
-
-        if (temp == "yes")
-        {
-            useStaticGeometry = true;
-        }
-        else if (temp == "no")
-        {
-            useStaticGeometry = false;
-        }
-        else
-        {
-            // Check, if Renderer supports vertex buffer
-            useStaticGeometry = Ogre::Root::getSingleton().getRenderSystem()->getCapabilities()->hasCapability(Ogre::RSC_VBO);
-        }
-
-        if (useStaticGeometry)
-        {
-            for(std::map<int,Ogre::SceneNode*>::iterator it = mStaticNodes.begin();
-                it != mStaticNodes.end();)
-            {
-                Ogre::SceneNode* staticNode = it->second;
-                string staticName = Ogre::StringConverter::toString(it->first);
-                Ogre::Real renderDist = mRenderingDistance;
-                Ogre::Real batchSize = 25.0;
-
-                if (mStaticgeomRenderingDistances.find(it->first) != mStaticgeomRenderingDistances.end())
-                    renderDist = mStaticgeomRenderingDistances[it->first];
-                if (mStaticgeomBatchSizes.find(it->first) != mStaticgeomBatchSizes.end())
-                    batchSize = mStaticgeomBatchSizes[it->first];
-
-                StaticGeometry* staticGeom = sceneManager->createStaticGeometry(mSceneName + staticName );
-
-                staticGeom->setRenderingDistance(renderDist);
-                staticGeom->addSceneNode(staticNode);
-                staticGeom->setRegionDimensions(batchSize * Vector3::UNIT_SCALE);
-                // Statische Geometrie bauen
-                staticGeom->build();
-                // Nicht mehr den Original-Knoten rendern, da dieser noch erhalten ist.
-                staticNode->setVisible(false);
-                staticNode->removeAndDestroyAllChildren();
-                sceneManager->destroySceneNode(staticNode->getName());
-                staticNode = NULL;
-                LOG_DEBUG(Logger::CORE, " Statische Geometrie "+staticName+" erstellt");
-                ++it;
-            }
-        }
-        else
-            LOG_DEBUG(Logger::CORE, " Keine statischen Geometrien erstellt");
-
-        shutdownXml();
-        LOG_DEBUG(Logger::CORE, "Szenenbeschreibung aus " + mSceneName +" fertig geparst");
-    }
-
-    // Iteriert durch die einzelnen Nodes
-    void DotSceneLoader::processNodes(DOMElement* rootNodesXml, SceneManager* sceneManager,
-        Ogre::SceneNode* parentNode)
-    {
-        if (rootNodesXml == NULL)
-            return;
-        if (parentNode == NULL)
-            Throw(NullPointerException, "parentNode darf nicht null sein");
-
-
-        // Durch alle Unterelemente iterieren
-        DOMNode* child = rootNodesXml->getFirstChild();
-
-        while(child != NULL)
-        {
-            // Ein Node
-            if (XMLString::compareIString(child->getNodeName(), AutoXMLCh("node").data()) == 0 )
-            {
-                processNode(static_cast<DOMElement*>(child), sceneManager, parentNode, NULL);
-            }
-            child = child->getNextSibling();
-        }
-    }
-
-    // Befasst sich mit einem Node
-    void DotSceneLoader::processNode(DOMElement* rootNodeXml, SceneManager* sceneManager, Ogre::SceneNode* parentNode, NodeUserData* parentUserData)
-    {
-        if (rootNodeXml == NULL)
-            return;
-        if (parentNode == NULL)
-            Throw(NullPointerException, "parentNode darf nicht null sein");
-
-        string nodeName = getAttributeValueAsStdString(rootNodeXml,
-                        "name");
-
-        Ogre::SceneNode* newNode;
-        // Wurde dem Node ein Name zugewiesen?
-        if (nodeName.length() > 0)
-        {
-            if (!parentNode->getCreator()->hasSceneNode(nodeName))
-            {
-                // Dann versuche einen Knoten mit dem Namen zu erstellen
-                newNode = parentNode->createChildSceneNode(nodeName);
-            }
-            else
-            {
-                // Name schon vergeben
-                newNode = parentNode->createChildSceneNode();
-                LOG_DEBUG(Logger::CORE,
-                    " NodeName '"+nodeName+"' war schon vergeben! Es wurde der Name '"+newNode->getName()+"' benutzt.");
-            }
-        }
-        else
-        {
-            newNode = parentNode->createChildSceneNode();
-        }
-
-        LOG_DEBUG(Logger::CORE,
-                    " Node '"+newNode->getName()+"' als Unterknoten von '"+parentNode->getName()+"' erstellt.");
-
-
-        NodeUserData userData;
-        // Defaults einstellen
-        if (parentUserData == NULL || !parentUserData->is_inheriting)
-        {
-            userData.is_dynamic = false;
-            userData.is_inheriting = false;
-            userData.physical_body = "mesh";
-            userData.staticgeom_group = -1;
-            userData.renderingdistance = mRenderingDistance;
-        }
-        // Vom Vorg?nger erben
-        else
-        {
-            userData.is_dynamic = parentUserData->is_dynamic;
-            userData.is_inheriting = parentUserData->is_inheriting;
-            userData.physical_body = parentUserData->physical_body;
-            userData.staticgeom_group = parentUserData->staticgeom_group;
-            userData.renderingdistance = parentUserData->renderingdistance;
-        }
-
-
-        mCollisions.clear();
-        DOMNode* child = rootNodeXml->getFirstChild();
-        DOMNode *childScale = NULL, *childPosition = NULL,
-        *childRotation = NULL;
-        // Durch alle Unterelemente iterieren und gefundenes speichern
-        while(child != NULL)
-        {
-            // Ein selbstdefinierter Bereich
-            if (XMLString::compareIString(child->getNodeName(),
-                AutoXMLCh("userData").data()) == 0)
-            {
-                // UserData direkt auslesen
-                processNodeUserData(static_cast<DOMElement*>(child) , &userData);
-            }
-            else if (XMLString::compareIString(child->getNodeName(),
-                     AutoXMLCh("position").data()) == 0)
-                childPosition = child;//rootNodeXml->removeChild(child);
-            else if (XMLString::compareIString(child->getNodeName(),
-                     AutoXMLCh("rotation").data()) == 0)
-                childRotation = child;//rootNodeXml->removeChild(child);
-            else if (XMLString::compareIString(child->getNodeName(),
-                     AutoXMLCh("scale").data()) == 0)
-                childScale = child;//rootNodeXml->removeChild(child);
-
-            child = child->getNextSibling();
-        }
-        // so jetzt stehen nur noch entities und nodes in der liste
-
-
-
-
-
-        if (userData.staticgeom_group > -1)
-        {
-            newNode->getParentSceneNode()->removeChild(newNode);
-
-            // Existiert noch nicht
-            if (mStaticNodes.find(userData.staticgeom_group) == mStaticNodes.end())
-            {
-                mStaticNodes[userData.staticgeom_group] =
-                sceneManager->getRootSceneNode()->createChildSceneNode(
-                mSceneName+"_static_"+Ogre::StringConverter::toString(userData.staticgeom_group));
-            }
-
-            mStaticNodes[userData.staticgeom_group]->addChild(newNode);
-        }
-
-
-        // Einzelne weitere childs auslesen, falls n?tig, in der richtigen Reihenfolge
-
-        // Position des Nodes
-        if (childPosition != NULL)
-            newNode->setPosition(processPosition(static_cast<DOMElement*>(childPosition)));
-
-        // Rotation des Nodes
-        if (childRotation != NULL)
-            newNode->setOrientation(processRotation(static_cast<DOMElement*>(childRotation)));
-
-        // Skalierung des Nodes
-        if (childScale != NULL)
-            newNode->setScale(processScale(static_cast<DOMElement*>(childScale)));
-
-/*      // nun nicht mehr n?tig!
-        {
-            // Skalierung auf alle Entities ?bertragen
-            for(unsigned short i = 0; i < newNode->numAttachedObjects(); i++)
-            {
-                MovableObject* mo = newNode->getAttachedObject(i);
-                if (mo->getMovableType().compare("Entity") == 0)
-                    static_cast<Entity*>(mo)->setNormaliseNormals(newNode->getScale() != Vector3::UNIT_SCALE);
-            }
-        }
-*/
-
-
-
-        // Alle Entities und Subnodes auslesen
-        child = rootNodeXml->getFirstChild();
-        while(child != NULL)
-        {
-            // geschachteltes weiteres Node
-            if (XMLString::compareIString(child->getNodeName(),
-                AutoXMLCh("node").data()) == 0)
-                processNode(static_cast<DOMElement*>(child), sceneManager, newNode, &userData);
-            // Eine Entity
-            else if (XMLString::compareIString(child->getNodeName(),
-                     AutoXMLCh("entity").data()) == 0)
-                processEntity(static_cast<DOMElement*>(child),
-                                sceneManager,
-                                newNode,
-                                userData.renderingdistance,
-                                userData.physical_body);
-
-            child = child->getNextSibling();
-        }
-    }
-
-    void DotSceneLoader::processSceneUserData(XERCES_CPP_NAMESPACE::DOMElement* rootUserDataXml)
-    {
-        DOMNode* child = rootUserDataXml->getFirstChild();
-        LOG_DEBUG(Logger::CORE, " SceneUserData gefunden");
-        XmlPropertyReader* propertyReader = new XmlPropertyReader();
-
-        // Durch alle Unterelemente iterieren, um die properties zu finden
-        while(child != NULL)
-        {
-            // Ein selbstdefinierter Bereich
-            if (XMLString::compareIString(child->getNodeName(),
-                AutoXMLCh("property").data()) == 0)
-            {
-                DOMElement* propertyXml = static_cast<DOMElement*>(child);
-
-                PropertyEntry entry = propertyReader->processProperty(propertyXml);
-
-                try
-                {
-                    if (entry.first == "default_renderingdistance")
-                    {
-                        mRenderingDistance = entry.second.toReal();
-                    }
-                    else if (Ogre::StringUtil::startsWith(entry.first, "staticgeom_renderingdistance_"))
-                    {
-                        int groupId = Ogre::StringConverter::parseInt(entry.first.substr(29));
-                        mStaticgeomRenderingDistances[groupId] = entry.second.toReal();
-                    }
-                    else if (Ogre::StringUtil::startsWith(entry.first, "staticgeom_batchsize_"))
-                    {
-                        int groupId = Ogre::StringConverter::parseInt(entry.first.substr(21));
-                        mStaticgeomBatchSizes[groupId] = entry.second.toReal();
-                    }
-                }
-                catch(...)
-                {
-                    LOG_DEBUG(Logger::CORE,
-                        " > Parse Error beim ?bernehmen der Property '"+entry.first+"'!");
-                }
-
-            }
-            // Manuell definiertes LOD
-            else if (XMLString::compareIString(child->getNodeName(),
-                AutoXMLCh("manualLOD").data()) == 0)
-            {
-                DOMElement* lodXml = static_cast<DOMElement*>(child);
-                string meshName = getAttributeValueAsStdString(lodXml,
-                    "mesh");
-
-                try
-                {
-                    Ogre::MeshPtr mesh = Ogre::MeshManager::getSingleton().getByName(meshName);
-                    mesh->removeLodLevels();
-
-                    DOMNode* lodchild = child->getFirstChild();
-                    LOG_DEBUG(Logger::CORE, " LOD-Bereich f?r "+meshName+" gefunden");
-                    Ogre::Real loddist = 10.0;
-                    string lodmeshName = "";
-
-                    // Durch alle Unterelemente iterieren, um die LODs zu finden
-                    while(lodchild != NULL)
-                    {
-                        if (XMLString::compareIString(lodchild->getNodeName(),
-                            AutoXMLCh("LOD").data()) == 0)
-                        {
-                            loddist = 0.0;
-                            lodmeshName = "";
-
-                            try
-                            {
-                                lodXml = static_cast<DOMElement*>(lodchild);
-                                loddist = getAttributeValueAsReal(lodXml,
-                                    "distance");
-                                lodmeshName = getAttributeValueAsStdString(lodXml,
-                                    "mesh");
-
-                                if (lodmeshName.length() > 0 && loddist > 0)
-                                {
-                                    mesh->createManualLodLevel(loddist, lodmeshName);
-                                    LOG_DEBUG(Logger::CORE,
-                                        " LOD f?r bei '"+Ogre::StringConverter::toString(loddist)+
-                                        "' als '"+lodmeshName+"' gesetzt!");
-                                }
-                            }
-                            catch(...) { }
-                        }
-
-                        lodchild = lodchild->getNextSibling();
-                    }
-                }
-                catch(...)
-                {
-                    LOG_MESSAGE(Logger::CORE,
-                        " > Parse Error beim Setzen der LOD f?r '"+meshName+"'!");
-                }
-            }
-            child = child->getNextSibling();
-        }
-
-        delete propertyReader;
-    }
-
-    void DotSceneLoader::processNodeUserData(XERCES_CPP_NAMESPACE::DOMElement* rootUserDataXml,
-        NodeUserData* userData)
-    {
-        DOMNode* child = rootUserDataXml->getFirstChild();
-        LOG_DEBUG(Logger::CORE, " NodeUserData gefunden");
-
-        // Durch alle Unterelemente iterieren, um die properties zu finden
-        while(child != NULL)
-        {
-            // Ein selbstdefinierter Bereich
-            if (XMLString::compareIString(child->getNodeName(),
-                AutoXMLCh("property").data()) == 0)
-            {
-                DOMElement* propertyXml = static_cast<DOMElement*>(child);
-                PropertyEntry entry = processProperty(propertyXml);
-
-                try
-                {
-                    if (entry.first == "physical_body")
-                        userData->physical_body = entry.second.toString().c_str();
-                    else if (entry.first == "dynamic")
-                        userData->is_dynamic = entry.second.toInt() != 0;
-                    else if (entry.first == "staticgeom_group")
-                        userData->staticgeom_group = entry.second.toInt();
-                    else if (entry.first == "renderingdistance")
-                        userData->renderingdistance = entry.second.toReal();
-                }
-                catch(...)
-                {
-                    LOG_MESSAGE(Logger::CORE,
-                        " > Parse Error beim ?bernehmen der Property '"+entry.first+"'!");
-                }
-
-            }
-            else if (XMLString::compareIString(child->getNodeName(),
-                        AutoXMLCh("collisions").data()) == 0)
-                    processCollisions(static_cast<DOMElement*> (child));
-
-
-            child = child->getNextSibling();
-        }
-    }
-
-    // eine benutzerdefinierte Collision
-    void DotSceneLoader::processCollisions(XERCES_CPP_NAMESPACE::DOMElement *rootCollisionXml)
-    {
-        OgreNewt::CollisionPtr collision = OgreNewt::CollisionPtr();
-        DOMNode* child = rootCollisionXml->getFirstChild();
-        OgreNewt::World *thisWorld = PhysicsManager::getSingleton()._getNewtonWorld();
-
-        std::vector<Ogre::Vector3> vec3Vector;
-        Ogre::Vector3 scale, offset;
-        Ogre::Quaternion rotation;
-
-
-        LOG_DEBUG(Logger::CORE, " collisions in NodeUserData gefunden");
-
-
-        while(child != NULL)
-        {
-            if (child->getNodeType() != DOMNode::ELEMENT_NODE)
-            {
-                child = child->getNextSibling();
-                continue;
-            }
-            collision.setNull();
-            // am Anfang steht ein Node mit dem Typ
-            std::string typeAsString = transcodeToStdString(child->getNodeName());
-
-            scale = Ogre::Vector3::UNIT_SCALE;
-            offset = Ogre::Vector3::ZERO;
-            rotation = Ogre::Quaternion::IDENTITY;
-            vec3Vector.clear();
-
-            DOMNode *childChild = static_cast<DOMElement*>(child)->getFirstChild();
-            while(childChild != NULL)
-            {
-                if (childChild->getNodeType() == DOMNode::ELEMENT_NODE)
-                {
-                    if (XMLString::compareIString(childChild->getNodeName(),
-                        AutoXMLCh("scale").data()) == 0)
-                        scale = processScale(static_cast<DOMElement*>(childChild));
-                    else if (XMLString::compareIString(childChild->getNodeName(),
-                             AutoXMLCh("offset").data()) == 0)
-                        offset = processPosition(static_cast<DOMElement*>(childChild));
-                    else if (XMLString::compareIString(childChild->getNodeName(),
-                             AutoXMLCh("rotation").data()) == 0)
-                        rotation = processRotation(static_cast<DOMElement*>(childChild));
-
-                    else if (XMLString::compareIString(childChild->getNodeName(),
-                             AutoXMLCh("vertices").data()) == 0)
-                    {
-                        DOMNode *childChildChild = static_cast<DOMElement*>(childChild)->getFirstChild();
-                        while(childChildChild != NULL)
-                        {
-                            if (childChild->getNodeType() == DOMNode::ELEMENT_NODE)
-                            {
-                                if (XMLString::compareIString(childChildChild->getNodeName(),
-                                    AutoXMLCh("vertex").data()) == 0)
-                                {
-                                    bool error = false;
-                                    Ogre::Vector3 vec3 = processVector(static_cast<DOMElement*>(childChildChild), error);
-                                    if (!error)
-                                        vec3Vector.push_back(vec3);
-                                }
-                            }
-                            childChildChild = childChildChild->getNextSibling();
-                        }
-                    }
-                }
-                childChild = childChild->getNextSibling();
-            }
-
-            // typangabe aus String extrahieren
-            if (typeAsString == "convexhull")
-            {
-                int vertcount = vec3Vector.size();
-                Ogre::Vector3 *vertices = new Ogre::Vector3[ vertcount ];
-                Ogre::Vector3 vec3Min(0,0,0), vec3Max(0,0,0);
-                for(int i = 0; i < vertcount; i++)
-                {
-                    vertices[i] = vec3Vector[i] * scale; // in array ?bertragen
-
-
-                    if (vertices[i].x < vec3Min.x)   // und gr??e des k?rpers bestimmen
-                        vec3Min.x = vertices[i].x;
-                    if (vertices[i].y < vec3Min.y)
-                        vec3Min.y = vertices[i].y;
-                    if (vertices[i].z < vec3Min.z)
-                        vec3Min.z = vertices[i].z;
-
-                    if (vertices[i].x > vec3Max.x)
-                        vec3Max.x = vertices[i].x;
-                    if (vertices[i].y > vec3Max.y)
-                        vec3Max.y = vertices[i].y;
-                    if (vertices[i].z > vec3Max.z)
-                        vec3Max.z = vertices[i].z;
-                }
-
-                Ogre::Vector3 size = vec3Max - vec3Min;
-                // Gr??e ?berpr?fen
-                if (size.x < PhysicsManager::NEWTON_GRID_WIDTH ||
-                    size.y < PhysicsManager::NEWTON_GRID_WIDTH ||
-                    size.z < PhysicsManager::NEWTON_GRID_WIDTH ||
-                    vertcount < 4)
-                {
-                    LOG_MESSAGE(Logger::CORE,
-                        " physical_body 'convexhull' in <collisions> konnte nicht erstellt werden; der K?rper ist zu klein!");
-
-                    // Minimale Gr??e verwenden
-                    if (size.x < PhysicsManager::NEWTON_GRID_WIDTH)
-                        size.x = PhysicsManager::NEWTON_GRID_WIDTH;
-                    if (size.y < PhysicsManager::NEWTON_GRID_WIDTH)
-                        size.y = PhysicsManager::NEWTON_GRID_WIDTH;
-                    if (size.z < PhysicsManager::NEWTON_GRID_WIDTH)
-                        size.z = PhysicsManager::NEWTON_GRID_WIDTH;
-
-                    collision = OgreNewt::CollisionPtr(new OgreNewt::CollisionPrimitives::Box(
-                                     thisWorld, size, rotation, offset));
-
-                    LOG_MESSAGE(Logger::CORE, " stattdessen physical_body 'box' erstellt. ");
-                }
-                else
-                {
-                    collision = OgreNewt::CollisionPtr(new OgreNewt::CollisionPrimitives::ConvexHull(
-                                    thisWorld,
-                                    vertices,
-                                    vertcount,
-                                    rotation, offset));
-
-                    LOG_DEBUG(Logger::CORE, " physical_body 'convexhull' in <collisions> erstellt. ");
-                }
-
-                delete [] vertices;
-            }
-            else
-            {
-                if (!vec3Vector.empty())   // fehler!
-                {
-                    LOG_MESSAGE(Logger::CORE, " > Parse Error beim Einlesen einer Collision; Es k?nne nur f?r Convexhull Vektoren definiert werden!");
-                }
-
-                if (typeAsString.compare("box") == 0)
-                {
-                    collision = OgreNewt::CollisionPtr(new OgreNewt::CollisionPrimitives::Box(
-                                    thisWorld, scale, rotation, offset));
-                    LOG_DEBUG(Logger::CORE, " physical_body 'box' in <collisions> erstellt. ");
-                }
-                else if (typeAsString.compare("sphere") == 0)
-                {
-                    collision = OgreNewt::CollisionPtr(new OgreNewt::CollisionPrimitives::Ellipsoid(
-                                    thisWorld, scale, rotation, offset));
-                    LOG_DEBUG(Logger::CORE, " physical_body 'sphere' in <collisions> erstellt. ");
-                }
-                else if (typeAsString.compare("ellipsoid") == 0)
-                {
-                    collision = OgreNewt::CollisionPtr(new OgreNewt::CollisionPrimitives::Ellipsoid(
-                    thisWorld, scale, rotation, offset));
-                    LOG_DEBUG(Logger::CORE, " physical_body 'ellipsoid' in <collisions> erstellt. ");
-                }
-                else if (typeAsString.compare("pyramid") == 0)
-                {
-                    collision = OgreNewt::CollisionPtr(new OgreNewt::CollisionPrimitives::Pyramid(
-                    thisWorld, scale, rotation, offset));
-                    LOG_DEBUG(Logger::CORE, " physical_body 'pyramid' in <collisions> erstellt. ");
-                }
-                else if (typeAsString.compare("capsule") == 0)
-                {
-                    double radius = std::max(scale.x, scale.z) / 2.0;
-                    double height = scale.y;
-                    offset.x -= scale.y/2;
-                    Ogre::Quaternion tempRot;
-                    tempRot.FromAngleAxis(Degree(90), Ogre::Vector3::UNIT_Z);
-                    rotation = (rotation * tempRot);
-
-                    collision = OgreNewt::CollisionPtr(new OgreNewt::CollisionPrimitives::Capsule(
-                                    thisWorld,
-                                    radius,
-                                    height,
-                                    rotation, offset));
-                    LOG_DEBUG(Logger::CORE, " physical_body 'capsule' in <collisions> erstellt. ");
-                }
-                else if (typeAsString.compare("cone") == 0)
-                {
-                    double radius = std::max(scale.x, scale.z) / 2.0;
-                    double height = scale.y;
-                    offset.x -= scale.y/2;
-                    Ogre::Quaternion tempRot;
-                    tempRot.FromAngleAxis(Degree(90), Ogre::Vector3::UNIT_Z);
-                    rotation = (rotation * tempRot);
-
-                    collision = OgreNewt::CollisionPtr(new OgreNewt::CollisionPrimitives::Cone(
-                                    thisWorld,
-                                    radius,
-                                    height,
-                                    rotation, offset));
-                    LOG_DEBUG(Logger::CORE, " physical_body 'cone' in <collisions> erstellt. ");
-                }
-                else if (typeAsString.compare("cylinder") == 0)
-                {
-                    double radius = std::max(scale.x, scale.z) / 2.0;
-                    double height = scale.y;
-                    offset.x -= scale.y/2;
-                    Ogre::Quaternion tempRot;
-                    tempRot.FromAngleAxis(Degree(90), Ogre::Vector3::UNIT_Z);
-                    rotation = (rotation * tempRot);
-
-                    collision = OgreNewt::CollisionPtr(new OgreNewt::CollisionPrimitives::Cylinder(
-                                    thisWorld,
-                                    radius,
-                                    height,
-                                    rotation, offset));
-                    LOG_DEBUG(Logger::CORE, " physical_body 'cylinder' in <collisions> erstellt. ");
-                }
-                else if (typeAsString.compare("chamfer_cylinder") == 0)
-                {
-                    double radius = std::max(scale.x, scale.z) / 2.0;
-                    double height = scale.y;
-                    offset.x -= scale.y/2;
-                    Ogre::Quaternion tempRot;
-                    tempRot.FromAngleAxis(Degree(90), Ogre::Vector3::UNIT_Z);
-                    rotation = (rotation * tempRot);
-
-                    collision = OgreNewt::CollisionPtr(new OgreNewt::CollisionPrimitives::ChamferCylinder(
-                                    thisWorld,
-                                    radius,
-                                    height,
-                                    rotation, offset));
-                    LOG_DEBUG(Logger::CORE, " physical_body 'chamfer_cylinder' in <collisions> erstellt. ");
-                }
-                else if (typeAsString.compare("mesh") == 0)
-                {
-                    LOG_MESSAGE(Logger::CORE,
-                        " Mesh-Collisions in <collisions> werden momentan noch nicht unterst?tzt (Eintrag wird ignoriert).");
-                    collision.setNull();
-                }
-/*
-                else if (typeAsString.compare("meshhull") == 0)  // automatische convexhull mit daten aus mesh
-                {
-                    LOG_MESSAGE(Logger::CORE,
-                        " Entityhull-Collisions werden momentan noch nicht unterst?tzt (Eintrag wird ignoriert).");
-                    collision.setNull();
-                }
-*/
-                else
-                {
-                    LOG_MESSAGE(Logger::CORE,
-                        " > Parse Error beim Erstellen einer Collision; ung?ltiger typ: '"+typeAsString+"' !");
-                    collision.setNull();
-                    //return OgreNewt::CollisionPtr(NULL);
-                }
-
-            }
-
-
-            // Collision dem vektor hinzuf?gen
-            if (!collision.isNull())
-                mCollisions.push_back(collision);
-
-            child = child->getNextSibling();
-        }
-    }
-
-    // Eine Entity
-    void DotSceneLoader::processEntity(DOMElement* rootEntityXml,
-        SceneManager* sceneManager, Ogre::SceneNode* parentNode,
-        Ogre::Real renderingDistance, const std::string &physical_body)
-    {
-        string entName = getAttributeValueAsStdString(
-            rootEntityXml, "name");
-        string meshName = getAttributeValueAsStdString(
-            rootEntityXml, "meshFile");
-
-        Ogre::Entity* newEnt = NULL;
-
-        // Wurde der Entity bisher kein Name zugewiesen
-        if (entName.length() == 0)
-        {
-            entName = getRandomName(mSceneName+"_"+parentNode->getName());
-        }
-
-        ResourceGroupManager& resGroupMgr = ResourceGroupManager::getSingleton();
-        while(parentNode->getCreator()->hasEntity(entName))
-        {
-            entName = getRandomName(entName);
-        }
-
-        try
-        {
-            // if this mesh exists in our module's resource group: preload it
-            if (resGroupMgr.resourceExists(mResourceGroup, meshName))
-            {
-                MeshManager::getSingleton().load(meshName, mResourceGroup);
-            }
-
-            // If not, it is now loaded implicitly from the default group
-            newEnt = sceneManager->createEntity(entName, meshName);
-        }
-        catch(...)
-        {
-              LOG_ERROR(Logger::CORE, " Entity '"+meshName+"' mit dem Namen '"+entName+"' konnte nicht geladen werden.");
-              return;
-        }
-
-        if (parentNode->getScale() != Vector3::UNIT_SCALE)
-            newEnt->setNormaliseNormals(true);
-
-        parentNode->attachObject(newEnt);
-
-        LOG_DEBUG(Logger::CORE, " Entity '"+meshName+"' mit dem Namen '"+entName+"' in den Knoten '"+parentNode->getName()+"' eingef?gt.");
-
-
-        // ------- Falls n?tig automatisch bodyproxy erstellen -------------
-        // (wenn physical_body gesetzt wurde)
-        OgreNewt::CollisionPtr collision = OgreNewt::CollisionPtr();
-        OgreNewt::World *thisWorld = PhysicsManager::getSingleton()._getNewtonWorld();
-
-        if (physical_body.compare("none") != 0)
-        {
-            const AxisAlignedBox &aab = newEnt->getMesh()->getBounds();
-            Ogre::Vector3 size = (aab.getMaximum() - aab.getMinimum()) * parentNode->getScale();
-            bool forceBox = false;
-
-            if ((size.x < PhysicsManager::NEWTON_GRID_WIDTH ||
-                 size.y < PhysicsManager::NEWTON_GRID_WIDTH ||
-                 size.z < PhysicsManager::NEWTON_GRID_WIDTH) &&
-                 physical_body.compare("convexhull") == 0)
-            {
-                if (size.x < PhysicsManager::NEWTON_GRID_WIDTH)
-                    size.x = PhysicsManager::NEWTON_GRID_WIDTH;
-                if (size.y < PhysicsManager::NEWTON_GRID_WIDTH)
-                    size.y = PhysicsManager::NEWTON_GRID_WIDTH;
-                if (size.z < PhysicsManager::NEWTON_GRID_WIDTH)
-                    size.z = PhysicsManager::NEWTON_GRID_WIDTH;
-
-                LOG_MESSAGE(Logger::CORE, " Die Entity '"+entName+"' liegt in einer Ebene, verwende 'box' f?r physical_body '"+physical_body+"' ");
-                forceBox = true;
-            }
-            const Quaternion orientation(0,0,0,0);// = parentNode->getOrientation();
-            const Ogre::Vector3 pos = aab.getMinimum()* parentNode->getScale() + (size/2.0);
-
-
-            // Pr?fen, ob schon ein identischer Proxy erstellt wurde um diesen erneut zu verwenden
-            AlreadyUsedCollision &aucol (mAutoCreatedCollisions[meshName]);
-            if (aucol.Type.compare(physical_body) == 0  &&
-                aucol.Scale == parentNode->getScale() &&
-                (!forceBox)) // sicherheitshalber
-            {
-                collision = aucol.ColPtr;
-                LOG_DEBUG(Logger::CORE, " Schon fr?her erstellten physical_body f?r Entity '"+entName+"' wieder verwendet. ");
-            }
-            else
-            {
-
-                if (physical_body.compare("box") == 0 || forceBox)
-                {
-                    collision = OgreNewt::CollisionPtr(new OgreNewt::CollisionPrimitives::Box(
-                                     thisWorld, size, orientation, pos));
-                    LOG_DEBUG(Logger::CORE, " physical_body 'box' f?r Entity '"+entName+"' erstellt. ");
-                }
-                else if (physical_body.compare("pyramid") == 0)
-                {
-                    collision = OgreNewt::CollisionPtr(new OgreNewt::CollisionPrimitives::Pyramid(
-                                    thisWorld, size, orientation, pos));
-                    LOG_DEBUG(Logger::CORE, " physical_body 'pyramid' f?r Entity '"+entName+"' erstellt. ");
-                }
-                else if (physical_body.compare("sphere") == 0)
-                {
-                    double radius = std::max(size.x, std::max(size.y, size.z)) / 2.0;
-                    collision = OgreNewt::CollisionPtr(new OgreNewt::CollisionPrimitives::Ellipsoid(
-                                    thisWorld, Vector3(radius, radius, radius),
-                                    orientation, pos));
-                    LOG_DEBUG(Logger::CORE, " physical_body 'sphere' f?r Entity '"+entName+"' erstellt. ");
-                }
-                else if (physical_body.compare("ellipsoid") == 0)
-                {
-                    // set the size x/z values to the maximum
-                    Ogre::Vector3 s(size/2.0);
-                    s.x = std::max(s.x, s.z);
-                    s.z = s.x;
-                    collision = OgreNewt::CollisionPtr(new OgreNewt::CollisionPrimitives::Ellipsoid(
-                                    thisWorld, s,
-                                    orientation, pos));
-                    LOG_DEBUG(Logger::CORE, " physical_body 'ellipsoid' f?r Entity '"+entName+"' erstellt. ");
-                }
-                else if (physical_body.compare("capsule") == 0)
-                {
-                    double radius = std::max(size.x, size.z) / 2.0;
-                    double height = size.y;
-
-                    collision = OgreNewt::CollisionPtr(new OgreNewt::CollisionPrimitives::Capsule(
-                                    thisWorld,
-                                    radius,
-                                    height,
-                                    orientation, pos));
-                    LOG_DEBUG(Logger::CORE, " physical_body 'capsule' f?r Entity '"+entName+"' erstellt. ");
-                }
-                else if (physical_body.compare("convexhull") == 0)
-                {
-                    collision = OgreNewt::CollisionPtr(new OgreNewt::CollisionPrimitives::ConvexHull(
-                                    thisWorld,
-                                    newEnt,
-                                    false));
-                    //orientation, pos));
-                    LOG_DEBUG(Logger::CORE, " physical_body 'convexhull' f?r Entity '"+entName+"' erstellt. ");
-                }
-                else if (physical_body.compare("mesh") == 0 || physical_body.compare("auto"))
-                {
-                    collision = OgreNewt::CollisionPtr(new OgreNewt::CollisionPrimitives::TreeCollision(
-                                    thisWorld, newEnt, false));
-                    LOG_DEBUG(Logger::CORE, " physical_body 'mesh' f?r Entity '"+entName+"' erstellt. ");
-                }
-                else
-                    LOG_MESSAGE(Logger::CORE,
-                        " Der bodyproxy_type '"+physical_body+"'(aus userData) der Entity '"+meshName+"' ist ung?ltig.");
-
-                // proxy in die liste der schon erstellten proxies hinzuf?gen
-                aucol.ColPtr = collision;
-                aucol.Scale = parentNode->getScale();
-                aucol.Type = physical_body;
-            }
-        }
-
-        // zur liste hinzuf?gen
-        if (!collision.isNull())
-        {
-            mCollisions.push_back(collision);
-        }
-
-
-        // Zur Physik des Levels hinzuf?gen
-        if (mCollisions.size() > 0)
-        {
-            PhysicsManager::getSingleton().addLevelGeometry(newEnt, mCollisions);
-            LOG_DEBUG(Logger::CORE, " Entity '"+entName+"' in levelGeometry geladen");
-        }
-
-
-        // wieder aus der liste entfernen, falls mehrere entities hier definiert werden
-        if (!collision.isNull())
-        {
-            mCollisions.pop_back();
-        }
-
-        // Renderingdistanz berechnen
-        if (renderingDistance == mRenderingDistance)
-        {
-            Ogre::Real diameter
-                = (newEnt->getBoundingBox().getMaximum() - newEnt->getBoundingBox().getMinimum()).length();
-
-            // Gerade mal 10cm? => 10m
-            if (diameter <= 0.5)
-                renderingDistance = 15;
-            // Gerade mal 1,5m? => 25m
-            else if (diameter <= 1.5)
-                renderingDistance = 30;
-            // Gerade mal 2,5m? => 50m
-            else if (diameter <= 2.5)
-                renderingDistance = 60;
-            else if (diameter <= 10)
-                renderingDistance = 150;
-            else if (diameter <= 50)
-                renderingDistance = 250;
-            else if (diameter <= 100)
-                renderingDistance = 450;
-            else
-                renderingDistance = 1500;
-
-            newEnt->setRenderingDistance(renderingDistance);
-        }
-        else
-            newEnt->setRenderingDistance(renderingDistance);
-        newEnt->setCastShadows(false);
-    }
-
-    string DotSceneLoader::getRandomName(const string& baseName)
-    {
-        int rnd = rand();
-        stringstream rval;
-        rval << baseName << "_" << rnd;
-        return rval.str();
-    }
-
-    Ogre::Vector3 DotSceneLoader::processPosition(DOMElement* rootPositionXml)
-    {
-        LOG_DEBUG(Logger::CORE, " Position gefunden");
-
-        try
-        {
-            if (hasAttribute(rootPositionXml, "x") &&
-                hasAttribute(rootPositionXml, "y") &&
-                hasAttribute(rootPositionXml, "z"))
-            {
-                return Ogre::Vector3(
-                    getAttributeValueAsReal(rootPositionXml, "x"),
-                    getAttributeValueAsReal(rootPositionXml, "y"),
-                    getAttributeValueAsReal(rootPositionXml, "z"));
-            }
-        }
-        catch(...) { }
-
-        LOG_MESSAGE(Logger::CORE, " > Parse Error beim ?bernehmen der Position! ");
-
-        return Ogre::Vector3::ZERO;
-    }
-
-
-    Ogre::Vector3 DotSceneLoader::processScale(DOMElement* rootScaleXml)
-    {
-        LOG_DEBUG(Logger::CORE, " Skalierung gefunden");
-
-        try
-        {
-            if (hasAttribute(rootScaleXml, "x") &&
-                hasAttribute(rootScaleXml, "y") &&
-                hasAttribute(rootScaleXml, "z"))
-            {
-                return Ogre::Vector3(
-                    getAttributeValueAsReal(rootScaleXml, "x"),
-                    getAttributeValueAsReal(rootScaleXml, "y"),
-                    getAttributeValueAsReal(rootScaleXml, "z"));
-            }
-        }
-        catch(...) { }
-
-        LOG_MESSAGE(Logger::CORE, " > Parse Error beim ?bernehmen der Skalierung! ");
-
-        return Ogre::Vector3::UNIT_SCALE;
-    }
-
-    Ogre::Vector3 DotSceneLoader::processVector(DOMElement* rootScaleXml, bool &error)
-    {
-        LOG_DEBUG(Logger::CORE, " Vector gefunden");
-
-        try
-        {
-            if (hasAttribute(rootScaleXml, "x") &&
-                hasAttribute(rootScaleXml, "y") &&
-                hasAttribute(rootScaleXml, "z"))
-            {
-                error = false;
-                return Ogre::Vector3(
-                    getAttributeValueAsReal(rootScaleXml, "x"),
-                    getAttributeValueAsReal(rootScaleXml, "y"),
-                    getAttributeValueAsReal(rootScaleXml, "z"));
-            }
-        }
-        catch(...) { }
-
-        LOG_MESSAGE(Logger::CORE, " > Parse Error beim Lesen eines Vectors! ");
-        error = true;
-
-        return Ogre::Vector3::UNIT_SCALE;
-    }
-
-    /// @TODO Sollten drei M?glichkeiten sein...
-    Ogre::Quaternion DotSceneLoader::processRotation(DOMElement* rootQuatXml)
-    {
-        LOG_DEBUG(Logger::CORE, " Rotation gefunden");
-
-        try
-        {
-            // Durch w,x,y,z definiert
-            if (hasAttribute(rootQuatXml, "qw") &&
-                hasAttribute(rootQuatXml, "qx") &&
-                hasAttribute(rootQuatXml, "qy") &&
-                hasAttribute(rootQuatXml, "qz"))
-            {
-
-                return Ogre::Quaternion(
-                    getAttributeValueAsReal(rootQuatXml, "qw"),
-                    getAttributeValueAsReal(rootQuatXml, "qx"),
-                    getAttributeValueAsReal(rootQuatXml, "qy"),
-                    getAttributeValueAsReal(rootQuatXml, "qz"));
-            }
-
-            // Durch axisX,axisY,axisZ,angle definiert
-            if (hasAttribute(rootQuatXml, "angle") &&
-                hasAttribute(rootQuatXml, "axisX") &&
-                hasAttribute(rootQuatXml, "axisY") &&
-                hasAttribute(rootQuatXml, "axisZ"))
-            {
-                return Ogre::Quaternion(
-                    Ogre::Degree(getAttributeValueAsReal(rootQuatXml, "angle")),
-                    Ogre::Vector3(
-                    getAttributeValueAsReal(rootQuatXml, "axisX"),
-                    getAttributeValueAsReal(rootQuatXml, "axisY"),
-                    getAttributeValueAsReal(rootQuatXml, "axisZ")));
-            }
-
-            // Durch angleX,angleY,angleZ definiert
-            if (hasAttribute(rootQuatXml, "angleX") &&
-                hasAttribute(rootQuatXml, "angleY") &&
-                hasAttribute(rootQuatXml, "angleZ") )
-            {
-                Ogre::Matrix3 mat;
-                mat.FromEulerAnglesXYZ(
-                    Degree(getAttributeValueAsReal(rootQuatXml, "angleX")),
-                    Degree(getAttributeValueAsReal(rootQuatXml, "angleY")),
-                    Degree(getAttributeValueAsReal(rootQuatXml, "angleZ")));
-                return Quaternion(mat);
-            }
-        }
-        catch(...) {}
-
-        LOG_MESSAGE(Logger::CORE, " > Parse Error beim ?bernehmen der Rotation! ");
-
-        return Ogre::Quaternion::IDENTITY;
-    }
-}
-

Modified: rl/branches/persistence/core/src/DotSceneOctreeWorld.cpp
===================================================================
--- rl/branches/persistence/core/src/DotSceneOctreeWorld.cpp	2008-10-16 17:33:16 UTC (rev 4550)
+++ rl/branches/persistence/core/src/DotSceneOctreeWorld.cpp	2008-10-17 16:14:48 UTC (rev 4551)
@@ -26,7 +26,6 @@
 #include "ActorManager.h"
 #include "Actor.h"
 #include "PhysicsManager.h"
-#include "DotSceneLoader.h"
 #include "ZoneManager.h"
 
 using namespace Ogre;
@@ -69,43 +68,6 @@
 		}
     }
 
-    void DotSceneOctreeWorld::loadScene(const Ogre::String& levelName, const Ogre::String& module)
-    {
-        // Alte Szene l?schen
-        clearScene();
-
-		setCastShadows( true );
-
-        // Leerer Ogre::String, keine Map laden
-        if (levelName.length() != 0)
-        {
-            /// TODO - In den Sky-Sonnenpart verschieben
-            mSceneMgr->setAmbientLight(ColourValue(0.55, 0.55, 0.55));
-            mSceneFile = levelName;
-
-            DotSceneLoader* dot = NULL;
-            try
-            {
-                dot = new DotSceneLoader( mSceneFile, module );
-                dot->initializeScene( mSceneMgr );
-                delete dot;
-            }
-            catch( ... )
-            {
-                LOG_CRITICAL(Logger::CORE,
-                    "Laden der Szenenbeschreibung aus '" + mSceneFile + "' ist fehlgeschlagen." );
-                delete dot;
-            }
-        }
-        else
-        {
-            mSceneFile = "";
-        }
-
-        initializeDefaultCamera();
-        fireAfterSceneLoaded();
-    }
-
     void DotSceneOctreeWorld::clearScene()
     {
         fireBeforeClearScene();



From timm at mail.berlios.de  Fri Oct 17 18:28:55 2008
From: timm at mail.berlios.de (timm at mail.berlios.de)
Date: Fri, 17 Oct 2008 18:28:55 +0200
Subject: [Dsa-hl-svn] r4552 - rl/branches/persistence/script/swig
Message-ID: <200810171628.m9HGStpm008721@sheep.berlios.de>

Author: timm
Date: 2008-10-17 18:28:50 +0200 (Fri, 17 Oct 2008)
New Revision: 4552

Modified:
   rl/branches/persistence/script/swig/RlCore.swig
Log:
and update the script wrappper

Modified: rl/branches/persistence/script/swig/RlCore.swig
===================================================================
--- rl/branches/persistence/script/swig/RlCore.swig	2008-10-17 16:14:48 UTC (rev 4551)
+++ rl/branches/persistence/script/swig/RlCore.swig	2008-10-17 16:28:50 UTC (rev 4552)
@@ -171,9 +171,9 @@
 class World {
 public:	
 	enum FogMode { FOG_NONE, FOG_EXP, FOG_EXP2, FOG_LINEAR  };
+	
+	virtual void clearScene() = 0;
 
-	void loadScene(const Ogre::String& levelName, const Ogre::String& resourceGroup ) = 0;
-
     virtual void setSkyBox (bool enable, const Ogre::String& materialName, Ogre::Real distance=2500, bool drawFirst=true );
     virtual void setSkyDome (bool enable, const Ogre::String& materialName, Ogre::Real curvature=10, Ogre::Real tiling=8, Ogre::Real distance=4000, bool drawFirst=true );
     virtual void setFog ( FogMode mode=FOG_NONE, const Ogre::ColourValue &colour=Ogre::ColourValue::White, Ogre::Real expDensity=0.001, Ogre::Real linearStart=0.0, Ogre::Real linearEnd=1.0);
@@ -771,9 +771,6 @@
 public:
     static CoreSubsystem& getSingleton(void);
     
-    void loadMap(const Ogre::String& type, const Ogre::String& filename,
-		const Ogre::String& resourceGroup);
-
 	void registerModule(rl::ContentModule* module);
 
 	rl::ContentModule* getActiveAdventureModule() const;



From fusion2 at mail.berlios.de  Sat Oct 18 21:37:51 2008
From: fusion2 at mail.berlios.de (fusion2 at mail.berlios.de)
Date: Sat, 18 Oct 2008 21:37:51 +0200
Subject: [Dsa-hl-svn] r4553 - rl/trunk/editors/Lockenwickler/src
Message-ID: <200810181937.m9IJbpV5011550@sheep.berlios.de>

Author: fusion2
Date: 2008-10-18 21:37:47 +0200 (Sat, 18 Oct 2008)
New Revision: 4553

Modified:
   rl/trunk/editors/Lockenwickler/src/Lockenwickler.py
   rl/trunk/editors/Lockenwickler/src/ModuleManager.py
   rl/trunk/editors/Lockenwickler/src/MovePivot.py
Log:
- cut and paste works

Modified: rl/trunk/editors/Lockenwickler/src/Lockenwickler.py
===================================================================
--- rl/trunk/editors/Lockenwickler/src/Lockenwickler.py	2008-10-17 16:28:50 UTC (rev 4552)
+++ rl/trunk/editors/Lockenwickler/src/Lockenwickler.py	2008-10-18 19:37:47 UTC (rev 4553)
@@ -276,7 +276,7 @@
         self.moduleManager.cutObjects()
 
     def actionPasteSlot(self):
-        self.moduleManager.pasteObjects()
+        self.moduleManager.pasteObjects(self.ogreRenderWindow.getCameraToViewportRay())
 
     def actionMoveSlot(self):
         self.moduleManager.pivot.setMoveMode()

Modified: rl/trunk/editors/Lockenwickler/src/ModuleManager.py
===================================================================
--- rl/trunk/editors/Lockenwickler/src/ModuleManager.py	2008-10-17 16:28:50 UTC (rev 4552)
+++ rl/trunk/editors/Lockenwickler/src/ModuleManager.py	2008-10-18 19:37:47 UTC (rev 4553)
@@ -312,6 +312,8 @@
         self.raySceneQuery = self.sceneManager.createRayQuery(og.Ray())
 
         self.userSelectionList = []
+        self.cutList = [] # selection objects that has been cut out and wait to be pasted again
+        self.cutListPreviousNodes = [] # contains the nodes they where copnnected to before the cut
 
         self.listenerDings = MyRaySceneQueryListener()
 
@@ -512,11 +514,36 @@
     def cutObjects(self):
         if len(self.userSelectionList) < 1:
             return
-        print "dbg: cut"
 
-    def pasteObjects(self):
-        print "dbg: paste"
+        self.cutList = []
+        for so in self.userSelectionList:
+            self.cutListPreviousNodes.append(so.entity.getParentNode().getParent())
+            so.entity.getParentNode().getParent().removeChild(so.entity.getParentNode())
+            # set the "point of gravity" of all the cutted nodes to world origin at 0,0,0
+            # so we only have to translate them to their new destination when they get pasted
+            # the position of the pivot point is considered as the center of gravity
+            so.entity.getParentNode().setPosition(so.entity.getParentNode().getPosition() - self.pivot.getPosition())
+            self.cutList.append(so)
+        self.resetSelection()
+    def pasteObjects(self,  ray):
+        if len(self.cutList) < 1:
+            return
 
+        result = og.Math.intersects(ray, self.dropCollisionPlane)
+        if result.first == True:
+            i=0
+            while i < len(self.cutList):
+                self.cutListPreviousNodes[i].addChild(self.cutList[i].entity.getParentNode())
+                self.cutList[i].entity.getParentNode().translate(ray.getPoint(result.second))
+                i = i+1
+        else:
+            i=0
+            while i < len(self.cutList):
+                self.cutListPreviousNodes[i].addChild(self.cutList[i].entity.getParentNode())
+                self.cutList[i].entity.getParentNode().translate(ray.getPoint(100.0))
+                i = i+1
+        self.cutList = []
+
     def leftMouseUp(self):
         if self.pivot is not None and self.pivot.isTransforming:
             self.pivot.stopTransforming()

Modified: rl/trunk/editors/Lockenwickler/src/MovePivot.py
===================================================================
--- rl/trunk/editors/Lockenwickler/src/MovePivot.py	2008-10-17 16:28:50 UTC (rev 4552)
+++ rl/trunk/editors/Lockenwickler/src/MovePivot.py	2008-10-18 19:37:47 UTC (rev 4553)
@@ -124,6 +124,9 @@
     def setPosition(self,  pos):
         self.pivotNode.setPosition(pos)
 
+    def getPosition(self):
+        return self.pivotNode.getPosition()
+
     def startTransforming(self, dirEntity, soList):
         print "dbg: transforming....."
         self.moveDirection = dirEntity.getName()



From timm at mail.berlios.de  Sun Oct 19 01:15:25 2008
From: timm at mail.berlios.de (timm at mail.berlios.de)
Date: Sun, 19 Oct 2008 01:15:25 +0200
Subject: [Dsa-hl-svn] r4554 - in rl/branches/persistence: core/include
	core/src rules/src script/swig
Message-ID: <200810182315.m9INFPwJ023386@sheep.berlios.de>

Author: timm
Date: 2008-10-19 01:15:06 +0200 (Sun, 19 Oct 2008)
New Revision: 4554

Modified:
   rl/branches/persistence/core/include/GameAreaEventSource.h
   rl/branches/persistence/core/include/SaveAbleFactory.h
   rl/branches/persistence/core/include/Zone.h
   rl/branches/persistence/core/include/ZoneManager.h
   rl/branches/persistence/core/src/SaveAbleFactory.cpp
   rl/branches/persistence/core/src/Zone.cpp
   rl/branches/persistence/core/src/ZoneManager.cpp
   rl/branches/persistence/rules/src/QuestBook.cpp
   rl/branches/persistence/script/swig/RlCore.swig
Log:
- started makin zone persistent
- export symbols for SaveAbleFactory and SaveAbleFactoryPool
- changed id types of zone and gameareaeventsources to ceguistring

Modified: rl/branches/persistence/core/include/GameAreaEventSource.h
===================================================================
--- rl/branches/persistence/core/include/GameAreaEventSource.h	2008-10-18 19:37:47 UTC (rev 4553)
+++ rl/branches/persistence/core/include/GameAreaEventSource.h	2008-10-18 23:15:06 UTC (rev 4554)
@@ -84,12 +84,12 @@
 protected:
     /// helps the zonemanager to associate zones with areas
     friend class ZoneManager;
-    void setId(long id) {mId = id;}
-    long getId() const {return mId;}
+    void setId(const CeGuiString &id) {mId = id;}
+    CeGuiString getId() const {return mId;}
     /// helps the zonemanger to get the values for saving the GameAreaEventSource
     PropertyRecord mProperties;
 private:
-    long mId;
+    CeGuiString mId;
     /** Verteilt die Events an die angef?gten Listener
     * F?r jeden Actor wird ein einzelnes Ereigniss generiert, zuerst f?r alle
     * verlassenden Actoren, dann f?r die betretenden

Modified: rl/branches/persistence/core/include/SaveAbleFactory.h
===================================================================
--- rl/branches/persistence/core/include/SaveAbleFactory.h	2008-10-18 19:37:47 UTC (rev 4553)
+++ rl/branches/persistence/core/include/SaveAbleFactory.h	2008-10-18 23:15:06 UTC (rev 4554)
@@ -22,13 +22,13 @@
 
 namespace rl
 {
-	class SaveAbleFactory : public Ogre::Singleton<SaveAbleFactory>
+	class _RlCoreExport SaveAbleFactory : public Ogre::Singleton<SaveAbleFactory>
 	{
 	public:
 		virtual SaveAblePtr createSaveAble(PropertyRecordPtr params) = 0;
 	};
 
-	class SaveAbleFactoryPool : public Ogre::Singleton<SaveAbleFactoryPool>
+	class _RlCoreExport SaveAbleFactoryPool : public Ogre::Singleton<SaveAbleFactoryPool>
 	{
 	public:
 		void registerFactory(const Ogre::String &key, SaveAbleFactory* fac);

Modified: rl/branches/persistence/core/include/Zone.h
===================================================================
--- rl/branches/persistence/core/include/Zone.h	2008-10-18 19:37:47 UTC (rev 4553)
+++ rl/branches/persistence/core/include/Zone.h	2008-10-18 23:15:06 UTC (rev 4554)
@@ -18,6 +18,7 @@
 
 #include "CorePrerequisites.h"
 #include "GameEventManager.h"  /* wegen GameAreaEventSourceList */
+#include "SaveAble.h"
 
 namespace rl {
 
@@ -28,7 +29,7 @@
     class ZoneManager;
 
     /// an abstraction of an zone, consisting of all GameAreaEventSources with the associated id
-    class _RlCoreExport Zone
+	class _RlCoreExport Zone : public SaveAble
 	{
 	public:
         virtual ~Zone();
@@ -49,13 +50,12 @@
         void removeLight(Actor* light);
         void removeSound(const Ogre::String& name);
         void removeTrigger(Trigger* trigger);
-        long getId() const {return mId;}
         
         bool needsToBeSaved() const {return mNeedsToBeSaved;}
 
     protected:
         friend class ZoneManager;
-        Zone(long id, bool needsToBeSaved);
+        Zone(const CeGuiString &id, bool needsToBeSaved);
         void addEventSource(GameAreaEventSource* gam);
         void removeEventSource(GameAreaEventSource* gam);
         GameAreaEventSourceList& getEventSources();
@@ -64,7 +64,6 @@
         bool isActive() const; // only for the ZoneManager, in order to ask if a zone is active use ZoneManager::isZoneActive
     private:
         bool mNeedsToBeSaved;
-        long mId;
         Zone();
 		std::list<Actor*> mLights;
 		std::list<Ogre::String> mSounds;

Modified: rl/branches/persistence/core/include/ZoneManager.h
===================================================================
--- rl/branches/persistence/core/include/ZoneManager.h	2008-10-18 19:37:47 UTC (rev 4553)
+++ rl/branches/persistence/core/include/ZoneManager.h	2008-10-18 23:15:06 UTC (rev 4554)
@@ -90,7 +90,7 @@
             unsigned long queryflags);
 		Zone* getDefaultZone();
 		Zone* getZone(const Ogre::String& name);
-        Zone* getZone(long id);
+        Zone* getZone(const CeGuiString &id);
 
         /// asks wether this zone is currently activated
         bool isZoneActive(const Zone* zone) const;
@@ -126,7 +126,7 @@
         virtual int getPriority() const;  // zones must be loaded before triggers!
 	private:
 		ZoneMap mZones;
-        std::map<long, Zone*> mZonesIdMap;
+        std::map<CeGuiString, Zone*> mZonesIdMap;
 		std::list<Zone*> mActiveZones;
         typedef std::map<const Ogre::String, Sound*> SoundMap;
         SoundMap mActiveSounds;

Modified: rl/branches/persistence/core/src/SaveAbleFactory.cpp
===================================================================
--- rl/branches/persistence/core/src/SaveAbleFactory.cpp	2008-10-18 19:37:47 UTC (rev 4553)
+++ rl/branches/persistence/core/src/SaveAbleFactory.cpp	2008-10-18 23:15:06 UTC (rev 4554)
@@ -18,6 +18,10 @@
 
 #include "SaveAbleFactory.h"
 
+template<> rl::SaveAbleFactory* Ogre::Singleton<rl::SaveAbleFactory>::ms_Singleton = 0;
+
+template<> rl::SaveAbleFactoryPool* Ogre::Singleton<rl::SaveAbleFactoryPool>::ms_Singleton = 0;
+
 namespace rl
 {
 	void SaveAbleFactoryPool::registerFactory(const Ogre::String &key, rl::SaveAbleFactory *fac)

Modified: rl/branches/persistence/core/src/Zone.cpp
===================================================================
--- rl/branches/persistence/core/src/Zone.cpp	2008-10-18 19:37:47 UTC (rev 4553)
+++ rl/branches/persistence/core/src/Zone.cpp	2008-10-18 23:15:06 UTC (rev 4554)
@@ -27,7 +27,7 @@
 {
 
 
-    Zone::Zone(long id, bool needsToBeSaved) : mId(id), mEaxPreset(""), mNeedsToBeSaved(needsToBeSaved), mPersonsInside(0)
+    Zone::Zone(const CeGuiString &id, bool needsToBeSaved) : mEaxPreset(""), mNeedsToBeSaved(needsToBeSaved), mPersonsInside(0), SaveAble(id, needsToBeSaved)
     {
     }
 

Modified: rl/branches/persistence/core/src/ZoneManager.cpp
===================================================================
--- rl/branches/persistence/core/src/ZoneManager.cpp	2008-10-18 19:37:47 UTC (rev 4553)
+++ rl/branches/persistence/core/src/ZoneManager.cpp	2008-10-18 23:15:06 UTC (rev 4554)
@@ -43,7 +43,7 @@
         GameTask(false)
 	{
 		// the default zone is active when no other Zone is active
-		mDefaultZone = new Zone(0,false);
+		mDefaultZone = new Zone("Zone_0",false);
         mNextZoneId = 1;
 		mActiveZones.push_front(mDefaultZone);
 
@@ -60,7 +60,7 @@
         for( ; it != mZonesToDelete.end(); it++)
             doDestroyZone(*it);
         mZonesToDelete.clear();
-		for (std::map<long, Zone*>::iterator it = mZonesIdMap.begin(); it != mZonesIdMap.end(); ++it)
+		for (std::map<CeGuiString, Zone*>::iterator it = mZonesIdMap.begin(); it != mZonesIdMap.end(); ++it)
 		{
 			Zone* curZone = (*it).second;
             doDestroyZone(curZone);
@@ -86,9 +86,9 @@
 		}
 	}
 
-	Zone* ZoneManager::getZone(long id)
+	Zone* ZoneManager::getZone(const CeGuiString &id)
 	{
-		std::map<long, Zone*>::const_iterator it = mZonesIdMap.find(id);
+		std::map<CeGuiString, Zone*>::const_iterator it = mZonesIdMap.find(id);
 		if (it == mZonesIdMap.end())
 		{
 			return NULL;
@@ -101,8 +101,8 @@
 
     Zone* ZoneManager::createZone(const Ogre::String& name, bool needsToBeSaved)
 	{
-        Zone* zone = new Zone(mNextZoneId, needsToBeSaved);
-        mZonesIdMap[mNextZoneId] = zone;
+		Zone* zone = new Zone("Zone_" + Ogre::StringConverter::toString(mNextZoneId), needsToBeSaved);
+        mZonesIdMap["Zone_" + Ogre::StringConverter::toString(mNextZoneId)] = zone;
         mZones[name] = zone;
         mNextZoneId++;
 
@@ -124,7 +124,7 @@
         if( it != mZones.end() )
             mZones.erase(it);
 
-        std::map<long, Zone*>::iterator it_ = mZonesIdMap.find(zone->getId());
+        std::map<CeGuiString, Zone*>::iterator it_ = mZonesIdMap.find(zone->getId());
         if( it_ != mZonesIdMap.end() )
             mZonesIdMap.erase(it_);
 
@@ -215,7 +215,7 @@
             // diese funktion hier notwendig um die mask zu ignorieren
             if( (*it)->getGameAreaType()->isInside(actor) )
             {
-                if( (*it)->getId() < 0 )
+				if( (*it)->mProperties.getProperty("subtract"))
                     x--;
                 else
                     x++;
@@ -269,7 +269,7 @@
                 aabb, geom, this, queryflags, position + offset, orientation, true);
 
         gam->getGameAreaType()->setTransitionDistance(transitionDistance);
-        gam->setId( - (zone->getId())); // a negative id indicates to subtract this area from the zone
+        gam->setId((zone->getId())); // a negative id indicates to subtract this area from the zone
         zone->addEventSource(gam);
         // set the properties for saving
         gam->mProperties.setProperty("subtract", Property(true));
@@ -343,7 +343,7 @@
                 entity, geom, this, queryflags, position + offset, orientation, true);
 
         gam->getGameAreaType()->setTransitionDistance(transitionDistance);
-        gam->setId( - (zone->getId()) ); // a negative id indicates to subtract this area from the zone
+        gam->setId((zone->getId()) ); // a negative id indicates to subtract this area from the zone
 
         CoreSubsystem::getSingletonPtr()->getWorld()
             ->getSceneManager()->destroyEntity(entity);
@@ -362,10 +362,10 @@
 
 	void ZoneManager::areaLeft(GameAreaEvent* gae)
 	{
-        long id = gae->getSource()->getId();
-        if( id != 0 )
+        CeGuiString id = gae->getSource()->getId();
+        if( id != "")
         {
-            if( id > 0 )
+			if( !gae->getSource()->mProperties.getProperty("subtract") )
             {
                 Zone *zone = getZone(id);
                 if( zone )
@@ -377,7 +377,7 @@
             }
             else
             {
-                Zone *zone = getZone(-id); // means we have to subtract this area from the zone
+                Zone *zone = getZone(id); // means we have to subtract this area from the zone
                 if( zone )
                 {
                     if( !zone->isActive() )
@@ -392,10 +392,10 @@
 
 	void ZoneManager::areaEntered(GameAreaEvent* gae)
 	{
-        long id = gae->getSource()->getId();
-        if( id != 0 )
+        CeGuiString id = gae->getSource()->getId();
+        if( id != "" )
         {
-            if( id > 0 )
+            if( !gae->getSource()->mProperties.getProperty("subtract") )
             {
                 Zone *zone = getZone(id);
                 if( zone )
@@ -407,7 +407,7 @@
             }
             else
             {
-                Zone *zone = getZone(-id); // means we have to subtract this area from the zone
+                Zone *zone = getZone(id); // means we have to subtract this area from the zone
                 if( zone )
                 {
                     zone->personLeft();

Modified: rl/branches/persistence/rules/src/QuestBook.cpp
===================================================================
--- rl/branches/persistence/rules/src/QuestBook.cpp	2008-10-18 19:37:47 UTC (rev 4553)
+++ rl/branches/persistence/rules/src/QuestBook.cpp	2008-10-18 23:15:06 UTC (rev 4554)
@@ -86,6 +86,9 @@
 
 	SaveAblePtr QuestBook::createSaveAble(PropertyRecordPtr params)
 	{
+		SaveAblePtr ptr;
+		ptr.bind(static_cast<SaveAble*>(new Quest(""))); //TODO !!!!!
+		return ptr; // TODO
 	}
 
     void QuestBook::_fireQuestBookChanged(Quest *quest, int reason)

Modified: rl/branches/persistence/script/swig/RlCore.swig
===================================================================
--- rl/branches/persistence/script/swig/RlCore.swig	2008-10-18 19:37:47 UTC (rev 4553)
+++ rl/branches/persistence/script/swig/RlCore.swig	2008-10-18 23:15:06 UTC (rev 4554)
@@ -1165,7 +1165,7 @@
         
 	rl::Zone* getDefaultZone();
 	rl::Zone* getZone(const Ogre::String& name);
-    rl::Zone* getZone(long id);
+    rl::Zone* getZone(const rl::CeGuiString &id);
     bool isZoneActive(const rl::Zone *zone) const;
     bool isInZone(Zone* zone, Actor *actor);
 };



From timm at mail.berlios.de  Sun Oct 19 01:34:31 2008
From: timm at mail.berlios.de (timm at mail.berlios.de)
Date: Sun, 19 Oct 2008 01:34:31 +0200
Subject: [Dsa-hl-svn] r4555 - in modules/intro: maps scripts
Message-ID: <200810182334.m9INYV5n014410@sheep.berlios.de>

Author: timm
Date: 2008-10-19 01:34:11 +0200 (Sun, 19 Oct 2008)
New Revision: 4555

Added:
   modules/intro/maps/intro.rlmap
   modules/intro/maps/intro.rlscene
Removed:
   modules/intro/maps/intro.scene
Modified:
   modules/intro/scripts/moduleconfig.rb
Log:
switched intro module to new map format

Added: modules/intro/maps/intro.rlmap
===================================================================
--- modules/intro/maps/intro.rlmap	2008-10-18 23:15:06 UTC (rev 4554)
+++ modules/intro/maps/intro.rlmap	2008-10-18 23:34:11 UTC (rev 4555)
@@ -0,0 +1,16 @@
+<scene formatVersion="0.4.0">
+    <nodes>
+<entity name="entity_0" meshfile="wueste.mesh">
+<position x="7.7022953" y="18.513506" z="-71.49255"/><rotation qw="0.919954" qx="0.187985" qy="0.33705" qz="0.068873"/>                <property type="STRING" name="physical_body" data="none"/>
+
+</entity>
+<entity name="nat_stein_01" meshfile="nat_stein_01.mesh">
+<position x="13.487664" y="8.259508" z="-37.13589"/><rotation qw="0.976916" qx="0.061914" qy="0.204045" qz="-0.012932"/><scale x="0.65" y="0.5" z="0.65"/>                <property type="STRING" name="physical_body" data="none"/>
+
+</entity>
+<entity name="arc_boronsrad" meshfile="arc_boronsrad.mesh">
+<position x="1.7044659" y="-0.92208046" z="-2.555693"/><rotation qw="0.779333" qx="0.055446" qy="0.623836" qz="-0.019875"/><scale x="1.0" y="1.0" z="1.0"/>                <property type="STRING" name="physical_body" data="none"/>
+
+</entity>
+    </nodes>
+</scene>
\ No newline at end of file

Added: modules/intro/maps/intro.rlscene
===================================================================
--- modules/intro/maps/intro.rlscene	2008-10-18 23:15:06 UTC (rev 4554)
+++ modules/intro/maps/intro.rlscene	2008-10-18 23:34:11 UTC (rev 4555)
@@ -0,0 +1,3 @@
+<scene name="intro">
+	<map file="intro.rlmap"/>
+</scene>
\ No newline at end of file

Deleted: modules/intro/maps/intro.scene
===================================================================
--- modules/intro/maps/intro.scene	2008-10-18 23:15:06 UTC (rev 4554)
+++ modules/intro/maps/intro.scene	2008-10-18 23:34:11 UTC (rev 4555)
@@ -1,30 +0,0 @@
-<scene formatVersion="0.2.0">
-    <nodes>
-        <node>
-            <position x="7.7022953" y="18.513506" z="-71.49255" />
-            <rotation qw="0.919954" qx="0.187985" qy="0.33705" qz="0.068873" />
-            <entity meshFile="wueste.mesh"/>
-            <userdata>
-                <property type="STRING" name="physical_body" data="none"/>
-            </userdata>
-        </node>
-        <node name="nat_stein_01">
-            <position x="13.487664" y="8.259508" z="-37.13589" />
-            <rotation qw="0.976916" qx="0.061914" qy="0.204045" qz="-0.012932" />
-            <scale x="0.65" y="0.5" z="0.65" />
-            <entity name="nat_stein_01" meshFile="nat_stein_01.mesh"/>
-            <userdata>
-                <property type="STRING" name="physical_body" data="none"/>
-            </userdata>
-        </node>
-        <node name="arc_boronsrad">
-            <position x="1.7044659" y="-0.92208046" z="-2.555693" />
-            <rotation qw="0.779333" qx="0.055446" qy="0.623836" qz="-0.019875" />
-            <scale x="1.0" y="1.0" z="1.0" />
-            <entity name="arc_boronsrad" meshFile="arc_boronsrad.mesh"/>
-            <userdata>
-                <property type="STRING" name="physical_body" data="none"/>
-            </userdata>
-        </node>
-    </nodes>
-</scene>
\ No newline at end of file

Modified: modules/intro/scripts/moduleconfig.rb
===================================================================
--- modules/intro/scripts/moduleconfig.rb	2008-10-18 23:15:06 UTC (rev 4554)
+++ modules/intro/scripts/moduleconfig.rb	2008-10-18 23:34:11 UTC (rev 4555)
@@ -21,7 +21,8 @@
 
     def start()
         $SCRIPT.log("Loading menu background..")
-        $CORE.loadMap("Octree", "intro.scene", "General");
+		SceneManager::getSingleton().loadScene("intro", false);
+        #$CORE.loadMap("Octree", "intro.scene", "General");
         load "intro.rb"
         $SCRIPT.log("done")
         



From timm at mail.berlios.de  Sun Oct 19 01:46:42 2008
From: timm at mail.berlios.de (timm at mail.berlios.de)
Date: Sun, 19 Oct 2008 01:46:42 +0200
Subject: [Dsa-hl-svn] r4556 - rl/branches/persistence/core/src
Message-ID: <200810182346.m9INkgTJ031943@sheep.berlios.de>

Author: timm
Date: 2008-10-19 01:46:36 +0200 (Sun, 19 Oct 2008)
New Revision: 4556

Modified:
   rl/branches/persistence/core/src/SaveAble.cpp
Log:
fixed constructor of saveable

Modified: rl/branches/persistence/core/src/SaveAble.cpp
===================================================================
--- rl/branches/persistence/core/src/SaveAble.cpp	2008-10-18 23:34:11 UTC (rev 4555)
+++ rl/branches/persistence/core/src/SaveAble.cpp	2008-10-18 23:46:36 UTC (rev 4556)
@@ -23,7 +23,7 @@
 
 namespace rl
 {
-	SaveAble::SaveAble(const CeGuiString &id, bool isSaveAble)
+	SaveAble::SaveAble(const CeGuiString &id, bool isSaveAble) : mId(id)
 	{
 	}
 



From timm at mail.berlios.de  Sun Oct 19 01:50:10 2008
From: timm at mail.berlios.de (timm at mail.berlios.de)
Date: Sun, 19 Oct 2008 01:50:10 +0200
Subject: [Dsa-hl-svn] r4557 - rl/branches/persistence/core/src
Message-ID: <200810182350.m9INoAxr032288@sheep.berlios.de>

Author: timm
Date: 2008-10-19 01:50:04 +0200 (Sun, 19 Oct 2008)
New Revision: 4557

Modified:
   rl/branches/persistence/core/src/SaveAble.cpp
Log:
2nd fix

Modified: rl/branches/persistence/core/src/SaveAble.cpp
===================================================================
--- rl/branches/persistence/core/src/SaveAble.cpp	2008-10-18 23:46:36 UTC (rev 4556)
+++ rl/branches/persistence/core/src/SaveAble.cpp	2008-10-18 23:50:04 UTC (rev 4557)
@@ -23,7 +23,7 @@
 
 namespace rl
 {
-	SaveAble::SaveAble(const CeGuiString &id, bool isSaveAble) : mId(id)
+	SaveAble::SaveAble(const CeGuiString &id, bool isSaveAble) : mId(id), mIsSaveAble(isSaveAble)
 	{
 	}
 



From timm at mail.berlios.de  Sun Oct 19 12:40:31 2008
From: timm at mail.berlios.de (timm at mail.berlios.de)
Date: Sun, 19 Oct 2008 12:40:31 +0200
Subject: [Dsa-hl-svn] r4558 - in rl/branches/persistence: core/include
	core/src rules/include rules/src
Message-ID: <200810191040.m9JAeVfX010651@sheep.berlios.de>

Author: timm
Date: 2008-10-19 12:40:21 +0200 (Sun, 19 Oct 2008)
New Revision: 4558

Modified:
   rl/branches/persistence/core/include/Job.h
   rl/branches/persistence/core/include/JobQueue.h
   rl/branches/persistence/core/include/JobScheduler.h
   rl/branches/persistence/core/include/SaveAbleFactory.h
   rl/branches/persistence/core/src/Job.cpp
   rl/branches/persistence/core/src/JobQueue.cpp
   rl/branches/persistence/core/src/JobScheduler.cpp
   rl/branches/persistence/rules/include/QuestBook.h
   rl/branches/persistence/rules/src/ApplyDamageJob.cpp
Log:
moved persistence from abstractjob to job

Modified: rl/branches/persistence/core/include/Job.h
===================================================================
--- rl/branches/persistence/core/include/Job.h	2008-10-18 23:50:04 UTC (rev 4557)
+++ rl/branches/persistence/core/include/Job.h	2008-10-19 10:40:21 UTC (rev 4558)
@@ -25,15 +25,10 @@
 
 namespace rl
 {
-    class _RlCoreExport AbstractJob : public SaveAble
+	class _RlCoreExport AbstractJob : public PropertyHolder
     {
     public:
-        enum JobPersistenceType
-        {
-            NOT_PERSISTENT,             // the job is not influenced by any save/load - events
-            PERSISTENT,                 // the job stores data in (and loads from) a savegamefile, the job is deleted (not discarded) before a new game is loaded
-            FINISH_WHEN_GAME_LOADED     // the job is discarded if it is discardable or deleted, when a new game is loaded
-        };
+        
 
         /**
          * Constructor.
@@ -47,7 +42,7 @@
          *         Job, after execution is finished. This should usually be the case, but
          *         sometimes it is sensible to pool a number of Jobs for reuse.
          */
-        AbstractJob(const CeGuiString &id, bool isDiscardable, 
+        AbstractJob(bool isDiscardable, 
             bool destroyWhenDone);
 
         virtual ~AbstractJob();
@@ -64,9 +59,6 @@
          */
         virtual bool execute(Ogre::Real time) = 0;
 
-        /// Returns the Persistence-Type of this job
-        virtual JobPersistenceType getPersistenceType() const = 0;
-
         virtual TimeSource::TimeSourceType getTimeSource() const = 0;
 
         /// Returns whether the job can be removed from the queue by the scheduler,
@@ -106,9 +98,16 @@
      *
      *  This class provides default implementations for most of AbstractJob's methods
      */
-    class _RlCoreExport Job : public AbstractJob
+    class _RlCoreExport Job : public AbstractJob, public SaveAble
     {
     public:
+		enum JobPersistenceType
+        {
+            NOT_PERSISTENT,             // the job is not influenced by any save/load - events
+            PERSISTENT,                 // the job stores data in (and loads from) a savegamefile, the job is deleted (not discarded) before a new game is loaded
+            FINISH_WHEN_GAME_LOADED     // the job is discarded if it is discardable or deleted, when a new game is loaded
+        };
+
         /**
          * Constructor.
          *

Modified: rl/branches/persistence/core/include/JobQueue.h
===================================================================
--- rl/branches/persistence/core/include/JobQueue.h	2008-10-18 23:50:04 UTC (rev 4557)
+++ rl/branches/persistence/core/include/JobQueue.h	2008-10-19 10:40:21 UTC (rev 4558)
@@ -23,7 +23,7 @@
 namespace rl
 {
 
-    class _RlCoreExport JobQueue : public AbstractJob
+    class _RlCoreExport JobQueue : public Job
     {
     public:
         JobQueue(const CeGuiString &id);
@@ -41,7 +41,7 @@
         TimeSource::TimeSourceType mTimeSource;
     };
 
-    class _RlCoreExport JobSet : public AbstractJob
+    class _RlCoreExport JobSet : public Job
     {
     public:
         JobSet(const CeGuiString &id);

Modified: rl/branches/persistence/core/include/JobScheduler.h
===================================================================
--- rl/branches/persistence/core/include/JobScheduler.h	2008-10-18 23:50:04 UTC (rev 4557)
+++ rl/branches/persistence/core/include/JobScheduler.h	2008-10-19 10:40:21 UTC (rev 4558)
@@ -46,8 +46,7 @@
      */
     class _RlCoreExport JobScheduler
         : public GameTask,
-          public Ogre::Singleton<JobScheduler>,
-          public SaveGameData
+          public Ogre::Singleton<JobScheduler>
     {
     public:
         typedef enum {JP_LOW = 10, JP_NORMAL = 20, JP_HIGH = 30} JobPriority;
@@ -91,15 +90,6 @@
 
         virtual const Ogre::String& getName() const;
 
-
-        /// Override from SaveGameData
-        /// Manages saving and loading from the SaveGameFile
-
-        virtual CeGuiString getXmlNodeIdentifier() const;
-        virtual void writeData(SaveGameFileWriter* writer);
-        virtual void readData(SaveGameFileReader* reader);
-        virtual int getPriority() const;  // this should probably be one of the last things to load, so the job can access various things (gameobjects etc)
-
         typedef AbstractJob*(*JobCreateFunction)(void);
         static void registerJobClass(const Ogre::String &name, JobCreateFunction);
     private:

Modified: rl/branches/persistence/core/include/SaveAbleFactory.h
===================================================================
--- rl/branches/persistence/core/include/SaveAbleFactory.h	2008-10-18 23:50:04 UTC (rev 4557)
+++ rl/branches/persistence/core/include/SaveAbleFactory.h	2008-10-19 10:40:21 UTC (rev 4558)
@@ -22,7 +22,7 @@
 
 namespace rl
 {
-	class _RlCoreExport SaveAbleFactory : public Ogre::Singleton<SaveAbleFactory>
+	class _RlCoreExport SaveAbleFactory : public Ogre::Singleton<SaveAbleFactory>, PropertyHolder
 	{
 	public:
 		virtual SaveAblePtr createSaveAble(PropertyRecordPtr params) = 0;

Modified: rl/branches/persistence/core/src/Job.cpp
===================================================================
--- rl/branches/persistence/core/src/Job.cpp	2008-10-18 23:50:04 UTC (rev 4557)
+++ rl/branches/persistence/core/src/Job.cpp	2008-10-19 10:40:21 UTC (rev 4558)
@@ -20,10 +20,9 @@
 
 namespace rl
 {
-    AbstractJob::AbstractJob(const CeGuiString &id, bool isDiscardable, bool destroyWhenDone)
+    AbstractJob::AbstractJob(bool isDiscardable, bool destroyWhenDone)
         : mIsDiscardable(isDiscardable), 
-        mDestroyWhenDone(destroyWhenDone),
-		SaveAble(id)
+        mDestroyWhenDone(destroyWhenDone)
     {
     }
 
@@ -111,10 +110,13 @@
     }
 
     Job::Job(const CeGuiString &id, bool isDiscardable, bool destroyWhenDone, TimeSource::TimeSourceType timesource, JobPersistenceType persistence)
-        : AbstractJob(id, isDiscardable, destroyWhenDone),
+        : AbstractJob(isDiscardable, destroyWhenDone),
         mTimeSource(timesource),
-        mPersistence(persistence)
+        mPersistence(persistence),
+		SaveAble(id)
     {
+		if(persistence != PERSISTENT)
+			setSaveAble(false);
     }
 
     Job::~Job()

Modified: rl/branches/persistence/core/src/JobQueue.cpp
===================================================================
--- rl/branches/persistence/core/src/JobQueue.cpp	2008-10-18 23:50:04 UTC (rev 4557)
+++ rl/branches/persistence/core/src/JobQueue.cpp	2008-10-19 10:40:21 UTC (rev 4558)
@@ -21,7 +21,7 @@
 {
 
 JobQueue::JobQueue(const CeGuiString &id)
-: AbstractJob(id, false, true),
+: Job(id, false, true),
     mTimeSource(TimeSource::REALTIME_CONTINUOUS)
 {
 }
@@ -81,9 +81,9 @@
     }
 }
 
-AbstractJob::JobPersistenceType JobQueue::getPersistenceType() const
+Job::JobPersistenceType JobQueue::getPersistenceType() const
 {
-    return AbstractJob::PERSISTENT; ///@todo is this correct?
+    return Job::PERSISTENT; ///@todo is this correct?
 }
 
 TimeSource::TimeSourceType JobQueue::getTimeSource() const 
@@ -97,7 +97,7 @@
 }
 
 JobSet::JobSet(const CeGuiString &id)
-: AbstractJob(id, false, true),
+: Job(id, false, true),
     mTimeSource(TimeSource::REALTIME_CONTINUOUS)
 {
 }
@@ -182,10 +182,9 @@
     }
 }
 
-
-AbstractJob::JobPersistenceType JobSet::getPersistenceType() const
+Job::JobPersistenceType JobSet::getPersistenceType() const
 {
-    return AbstractJob::PERSISTENT; ///@todo is this correct?
+    return Job::PERSISTENT; ///@todo is this correct?
 }
 
 TimeSource::TimeSourceType JobSet::getTimeSource() const 

Modified: rl/branches/persistence/core/src/JobScheduler.cpp
===================================================================
--- rl/branches/persistence/core/src/JobScheduler.cpp	2008-10-18 23:50:04 UTC (rev 4557)
+++ rl/branches/persistence/core/src/JobScheduler.cpp	2008-10-19 10:40:21 UTC (rev 4558)
@@ -35,7 +35,6 @@
         mTokenThreshold(JP_NORMAL), 
         mTicketCounter(0)
     {
-        SaveGameManager::getSingleton().registerSaveGameData(this);
     }
 
     JobScheduler::~JobScheduler()
@@ -204,7 +203,7 @@
 
     using namespace XERCES_CPP_NAMESPACE;
 
-    void JobScheduler::writeData(SaveGameFileWriter* writer)
+    /*void JobScheduler::writeData(SaveGameFileWriter* writer)
     {
         DOMElement* jobSchedulerParentNode = writer->appendChildElement(writer->getDocument(), writer->getDocument()->getDocumentElement(), getXmlNodeIdentifier().c_str());
 
@@ -225,99 +224,88 @@
                 writer->writeEachPropertyToElem(jobNode, map);
             }
         }
-    }
+    }*/
 
-    void JobScheduler::readData(SaveGameFileReader* reader)
-    {
-        // delete and discard old jobs
-        for( JobQueue::iterator iter = mJobQueue.begin(); iter != mJobQueue.end(); iter++ )
-        {
-            if( iter->job->getPersistenceType() == Job::PERSISTENT )
-            {
-                // delete the job, but do not discard it!
-                iter->markedToRemove = true;
-            }
-            else if( iter->job->getPersistenceType() == Job::FINISH_WHEN_GAME_LOADED )
-            {
-                // discard the job, then delete it
-                if( iter->job->isDiscardable() )
-                    iter->job->discard();
-                iter->markedToRemove = true;
-            }
-        }
+    //void JobScheduler::readData(SaveGameFileReader* reader)
+    //{
+    //    // delete and discard old jobs
+    //    for( JobQueue::iterator iter = mJobQueue.begin(); iter != mJobQueue.end(); iter++ )
+    //    {
+    //        if( iter->job->getPersistenceType() == Job::PERSISTENT )
+    //        {
+    //            // delete the job, but do not discard it!
+    //            iter->markedToRemove = true;
+    //        }
+    //        else if( iter->job->getPersistenceType() == Job::FINISH_WHEN_GAME_LOADED )
+    //        {
+    //            // discard the job, then delete it
+    //            if( iter->job->isDiscardable() )
+    //                iter->job->discard();
+    //            iter->markedToRemove = true;
+    //        }
+    //    }
 
         
         // load jobs from savegamefile
 
-        reader->initializeXml();
+    //    reader->initializeXml();
 
 
-        DOMNodeList* rootNodeList = reader->getDocument()->getDocumentElement()->getElementsByTagName(AutoXMLCh(getXmlNodeIdentifier().c_str()).data());
-        
-        if(rootNodeList->getLength())
-        {
-            DOMNodeList* xmlJobs = static_cast<DOMElement*>(rootNodeList->item(0))->getElementsByTagName(AutoXMLCh("job").data());
-            if (xmlJobs->getLength())
-            {
-                for (XMLSize_t childIdx1 = 0; childIdx1 < xmlJobs->getLength(); childIdx1++)
-                {
-                    DOMNode* xmlJob_ = xmlJobs->item(childIdx1);
-                    if (xmlJob_->getNodeType() == DOMNode::ELEMENT_NODE)
-                    {
-                        DOMElement* xmlJob = static_cast<DOMElement*>(xmlJob_);
-                        JobPriority priority;
-                        unsigned short tokens;
-                        int start, end;
-                        Time timeLastCall;
-                        bool called;
-                        priority = JobPriority(reader->getAttributeValueAsInteger(xmlJob, "priority"));
-                        tokens = reader->getAttributeValueAsInteger(xmlJob, "tokens");
-                        start = reader->getAttributeValueAsInteger(xmlJob, "start");
-                        end = reader->getAttributeValueAsInteger(xmlJob, "end");
-                        timeLastCall = reader->getAttributeValueAsInt64(xmlJob, "timeLastCall");
-                        called = reader->getAttributeValueAsBool(xmlJob, "called");
+    //    DOMNodeList* rootNodeList = reader->getDocument()->getDocumentElement()->getElementsByTagName(AutoXMLCh(getXmlNodeIdentifier().c_str()).data());
+    //    
+    //    if(rootNodeList->getLength())
+    //    {
+    //        DOMNodeList* xmlJobs = static_cast<DOMElement*>(rootNodeList->item(0))->getElementsByTagName(AutoXMLCh("job").data());
+    //        if (xmlJobs->getLength())
+    //        {
+    //            for (XMLSize_t childIdx1 = 0; childIdx1 < xmlJobs->getLength(); childIdx1++)
+    //            {
+    //                DOMNode* xmlJob_ = xmlJobs->item(childIdx1);
+    //                if (xmlJob_->getNodeType() == DOMNode::ELEMENT_NODE)
+    //                {
+    //                    DOMElement* xmlJob = static_cast<DOMElement*>(xmlJob_);
+    //                    JobPriority priority;
+    //                    unsigned short tokens;
+    //                    int start, end;
+    //                    Time timeLastCall;
+    //                    bool called;
+    //                    priority = JobPriority(reader->getAttributeValueAsInteger(xmlJob, "priority"));
+    //                    tokens = reader->getAttributeValueAsInteger(xmlJob, "tokens");
+    //                    start = reader->getAttributeValueAsInteger(xmlJob, "start");
+    //                    end = reader->getAttributeValueAsInteger(xmlJob, "end");
+    //                    timeLastCall = reader->getAttributeValueAsInt64(xmlJob, "timeLastCall");
+    //                    called = reader->getAttributeValueAsBool(xmlJob, "called");
 
-                        Ogre::String className = reader->getAttributeValueAsStdString(xmlJob, "classname");
+    //                    Ogre::String className = reader->getAttributeValueAsStdString(xmlJob, "classname");
 
-                        JobCreationMap::iterator it = mJobCreationMap.find(className);
-                        if (it == mJobCreationMap.end())
-                        {
-                            LOG_ERROR(Logger::CORE, "Die Job-Klasse '" + className + "' ist nicht beim JobScheduler registriert!");
-                            continue;
-                        }
+    //                    JobCreationMap::iterator it = mJobCreationMap.find(className);
+    //                    if (it == mJobCreationMap.end())
+    //                    {
+    //                        LOG_ERROR(Logger::CORE, "Die Job-Klasse '" + className + "' ist nicht beim JobScheduler registriert!");
+    //                        continue;
+    //                    }
 
-                        AbstractJob* job = it->second();
-                        if (job == NULL)
-                        {
-                            LOG_ERROR(Logger::CORE, "Fehler beim Erstellen eines Objekts der Job-Klasse '" + className + "'!");
-                            continue;
-                        }
-                        PropertyRecordPtr properties = reader->getPropertiesAsRecord(xmlJob);
-                        job->setProperties(properties);
-                        
-                        
-                        unsigned long ticket = ++mTicketCounter;
-                        TimeSource* ts = TimeSourceManager::getSingleton().getTimeSource(job->getTimeSource());
-                        JobEntry entry = {job, NULL, ticket, priority, tokens, start, end, timeLastCall, TimeSource::UNKNOWN, called, false};
-                        mJobQueue.push_back(entry);
-                    }
-                }
-            }
-        }
+    //                    AbstractJob* job = it->second();
+    //                    if (job == NULL)
+    //                    {
+    //                        LOG_ERROR(Logger::CORE, "Fehler beim Erstellen eines Objekts der Job-Klasse '" + className + "'!");
+    //                        continue;
+    //                    }
+    //                    PropertyRecordPtr properties = reader->getPropertiesAsRecord(xmlJob);
+    //                    job->setProperties(properties);
+    //                    
+    //                    
+    //                    unsigned long ticket = ++mTicketCounter;
+    //                    TimeSource* ts = TimeSourceManager::getSingleton().getTimeSource(job->getTimeSource());
+    //                    JobEntry entry = {job, NULL, ticket, priority, tokens, start, end, timeLastCall, TimeSource::UNKNOWN, called, false};
+    //                    mJobQueue.push_back(entry);
+    //                }
+    //            }
+    //        }
+    //    }
 
-        reader->shutdownXml();
-    }
+    //    reader->shutdownXml();
+    //}
 
-    int JobScheduler::getPriority() const
-    {
-        return 0; // must be loaded before triggers!
-    }
-
-    CeGuiString JobScheduler::getXmlNodeIdentifier() const
-    {
-        static const CeGuiString name = "jobscheduler";
-        return name;
-    }
-
     JobScheduler::JobCreationMap JobScheduler::mJobCreationMap;
 }

Modified: rl/branches/persistence/rules/include/QuestBook.h
===================================================================
--- rl/branches/persistence/rules/include/QuestBook.h	2008-10-18 23:50:04 UTC (rev 4557)
+++ rl/branches/persistence/rules/include/QuestBook.h	2008-10-19 10:40:21 UTC (rev 4558)
@@ -38,7 +38,6 @@
 class _RlRulesExport QuestBook : 
     public Ogre::ScriptLoader,
     public EventSource, 
-    public PropertyHolder, 
     public XmlProcessor,
 	public SaveAbleFactory
 {

Modified: rl/branches/persistence/rules/src/ApplyDamageJob.cpp
===================================================================
--- rl/branches/persistence/rules/src/ApplyDamageJob.cpp	2008-10-18 23:50:04 UTC (rev 4557)
+++ rl/branches/persistence/rules/src/ApplyDamageJob.cpp	2008-10-19 10:40:21 UTC (rev 4558)
@@ -22,7 +22,7 @@
 {
 
 ApplyDamageJob::ApplyDamageJob(Creature* target, int tp)
-:   Job("",false, true, TimeSource::GAMETIME, AbstractJob::PERSISTENT),
+:   Job("",false, true, TimeSource::GAMETIME, Job::PERSISTENT),
     mTarget(target), 
     mTp(tp)
 {



From timm at mail.berlios.de  Sun Oct 19 13:14:30 2008
From: timm at mail.berlios.de (timm at mail.berlios.de)
Date: Sun, 19 Oct 2008 13:14:30 +0200
Subject: [Dsa-hl-svn] r4559 - in rl/branches/persistence: common
	common/include common/src core core/include core/src
Message-ID: <200810191114.m9JBEUSs019257@sheep.berlios.de>

Author: timm
Date: 2008-10-19 13:14:13 +0200 (Sun, 19 Oct 2008)
New Revision: 4559

Added:
   rl/branches/persistence/common/include/ScriptSerializer.h
   rl/branches/persistence/common/src/ScriptSerializer.cpp
   rl/branches/persistence/core/include/SaveAbleSerializer.h
   rl/branches/persistence/core/src/SaveAbleSerializer.cpp
Modified:
   rl/branches/persistence/common/RlCommon2005.vcproj
   rl/branches/persistence/common/include/Makefile.am
   rl/branches/persistence/common/src/Makefile.am
   rl/branches/persistence/core/RlCore2005.vcproj
   rl/branches/persistence/core/include/Makefile.am
   rl/branches/persistence/core/include/SaveAbleManager.h
   rl/branches/persistence/core/src/Makefile.am
   rl/branches/persistence/core/src/SaveAbleManager.cpp
Log:
introducing scriptserializer and saveableserializer

Modified: rl/branches/persistence/common/RlCommon2005.vcproj
===================================================================
--- rl/branches/persistence/common/RlCommon2005.vcproj	2008-10-19 10:40:21 UTC (rev 4558)
+++ rl/branches/persistence/common/RlCommon2005.vcproj	2008-10-19 11:14:13 UTC (rev 4559)
@@ -335,6 +335,10 @@
 				>
 			</File>
 			<File
+				RelativePath=".\src\ScriptSerializer.cpp"
+				>
+			</File>
+			<File
 				RelativePath=".\src\ScriptWrapper.cpp"
 				>
 			</File>
@@ -471,6 +475,10 @@
 				>
 			</File>
 			<File
+				RelativePath=".\include\ScriptSerializer.h"
+				>
+			</File>
+			<File
 				RelativePath=".\include\ScriptWrapper.h"
 				>
 			</File>

Modified: rl/branches/persistence/common/include/Makefile.am
===================================================================
--- rl/branches/persistence/common/include/Makefile.am	2008-10-19 10:40:21 UTC (rev 4558)
+++ rl/branches/persistence/common/include/Makefile.am	2008-10-19 11:14:13 UTC (rev 4559)
@@ -15,6 +15,7 @@
     Properties.h \
     Property.h \
     RastullahPrerequisites.h \
+	ScriptSerializer.h \
     ScriptWrapper.h \
 	Sleep.h \
 	Tripel.h \

Added: rl/branches/persistence/common/include/ScriptSerializer.h
===================================================================
--- rl/branches/persistence/common/include/ScriptSerializer.h	2008-10-19 10:40:21 UTC (rev 4558)
+++ rl/branches/persistence/common/include/ScriptSerializer.h	2008-10-19 11:14:13 UTC (rev 4559)
@@ -0,0 +1,29 @@
+/* This source file is part of Rastullahs Lockenpracht.
+ * Copyright (C) 2003-2008 Team Pantheon. http://www.team-pantheon.de
+ * 
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the Clarified Artistic License.
+ *
+ *  This program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  Clarified Artistic License for more details.
+ *
+ *  You should have received a copy of the Clarified Artistic License
+ *  along with this program; if not you can get it here
+ *  http://www.jpaulmorrison.com/fbp/artistic2.htm.
+ */
+
+#ifndef __ScriptSerializer_H__
+#define __ScriptSerializer_H__
+
+#include "CommonPrerequisites.h"
+
+namespace rl
+{
+	class ScriptSerializer : public Ogre::ScriptLoader
+	{
+	};
+}
+
+#endif
\ No newline at end of file

Modified: rl/branches/persistence/common/src/Makefile.am
===================================================================
--- rl/branches/persistence/common/src/Makefile.am	2008-10-19 10:40:21 UTC (rev 4558)
+++ rl/branches/persistence/common/src/Makefile.am	2008-10-19 11:14:13 UTC (rev 4559)
@@ -14,6 +14,7 @@
   Properties.cpp \
   Property.cpp \
   ScriptWrapper.cpp \
+  ScriptSerializer.cpp \
   WriteableDataStream.cpp \
   WriteableDataStreamFormatTarget.cpp \
   WriteableFileSystemArchiv.cpp \

Added: rl/branches/persistence/common/src/ScriptSerializer.cpp
===================================================================
--- rl/branches/persistence/common/src/ScriptSerializer.cpp	2008-10-19 10:40:21 UTC (rev 4558)
+++ rl/branches/persistence/common/src/ScriptSerializer.cpp	2008-10-19 11:14:13 UTC (rev 4559)
@@ -0,0 +1,23 @@
+/* This source file is part of Rastullahs Lockenpracht.
+* Copyright (C) 2003-2008 Team Pantheon. http://www.team-pantheon.de
+*
+*  This program is free software; you can redistribute it and/or modify
+*  it under the terms of the Clarified Artistic License.
+*
+*  This program is distributed in the hope that it will be useful,
+*  but WITHOUT ANY WARRANTY; without even the implied warranty of
+*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+*  Clarified Artistic License for more details.
+*
+*  You should have received a copy of the Clarified Artistic License
+*  along with this program; if not you can get it here
+*  http://www.jpaulmorrison.com/fbp/artistic2.htm.
+*/
+
+#include "stdinc.h"
+
+#include "ScriptSerializer.h"
+
+namespace rl
+{
+}
\ No newline at end of file

Modified: rl/branches/persistence/core/RlCore2005.vcproj
===================================================================
--- rl/branches/persistence/core/RlCore2005.vcproj	2008-10-19 10:40:21 UTC (rev 4558)
+++ rl/branches/persistence/core/RlCore2005.vcproj	2008-10-19 11:14:13 UTC (rev 4559)
@@ -679,6 +679,10 @@
 					>
 				</File>
 				<File
+					RelativePath=".\include\SaveAbleSerializer.h"
+					>
+				</File>
+				<File
 					RelativePath=".\include\SaveGameData.h"
 					>
 				</File>
@@ -1024,6 +1028,10 @@
 					>
 				</File>
 				<File
+					RelativePath=".\src\SaveAbleSerializer.cpp"
+					>
+				</File>
+				<File
 					RelativePath=".\src\SaveGameData.cpp"
 					>
 				</File>

Modified: rl/branches/persistence/core/include/Makefile.am
===================================================================
--- rl/branches/persistence/core/include/Makefile.am	2008-10-19 10:40:21 UTC (rev 4558)
+++ rl/branches/persistence/core/include/Makefile.am	2008-10-19 11:14:13 UTC (rev 4559)
@@ -59,6 +59,8 @@
 	SaveAbleCollection.h \
 	SaveAbleFactory.h \
 	SaveAbleManager.h \
+	SaveAbleSerializer.h \
+	SaveGameData.h \
 	SaveGameFile.h \
 	SaveGameFileReader.h \
 	SaveGameFileWriter.h \

Modified: rl/branches/persistence/core/include/SaveAbleManager.h
===================================================================
--- rl/branches/persistence/core/include/SaveAbleManager.h	2008-10-19 10:40:21 UTC (rev 4558)
+++ rl/branches/persistence/core/include/SaveAbleManager.h	2008-10-19 11:14:13 UTC (rev 4559)
@@ -23,7 +23,7 @@
 
 namespace rl
 {
-	class SaveAbleManager : public Ogre::Singleton<SaveAbleManager>
+	class _RlCoreExport SaveAbleManager : public Ogre::Singleton<SaveAbleManager>
 	{
 	public:
 		void saveState();

Added: rl/branches/persistence/core/include/SaveAbleSerializer.h
===================================================================
--- rl/branches/persistence/core/include/SaveAbleSerializer.h	2008-10-19 10:40:21 UTC (rev 4558)
+++ rl/branches/persistence/core/include/SaveAbleSerializer.h	2008-10-19 11:14:13 UTC (rev 4559)
@@ -0,0 +1,37 @@
+/* This source file is part of Rastullahs Lockenpracht.
+ * Copyright (C) 2003-2008 Team Pantheon. http://www.team-pantheon.de
+ * 
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the Clarified Artistic License.
+ *
+ *  This program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  Clarified Artistic License for more details.
+ *
+ *  You should have received a copy of the Clarified Artistic License
+ *  along with this program; if not you can get it here
+ *  http://www.jpaulmorrison.com/fbp/artistic2.htm.
+ */
+
+#ifndef __SaveAbleSerializer_H__
+#define __SaveAbleSerializer_H__
+
+#include "CorePrerequisites.h"
+#include "SaveAbleManager.h"
+#include "SaveGameFile.h"
+#include "ScriptSerializer.h"
+
+namespace rl
+{
+	class _RlCoreExport SaveAbleSerializer : public ScriptSerializer
+	{
+	public:
+		void writeToSaveGameFile();
+		void readFromSaveGameFile();
+	protected:
+		std::map<CeGuiString, SaveGameFile*> mSaveGameFile;
+	};
+}
+
+#endif
\ No newline at end of file

Modified: rl/branches/persistence/core/src/Makefile.am
===================================================================
--- rl/branches/persistence/core/src/Makefile.am	2008-10-19 10:40:21 UTC (rev 4558)
+++ rl/branches/persistence/core/src/Makefile.am	2008-10-19 11:14:13 UTC (rev 4559)
@@ -58,6 +58,7 @@
 	SaveAbleCollection.cpp \
 	SaveAbleFactory.cpp \
 	SaveAbleManager.cpp \
+	SaveAbleSerializer.cpp \
 	SaveGameFile.cpp \
 	SaveGameFileReader.cpp \
 	SaveGameFileWriter.cpp \

Modified: rl/branches/persistence/core/src/SaveAbleManager.cpp
===================================================================
--- rl/branches/persistence/core/src/SaveAbleManager.cpp	2008-10-19 10:40:21 UTC (rev 4558)
+++ rl/branches/persistence/core/src/SaveAbleManager.cpp	2008-10-19 11:14:13 UTC (rev 4559)
@@ -16,4 +16,6 @@
 
 #include "stdinc.h"
 
-#include "SaveAbleManager.h"
\ No newline at end of file
+#include "SaveAbleManager.h"
+
+template<> rl::SaveAbleManager* Ogre::Singleton<rl::SaveAbleManager>::ms_Singleton = 0;
\ No newline at end of file

Added: rl/branches/persistence/core/src/SaveAbleSerializer.cpp
===================================================================
--- rl/branches/persistence/core/src/SaveAbleSerializer.cpp	2008-10-19 10:40:21 UTC (rev 4558)
+++ rl/branches/persistence/core/src/SaveAbleSerializer.cpp	2008-10-19 11:14:13 UTC (rev 4559)
@@ -0,0 +1,23 @@
+/* This source file is part of Rastullahs Lockenpracht.
+ * Copyright (C) 2003-2008 Team Pantheon. http://www.team-pantheon.de
+ * 
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the Clarified Artistic License.
+ *
+ *  This program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  Clarified Artistic License for more details.
+ *
+ *  You should have received a copy of the Clarified Artistic License
+ *  along with this program; if not you can get it here
+ *  http://www.jpaulmorrison.com/fbp/artistic2.htm.
+ */
+
+#include "stdinc.h"
+
+#include "SaveAbleSerializer.h"
+
+namespace rl
+{
+}
\ No newline at end of file



From fusion2 at mail.berlios.de  Sun Oct 19 13:50:38 2008
From: fusion2 at mail.berlios.de (fusion2 at mail.berlios.de)
Date: Sun, 19 Oct 2008 13:50:38 +0200
Subject: [Dsa-hl-svn] r4560 - rl/trunk/editors/Lockenwickler/src
Message-ID: <200810191150.m9JBochM030118@sheep.berlios.de>

Author: fusion2
Date: 2008-10-19 13:49:37 +0200 (Sun, 19 Oct 2008)
New Revision: 4560

Added:
   rl/trunk/editors/Lockenwickler/src/setup.py
Modified:
   rl/trunk/editors/Lockenwickler/src/Lockenwickler.py
   rl/trunk/editors/Lockenwickler/src/PreferencesDialog.py
Log:
- minor fix for windows
- added a setup file for generating a windows binary using py2exe

Modified: rl/trunk/editors/Lockenwickler/src/Lockenwickler.py
===================================================================
--- rl/trunk/editors/Lockenwickler/src/Lockenwickler.py	2008-10-19 11:14:13 UTC (rev 4559)
+++ rl/trunk/editors/Lockenwickler/src/Lockenwickler.py	2008-10-19 11:49:37 UTC (rev 4560)
@@ -1,464 +1,464 @@
-#################################################
- # Copyright (C) 2008  Stefan Stammberger
- #
- # This library is free software; you can redistribute it and/or
- # modify it under the terms of the GNU Lesser General Public
- # License as published by the Free Software Foundation; either
- # version 2.1 of the License, or (at your option) any later version.
- #
- # This library is distributed in the hope that it will be useful,
- # but WITHOUT ANY WARRANTY; without even the implied warranty of
- # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
- # Lesser General Public License for more details.
- #
- # You should have received a copy of the GNU Lesser General Public
- # License along with this library; if not, write to the Free Software
- # Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
- #################################################
-
-
-import os
-import sys
-import platform
-
-sys.path.insert(0,'..')
-import PythonOgreConfig
-
-from random import randint
-from os.path import isfile
-
-from PyQt4 import QtGui, QtCore
-from PreferencesDialog import *
-from ObjectPropertyWin import *
-from ModelSelectionDialog import *
-from ConsoleWindow import *
-from ModuleManager import *
-from SceneExplorer import *
-
-import OgreMainWindow
-import ogre.renderer.OGRE as og
-
-class Lockenwickler(QtGui.QMainWindow):
-    def __init__(self, parent=None):
-        QtGui.QWidget.__init__(self, parent)
-
-        self.setupUi()
-
-        self.consoleWindow = ConsoleWindow(True,  self)
-
-        self.setupOgre()
-
-        self.prefDialog = PreferencesDialog(self.loadModule, self)
-        self.objectPropertyWin = ObjectPropertyWin(self)
-        self.sceneExplorerWin = SceneExplorer(self)
-        self.modelSelectionDialog = ModelSelectionDialog(self.ogreRoot, self)
-
-        self.createDockWindows()
-
-        self.mainTimer = QtCore.QTimer(self)
-        self.mainTimer.connect(self.mainTimer, QtCore.SIGNAL("timeout()"), self.update)
-        self.mainTimer.start(5)
-
-        settings = QtCore.QSettings()
-        self.restoreGeometry(settings.value("MainWindow/Geometry").toByteArray())
-        self.restoreState(settings.value("MainWindow/DockWindows").toByteArray())
-
-        self.setWindowTitle("Rastullahs Lockenwickler")
-#        # Import Psyco if available
-#        try:
-#            import psyco
-#            psyco.full()
-#            #psyco.log()
-#            #psyco.profile()
-#        except ImportError:
-#            pass
-
-        #QtGui.QApplication.setKeyboardInputInterval(5000)
-
-    def createAction(self, text, slot=None, shortcut=None, icon=None, tip=None, checkable=False, signal="triggered()"):
-        action = QtGui.QAction(text, self)
-        if icon is not None:
-            action.setIcon(QtGui.QIcon("media/icons/%s" % icon))
-        if shortcut is not None:
-            action.setShortcut(shortcut)
-        if tip is not None:
-            action.setToolTip(tip)
-            action.setStatusTip(tip)
-        if slot is not None:
-            self.connect(action, QtCore.SIGNAL(signal), slot)
-
-        action.setCheckable(checkable)
-
-        return action
-
-    def addActions(self, target, actions):
-        for act in actions:
-            if act is None:
-               target.addSeparator()
-            else:
-                target.addAction(act)
-
-    def setupUi(self):
-        self.setObjectName("MainWindow")
-
-        self.centralwidget = QtGui.QWidget(self)
-        self.centralwidget.setObjectName("centralwidget")
-
-        self.hboxlayout = QtGui.QHBoxLayout(self.centralwidget)
-        self.hboxlayout.setObjectName("hboxlayout")
-
-        self.gridlayout = QtGui.QGridLayout()
-        self.gridlayout.setObjectName("gridlayout")
-
-        self.menubar = QtGui.QMenuBar(self)
-        self.menubar.setObjectName("menubar")
-
-        self.menuFile = QtGui.QMenu(self.menubar)
-        self.menuFile.setObjectName("menuFile")
-
-        self.menuEdit = QtGui.QMenu(self.menubar)
-        self.menuEdit.setObjectName("menuEdit")
-
-        self.menuView = QtGui.QMenu(self.menubar)
-        self.menuView.setObjectName("menuView")
-        self.setMenuBar(self.menubar)
-
-
-        self.statusbar = QtGui.QStatusBar(self)
-        self.statusbar.setObjectName("statusbar")
-        self.setStatusBar(self.statusbar)
-
-#####################################
-        self.actionNeu =self.createAction("&New",  self.actionNewSlot,  QKeySequence.New,  "filenew.png",  "New")
-        self.actionNeu.setObjectName("actionNeu")
-
-        self.actionClose = self.createAction("Quit",  self.actionQuitSlot,  "Alt + Q",  "exit.png",  "Quit")
-        self.actionClose.setObjectName("actionQuit")
-#####################################
-
-
-#####################################
-        self.actionDelete = self.createAction("Delete",  self.actionDeleteSlot,  QKeySequence.Delete,  "editdelete.png",  "Delete")
-        self.actionDelete.setObjectName("actionDelete")
-
-        self.actionCopy = self.createAction("Copy",  self.actionCopySlot,  QKeySequence.Copy,  "editcopy.png",  "Copy")
-        self.actionCopy.setObjectName("actionCopy")
-
-        self.actionCut = self.createAction("Cut",  self.actionCutSlot,  QKeySequence.Cut,  "editcut.png",  "Cut")
-        self.actionCut.setObjectName("actionCut")
-
-        self.actionPaste = self.createAction("Paste",  self.actionPasteSlot,  QKeySequence.Paste,  "editpaste.png",  "Paste")
-        self.actionPaste.setObjectName("actionPaste")
-
-        self.actionMove = self.createAction("&Move",  self.actionMoveSlot,  "g",  "move.png",  "Move selected object")
-        self.actionMove.setObjectName("actionMove")
-
-        self.actionRotate = self.createAction("&Rotate",  self.actionRotateSlot,  "r",  "rotate.png",  "Rotate selected object")
-        self.actionRotate.setObjectName("actionRotate")
-
-        self.actionScale = self.createAction("&Scale",  self.actionScaleSlot,  "x",  "resizecol.png",  "Scale selected object")
-        self.actionRotate.setObjectName("actionRotate")
-
-
-#####################################
-#####################################
-        self.actionSceneExplorer = self.createAction("&Scene Exlporer",  self.toggleSceneExplorer,  "Alt + E",  "view_tree.png",  "Scene Explorer",  False)
-        self.actionSceneExplorer.setObjectName("actionSceneExplorer")
-
-        self.actionPreferences = self.createAction("&Preferences",  self.togglePreferencesWindow,  "Alt + P",  "configure.png",  "Lockenwickler Preferences",  False)
-        self.actionPreferences.setObjectName("actionPreferences")
-
-        self.actionProperty_Window = self.createAction("Pr&operty Window",  self.togglePropertyWindow,  "Alt + P",  "unsortedlist1.png",  "Property Window")
-        self.actionProperty_Window.setObjectName("actionProperty_Window")
-
-        self.actionObject_Selection = self.createAction("&Model Preview Window",  self.toggleModelPreviewWindow,  "Alt + O",  "tux.png",  "Model Preview")
-        self.actionObject_Selection.setObjectName("actionObject_Selection")
-
-        self.actionConsole_Window = self.createAction("&Console Window",  self.toggleConsoleWindow,  "Alt + C",  "console.png",  "Console Window")
-        self.actionConsole_Window.setObjectName("actionConsole_Window")
-
-#####################################
-#####################################
-
-
-        self.menuFile.addAction(self.actionNeu)
-        self.menuFile.addAction(self.actionClose)
-
-        self.menuEdit.addAction(self.actionMove)
-        self.menuEdit.addAction(self.actionRotate)
-        self.menuEdit.addAction(self.actionScale)
-        self.menuEdit.addSeparator()
-        self.menuEdit.addAction(self.actionDelete)
-        self.menuEdit.addAction(self.actionCopy)
-        self.menuEdit.addAction(self.actionCut)
-        self.menuEdit.addAction(self.actionPaste)
-
-        self.menuView.addAction(self.actionSceneExplorer)
-        self.menuView.addAction(self.actionPreferences)
-        self.menuView.addAction(self.actionProperty_Window)
-        self.menuView.addAction(self.actionObject_Selection)
-        self.menuView.addAction(self.actionConsole_Window)
-        self.menubar.addAction(self.menuFile.menuAction())
-        self.menubar.addAction(self.menuEdit.menuAction())
-        self.menubar.addAction(self.menuView.menuAction())
-
-        self.retranslateUi()
-        QtCore.QMetaObject.connectSlotsByName(self)
-
-    def retranslateUi(self):
-        self.setWindowTitle(QtGui.QApplication.translate("MainWindow", "MainWindow", None, QtGui.QApplication.UnicodeUTF8))
-        self.menuFile.setTitle(QtGui.QApplication.translate("MainWindow", "File", None, QtGui.QApplication.UnicodeUTF8))
-        self.menuEdit.setTitle(QtGui.QApplication.translate("MainWindow", "Edit", None, QtGui.QApplication.UnicodeUTF8))
-        self.menuView.setTitle(QtGui.QApplication.translate("MainWindow", "View", None, QtGui.QApplication.UnicodeUTF8))
-        self.actionNeu.setText(QtGui.QApplication.translate("MainWindow", "New", None, QtGui.QApplication.UnicodeUTF8))
-        self.actionMove.setText(QtGui.QApplication.translate("MainWindow", "Move", None, QtGui.QApplication.UnicodeUTF8))
-        self.actionRotate.setText(QtGui.QApplication.translate("MainWindow", "Rotate", None, QtGui.QApplication.UnicodeUTF8))
-        self.actionSceneExplorer.setText(QtGui.QApplication.translate("MainWindow", "Scene Explorer", None, QtGui.QApplication.UnicodeUTF8))
-        self.actionPreferences.setText(QtGui.QApplication.translate("MainWindow", "Preferences", None, QtGui.QApplication.UnicodeUTF8))
-        self.actionProperty_Window.setText(QtGui.QApplication.translate("MainWindow", "Property Window", None, QtGui.QApplication.UnicodeUTF8))
-        self.actionObject_Selection.setText(QtGui.QApplication.translate("MainWindow", "Object Selection", None, QtGui.QApplication.UnicodeUTF8))
-        self.actionClose.setText(QtGui.QApplication.translate("MainWindow", "Quit", None, QtGui.QApplication.UnicodeUTF8))
-        self.actionConsole_Window.setText(QtGui.QApplication.translate("MainWindow", "Console Window", None, QtGui.QApplication.UnicodeUTF8))
-
-    def setupOgre(self, pluginCfgPath="./Plugins.cfg", ogreCfgPath="./ogre.cfg", logPath="./ogre.log"):
-        if platform.system() == "Windows":
-            pluginCfgPath="./Plugins-windows.cfg"
-        else:
-            pluginCfgPath="./Plugins-linux.cfg"
-
-        root = og.Root(pluginCfgPath, ogreCfgPath, logPath)
-        self.ogreRoot = root
-
-        if  not self.ogreRoot.restoreConfig() and not self.ogreRoot.showConfigDialog():
-            sys.exit('Quit from Config Dialog')
-
-        root.initialise(False)
-
-        self.OgreMainWinSceneMgr = self.ogreRoot.createSceneManager(og.ST_GENERIC, "OgreMainWinSceneMgr")
-        self.OgreMainWinSceneMgr.ambientLight = og.ColourValue(4, 4, 4)
-
-        self.moduleName = ""
-        self.moduleManager = ModuleManager(self.ogreRoot,  self.OgreMainWinSceneMgr)
-
-        self.ogreRenderWindow = OgreMainWindow.OgreMainWindow(self.moduleManager,  root,  self.OgreMainWinSceneMgr,  self)
-        self.gridlayout.addWidget(self.ogreRenderWindow,0,0,1,1)
-        self.hboxlayout.addLayout(self.gridlayout)
-        self.setCentralWidget(self.centralwidget)
-
-        og.ResourceGroupManager.getSingleton().addResourceLocation("./media", "FileSystem", "General", False)
-        og.ResourceGroupManager.getSingleton().initialiseAllResourceGroups()
-
-        oglog = og.LogManager.getSingleton().getDefaultLog()
-        oglog.addListener(self.consoleWindow.lockenLog)
-
-    def update(self):
-#        try:
-#            self.OgreMainWinSceneMgr.getSceneNode("saeule_076_node").yaw(0.02)
-#        except Exception,  e:
-#            pass
-
-        self.ogreRoot.renderOneFrame()
-
-    def actionNewSlot(self):
-        print "dbg: new"
-        return
-
-    def actionQuitSlot(self):
-        self.close()
-
-    def actionDeleteSlot(self):
-        self.moduleManager.deleteObjects()
-
-    def actionCopySlot(self):
-        self.moduleManager.copyObjects()
-
-    def actionCutSlot(self):
-        self.moduleManager.cutObjects()
-
-    def actionPasteSlot(self):
-        self.moduleManager.pasteObjects(self.ogreRenderWindow.getCameraToViewportRay())
-
-    def actionMoveSlot(self):
-        self.moduleManager.pivot.setMoveMode()
-
-    def actionRotateSlot(self):
-        self.moduleManager.pivot.setRotateMode()
-
-    def actionScaleSlot(self):
-        self.moduleManager.pivot.setScaleMode()
-
-    def togglePreferencesWindow(self):
-        if self.prefDialog.isHidden():
-            self.prefDialog.show()
-        else:
-            self.prefDialog.hide()
-
-    def toggleModelPreviewWindow(self):
-        if self.modelSelectionDock.isHidden():
-            self.modelSelectionDock.show()
-        else:
-            self.modelSelectionDock.hide()
-
-    def toggleSceneExplorer(self):
-        if self.sceneExplorerDock.isHidden():
-            self.sceneExplorerDock.show()
-        else:
-            self.sceneExplorerDock.hide()
-
-    def togglePropertyWindow(self):
-        if self.propertyDock.isHidden():
-            self.propertyDock.show()
-        else:
-            self.propertyDock.hide()
-
-    def toggleConsoleWindow(self):
-        if self.consoleDock.isHidden():
-            self.consoleDock.show()
-        else:
-            self.consoleDock.hide()
-
-    # parses the moduleconfig.rb and searches for all loader.loadmap(" statements in the ruby script
-    # and parses them too
-    def loadModule(self, modulePath, moduleName):
-        if self.moduleName == moduleName:
-            return
-
-        self.moduleName = moduleName
-        self.workingDir = modulePath + moduleName # the module path
-        self.workingDirCommon = modulePath + "common" # the module path of the common module
-
-        import codecs
-        import glob
-
-        modConfig = self.workingDir + "/scripts/moduleconfig.rb"
-        if isfile(modConfig): # is the modconfig existing?
-            f = codecs.open(modConfig, 'r', 'utf-8')
-        else:
-            print ("Error: couldn't find module config")
-            pass
-
-        self.mapFiles = [] # a list in case the module has more than one map file
-
-        for line in f:
-            lStripped = line.strip() #strip the whitespace away, not needed here
-
-            # get the map file(s)
-            if lStripped.startswith("loader.loadMap("): # all loadMap commands begin with loader.loadMap(
-                spl = lStripped.split('"')
-                for a in spl:
-                    if a.endswith(".xml"):
-                        pathToMapFile = self.workingDir + "/maps/" + a
-                        self.mapFiles.append(pathToMapFile)
-
-        self.setWindowTitle(moduleName)
-
-        self.modelSelectionDialog.scanDirForModels(self.workingDir, moduleName)
-        self.modelSelectionDialog.scanDirForModels(self.workingDirCommon, "common")
-
-        self.setResourcePaths(self.workingDir, moduleName)
-        self.setResourcePaths(self.workingDirCommon, "common")
-        og.ResourceGroupManager.getSingleton().initialiseAllResourceGroups()
-
-        command = (os.path.join(self.workingDir,  "maps") + "/*.xml")
-        for mf in glob.glob(command): # search for all xml files in the maps directory and add them
-            self.mapFiles.append(mf)
-
-        command = (os.path.join(self.workingDir,  "maps") + "/*.scene")
-        for mf in glob.glob(command): # search for all xml files in the maps directory and add them
-            self.mapFiles.append(mf)
-
-        self.moduleManager.load(moduleName,  self.mapFiles)
-
-    def setResourcePaths(self, path, moduleName):
-        for file in os.listdir(path):
-            curFile = path + "/" + file
-
-            if file.startswith('.'): #ignore dot files (hidden)
-                continue
-            if isdir(curFile):
-                og.ResourceGroupManager.getSingleton().addResourceLocation(curFile, "FileSystem", moduleName, False)
-                self.setResourcePaths(curFile, moduleName)
-                continue
-            if isfile(curFile):
-                pass
-
-    def createDockWindows(self):
-        self.propertyDock = QtGui.QDockWidget(self.tr("Properties"), self)
-        self.propertyDock.setObjectName("PropertyDockWindow")
-        self.propertyDock.setAllowedAreas(QtCore.Qt.LeftDockWidgetArea | QtCore.Qt.RightDockWidgetArea)
-        self.propertyDock.setWidget(self.objectPropertyWin)
-        self.addDockWidget(QtCore.Qt.LeftDockWidgetArea, self.propertyDock)
-
-        self.modelSelectionDock = QtGui.QDockWidget(self.tr("Models"), self)
-        self.modelSelectionDock.setObjectName("ModelSelectionDockWindow")
-        self.modelSelectionDock.setAllowedAreas(QtCore.Qt.LeftDockWidgetArea | QtCore.Qt.RightDockWidgetArea)
-        self.modelSelectionDock.setWidget(self.modelSelectionDialog)
-        self.addDockWidget(QtCore.Qt.RightDockWidgetArea, self.modelSelectionDock)
-
-        self.sceneExplorerDock = QtGui.QDockWidget(self.tr("Scene Explorer"), self)
-        self.sceneExplorerDock.setObjectName("SceneExplorerDockWindow")
-        self.sceneExplorerDock.setAllowedAreas(QtCore.Qt.LeftDockWidgetArea | QtCore.Qt.RightDockWidgetArea)
-        self.sceneExplorerDock.setWidget(self.sceneExplorerWin)
-        self.addDockWidget(QtCore.Qt.LeftDockWidgetArea, self.sceneExplorerDock)
-
-        self.consoleDock = QtGui.QDockWidget(self.tr("Console"), self)
-        self.consoleDock.setObjectName("ConsoleDockWindow")
-        self.consoleDock.setAllowedAreas(QtCore.Qt.BottomDockWidgetArea | QtCore.Qt.TopDockWidgetArea)
-        self.consoleDock.setWidget(self.consoleWindow)
-        self.addDockWidget(QtCore.Qt.BottomDockWidgetArea, self.consoleDock)
-
-        self.fileToolBar = self.addToolBar("File Toolbar")
-        self.fileToolBar.setObjectName("FileToolBar")
-        self.fileToolBar.setAllowedAreas(QtCore.Qt.TopToolBarArea | QtCore.Qt.BottomToolBarArea)
-        self.fileToolBar.addAction(self.actionNeu)
-        self.fileToolBar.addAction(self.actionClose)
-        self.addToolBar(QtCore.Qt.TopToolBarArea, self.fileToolBar)
-
-        self.moveToolBar = self.addToolBar("Transformation Bar")
-        self.moveToolBar.setObjectName("TransformationBar")
-        self.moveToolBar.setAllowedAreas(QtCore.Qt.TopToolBarArea | QtCore.Qt.BottomToolBarArea)
-        self.moveToolBar.addAction(self.actionMove)
-        self.moveToolBar.addAction(self.actionRotate)
-        self.moveToolBar.addAction(self.actionScale)
-        self.addToolBar(QtCore.Qt.TopToolBarArea, self.moveToolBar)
-
-    def keyPressEvent(self,  event):
-        if not event.isAutoRepeat():
-            self.ogreRenderWindow.keyPressEvent(event)
-
-    def keyReleaseEvent(self,  event):
-        if not event.isAutoRepeat():
-            self.ogreRenderWindow.keyReleaseEvent(event)
-        pass
-
-    def connectActionButtons(self):
-        pass
-
-    def saveOnClose(self):
-        reply = QtGui.QMessageBox.question(self,  "Rastullahs Lockenwickler - Unsaved Chages",  "Save unsaved changes?",  QtGui.QMessageBox.Yes|QtGui.QMessageBox.No|QtGui.QMessageBox.Cancel)
-        if reply == QtGui.QMessageBox.Cancel:
-            return False
-        if reply == QtGui.QMessageBox.Yes:
-            print""
-            #TODO: implement save here
-        return True
-
-    def closeEvent(self,  event):
-        if self.saveOnClose():
-            settings = QtCore.QSettings()
-            settings.setValue("MainWindow/Geometry",  QtCore.QVariant(self.saveGeometry()))
-            settings.setValue("MainWIndow/DockWindows",  QtCore.QVariant(self.saveState()))
-        else:
-            event.ignore()
-
-if __name__ == "__main__":
-    app = QtGui.QApplication(sys.argv)
-    app.setOrganizationName("Team Pantheon")
-    app.setOrganizationDomain("rastullahs-lockenpracht.de/team")
-    app.setApplicationName("Lockenwickler")
-
-    form = Lockenwickler()
-    form.show()
-
-    sys.exit(app.exec_())
-
+#################################################
+ # Copyright (C) 2008  Stefan Stammberger
+ #
+ # This library is free software; you can redistribute it and/or
+ # modify it under the terms of the GNU Lesser General Public
+ # License as published by the Free Software Foundation; either
+ # version 2.1 of the License, or (at your option) any later version.
+ #
+ # This library is distributed in the hope that it will be useful,
+ # but WITHOUT ANY WARRANTY; without even the implied warranty of
+ # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ # Lesser General Public License for more details.
+ #
+ # You should have received a copy of the GNU Lesser General Public
+ # License along with this library; if not, write to the Free Software
+ # Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ #################################################
+
+
+import os
+import sys
+import platform
+
+sys.path.insert(0,'..')
+import PythonOgreConfig
+
+from random import randint
+from os.path import isfile
+
+from PyQt4 import QtGui, QtCore
+from PreferencesDialog import *
+from ObjectPropertyWin import *
+from ModelSelectionDialog import *
+from ConsoleWindow import *
+from ModuleManager import *
+from SceneExplorer import *
+
+import OgreMainWindow
+import ogre.renderer.OGRE as og
+
+class Lockenwickler(QtGui.QMainWindow):
+    def __init__(self, parent=None):
+        QtGui.QWidget.__init__(self, parent)
+
+        self.setupUi()
+
+        self.consoleWindow = ConsoleWindow(True,  self)
+
+        self.setupOgre()
+
+        self.prefDialog = PreferencesDialog(self.loadModule, self)
+        self.objectPropertyWin = ObjectPropertyWin(self)
+        self.sceneExplorerWin = SceneExplorer(self)
+        self.modelSelectionDialog = ModelSelectionDialog(self.ogreRoot, self)
+
+        self.createDockWindows()
+
+        self.mainTimer = QtCore.QTimer(self)
+        self.mainTimer.connect(self.mainTimer, QtCore.SIGNAL("timeout()"), self.update)
+        self.mainTimer.start(5)
+
+        settings = QtCore.QSettings()
+        self.restoreGeometry(settings.value("MainWindow/Geometry").toByteArray())
+        self.restoreState(settings.value("MainWindow/DockWindows").toByteArray())
+
+        self.setWindowTitle("Rastullahs Lockenwickler")
+#        # Import Psyco if available
+#        try:
+#            import psyco
+#            psyco.full()
+#            #psyco.log()
+#            #psyco.profile()
+#        except ImportError:
+#            pass
+
+        #QtGui.QApplication.setKeyboardInputInterval(5000)
+
+    def createAction(self, text, slot=None, shortcut=None, icon=None, tip=None, checkable=False, signal="triggered()"):
+        action = QtGui.QAction(text, self)
+        if icon is not None:
+            action.setIcon(QtGui.QIcon("media/icons/%s" % icon))
+        if shortcut is not None:
+            action.setShortcut(shortcut)
+        if tip is not None:
+            action.setToolTip(tip)
+            action.setStatusTip(tip)
+        if slot is not None:
+            self.connect(action, QtCore.SIGNAL(signal), slot)
+
+        action.setCheckable(checkable)
+
+        return action
+
+    def addActions(self, target, actions):
+        for act in actions:
+            if act is None:
+               target.addSeparator()
+            else:
+                target.addAction(act)
+
+    def setupUi(self):
+        self.setObjectName("MainWindow")
+
+        self.centralwidget = QtGui.QWidget(self)
+        self.centralwidget.setObjectName("centralwidget")
+
+        self.hboxlayout = QtGui.QHBoxLayout(self.centralwidget)
+        self.hboxlayout.setObjectName("hboxlayout")
+
+        self.gridlayout = QtGui.QGridLayout()
+        self.gridlayout.setObjectName("gridlayout")
+
+        self.menubar = QtGui.QMenuBar(self)
+        self.menubar.setObjectName("menubar")
+
+        self.menuFile = QtGui.QMenu(self.menubar)
+        self.menuFile.setObjectName("menuFile")
+
+        self.menuEdit = QtGui.QMenu(self.menubar)
+        self.menuEdit.setObjectName("menuEdit")
+
+        self.menuView = QtGui.QMenu(self.menubar)
+        self.menuView.setObjectName("menuView")
+        self.setMenuBar(self.menubar)
+
+
+        self.statusbar = QtGui.QStatusBar(self)
+        self.statusbar.setObjectName("statusbar")
+        self.setStatusBar(self.statusbar)
+
+#####################################
+        self.actionNeu =self.createAction("&New",  self.actionNewSlot,  QKeySequence.New,  "filenew.png",  "New")
+        self.actionNeu.setObjectName("actionNeu")
+
+        self.actionClose = self.createAction("Quit",  self.actionQuitSlot,  "Alt + Q",  "exit.png",  "Quit")
+        self.actionClose.setObjectName("actionQuit")
+#####################################
+
+
+#####################################
+        self.actionDelete = self.createAction("Delete",  self.actionDeleteSlot,  QKeySequence.Delete,  "editdelete.png",  "Delete")
+        self.actionDelete.setObjectName("actionDelete")
+
+        self.actionCopy = self.createAction("Copy",  self.actionCopySlot,  QKeySequence.Copy,  "editcopy.png",  "Copy")
+        self.actionCopy.setObjectName("actionCopy")
+
+        self.actionCut = self.createAction("Cut",  self.actionCutSlot,  QKeySequence.Cut,  "editcut.png",  "Cut")
+        self.actionCut.setObjectName("actionCut")
+
+        self.actionPaste = self.createAction("Paste",  self.actionPasteSlot,  QKeySequence.Paste,  "editpaste.png",  "Paste")
+        self.actionPaste.setObjectName("actionPaste")
+
+        self.actionMove = self.createAction("&Move",  self.actionMoveSlot,  "g",  "move.png",  "Move selected object")
+        self.actionMove.setObjectName("actionMove")
+
+        self.actionRotate = self.createAction("&Rotate",  self.actionRotateSlot,  "r",  "rotate.png",  "Rotate selected object")
+        self.actionRotate.setObjectName("actionRotate")
+
+        self.actionScale = self.createAction("&Scale",  self.actionScaleSlot,  "x",  "resizecol.png",  "Scale selected object")
+        self.actionRotate.setObjectName("actionRotate")
+
+
+#####################################
+#####################################
+        self.actionSceneExplorer = self.createAction("&Scene Exlporer",  self.toggleSceneExplorer,  "Alt + E",  "view_tree.png",  "Scene Explorer",  False)
+        self.actionSceneExplorer.setObjectName("actionSceneExplorer")
+
+        self.actionPreferences = self.createAction("&Preferences",  self.togglePreferencesWindow,  "Alt + P",  "configure.png",  "Lockenwickler Preferences",  False)
+        self.actionPreferences.setObjectName("actionPreferences")
+
+        self.actionProperty_Window = self.createAction("Pr&operty Window",  self.togglePropertyWindow,  "Alt + P",  "unsortedlist1.png",  "Property Window")
+        self.actionProperty_Window.setObjectName("actionProperty_Window")
+
+        self.actionObject_Selection = self.createAction("&Model Preview Window",  self.toggleModelPreviewWindow,  "Alt + O",  "tux.png",  "Model Preview")
+        self.actionObject_Selection.setObjectName("actionObject_Selection")
+
+        self.actionConsole_Window = self.createAction("&Console Window",  self.toggleConsoleWindow,  "Alt + C",  "console.png",  "Console Window")
+        self.actionConsole_Window.setObjectName("actionConsole_Window")
+
+#####################################
+#####################################
+
+
+        self.menuFile.addAction(self.actionNeu)
+        self.menuFile.addAction(self.actionClose)
+
+        self.menuEdit.addAction(self.actionMove)
+        self.menuEdit.addAction(self.actionRotate)
+        self.menuEdit.addAction(self.actionScale)
+        self.menuEdit.addSeparator()
+        self.menuEdit.addAction(self.actionDelete)
+        self.menuEdit.addAction(self.actionCopy)
+        self.menuEdit.addAction(self.actionCut)
+        self.menuEdit.addAction(self.actionPaste)
+
+        self.menuView.addAction(self.actionSceneExplorer)
+        self.menuView.addAction(self.actionPreferences)
+        self.menuView.addAction(self.actionProperty_Window)
+        self.menuView.addAction(self.actionObject_Selection)
+        self.menuView.addAction(self.actionConsole_Window)
+        self.menubar.addAction(self.menuFile.menuAction())
+        self.menubar.addAction(self.menuEdit.menuAction())
+        self.menubar.addAction(self.menuView.menuAction())
+
+        self.retranslateUi()
+        QtCore.QMetaObject.connectSlotsByName(self)
+
+    def retranslateUi(self):
+        self.setWindowTitle(QtGui.QApplication.translate("MainWindow", "MainWindow", None, QtGui.QApplication.UnicodeUTF8))
+        self.menuFile.setTitle(QtGui.QApplication.translate("MainWindow", "File", None, QtGui.QApplication.UnicodeUTF8))
+        self.menuEdit.setTitle(QtGui.QApplication.translate("MainWindow", "Edit", None, QtGui.QApplication.UnicodeUTF8))
+        self.menuView.setTitle(QtGui.QApplication.translate("MainWindow", "View", None, QtGui.QApplication.UnicodeUTF8))
+        self.actionNeu.setText(QtGui.QApplication.translate("MainWindow", "New", None, QtGui.QApplication.UnicodeUTF8))
+        self.actionMove.setText(QtGui.QApplication.translate("MainWindow", "Move", None, QtGui.QApplication.UnicodeUTF8))
+        self.actionRotate.setText(QtGui.QApplication.translate("MainWindow", "Rotate", None, QtGui.QApplication.UnicodeUTF8))
+        self.actionSceneExplorer.setText(QtGui.QApplication.translate("MainWindow", "Scene Explorer", None, QtGui.QApplication.UnicodeUTF8))
+        self.actionPreferences.setText(QtGui.QApplication.translate("MainWindow", "Preferences", None, QtGui.QApplication.UnicodeUTF8))
+        self.actionProperty_Window.setText(QtGui.QApplication.translate("MainWindow", "Property Window", None, QtGui.QApplication.UnicodeUTF8))
+        self.actionObject_Selection.setText(QtGui.QApplication.translate("MainWindow", "Object Selection", None, QtGui.QApplication.UnicodeUTF8))
+        self.actionClose.setText(QtGui.QApplication.translate("MainWindow", "Quit", None, QtGui.QApplication.UnicodeUTF8))
+        self.actionConsole_Window.setText(QtGui.QApplication.translate("MainWindow", "Console Window", None, QtGui.QApplication.UnicodeUTF8))
+
+    def setupOgre(self, pluginCfgPath="./Plugins.cfg", ogreCfgPath="./ogre.cfg", logPath="./ogre.log"):
+        if platform.system() == "Windows":
+            pluginCfgPath="./Plugins-windows.cfg"
+        else:
+            pluginCfgPath="./Plugins-linux.cfg"
+
+        root = og.Root(pluginCfgPath, ogreCfgPath, logPath)
+        self.ogreRoot = root
+
+        if  not self.ogreRoot.restoreConfig() and not self.ogreRoot.showConfigDialog():
+            sys.exit('Quit from Config Dialog')
+
+        root.initialise(False)
+
+        self.OgreMainWinSceneMgr = self.ogreRoot.createSceneManager(og.ST_GENERIC, "OgreMainWinSceneMgr")
+        self.OgreMainWinSceneMgr.ambientLight = og.ColourValue(4, 4, 4)
+
+        self.moduleName = ""
+        self.moduleManager = ModuleManager(self.ogreRoot,  self.OgreMainWinSceneMgr)
+
+        self.ogreRenderWindow = OgreMainWindow.OgreMainWindow(self.moduleManager,  root,  self.OgreMainWinSceneMgr,  self)
+        self.gridlayout.addWidget(self.ogreRenderWindow,0,0,1,1)
+        self.hboxlayout.addLayout(self.gridlayout)
+        self.setCentralWidget(self.centralwidget)
+
+        og.ResourceGroupManager.getSingleton().addResourceLocation("./media", "FileSystem", "General", False)
+        og.ResourceGroupManager.getSingleton().initialiseAllResourceGroups()
+
+        oglog = og.LogManager.getSingleton().getDefaultLog()
+        oglog.addListener(self.consoleWindow.lockenLog)
+
+    def update(self):
+#        try:
+#            self.OgreMainWinSceneMgr.getSceneNode("saeule_076_node").yaw(0.02)
+#        except Exception,  e:
+#            pass
+
+        self.ogreRoot.renderOneFrame()
+
+    def actionNewSlot(self):
+        print "dbg: new"
+        return
+
+    def actionQuitSlot(self):
+        self.close()
+
+    def actionDeleteSlot(self):
+        self.moduleManager.deleteObjects()
+
+    def actionCopySlot(self):
+        self.moduleManager.copyObjects()
+
+    def actionCutSlot(self):
+        self.moduleManager.cutObjects()
+
+    def actionPasteSlot(self):
+        self.moduleManager.pasteObjects(self.ogreRenderWindow.getCameraToViewportRay())
+
+    def actionMoveSlot(self):
+        self.moduleManager.pivot.setMoveMode()
+
+    def actionRotateSlot(self):
+        self.moduleManager.pivot.setRotateMode()
+
+    def actionScaleSlot(self):
+        self.moduleManager.pivot.setScaleMode()
+
+    def togglePreferencesWindow(self):
+        if self.prefDialog.isHidden():
+            self.prefDialog.show()
+        else:
+            self.prefDialog.hide()
+
+    def toggleModelPreviewWindow(self):
+        if self.modelSelectionDock.isHidden():
+            self.modelSelectionDock.show()
+        else:
+            self.modelSelectionDock.hide()
+
+    def toggleSceneExplorer(self):
+        if self.sceneExplorerDock.isHidden():
+            self.sceneExplorerDock.show()
+        else:
+            self.sceneExplorerDock.hide()
+
+    def togglePropertyWindow(self):
+        if self.propertyDock.isHidden():
+            self.propertyDock.show()
+        else:
+            self.propertyDock.hide()
+
+    def toggleConsoleWindow(self):
+        if self.consoleDock.isHidden():
+            self.consoleDock.show()
+        else:
+            self.consoleDock.hide()
+
+    # parses the moduleconfig.rb and searches for all loader.loadmap(" statements in the ruby script
+    # and parses them too
+    def loadModule(self, modulePath, moduleName):
+        if self.moduleName == moduleName:
+            return
+
+        self.moduleName = moduleName
+        self.workingDir = modulePath + moduleName # the module path
+        self.workingDirCommon = modulePath + "common" # the module path of the common module
+
+        import codecs
+        import glob
+
+        modConfig = self.workingDir + "/scripts/moduleconfig.rb"
+        if isfile(modConfig): # is the modconfig existing?
+            f = codecs.open(modConfig, 'r', 'utf-8')
+        else:
+            print ("Error: couldn't find module config")
+            pass
+
+        self.mapFiles = [] # a list in case the module has more than one map file
+
+        for line in f:
+            lStripped = line.strip() #strip the whitespace away, not needed here
+
+            # get the map file(s)
+            if lStripped.startswith("loader.loadMap("): # all loadMap commands begin with loader.loadMap(
+                spl = lStripped.split('"')
+                for a in spl:
+                    if a.endswith(".xml"):
+                        pathToMapFile = self.workingDir + "/maps/" + a
+                        self.mapFiles.append(pathToMapFile)
+
+        self.setWindowTitle(moduleName)
+
+        self.modelSelectionDialog.scanDirForModels(self.workingDir, moduleName)
+        self.modelSelectionDialog.scanDirForModels(self.workingDirCommon, "common")
+
+        self.setResourcePaths(self.workingDir, moduleName)
+        self.setResourcePaths(self.workingDirCommon, "common")
+        og.ResourceGroupManager.getSingleton().initialiseAllResourceGroups()
+
+        command = (os.path.join(self.workingDir,  "maps") + "/*.xml")
+        for mf in glob.glob(command): # search for all xml files in the maps directory and add them
+            self.mapFiles.append(mf)
+
+        command = (os.path.join(self.workingDir,  "maps") + "/*.scene")
+        for mf in glob.glob(command): # search for all xml files in the maps directory and add them
+            self.mapFiles.append(mf)
+
+        self.moduleManager.load(moduleName,  self.mapFiles)
+
+    def setResourcePaths(self, path, moduleName):
+        for file in os.listdir(path):
+            curFile = path + "/" + file
+
+            if file.startswith('.'): #ignore dot files (hidden)
+                continue
+            if isdir(curFile):
+                og.ResourceGroupManager.getSingleton().addResourceLocation(curFile, "FileSystem", moduleName, False)
+                self.setResourcePaths(curFile, moduleName)
+                continue
+            if isfile(curFile):
+                pass
+
+    def createDockWindows(self):
+        self.propertyDock = QtGui.QDockWidget(self.tr("Properties"), self)
+        self.propertyDock.setObjectName("PropertyDockWindow")
+        self.propertyDock.setAllowedAreas(QtCore.Qt.LeftDockWidgetArea | QtCore.Qt.RightDockWidgetArea)
+        self.propertyDock.setWidget(self.objectPropertyWin)
+        self.addDockWidget(QtCore.Qt.LeftDockWidgetArea, self.propertyDock)
+
+        self.modelSelectionDock = QtGui.QDockWidget(self.tr("Models"), self)
+        self.modelSelectionDock.setObjectName("ModelSelectionDockWindow")
+        self.modelSelectionDock.setAllowedAreas(QtCore.Qt.LeftDockWidgetArea | QtCore.Qt.RightDockWidgetArea)
+        self.modelSelectionDock.setWidget(self.modelSelectionDialog)
+        self.addDockWidget(QtCore.Qt.RightDockWidgetArea, self.modelSelectionDock)
+
+        self.sceneExplorerDock = QtGui.QDockWidget(self.tr("Scene Explorer"), self)
+        self.sceneExplorerDock.setObjectName("SceneExplorerDockWindow")
+        self.sceneExplorerDock.setAllowedAreas(QtCore.Qt.LeftDockWidgetArea | QtCore.Qt.RightDockWidgetArea)
+        self.sceneExplorerDock.setWidget(self.sceneExplorerWin)
+        self.addDockWidget(QtCore.Qt.LeftDockWidgetArea, self.sceneExplorerDock)
+
+        self.consoleDock = QtGui.QDockWidget(self.tr("Console"), self)
+        self.consoleDock.setObjectName("ConsoleDockWindow")
+        self.consoleDock.setAllowedAreas(QtCore.Qt.BottomDockWidgetArea | QtCore.Qt.TopDockWidgetArea)
+        self.consoleDock.setWidget(self.consoleWindow)
+        self.addDockWidget(QtCore.Qt.BottomDockWidgetArea, self.consoleDock)
+
+        self.fileToolBar = self.addToolBar("File Toolbar")
+        self.fileToolBar.setObjectName("FileToolBar")
+        self.fileToolBar.setAllowedAreas(QtCore.Qt.TopToolBarArea | QtCore.Qt.BottomToolBarArea)
+        self.fileToolBar.addAction(self.actionNeu)
+        self.fileToolBar.addAction(self.actionClose)
+        self.addToolBar(QtCore.Qt.TopToolBarArea, self.fileToolBar)
+
+        self.moveToolBar = self.addToolBar("Transformation Bar")
+        self.moveToolBar.setObjectName("TransformationBar")
+        self.moveToolBar.setAllowedAreas(QtCore.Qt.TopToolBarArea | QtCore.Qt.BottomToolBarArea)
+        self.moveToolBar.addAction(self.actionMove)
+        self.moveToolBar.addAction(self.actionRotate)
+        self.moveToolBar.addAction(self.actionScale)
+        self.addToolBar(QtCore.Qt.TopToolBarArea, self.moveToolBar)
+
+    def keyPressEvent(self,  event):
+        if not event.isAutoRepeat():
+            self.ogreRenderWindow.keyPressEvent(event)
+
+    def keyReleaseEvent(self,  event):
+        if not event.isAutoRepeat():
+            self.ogreRenderWindow.keyReleaseEvent(event)
+        pass
+
+    def connectActionButtons(self):
+        pass
+
+    def saveOnClose(self):
+        reply = QtGui.QMessageBox.question(self,  "Rastullahs Lockenwickler - Unsaved Chages",  "Save unsaved changes?",  QtGui.QMessageBox.Yes|QtGui.QMessageBox.No|QtGui.QMessageBox.Cancel)
+        if reply == QtGui.QMessageBox.Cancel:
+            return False
+        if reply == QtGui.QMessageBox.Yes:
+            print""
+            #TODO: implement save here
+        return True
+
+    def closeEvent(self,  event):
+        if self.saveOnClose():
+            settings = QtCore.QSettings()
+            settings.setValue("MainWindow/Geometry",  QtCore.QVariant(self.saveGeometry()))
+            settings.setValue("MainWIndow/DockWindows",  QtCore.QVariant(self.saveState()))
+        else:
+            event.ignore()
+
+if __name__ == "__main__":
+    app = QtGui.QApplication(sys.argv)
+    app.setOrganizationName("Team Pantheon")
+    app.setOrganizationDomain("rastullahs-lockenpracht.de/team")
+    app.setApplicationName("Lockenwickler")
+
+    form = Lockenwickler()
+    form.show()
+
+    sys.exit(app.exec_())
+

Modified: rl/trunk/editors/Lockenwickler/src/PreferencesDialog.py
===================================================================
--- rl/trunk/editors/Lockenwickler/src/PreferencesDialog.py	2008-10-19 11:14:13 UTC (rev 4559)
+++ rl/trunk/editors/Lockenwickler/src/PreferencesDialog.py	2008-10-19 11:49:37 UTC (rev 4560)
@@ -1,105 +1,106 @@
-#################################################
- # Copyright (C) 2008  Stefan Stammberger
- #
- # This library is free software; you can redistribute it and/or
- # modify it under the terms of the GNU Lesser General Public
- # License as published by the Free Software Foundation; either
- # version 2.1 of the License, or (at your option) any later version.
- #
- # This library is distributed in the hope that it will be useful,
- # but WITHOUT ANY WARRANTY; without even the implied warranty of
- # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
- # Lesser General Public License for more details.
- #
- # You should have received a copy of the GNU Lesser General Public
- # License along with this library; if not, write to the Free Software
- # Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
- #################################################
-
-
-import sys
-import platform
-import string
-from ui_pref_dialog import *
-
-class PreferencesDialog(QtGui.QDialog):
-    def __init__(self, loadModuleCallback, parent=None):
-        QtGui.QDialog.__init__(self, parent)
-
-        self.loadModuleCallback = loadModuleCallback
-
-        self.prefDialog = Ui_PreferencesDialog()
-        self.prefDialog.setupUi(self)
-
-        QtCore.QObject.connect(self.prefDialog.modulConfigSelector, QtCore.SIGNAL("clicked()"),
-                               self.openModulConfigSelector)
-
-        QtCore.QObject.connect(self.prefDialog.loadModuleBtn, QtCore.SIGNAL("clicked()"),
-                               self.onLoadSelectedModule)
-
-        QtCore.QObject.connect(self.prefDialog.listWidget, QtCore.SIGNAL("itemDoubleClicked(QListWidgetItem *)"),
-                               self.onLoadSelectedModule)
-
-        if platform.system() == "Windows" or platform.system() == "MAC":
-            # TODO: delete this when ready
-            self.prefDialog.lineEdit.setText("C:\Users\Stefan\Desktop\Lockenwickler\modules\modules.cfg")
-            self.moduleCfgPath = "C:\Users\Stefan\Desktop\Lockenwickler\modules\modules.cfg"
-            self.moduleCfgIsSelected = True
-            self.modulePath = self.moduleCfgPath.replace("modules.cfg", "")
-            self.readInModules()
-            # end delete
-        else:
-            # TODO: delete this when ready
-            self.prefDialog.lineEdit.setText("/home/stefan/blubb/rl_modules/modules/modules.cfg")
-            self.moduleCfgPath = "/home/stefan/blubb/rl_modules/modules/modules.cfg"
-            self.moduleCfgIsSelected = True
-            self.modulePath = self.moduleCfgPath.replace("modules.cfg", "")
-            self.readInModules()
-            # end delete
-
-        self.moduleCfgIsSelected = False
-
-        self.setModal(True)
-
-    def openModulConfigSelector(self):
-        dialog = QtGui.QFileDialog(self)
-        self.moduleCfgPath = str(dialog.getOpenFileName(self, "Select modules.cfg", "/home/stefan/blubb/rl_modules/modules/", "modules.cfg (*.cfg)"))
-        self.modulePath = self.moduleCfgPath.replace("modules.cfg", "")
-
-        from os.path import isfile
-
-        if isfile(self.moduleCfgPath):
-            self.prefDialog.lineEdit.setText(self.moduleCfgPath)
-            self.moduleCfgIsSelected = True
-            self.readInModules()
-
-    def readInModules(self):
-        if self.moduleCfgIsSelected:
-            import codecs
-            f = codecs.open(self.moduleCfgPath, 'r', 'utf-8')
-
-            for line in f:
-                if line.startswith('#'):
-                    continue
-
-                if line.startswith('module='):
-                    splines = line.split('=')
-                    str = splines[1].rstrip().rstrip()
-                    if str != "common":
-                        self.prefDialog.listWidget.addItem(str)
-
-    def onLoadSelectedModule(self):
-        item = self.prefDialog.listWidget.currentItem()
-
-        if item == None:
-            mbox = QtGui.QMessageBox(self)
-            mbox.setModal(True)
-            mbox.setText("Please select a module.")
-            mbox.show()
-        else:
-            tempo = str(item.text())
-            self.loadModuleCallback(self.modulePath, tempo)
-            self.hide()
-
-
-
+#################################################
+ # Copyright (C) 2008  Stefan Stammberger
+ #
+ # This library is free software; you can redistribute it and/or
+ # modify it under the terms of the GNU Lesser General Public
+ # License as published by the Free Software Foundation; either
+ # version 2.1 of the License, or (at your option) any later version.
+ #
+ # This library is distributed in the hope that it will be useful,
+ # but WITHOUT ANY WARRANTY; without even the implied warranty of
+ # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ # Lesser General Public License for more details.
+ #
+ # You should have received a copy of the GNU Lesser General Public
+ # License along with this library; if not, write to the Free Software
+ # Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ #################################################
+
+
+import sys
+import platform
+import string
+from ui_pref_dialog import *
+
+class PreferencesDialog(QtGui.QDialog):
+    def __init__(self, loadModuleCallback, parent=None):
+        QtGui.QDialog.__init__(self, parent)
+
+        self.loadModuleCallback = loadModuleCallback
+
+        self.prefDialog = Ui_PreferencesDialog()
+        self.prefDialog.setupUi(self)
+
+        QtCore.QObject.connect(self.prefDialog.modulConfigSelector, QtCore.SIGNAL("clicked()"),
+                               self.openModulConfigSelector)
+
+        QtCore.QObject.connect(self.prefDialog.loadModuleBtn, QtCore.SIGNAL("clicked()"),
+                               self.onLoadSelectedModule)
+
+        QtCore.QObject.connect(self.prefDialog.listWidget, QtCore.SIGNAL("itemDoubleClicked(QListWidgetItem *)"),
+                               self.onLoadSelectedModule)
+
+        if platform.system() == "Windows" or platform.system() == "MAC":
+            pass
+            # TODO: delete this when ready
+#            self.prefDialog.lineEdit.setText("C:\Users\Stefan\Desktop\Lockenwickler\modules\modules.cfg")
+#            self.moduleCfgPath = "C:\Users\Stefan\Desktop\Lockenwickler\modules\modules.cfg"
+#            self.moduleCfgIsSelected = True
+#            self.modulePath = self.moduleCfgPath.replace("modules.cfg", "")
+#            self.readInModules()
+            # end delete
+        else:
+            # TODO: delete this when ready
+            self.prefDialog.lineEdit.setText("/home/stefan/blubb/rl_modules/modules/modules.cfg")
+            self.moduleCfgPath = "/home/stefan/blubb/rl_modules/modules/modules.cfg"
+            self.moduleCfgIsSelected = True
+            self.modulePath = self.moduleCfgPath.replace("modules.cfg", "")
+            self.readInModules()
+            # end delete
+
+        self.moduleCfgIsSelected = False
+
+        self.setModal(True)
+
+    def openModulConfigSelector(self):
+        dialog = QtGui.QFileDialog(self)
+        self.moduleCfgPath = str(dialog.getOpenFileName(self, "Select modules.cfg", "/home/stefan/blubb/rl_modules/modules/", "modules.cfg (*.cfg)"))
+        self.modulePath = self.moduleCfgPath.replace("modules.cfg", "")
+
+        from os.path import isfile
+
+        if isfile(self.moduleCfgPath):
+            self.prefDialog.lineEdit.setText(self.moduleCfgPath)
+            self.moduleCfgIsSelected = True
+            self.readInModules()
+
+    def readInModules(self):
+        if self.moduleCfgIsSelected:
+            import codecs
+            f = codecs.open(self.moduleCfgPath, 'r', 'utf-8')
+
+            for line in f:
+                if line.startswith('#'):
+                    continue
+
+                if line.startswith('module='):
+                    splines = line.split('=')
+                    str = splines[1].rstrip().rstrip()
+                    if str != "common":
+                        self.prefDialog.listWidget.addItem(str)
+
+    def onLoadSelectedModule(self):
+        item = self.prefDialog.listWidget.currentItem()
+
+        if item == None:
+            mbox = QtGui.QMessageBox(self)
+            mbox.setModal(True)
+            mbox.setText("Please select a module.")
+            mbox.show()
+        else:
+            tempo = str(item.text())
+            self.loadModuleCallback(self.modulePath, tempo)
+            self.hide()
+
+
+

Added: rl/trunk/editors/Lockenwickler/src/setup.py
===================================================================
--- rl/trunk/editors/Lockenwickler/src/setup.py	2008-10-19 11:14:13 UTC (rev 4559)
+++ rl/trunk/editors/Lockenwickler/src/setup.py	2008-10-19 11:49:37 UTC (rev 4560)
@@ -0,0 +1,4 @@
+from distutils.core import setup
+import py2exe
+
+setup(windows=["Lockenwickler.py"], options={"py2exe" : {"includes" : ["sip", "PyQt4._qt"]}})



From melven at mail.berlios.de  Sun Oct 19 15:02:35 2008
From: melven at mail.berlios.de (melven at mail.berlios.de)
Date: Sun, 19 Oct 2008 15:02:35 +0200
Subject: [Dsa-hl-svn] r4561 - in rl/branches/newton20/engine/ui: include src
Message-ID: <200810191302.m9JD2ZGi006284@sheep.berlios.de>

Author: melven
Date: 2008-10-19 15:02:32 +0200 (Sun, 19 Oct 2008)
New Revision: 4561

Modified:
   rl/branches/newton20/engine/ui/include/Console.h
   rl/branches/newton20/engine/ui/src/Console.cpp
   rl/branches/newton20/engine/ui/src/WindowFactory.cpp
Log:
-fixed problem with the activation of the console-window


Modified: rl/branches/newton20/engine/ui/include/Console.h
===================================================================
--- rl/branches/newton20/engine/ui/include/Console.h	2008-10-19 11:49:37 UTC (rev 4560)
+++ rl/branches/newton20/engine/ui/include/Console.h	2008-10-19 13:02:32 UTC (rev 4561)
@@ -53,6 +53,7 @@
 
 			bool handleKeyDown(const CEGUI::EventArgs& e);
             bool handleKeyUp(const CEGUI::EventArgs& e);
+            bool handleActivated(const CEGUI::EventArgs& e);
 			void appendTextRow(const CeGuiString& text, const CEGUI::colour color);
 
 			std::vector<CeGuiString> mHistory;

Modified: rl/branches/newton20/engine/ui/src/Console.cpp
===================================================================
--- rl/branches/newton20/engine/ui/src/Console.cpp	2008-10-19 11:49:37 UTC (rev 4560)
+++ rl/branches/newton20/engine/ui/src/Console.cpp	2008-10-19 13:02:32 UTC (rev 4561)
@@ -57,9 +57,15 @@
 		mCommandLine->subscribeEvent(
 			Editbox::EventKeyUp,
 			boost::bind(&Console::handleKeyUp, this, _1));
-		mWindow->subscribeEvent(FrameWindow::EventCloseClicked,
-            boost::bind(&Console::hideWindow, this));
+		mWindow->subscribeEvent(
+                        FrameWindow::EventCloseClicked,
+                        boost::bind(&Console::hideWindow, this));
+                mWindow->subscribeEvent(
+                        FrameWindow::EventActivated,
+                        boost::bind(&Console::handleActivated, this, _1));
 
+                mWindow->setAlwaysOnTop(true);
+
 		// load history from file
         if( ConfigurationManager::getSingleton().getIntSetting("General", "Save Console History") > 0 )
         {
@@ -282,5 +288,11 @@
 		else
 			mCommandLine->setText(mHistory[mHistoryMarker]);
 	}
+
+        bool Console::handleActivated(const CEGUI::EventArgs&)
+        {
+            mCommandLine->activate();
+            return false;
+        }
 }
 

Modified: rl/branches/newton20/engine/ui/src/WindowFactory.cpp
===================================================================
--- rl/branches/newton20/engine/ui/src/WindowFactory.cpp	2008-10-19 11:49:37 UTC (rev 4560)
+++ rl/branches/newton20/engine/ui/src/WindowFactory.cpp	2008-10-19 13:02:32 UTC (rev 4561)
@@ -160,6 +160,8 @@
     void WindowFactory::toggleConsole()
     {
         mConsole->setVisible(!mConsole->isVisible());
+        if( mConsole->isVisible() )
+            mConsole->getWindow()->activate();
     }
 
     void WindowFactory::toggleDebugWindow()



From fusion2 at mail.berlios.de  Sun Oct 19 15:48:59 2008
From: fusion2 at mail.berlios.de (fusion2 at mail.berlios.de)
Date: Sun, 19 Oct 2008 15:48:59 +0200
Subject: [Dsa-hl-svn] r4562 - in modules: . editortest
Message-ID: <200810191348.m9JDmxYd013987@sheep.berlios.de>

Author: fusion2
Date: 2008-10-19 15:48:32 +0200 (Sun, 19 Oct 2008)
New Revision: 4562

Added:
   modules/editortest/
   modules/editortest/maps/
   modules/editortest/models/
   modules/editortest/scripts/
Modified:
   modules/modules.cfg
Log:
-

Modified: modules/modules.cfg
===================================================================
--- modules/modules.cfg	2008-10-19 13:02:32 UTC (rev 4561)
+++ modules/modules.cfg	2008-10-19 13:48:32 UTC (rev 4562)
@@ -16,3 +16,4 @@
 module=persistenztest
 module=teichtest
 
+module=editortest



From melven at mail.berlios.de  Sun Oct 19 18:35:47 2008
From: melven at mail.berlios.de (melven at mail.berlios.de)
Date: Sun, 19 Oct 2008 18:35:47 +0200
Subject: [Dsa-hl-svn] r4563 - in rl/branches/newton20: editors/Lockenwickler
	editors/Lockenwickler/src editors/Lockenwickler/src/media
	engine/core/include engine/core/src engine/rules/src engine/ui/src
Message-ID: <200810191635.m9JGZlvw004220@sheep.berlios.de>

Author: melven
Date: 2008-10-19 18:35:21 +0200 (Sun, 19 Oct 2008)
New Revision: 4563

Added:
   rl/branches/newton20/editors/Lockenwickler/.eric4project/
   rl/branches/newton20/editors/Lockenwickler/src/ObjectPropertyModel.py
   rl/branches/newton20/editors/Lockenwickler/src/Property.py
   rl/branches/newton20/editors/Lockenwickler/src/ViewportGrid.py
   rl/branches/newton20/editors/Lockenwickler/src/setup.py
Removed:
   rl/branches/newton20/editors/Lockenwickler/Lockenwickler.e4q
   rl/branches/newton20/editors/Lockenwickler/Lockenwickler.e4t
   rl/branches/newton20/editors/Lockenwickler/src/OdeManager.py
   rl/branches/newton20/editors/Lockenwickler/src/ui_FourPanelView.py
   rl/branches/newton20/editors/Lockenwickler/src/ui_lw.py
   rl/branches/newton20/editors/Lockenwickler/src/ui_model_prev.py
   rl/branches/newton20/editors/Lockenwickler/src/ui_obj_prop.py
Modified:
   rl/branches/newton20/editors/Lockenwickler/Lockenwickler.e4p
   rl/branches/newton20/editors/Lockenwickler/src/ConsoleWindow.py
   rl/branches/newton20/editors/Lockenwickler/src/Lockenwickler.py
   rl/branches/newton20/editors/Lockenwickler/src/ModelSelectionDialog.py
   rl/branches/newton20/editors/Lockenwickler/src/ModuleManager.py
   rl/branches/newton20/editors/Lockenwickler/src/MovePivot.py
   rl/branches/newton20/editors/Lockenwickler/src/ObjectPropertyWin.py
   rl/branches/newton20/editors/Lockenwickler/src/OgreMainWindow.py
   rl/branches/newton20/editors/Lockenwickler/src/OgreWidget.py
   rl/branches/newton20/editors/Lockenwickler/src/Plugins-linux.cfg
   rl/branches/newton20/editors/Lockenwickler/src/PreferencesDialog.py
   rl/branches/newton20/editors/Lockenwickler/src/PythonOgreConfig.py
   rl/branches/newton20/editors/Lockenwickler/src/SceneExplorer.py
   rl/branches/newton20/editors/Lockenwickler/src/media/Pivot_Point.material
   rl/branches/newton20/engine/core/include/MessagePump.h
   rl/branches/newton20/engine/core/src/MessagePump.cpp
   rl/branches/newton20/engine/rules/src/Combat.cpp
   rl/branches/newton20/engine/rules/src/FetchItemJob.cpp
   rl/branches/newton20/engine/ui/src/UiSubsystem.cpp
Log:
merged changes from trunk



Copied: rl/branches/newton20/editors/Lockenwickler/.eric4project (from rev 4561, rl/trunk/editors/Lockenwickler/.eric4project)

Modified: rl/branches/newton20/editors/Lockenwickler/Lockenwickler.e4p
===================================================================
--- rl/branches/newton20/editors/Lockenwickler/Lockenwickler.e4p	2008-10-19 13:48:32 UTC (rev 4562)
+++ rl/branches/newton20/editors/Lockenwickler/Lockenwickler.e4p	2008-10-19 16:35:21 UTC (rev 4563)
@@ -1,9 +1,9 @@
 <?xml version="1.0" encoding="UTF-8"?>
-<!DOCTYPE Project SYSTEM "Project-4.4.dtd">
+<!DOCTYPE Project SYSTEM "Project-4.5.dtd">
 <!-- eric4 project file for project Lockenwickler -->
-<!-- Saved: 2008-09-20, 20:03:11 -->
+<!-- Saved: 2008-10-16, 19:21:23 -->
 <!-- Copyright (C) 2008 Stefan Stammberger, sstammberger at web.de -->
-<Project version="4.4">
+<Project version="4.5">
   <ProgLanguage mixed="0">Python</ProgLanguage>
   <ProjectType>Qt4</ProjectType>
   <Description>Lockenwickler is an Editor application for the Rastulahs Lockenpracht game.</Description>
@@ -17,16 +17,11 @@
     <Source>src/ModuleManager.py</Source>
     <Source>src/MovePivot.py</Source>
     <Source>src/ObjectPropertyWin.py</Source>
-    <Source>src/OdeManager.py</Source>
     <Source>src/OgreMainWindow.py</Source>
     <Source>src/OgreWidget.py</Source>
     <Source>src/PreferencesDialog.py</Source>
     <Source>src/PythonOgreConfig.py</Source>
     <Source>src/ui_ConsoleWindow.py</Source>
-    <Source>src/ui_FourPanelView.py</Source>
-    <Source>src/ui_lw.py</Source>
-    <Source>src/ui_model_prev.py</Source>
-    <Source>src/ui_obj_prop.py</Source>
     <Source>src/ui_pref_dialog.py</Source>
     <Source>ui files/batch_convert_ui.py</Source>
     <Source>ui files/ui_ConsoleWindow.py</Source>
@@ -36,6 +31,9 @@
     <Source>ui files/ui_obj_prop.py</Source>
     <Source>ui files/ui_pref_dialog.py</Source>
     <Source>src/SceneExplorer.py</Source>
+    <Source>src/Property.py</Source>
+    <Source>src/ViewportGrid.py</Source>
+    <Source>src/ObjectPropertyModel.py</Source>
   </Sources>
   <Forms>
     <Form>ui files/console_window.ui</Form>
@@ -170,9 +168,11 @@
   <FiletypeAssociations>
     <FiletypeAssociation pattern="*.ui" type="FORMS" />
     <FiletypeAssociation pattern="*.idl" type="INTERFACES" />
+    <FiletypeAssociation pattern="*.qm" type="TRANSLATIONS" />
     <FiletypeAssociation pattern="*.ptl" type="SOURCES" />
     <FiletypeAssociation pattern="*.pyw" type="SOURCES" />
     <FiletypeAssociation pattern="*.ui.h" type="FORMS" />
+    <FiletypeAssociation pattern="*.ts" type="TRANSLATIONS" />
     <FiletypeAssociation pattern="*.py" type="SOURCES" />
     <FiletypeAssociation pattern="*.qrc" type="RESOURCES" />
   </FiletypeAssociations>

Deleted: rl/branches/newton20/editors/Lockenwickler/Lockenwickler.e4q
===================================================================
--- rl/branches/newton20/editors/Lockenwickler/Lockenwickler.e4q	2008-10-19 13:48:32 UTC (rev 4562)
+++ rl/branches/newton20/editors/Lockenwickler/Lockenwickler.e4q	2008-10-19 16:35:21 UTC (rev 4563)
@@ -1,7 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<!DOCTYPE UserProject SYSTEM "UserProject-4.0.dtd">
-<!-- eric4 user project file for project Lockenwickler -->
-<!-- Saved: 2008-06-23, 19:40:36 -->
-<!-- Copyright (C) 2008 Stefan Stammberger, sstammberger at web.de -->
-<UserProject version="4.0">
-</UserProject>
\ No newline at end of file

Deleted: rl/branches/newton20/editors/Lockenwickler/Lockenwickler.e4t
===================================================================
--- rl/branches/newton20/editors/Lockenwickler/Lockenwickler.e4t	2008-10-19 13:48:32 UTC (rev 4562)
+++ rl/branches/newton20/editors/Lockenwickler/Lockenwickler.e4t	2008-10-19 16:35:21 UTC (rev 4563)
@@ -1,6 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<!DOCTYPE Tasks SYSTEM "Tasks-4.1.dtd">
-<!-- eric4 tasks file for project Lockenwickler -->
-<!-- Saved: 2008-06-23, 19:40:36 -->
-<Tasks version="4.1">
-</Tasks>
\ No newline at end of file

Modified: rl/branches/newton20/editors/Lockenwickler/src/ConsoleWindow.py
===================================================================
--- rl/branches/newton20/editors/Lockenwickler/src/ConsoleWindow.py	2008-10-19 13:48:32 UTC (rev 4562)
+++ rl/branches/newton20/editors/Lockenwickler/src/ConsoleWindow.py	2008-10-19 16:35:21 UTC (rev 4563)
@@ -1,7 +1,31 @@
+#################################################
+ # Copyright (C) 2008  Stefan Stammberger
+ #
+ # This library is free software; you can redistribute it and/or
+ # modify it under the terms of the GNU Lesser General Public
+ # License as published by the Free Software Foundation; either
+ # version 2.1 of the License, or (at your option) any later version.
+ #
+ # This library is distributed in the hope that it will be useful,
+ # but WITHOUT ANY WARRANTY; without even the implied warranty of
+ # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ # Lesser General Public License for more details.
+ #
+ # You should have received a copy of the GNU Lesser General Public
+ # License along with this library; if not, write to the Free Software
+ # Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ #################################################
+
+
 import sys
+from PyQt4.QtCore import *
+from PyQt4.QtGui import *
+
 from ui_ConsoleWindow import *
 import ogre.renderer.OGRE as og
 
+
+
 class LockenLog(og.LogListener):
     def __init__(self, logFunction):
         og.LogListener.__init__(self)
@@ -18,12 +42,18 @@
         self.consoleWindow = Ui_ConsoleWindow()
         self.consoleWindow.setupUi(self)
         self.consoleWindow.textEdit.setReadOnly(True)
-
         self.lockenLog = LockenLog(self.write)
 
         sys.stdout = self
         sys.stderr = self
 
+        clearAction= QAction("Clear Window",  self)
+        self.consoleWindow.textEdit.addAction(clearAction)
+        self.consoleWindow.textEdit.setContextMenuPolicy(Qt.ActionsContextMenu)
+        clearAction.setShortcut("Ctrl + R")
+        self.connect(clearAction, SIGNAL("triggered()"), self.consoleWindow.textEdit.clear)
+
+
     def write(self, text):
         if self.filterLog:
             if text.isspace():
@@ -34,6 +64,11 @@
             elif text.startswith("OGRE EXCEPTION"):
                 self.consoleWindow.textEdit.append(text)
                 return
+            elif text.startswith("dbg:"):
+                self.consoleWindow.textEdit.append(text)
+                return
         else:
             self.consoleWindow.textEdit.append(text)
 
+    def clear(self):
+        self.consoleWindow.textEdit.clear()

Modified: rl/branches/newton20/editors/Lockenwickler/src/Lockenwickler.py
===================================================================
--- rl/branches/newton20/editors/Lockenwickler/src/Lockenwickler.py	2008-10-19 13:48:32 UTC (rev 4562)
+++ rl/branches/newton20/editors/Lockenwickler/src/Lockenwickler.py	2008-10-19 16:35:21 UTC (rev 4563)
@@ -1,387 +1,464 @@
-import os
-import sys
-import platform
-
-#sys.path.insert(0,'..')
-#import PythonOgreConfig
-
-from random import randint
-from os.path import isfile
-
-from PyQt4 import QtGui, QtCore
-from PreferencesDialog import *
-from ObjectPropertyWin import *
-from ModelSelectionDialog import *
-from ConsoleWindow import *
-from ModuleManager import *
-from SceneExplorer import *
-
-import OgreMainWindow
-import ogre.renderer.OGRE as og
-
-class Lockenwickler(QtGui.QMainWindow):
-    def __init__(self, parent=None):
-        QtGui.QWidget.__init__(self, parent)
-
-        self.setupUi()
-
-        self.consoleWindow = ConsoleWindow(False,  self)
-
-        self.setupOgre()
-
-        self.prefDialog = PreferencesDialog(self.loadModule, self)
-        self.objectPropertyWin = ObjectPropertyWin(self)
-        self.sceneExplorerWin = SceneExplorer(self)
-        self.modelSelectionDialog = ModelSelectionDialog(self.ogreRoot, self)
-
-        self.createDockWindows()
-
-        self.mainTimer = QtCore.QTimer(self)
-        self.mainTimer.connect(self.mainTimer, QtCore.SIGNAL("timeout()"), self.update)
-        self.mainTimer.start(5)
-
-        settings = QtCore.QSettings()
-        self.restoreGeometry(settings.value("MainWindow/Geometry").toByteArray())
-        self.restoreState(settings.value("MainWindow/DockWindows").toByteArray())
-
-        self.setWindowTitle("Rastullahs Lockenwickler")
-#        # Import Psyco if available
-#        try:
-#            import psyco
-#            psyco.full()
-#            #psyco.log()
-#            #psyco.profile()
-#        except ImportError:
-#            pass
-
-        #QtGui.QApplication.setKeyboardInputInterval(5000)
-
-    def createAction(self, text, slot=None, shortcut=None, icon=None, tip=None, checkable=False, signal="triggered()"):
-        action = QtGui.QAction(text, self)
-        if icon is not None:
-            action.setIcon(QtGui.QIcon("media/icons/%s" % icon))
-        if shortcut is not None:
-            action.setShortcut(shortcut)
-        if tip is not None:
-            action.setToolTip(tip)
-            action.setStatusTip(tip)
-        if slot is not None:
-            self.connect(action, QtCore.SIGNAL(signal), slot)
-
-        action.setCheckable(checkable)
-
-        return action
-
-    def addActions(self, target, actions):
-        for act in actions:
-            if act is None:
-               target.addSeparator()
-            else:
-                target.addAction(act)
-
-    def setupUi(self):
-        self.setObjectName("MainWindow")
-
-        self.centralwidget = QtGui.QWidget(self)
-        self.centralwidget.setObjectName("centralwidget")
-
-        self.hboxlayout = QtGui.QHBoxLayout(self.centralwidget)
-        self.hboxlayout.setObjectName("hboxlayout")
-
-        self.gridlayout = QtGui.QGridLayout()
-        self.gridlayout.setObjectName("gridlayout")
-
-        self.menubar = QtGui.QMenuBar(self)
-        self.menubar.setObjectName("menubar")
-
-        self.menuFile = QtGui.QMenu(self.menubar)
-        self.menuFile.setObjectName("menuFile")
-
-        self.menuView = QtGui.QMenu(self.menubar)
-        self.menuView.setObjectName("menuView")
-        self.setMenuBar(self.menubar)
-
-
-        self.statusbar = QtGui.QStatusBar(self)
-        self.statusbar.setObjectName("statusbar")
-        self.setStatusBar(self.statusbar)
-
-        self.actionNeu = QtGui.QAction(QtGui.QIcon("media/icons/package.png"), "&New",  self)
-        self.actionNeu.setObjectName("actionNeu")
-
-        self.actionClose = self.createAction("Quit",  self.close,  "Alt + Q",  "exit.png",  "Quit")
-        self.actionClose.setObjectName("actionClose")
-
-
-
-        self.actionMove = self.createAction("&Move",  self.actionMoveSlot,  "g",  "move.png",  "Move selected object")
-        self.actionMove.setObjectName("actionMove")
-
-        self.actionRotate = self.createAction("&Rotate",  self.actionRotateSlot,  "r",  "rotate.png",  "Rotate selected object")
-        self.actionRotate.setObjectName("actionRotate")
-
-        self.actionScale = self.createAction("&Scale",  self.actionScaleSlot,  "s",  "resizecol.png",  "Scale selected object")
-        self.actionRotate.setObjectName("actionRotate")
-
-
-        self.actionSceneExplorer = self.createAction("&Scene Exlporer",  self.toggleSceneExplorer,  "Alt + E",  "view_tree.png",  "Scene Explorer",  False)
-        self.actionSceneExplorer.setObjectName("actionSceneExplorer")
-
-        self.actionPreferences = self.createAction("&Preferences",  self.togglePreferencesWindow,  "Alt + P",  "configure.png",  "Lockenwickler Preferences",  False)
-        self.actionPreferences.setObjectName("actionPreferences")
-
-        self.actionProperty_Window = self.createAction("Pr&operty Window",  self.togglePropertyWindow,  "Alt + P",  "unsortedlist1.png",  "Property Window")
-        self.actionProperty_Window.setObjectName("actionProperty_Window")
-
-        self.actionObject_Selection = self.createAction("&Model Preview Window",  self.toggleModelPreviewWindow,  "Alt + O",  "tux.png",  "Model Preview")
-        self.actionObject_Selection.setObjectName("actionObject_Selection")
-
-        self.actionConsole_Window = self.createAction("&Console Window",  self.toggleConsoleWindow,  "Alt + C",  "console.png",  "Console Window")
-        self.actionConsole_Window.setObjectName("actionConsole_Window")
-
-
-        self.menuFile.addAction(self.actionNeu)
-        self.menuFile.addAction(self.actionClose)
-        self.menuView.addAction(self.actionSceneExplorer)
-        self.menuView.addAction(self.actionPreferences)
-        self.menuView.addAction(self.actionProperty_Window)
-        self.menuView.addAction(self.actionObject_Selection)
-        self.menuView.addAction(self.actionConsole_Window)
-        self.menubar.addAction(self.menuFile.menuAction())
-        self.menubar.addAction(self.menuView.menuAction())
-
-        self.retranslateUi()
-        QtCore.QMetaObject.connectSlotsByName(self)
-
-    def retranslateUi(self):
-        self.setWindowTitle(QtGui.QApplication.translate("MainWindow", "MainWindow", None, QtGui.QApplication.UnicodeUTF8))
-        self.menuFile.setTitle(QtGui.QApplication.translate("MainWindow", "File", None, QtGui.QApplication.UnicodeUTF8))
-        self.menuView.setTitle(QtGui.QApplication.translate("MainWindow", "View", None, QtGui.QApplication.UnicodeUTF8))
-        self.actionNeu.setText(QtGui.QApplication.translate("MainWindow", "New", None, QtGui.QApplication.UnicodeUTF8))
-        self.actionMove.setText(QtGui.QApplication.translate("MainWindow", "Move", None, QtGui.QApplication.UnicodeUTF8))
-        self.actionRotate.setText(QtGui.QApplication.translate("MainWindow", "Rotate", None, QtGui.QApplication.UnicodeUTF8))
-        self.actionSceneExplorer.setText(QtGui.QApplication.translate("MainWindow", "Scene Explorer", None, QtGui.QApplication.UnicodeUTF8))
-        self.actionPreferences.setText(QtGui.QApplication.translate("MainWindow", "Preferences", None, QtGui.QApplication.UnicodeUTF8))
-        self.actionProperty_Window.setText(QtGui.QApplication.translate("MainWindow", "Property Window", None, QtGui.QApplication.UnicodeUTF8))
-        self.actionObject_Selection.setText(QtGui.QApplication.translate("MainWindow", "Object Selection", None, QtGui.QApplication.UnicodeUTF8))
-        self.actionClose.setText(QtGui.QApplication.translate("MainWindow", "Quit", None, QtGui.QApplication.UnicodeUTF8))
-        self.actionConsole_Window.setText(QtGui.QApplication.translate("MainWindow", "Console Window", None, QtGui.QApplication.UnicodeUTF8))
-
-    def setupOgre(self, pluginCfgPath="./Plugins.cfg", ogreCfgPath="./ogre.cfg", logPath="./ogre.log"):
-        if platform.system() == "Windows":
-            pluginCfgPath="./Plugins-windows.cfg"
-        else:
-            pluginCfgPath="./Plugins-linux.cfg"
-
-        root = og.Root(pluginCfgPath, ogreCfgPath, logPath)
-        self.ogreRoot = root
-
-        if  not self.ogreRoot.restoreConfig() and not self.ogreRoot.showConfigDialog():
-            sys.exit('Quit from Config Dialog')
-
-        root.initialise(False)
-
-        self.OgreMainWinSceneMgr = self.ogreRoot.createSceneManager(og.ST_GENERIC, "OgreMainWinSceneMgr")
-        self.OgreMainWinSceneMgr.ambientLight = og.ColourValue(4, 4, 4)
-
-        self.moduleName = ""
-        self.moduleManager = ModuleManager(self.ogreRoot,  self.OgreMainWinSceneMgr)
-
-        self.ogreRenderWindow = OgreMainWindow.OgreMainWindow(self.moduleManager,  root,  self.OgreMainWinSceneMgr,  self)
-        self.gridlayout.addWidget(self.ogreRenderWindow,0,0,1,1)
-        self.hboxlayout.addLayout(self.gridlayout)
-        self.setCentralWidget(self.centralwidget)
-
-        og.ResourceGroupManager.getSingleton().addResourceLocation("./media", "FileSystem", "General", False)
-        og.ResourceGroupManager.getSingleton().initialiseAllResourceGroups()
-
-        oglog = og.LogManager.getSingleton().getDefaultLog()
-        oglog.addListener(self.consoleWindow.lockenLog)
-
-    def update(self):
-        self.ogreRoot.renderOneFrame()
-
-    def actionMoveSlot(self):
-        print "MOVE!!!!!!!!!!!"
-
-    def actionRotateSlot(self):
-        print "ROTATE!!!!!!!!!"
-
-    def actionScaleSlot(self):
-        print "Scale!!!!!!!!"
-
-    def togglePreferencesWindow(self):
-        if self.prefDialog.isHidden():
-            self.prefDialog.show()
-        else:
-            self.prefDialog.hide()
-
-    def toggleModelPreviewWindow(self):
-        if self.modelSelectionDock.isHidden():
-            self.modelSelectionDock.show()
-        else:
-            self.modelSelectionDock.hide()
-
-    def toggleSceneExplorer(self):
-        if self.sceneExplorerDock.isHidden():
-            self.sceneExplorerDock.show()
-        else:
-            self.sceneExplorerDock.hide()
-
-    def togglePropertyWindow(self):
-        if self.propertyDock.isHidden():
-            self.propertyDock.show()
-        else:
-            self.propertyDock.hide()
-
-    def toggleConsoleWindow(self):
-        if self.consoleDock.isHidden():
-            self.consoleDock.show()
-        else:
-            self.consoleDock.hide()
-
-    # parses the moduleconfig.rb and searches for all loader.loadmap(" statements in the ruby script
-    # and parses them too
-    def loadModule(self, modulePath, moduleName):
-        if self.moduleName == moduleName:
-            return
-
-        self.moduleName = moduleName
-        self.workingDir = modulePath + moduleName # the module path
-        self.workingDirCommon = modulePath + "common" # the module path of the common module
-
-        import codecs
-        import glob
-
-        modConfig = self.workingDir + "/scripts/moduleconfig.rb"
-        if isfile(modConfig): # is the modconfig existing?
-            f = codecs.open(modConfig, 'r', 'utf-8')
-        else:
-            print ("Error: couldn't find module config")
-            pass
-
-        self.mapFiles = [] # a list in case the module has more than one map file
-
-        for line in f:
-            lStripped = line.strip() #strip the whitespace away, not needed here
-
-            # get the map file(s)
-            if lStripped.startswith("loader.loadMap("): # all loadMap commands begin with loader.loadMap(
-                spl = lStripped.split('"')
-                for a in spl:
-                    if a.endswith(".xml"):
-                        pathToMapFile = self.workingDir + "/maps/" + a
-                        self.mapFiles.append(pathToMapFile)
-
-        self.setWindowTitle(moduleName)
-
-        self.modelSelectionDialog.scanDirForModels(self.workingDir, moduleName)
-        self.modelSelectionDialog.scanDirForModels(self.workingDirCommon, "common")
-
-        self.setResourcePaths(self.workingDir, moduleName)
-        self.setResourcePaths(self.workingDirCommon, "common")
-        og.ResourceGroupManager.getSingleton().initialiseAllResourceGroups()
-
-        command = (os.path.join(self.workingDir,  "maps") + "/*.xml")
-        for mf in glob.glob(command): # search for all xml files in the maps directory and add them
-            self.mapFiles.append(mf)
-
-        command = (os.path.join(self.workingDir,  "maps") + "/*.scene")
-        for mf in glob.glob(command): # search for all xml files in the maps directory and add them
-            self.mapFiles.append(mf)
-
-        self.moduleManager.load(moduleName,  self.mapFiles)
-
-    def setResourcePaths(self, path, moduleName):
-        for file in os.listdir(path):
-            curFile = path + "/" + file
-
-            if file.startswith('.'): #ignore dot files (hidden)
-                continue
-            if isdir(curFile):
-                og.ResourceGroupManager.getSingleton().addResourceLocation(curFile, "FileSystem", moduleName, False)
-                self.setResourcePaths(curFile, moduleName)
-                continue
-            if isfile(curFile):
-                pass
-
-    def createDockWindows(self):
-        self.propertyDock = QtGui.QDockWidget(self.tr("Properties"), self)
-        self.propertyDock.setObjectName("PropertyDockWindow")
-        self.propertyDock.setAllowedAreas(QtCore.Qt.LeftDockWidgetArea | QtCore.Qt.RightDockWidgetArea)
-        self.propertyDock.setWidget(self.objectPropertyWin)
-        self.addDockWidget(QtCore.Qt.LeftDockWidgetArea, self.propertyDock)
-
-        self.modelSelectionDock = QtGui.QDockWidget(self.tr("Models"), self)
-        self.modelSelectionDock.setObjectName("ModelSelectionDockWindow")
-        self.modelSelectionDock.setAllowedAreas(QtCore.Qt.LeftDockWidgetArea | QtCore.Qt.RightDockWidgetArea)
-        self.modelSelectionDock.setWidget(self.modelSelectionDialog)
-        self.addDockWidget(QtCore.Qt.RightDockWidgetArea, self.modelSelectionDock)
-
-        self.sceneExplorerDock = QtGui.QDockWidget(self.tr("Scene Explorer"), self)
-        self.sceneExplorerDock.setObjectName("SceneExplorerDockWindow")
-        self.sceneExplorerDock.setAllowedAreas(QtCore.Qt.LeftDockWidgetArea | QtCore.Qt.RightDockWidgetArea)
-        self.sceneExplorerDock.setWidget(self.sceneExplorerWin)
-        self.addDockWidget(QtCore.Qt.LeftDockWidgetArea, self.sceneExplorerDock)
-
-        self.consoleDock = QtGui.QDockWidget(self.tr("Console"), self)
-        self.consoleDock.setObjectName("ConsoleDockWindow")
-        self.consoleDock.setAllowedAreas(QtCore.Qt.BottomDockWidgetArea | QtCore.Qt.TopDockWidgetArea)
-        self.consoleDock.setWidget(self.consoleWindow)
-        self.addDockWidget(QtCore.Qt.BottomDockWidgetArea, self.consoleDock)
-
-        self.fileToolBar = self.addToolBar("File Toolbar")
-        self.fileToolBar.setObjectName("FileToolBar")
-        self.fileToolBar.setAllowedAreas(QtCore.Qt.TopToolBarArea | QtCore.Qt.BottomToolBarArea)
-        self.fileToolBar.addAction(self.actionNeu)
-        self.fileToolBar.addAction(self.actionClose)
-        self.addToolBar(QtCore.Qt.TopToolBarArea, self.fileToolBar)
-
-        self.moveToolBar = self.addToolBar("Transformation Bar")
-        self.moveToolBar.setObjectName("TransformationBar")
-        self.moveToolBar.setAllowedAreas(QtCore.Qt.TopToolBarArea | QtCore.Qt.BottomToolBarArea)
-        self.moveToolBar.addAction(self.actionMove)
-        self.moveToolBar.addAction(self.actionRotate)
-        self.moveToolBar.addAction(self.actionScale)
-        self.addToolBar(QtCore.Qt.TopToolBarArea, self.moveToolBar)
-
-    def keyPressEvent(self,  event):
-        if not event.isAutoRepeat():
-            self.ogreRenderWindow.keyPressEvent(event)
-
-    def keyReleaseEvent(self,  event):
-        if not event.isAutoRepeat():
-            self.ogreRenderWindow.keyReleaseEvent(event)
-        pass
-
-    def connectActionButtons(self):
-        pass
-
-    def saveOnClose(self):
-        reply = QtGui.QMessageBox.question(self,  "Rastullahs Lockenwickler - Unsaved Chages",  "Save unsaved changes?",  QtGui.QMessageBox.Yes|QtGui.QMessageBox.No|QtGui.QMessageBox.Cancel)
-        if reply == QtGui.QMessageBox.Cancel:
-            return False
-        if reply == QtGui.QMessageBox.Yes:
-            print "SAVE!!!!"
-            #TODO: implement save here
-        return True
-
-    def closeEvent(self,  event):
-        if self.saveOnClose():
-            settings = QtCore.QSettings()
-            settings.setValue("MainWindow/Geometry",  QtCore.QVariant(self.saveGeometry()))
-            settings.setValue("MainWIndow/DockWindows",  QtCore.QVariant(self.saveState()))
-        else:
-            event.ignore()
-
-if __name__ == "__main__":
-    app = QtGui.QApplication(sys.argv)
-    app.setOrganizationName("Team Pantheon")
-    app.setOrganizationDomain("rastullahs-lockenpracht.de/team")
-    app.setApplicationName("Lockenwickler")
-
-    form = Lockenwickler()
-    form.show()
-
-    sys.exit(app.exec_())
-
+#################################################
+ # Copyright (C) 2008  Stefan Stammberger
+ #
+ # This library is free software; you can redistribute it and/or
+ # modify it under the terms of the GNU Lesser General Public
+ # License as published by the Free Software Foundation; either
+ # version 2.1 of the License, or (at your option) any later version.
+ #
+ # This library is distributed in the hope that it will be useful,
+ # but WITHOUT ANY WARRANTY; without even the implied warranty of
+ # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ # Lesser General Public License for more details.
+ #
+ # You should have received a copy of the GNU Lesser General Public
+ # License along with this library; if not, write to the Free Software
+ # Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ #################################################
+
+
+import os
+import sys
+import platform
+
+sys.path.insert(0,'..')
+import PythonOgreConfig
+
+from random import randint
+from os.path import isfile
+
+from PyQt4 import QtGui, QtCore
+from PreferencesDialog import *
+from ObjectPropertyWin import *
+from ModelSelectionDialog import *
+from ConsoleWindow import *
+from ModuleManager import *
+from SceneExplorer import *
+
+import OgreMainWindow
+import ogre.renderer.OGRE as og
+
+class Lockenwickler(QtGui.QMainWindow):
+    def __init__(self, parent=None):
+        QtGui.QWidget.__init__(self, parent)
+
+        self.setupUi()
+
+        self.consoleWindow = ConsoleWindow(True,  self)
+
+        self.setupOgre()
+
+        self.prefDialog = PreferencesDialog(self.loadModule, self)
+        self.objectPropertyWin = ObjectPropertyWin(self)
+        self.sceneExplorerWin = SceneExplorer(self)
+        self.modelSelectionDialog = ModelSelectionDialog(self.ogreRoot, self)
+
+        self.createDockWindows()
+
+        self.mainTimer = QtCore.QTimer(self)
+        self.mainTimer.connect(self.mainTimer, QtCore.SIGNAL("timeout()"), self.update)
+        self.mainTimer.start(5)
+
+        settings = QtCore.QSettings()
+        self.restoreGeometry(settings.value("MainWindow/Geometry").toByteArray())
+        self.restoreState(settings.value("MainWindow/DockWindows").toByteArray())
+
+        self.setWindowTitle("Rastullahs Lockenwickler")
+#        # Import Psyco if available
+#        try:
+#            import psyco
+#            psyco.full()
+#            #psyco.log()
+#            #psyco.profile()
+#        except ImportError:
+#            pass
+
+        #QtGui.QApplication.setKeyboardInputInterval(5000)
+
+    def createAction(self, text, slot=None, shortcut=None, icon=None, tip=None, checkable=False, signal="triggered()"):
+        action = QtGui.QAction(text, self)
+        if icon is not None:
+            action.setIcon(QtGui.QIcon("media/icons/%s" % icon))
+        if shortcut is not None:
+            action.setShortcut(shortcut)
+        if tip is not None:
+            action.setToolTip(tip)
+            action.setStatusTip(tip)
+        if slot is not None:
+            self.connect(action, QtCore.SIGNAL(signal), slot)
+
+        action.setCheckable(checkable)
+
+        return action
+
+    def addActions(self, target, actions):
+        for act in actions:
+            if act is None:
+               target.addSeparator()
+            else:
+                target.addAction(act)
+
+    def setupUi(self):
+        self.setObjectName("MainWindow")
+
+        self.centralwidget = QtGui.QWidget(self)
+        self.centralwidget.setObjectName("centralwidget")
+
+        self.hboxlayout = QtGui.QHBoxLayout(self.centralwidget)
+        self.hboxlayout.setObjectName("hboxlayout")
+
+        self.gridlayout = QtGui.QGridLayout()
+        self.gridlayout.setObjectName("gridlayout")
+
+        self.menubar = QtGui.QMenuBar(self)
+        self.menubar.setObjectName("menubar")
+
+        self.menuFile = QtGui.QMenu(self.menubar)
+        self.menuFile.setObjectName("menuFile")
+
+        self.menuEdit = QtGui.QMenu(self.menubar)
+        self.menuEdit.setObjectName("menuEdit")
+
+        self.menuView = QtGui.QMenu(self.menubar)
+        self.menuView.setObjectName("menuView")
+        self.setMenuBar(self.menubar)
+
+
+        self.statusbar = QtGui.QStatusBar(self)
+        self.statusbar.setObjectName("statusbar")
+        self.setStatusBar(self.statusbar)
+
+#####################################
+        self.actionNeu =self.createAction("&New",  self.actionNewSlot,  QKeySequence.New,  "filenew.png",  "New")
+        self.actionNeu.setObjectName("actionNeu")
+
+        self.actionClose = self.createAction("Quit",  self.actionQuitSlot,  "Alt + Q",  "exit.png",  "Quit")
+        self.actionClose.setObjectName("actionQuit")
+#####################################
+
+
+#####################################
+        self.actionDelete = self.createAction("Delete",  self.actionDeleteSlot,  QKeySequence.Delete,  "editdelete.png",  "Delete")
+        self.actionDelete.setObjectName("actionDelete")
+
+        self.actionCopy = self.createAction("Copy",  self.actionCopySlot,  QKeySequence.Copy,  "editcopy.png",  "Copy")
+        self.actionCopy.setObjectName("actionCopy")
+
+        self.actionCut = self.createAction("Cut",  self.actionCutSlot,  QKeySequence.Cut,  "editcut.png",  "Cut")
+        self.actionCut.setObjectName("actionCut")
+
+        self.actionPaste = self.createAction("Paste",  self.actionPasteSlot,  QKeySequence.Paste,  "editpaste.png",  "Paste")
+        self.actionPaste.setObjectName("actionPaste")
+
+        self.actionMove = self.createAction("&Move",  self.actionMoveSlot,  "g",  "move.png",  "Move selected object")
+        self.actionMove.setObjectName("actionMove")
+
+        self.actionRotate = self.createAction("&Rotate",  self.actionRotateSlot,  "r",  "rotate.png",  "Rotate selected object")
+        self.actionRotate.setObjectName("actionRotate")
+
+        self.actionScale = self.createAction("&Scale",  self.actionScaleSlot,  "x",  "resizecol.png",  "Scale selected object")
+        self.actionRotate.setObjectName("actionRotate")
+
+
+#####################################
+#####################################
+        self.actionSceneExplorer = self.createAction("&Scene Exlporer",  self.toggleSceneExplorer,  "Alt + E",  "view_tree.png",  "Scene Explorer",  False)
+        self.actionSceneExplorer.setObjectName("actionSceneExplorer")
+
+        self.actionPreferences = self.createAction("&Preferences",  self.togglePreferencesWindow,  "Alt + P",  "configure.png",  "Lockenwickler Preferences",  False)
+        self.actionPreferences.setObjectName("actionPreferences")
+
+        self.actionProperty_Window = self.createAction("Pr&operty Window",  self.togglePropertyWindow,  "Alt + P",  "unsortedlist1.png",  "Property Window")
+        self.actionProperty_Window.setObjectName("actionProperty_Window")
+
+        self.actionObject_Selection = self.createAction("&Model Preview Window",  self.toggleModelPreviewWindow,  "Alt + O",  "tux.png",  "Model Preview")
+        self.actionObject_Selection.setObjectName("actionObject_Selection")
+
+        self.actionConsole_Window = self.createAction("&Console Window",  self.toggleConsoleWindow,  "Alt + C",  "console.png",  "Console Window")
+        self.actionConsole_Window.setObjectName("actionConsole_Window")
+
+#####################################
+#####################################
+
+
+        self.menuFile.addAction(self.actionNeu)
+        self.menuFile.addAction(self.actionClose)
+
+        self.menuEdit.addAction(self.actionMove)
+        self.menuEdit.addAction(self.actionRotate)
+        self.menuEdit.addAction(self.actionScale)
+        self.menuEdit.addSeparator()
+        self.menuEdit.addAction(self.actionDelete)
+        self.menuEdit.addAction(self.actionCopy)
+        self.menuEdit.addAction(self.actionCut)
+        self.menuEdit.addAction(self.actionPaste)
+
+        self.menuView.addAction(self.actionSceneExplorer)
+        self.menuView.addAction(self.actionPreferences)
+        self.menuView.addAction(self.actionProperty_Window)
+        self.menuView.addAction(self.actionObject_Selection)
+        self.menuView.addAction(self.actionConsole_Window)
+        self.menubar.addAction(self.menuFile.menuAction())
+        self.menubar.addAction(self.menuEdit.menuAction())
+        self.menubar.addAction(self.menuView.menuAction())
+
+        self.retranslateUi()
+        QtCore.QMetaObject.connectSlotsByName(self)
+
+    def retranslateUi(self):
+        self.setWindowTitle(QtGui.QApplication.translate("MainWindow", "MainWindow", None, QtGui.QApplication.UnicodeUTF8))
+        self.menuFile.setTitle(QtGui.QApplication.translate("MainWindow", "File", None, QtGui.QApplication.UnicodeUTF8))
+        self.menuEdit.setTitle(QtGui.QApplication.translate("MainWindow", "Edit", None, QtGui.QApplication.UnicodeUTF8))
+        self.menuView.setTitle(QtGui.QApplication.translate("MainWindow", "View", None, QtGui.QApplication.UnicodeUTF8))
+        self.actionNeu.setText(QtGui.QApplication.translate("MainWindow", "New", None, QtGui.QApplication.UnicodeUTF8))
+        self.actionMove.setText(QtGui.QApplication.translate("MainWindow", "Move", None, QtGui.QApplication.UnicodeUTF8))
+        self.actionRotate.setText(QtGui.QApplication.translate("MainWindow", "Rotate", None, QtGui.QApplication.UnicodeUTF8))
+        self.actionSceneExplorer.setText(QtGui.QApplication.translate("MainWindow", "Scene Explorer", None, QtGui.QApplication.UnicodeUTF8))
+        self.actionPreferences.setText(QtGui.QApplication.translate("MainWindow", "Preferences", None, QtGui.QApplication.UnicodeUTF8))
+        self.actionProperty_Window.setText(QtGui.QApplication.translate("MainWindow", "Property Window", None, QtGui.QApplication.UnicodeUTF8))
+        self.actionObject_Selection.setText(QtGui.QApplication.translate("MainWindow", "Object Selection", None, QtGui.QApplication.UnicodeUTF8))
+        self.actionClose.setText(QtGui.QApplication.translate("MainWindow", "Quit", None, QtGui.QApplication.UnicodeUTF8))
+        self.actionConsole_Window.setText(QtGui.QApplication.translate("MainWindow", "Console Window", None, QtGui.QApplication.UnicodeUTF8))
+
+    def setupOgre(self, pluginCfgPath="./Plugins.cfg", ogreCfgPath="./ogre.cfg", logPath="./ogre.log"):
+        if platform.system() == "Windows":
+            pluginCfgPath="./Plugins-windows.cfg"
+        else:
+            pluginCfgPath="./Plugins-linux.cfg"
+
+        root = og.Root(pluginCfgPath, ogreCfgPath, logPath)
+        self.ogreRoot = root
+
+        if  not self.ogreRoot.restoreConfig() and not self.ogreRoot.showConfigDialog():
+            sys.exit('Quit from Config Dialog')
+
+        root.initialise(False)
+
+        self.OgreMainWinSceneMgr = self.ogreRoot.createSceneManager(og.ST_GENERIC, "OgreMainWinSceneMgr")
+        self.OgreMainWinSceneMgr.ambientLight = og.ColourValue(4, 4, 4)
+
+        self.moduleName = ""
+        self.moduleManager = ModuleManager(self.ogreRoot,  self.OgreMainWinSceneMgr)
+
+        self.ogreRenderWindow = OgreMainWindow.OgreMainWindow(self.moduleManager,  root,  self.OgreMainWinSceneMgr,  self)
+        self.gridlayout.addWidget(self.ogreRenderWindow,0,0,1,1)
+        self.hboxlayout.addLayout(self.gridlayout)
+        self.setCentralWidget(self.centralwidget)
+
+        og.ResourceGroupManager.getSingleton().addResourceLocation("./media", "FileSystem", "General", False)
+        og.ResourceGroupManager.getSingleton().initialiseAllResourceGroups()
+
+        oglog = og.LogManager.getSingleton().getDefaultLog()
+        oglog.addListener(self.consoleWindow.lockenLog)
+
+    def update(self):
+#        try:
+#            self.OgreMainWinSceneMgr.getSceneNode("saeule_076_node").yaw(0.02)
+#        except Exception,  e:
+#            pass
+
+        self.ogreRoot.renderOneFrame()
+
+    def actionNewSlot(self):
+        print "dbg: new"
+        return
+
+    def actionQuitSlot(self):
+        self.close()
+
+    def actionDeleteSlot(self):
+        self.moduleManager.deleteObjects()
+
+    def actionCopySlot(self):
+        self.moduleManager.copyObjects()
+
+    def actionCutSlot(self):
+        self.moduleManager.cutObjects()
+
+    def actionPasteSlot(self):
+        self.moduleManager.pasteObjects(self.ogreRenderWindow.getCameraToViewportRay())
+
+    def actionMoveSlot(self):
+        self.moduleManager.pivot.setMoveMode()
+
+    def actionRotateSlot(self):
+        self.moduleManager.pivot.setRotateMode()
+
+    def actionScaleSlot(self):
+        self.moduleManager.pivot.setScaleMode()
+
+    def togglePreferencesWindow(self):
+        if self.prefDialog.isHidden():
+            self.prefDialog.show()
+        else:
+            self.prefDialog.hide()
+
+    def toggleModelPreviewWindow(self):
+        if self.modelSelectionDock.isHidden():
+            self.modelSelectionDock.show()
+        else:
+            self.modelSelectionDock.hide()
+
+    def toggleSceneExplorer(self):
+        if self.sceneExplorerDock.isHidden():
+            self.sceneExplorerDock.show()
+        else:
+            self.sceneExplorerDock.hide()
+
+    def togglePropertyWindow(self):
+        if self.propertyDock.isHidden():
+            self.propertyDock.show()
+        else:
+            self.propertyDock.hide()
+
+    def toggleConsoleWindow(self):
+        if self.consoleDock.isHidden():
+            self.consoleDock.show()
+        else:
+            self.consoleDock.hide()
+
+    # parses the moduleconfig.rb and searches for all loader.loadmap(" statements in the ruby script
+    # and parses them too
+    def loadModule(self, modulePath, moduleName):
+        if self.moduleName == moduleName:
+            return
+
+        self.moduleName = moduleName
+        self.workingDir = modulePath + moduleName # the module path
+        self.workingDirCommon = modulePath + "common" # the module path of the common module
+
+        import codecs
+        import glob
+
+        modConfig = self.workingDir + "/scripts/moduleconfig.rb"
+        if isfile(modConfig): # is the modconfig existing?
+            f = codecs.open(modConfig, 'r', 'utf-8')
+        else:
+            print ("Error: couldn't find module config")
+            pass
+
+        self.mapFiles = [] # a list in case the module has more than one map file
+
+        for line in f:
+            lStripped = line.strip() #strip the whitespace away, not needed here
+
+            # get the map file(s)
+            if lStripped.startswith("loader.loadMap("): # all loadMap commands begin with loader.loadMap(
+                spl = lStripped.split('"')
+                for a in spl:
+                    if a.endswith(".xml"):
+                        pathToMapFile = self.workingDir + "/maps/" + a
+                        self.mapFiles.append(pathToMapFile)
+
+        self.setWindowTitle(moduleName)
+
+        self.modelSelectionDialog.scanDirForModels(self.workingDir, moduleName)
+        self.modelSelectionDialog.scanDirForModels(self.workingDirCommon, "common")
+
+        self.setResourcePaths(self.workingDir, moduleName)
+        self.setResourcePaths(self.workingDirCommon, "common")
+        og.ResourceGroupManager.getSingleton().initialiseAllResourceGroups()
+
+        command = (os.path.join(self.workingDir,  "maps") + "/*.xml")
+        for mf in glob.glob(command): # search for all xml files in the maps directory and add them
+            self.mapFiles.append(mf)
+
+        command = (os.path.join(self.workingDir,  "maps") + "/*.scene")
+        for mf in glob.glob(command): # search for all xml files in the maps directory and add them
+            self.mapFiles.append(mf)
+
+        self.moduleManager.load(moduleName,  self.mapFiles)
+
+    def setResourcePaths(self, path, moduleName):
+        for file in os.listdir(path):
+            curFile = path + "/" + file
+
+            if file.startswith('.'): #ignore dot files (hidden)
+                continue
+            if isdir(curFile):
+                og.ResourceGroupManager.getSingleton().addResourceLocation(curFile, "FileSystem", moduleName, False)
+                self.setResourcePaths(curFile, moduleName)
+                continue
+            if isfile(curFile):
+                pass
+
+    def createDockWindows(self):
+        self.propertyDock = QtGui.QDockWidget(self.tr("Properties"), self)
+        self.propertyDock.setObjectName("PropertyDockWindow")
+        self.propertyDock.setAllowedAreas(QtCore.Qt.LeftDockWidgetArea | QtCore.Qt.RightDockWidgetArea)
+        self.propertyDock.setWidget(self.objectPropertyWin)
+        self.addDockWidget(QtCore.Qt.LeftDockWidgetArea, self.propertyDock)
+
+        self.modelSelectionDock = QtGui.QDockWidget(self.tr("Models"), self)
+        self.modelSelectionDock.setObjectName("ModelSelectionDockWindow")
+        self.modelSelectionDock.setAllowedAreas(QtCore.Qt.LeftDockWidgetArea | QtCore.Qt.RightDockWidgetArea)
+        self.modelSelectionDock.setWidget(self.modelSelectionDialog)
+        self.addDockWidget(QtCore.Qt.RightDockWidgetArea, self.modelSelectionDock)
+
+        self.sceneExplorerDock = QtGui.QDockWidget(self.tr("Scene Explorer"), self)
+        self.sceneExplorerDock.setObjectName("SceneExplorerDockWindow")
+        self.sceneExplorerDock.setAllowedAreas(QtCore.Qt.LeftDockWidgetArea | QtCore.Qt.RightDockWidgetArea)
+        self.sceneExplorerDock.setWidget(self.sceneExplorerWin)
+        self.addDockWidget(QtCore.Qt.LeftDockWidgetArea, self.sceneExplorerDock)
+
+        self.consoleDock = QtGui.QDockWidget(self.tr("Console"), self)
+        self.consoleDock.setObjectName("ConsoleDockWindow")
+        self.consoleDock.setAllowedAreas(QtCore.Qt.BottomDockWidgetArea | QtCore.Qt.TopDockWidgetArea)
+        self.consoleDock.setWidget(self.consoleWindow)
+        self.addDockWidget(QtCore.Qt.BottomDockWidgetArea, self.consoleDock)
+
+        self.fileToolBar = self.addToolBar("File Toolbar")
+        self.fileToolBar.setObjectName("FileToolBar")
+        self.fileToolBar.setAllowedAreas(QtCore.Qt.TopToolBarArea | QtCore.Qt.BottomToolBarArea)
+        self.fileToolBar.addAction(self.actionNeu)
+        self.fileToolBar.addAction(self.actionClose)
+        self.addToolBar(QtCore.Qt.TopToolBarArea, self.fileToolBar)
+
+        self.moveToolBar = self.addToolBar("Transformation Bar")
+        self.moveToolBar.setObjectName("TransformationBar")
+        self.moveToolBar.setAllowedAreas(QtCore.Qt.TopToolBarArea | QtCore.Qt.BottomToolBarArea)
+        self.moveToolBar.addAction(self.actionMove)
+        self.moveToolBar.addAction(self.actionRotate)
+        self.moveToolBar.addAction(self.actionScale)
+        self.addToolBar(QtCore.Qt.TopToolBarArea, self.moveToolBar)
+
+    def keyPressEvent(self,  event):
+        if not event.isAutoRepeat():
+            self.ogreRenderWindow.keyPressEvent(event)
+
+    def keyReleaseEvent(self,  event):
+        if not event.isAutoRepeat():
+            self.ogreRenderWindow.keyReleaseEvent(event)
+        pass
+
+    def connectActionButtons(self):
+        pass
+
+    def saveOnClose(self):
+        reply = QtGui.QMessageBox.question(self,  "Rastullahs Lockenwickler - Unsaved Chages",  "Save unsaved changes?",  QtGui.QMessageBox.Yes|QtGui.QMessageBox.No|QtGui.QMessageBox.Cancel)
+        if reply == QtGui.QMessageBox.Cancel:
+            return False
+        if reply == QtGui.QMessageBox.Yes:
+            print""
+            #TODO: implement save here
+        return True
+
+    def closeEvent(self,  event):
+        if self.saveOnClose():
+            settings = QtCore.QSettings()
+            settings.setValue("MainWindow/Geometry",  QtCore.QVariant(self.saveGeometry()))
+            settings.setValue("MainWIndow/DockWindows",  QtCore.QVariant(self.saveState()))
+        else:
+            event.ignore()
+
+if __name__ == "__main__":
+    app = QtGui.QApplication(sys.argv)
+    app.setOrganizationName("Team Pantheon")
+    app.setOrganizationDomain("rastullahs-lockenpracht.de/team")
+    app.setApplicationName("Lockenwickler")
+
+    form = Lockenwickler()
+    form.show()
+
+    sys.exit(app.exec_())
+

Modified: rl/branches/newton20/editors/Lockenwickler/src/ModelSelectionDialog.py
===================================================================
--- rl/branches/newton20/editors/Lockenwickler/src/ModelSelectionDialog.py	2008-10-19 13:48:32 UTC (rev 4562)
+++ rl/branches/newton20/editors/Lockenwickler/src/ModelSelectionDialog.py	2008-10-19 16:35:21 UTC (rev 4563)
@@ -1,3 +1,22 @@
+#################################################
+ # Copyright (C) 2008  Stefan Stammberger
+ #
+ # This library is free software; you can redistribute it and/or
+ # modify it under the terms of the GNU Lesser General Public
+ # License as published by the Free Software Foundation; either
+ # version 2.1 of the License, or (at your option) any later version.
+ #
+ # This library is distributed in the hope that it will be useful,
+ # but WITHOUT ANY WARRANTY; without even the implied warranty of
+ # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ # Lesser General Public License for more details.
+ #
+ # You should have received a copy of the GNU Lesser General Public
+ # License along with this library; if not, write to the Free Software
+ # Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ #################################################
+
+
 import sys
 import os
 from os.path import isdir
@@ -3,19 +22,37 @@
 from os.path import isfile
 
+from PyQt4.QtGui import *
+from PyQt4.QtCore import *
+
 import OgreWidget
 import ogre.renderer.OGRE as og
-from PyQt4 import QtGui, QtCore
 
-class ModelSelectionDialog(QtGui.QDialog):
+
+class MyListWidget(QListWidget):
+    def __init__(self,  parent):
+        super(MyListWidget, self).__init__(parent)
+        self.setDragEnabled(True)
+
+    def startDrag(self,  dropActions):
+        data = QByteArray()
+        stream = QDataStream(data,  QIODevice.WriteOnly)
+        stream << self.currentItem().text()
+        mimeData = QMimeData()
+        mimeData.setData("application/x-text", data)
+        drag = QDrag(self)
+        drag.setMimeData(mimeData)
+        drag.start(Qt.CopyAction)
+
+class ModelSelectionDialog(QDialog):
     def __init__(self, ogreRoot, parent=None):
-        QtGui.QDialog.__init__(self, parent)
+        QDialog.__init__(self, parent)
         self.ogreRoot = ogreRoot
 
         self.setupUi()
 
-        QtCore.QObject.connect(self.modelSearchBox, QtCore.SIGNAL("textChanged(QString)"),
+        self.connect(self.modelSearchBox, SIGNAL("textChanged(QString)"),
                                self.updateModelList)
 
-        QtCore.QObject.connect(self.listWidget, QtCore.SIGNAL("itemSelectionChanged ()"),
+        self.connect(self.listWidget, SIGNAL("itemSelectionChanged ()"),
                                self.setPreviewedModel)
 
@@ -31,37 +68,39 @@
         self.lastMousePosX = 0
         self.lastMousePosY = 0
 
+
+
     def setupUi(self):
         self.setObjectName("modelPreviewDialog")
-        self.resize(QtCore.QSize(QtCore.QRect(0,0,272,744).size()).expandedTo(self.minimumSizeHint()))
+        self.resize(QSize(QRect(0,0,272,744).size()).expandedTo(self.minimumSizeHint()))
 
-        self.gridlayout = QtGui.QGridLayout(self)
+        self.gridlayout = QGridLayout(self)
         self.gridlayout.setObjectName("gridlayout")
 
-        self.modelSearchBox = QtGui.QLineEdit(self)
+        self.modelSearchBox = QLineEdit(self)
         self.modelSearchBox.setObjectName("modelSearchBox")
         self.gridlayout.addWidget(self.modelSearchBox,0,0,1,1)
 
-        self.splitter = QtGui.QSplitter(self)
-        self.splitter.setOrientation(QtCore.Qt.Vertical)
+        self.splitter = QSplitter(self)
+        self.splitter.setOrientation(Qt.Vertical)
         self.splitter.setObjectName("splitter")
 
-        self.listWidget = QtGui.QListWidget(self.splitter)
+        self.listWidget = MyListWidget(self.splitter)
         self.listWidget.setObjectName("listWidget")
 
         self.ogreModelPrevWindowSceneMgr = self.ogreRoot.createSceneManager(og.ST_GENERIC,"ogreModelPrevWindowSceneMgr")
         self.ogreModelPrevWindow = OgreWidget.OgreWidget("ModelPrevWin", self.ogreRoot, self.ogreModelPrevWindowSceneMgr, "PrevCam",
                                                          self.splitter)
-        self.ogreModelPrevWindow.setMinimumSize(QtCore.QSize(200,200))
+        self.ogreModelPrevWindow.setMinimumSize(QSize(200,200))
         self.ogreModelPrevWindow.setObjectName("modelPreviewWindow")
         self.gridlayout.addWidget(self.splitter,1,0,1,1)
 
         self.retranslateUi()
-        QtCore.QObject.connect(self.modelSearchBox,QtCore.SIGNAL("textChanged(QString)"),self.listWidget.clearSelection)
-        QtCore.QMetaObject.connectSlotsByName(self)
+        QObject.connect(self.modelSearchBox,SIGNAL("textChanged(QString)"),self.listWidget.clearSelection)
+        QMetaObject.connectSlotsByName(self)
 
     def retranslateUi(self):
-        self.setWindowTitle(QtGui.QApplication.translate("modelPreviewDialog", "Dialog", None, QtGui.QApplication.UnicodeUTF8))
+        self.setWindowTitle(QApplication.translate("modelPreviewDialog", "Dialog", None, QApplication.UnicodeUTF8))
 
     def setPreviewedModel(self):
         if self.ent != None:
@@ -99,7 +138,13 @@
 
         self.listWidget.sortItems()
 
+    def eventFilter(self, obj, event):
+        if event.type() == 5:
+            self.startDrag()
+            event.accept()
 
+        return False
+
     def event(self, event):
         if event.type() == 31: # scroll wheel turned
             if event.delta() < 0:
@@ -108,17 +153,18 @@
                 self.ogreModelPrevWindow.zoomCamera( 5)
 
         if event.type() == 5: #mouse moved while button down
-           rotX = (event.globalX() - self.lastMousePosX) * 0.01
-           rotY = (event.globalY() - self.lastMousePosY) * 0.01
+            rotX = (event.globalX() - self.lastMousePosX) * 0.01
+            rotY = (event.globalY() - self.lastMousePosY) * 0.01
 
-           if rotX < 0.1 and rotY < 0.1: # first click, don't do anything at all here
-               self.ogreModelPrevWindow.orbitCamera(-rotX,  rotY)
+            if rotX < 0.1 and rotY < 0.1: # first click, don't do anything at all here
+                self.ogreModelPrevWindow.orbitCamera(-rotX,  rotY)
 
-           self.lastMousePosX = event.globalX()
-           self.lastMousePosY = event.globalY()
+            self.lastMousePosX = event.globalX()
+            self.lastMousePosY = event.globalY()
 
         if event.type() == 3: # mouse released
             self.lastMousePosX = 0
             self.lastMousePosY = 0
 
         return False
+

Modified: rl/branches/newton20/editors/Lockenwickler/src/ModuleManager.py
===================================================================
--- rl/branches/newton20/editors/Lockenwickler/src/ModuleManager.py	2008-10-19 13:48:32 UTC (rev 4562)
+++ rl/branches/newton20/editors/Lockenwickler/src/ModuleManager.py	2008-10-19 16:35:21 UTC (rev 4563)
@@ -1,3 +1,21 @@
+#################################################
+ # Copyright (C) 2008  Stefan Stammberger
+ #
+ # This library is free software; you can redistribute it and/or
+ # modify it under the terms of the GNU Lesser General Public
+ # License as published by the Free Software Foundation; either
+ # version 2.1 of the License, or (at your option) any later version.
+ #
+ # This library is distributed in the hope that it will be useful,
+ # but WITHOUT ANY WARRANTY; without even the implied warranty of
+ # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ # Lesser General Public License for more details.
+ #
+ # You should have received a copy of the GNU Lesser General Public
+ # License along with this library; if not, write to the Free Software
+ # Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ #################################################
+
 import sys
 import xml.dom.minidom as xml
 
@@ -9,6 +27,7 @@
 # a class to store information about a object that got selected
 class SelectionObject():
     def __init__(self,  entity,  distance):
+        self.entityName = entity.getName()
         self.entity = entity #the selected entity
         self.distance = distance # the distance from camera at the time of selection
         self.isPivot = False
@@ -20,6 +39,12 @@
         else:
             self.entity.getParentNode().showBoundingBox(False)
 
+    def __eq__(self, other):
+        return self.entity.getName() == other.entity.getName()
+
+    def __ne__(self, other):
+        return self.entity.getName() != other.entity.getName()
+
 class MyRaySceneQueryListener ( og.RaySceneQueryListener ):
     def __init__( self ):
         super ( MyRaySceneQueryListener, self ).__init__()
@@ -45,10 +70,12 @@
             return -1
 
     def queryResult ( self, entity, distance ):
-        print entity.getName()
+        #print "dbg: " + entity.getName()
         if distance == 0.0: #camera is in the bounding box, ignore this selection
             return True
-        elif entity.getName() == "rayLine" :
+#        elif entity.getName() == "rayLine" :
+#            return True
+        elif entity.getName() == "OgreMainWin::0::ViewportGrid":
             return True
         elif entity.isVisible() and entity.getName() == "EditorXArrow":
             so = SelectionObject(entity,  distance)
@@ -84,31 +111,28 @@
         return True
 
     def reset(self):
-        for so in self.selectionList:
-            so.setSelected(False)
-
         self.previousSelected = -1
         self.currentSelected = -1
+        del self.selectionList[:]
+        #self.selectionList = []
 
-        self.selectionList = []
+#    def iterateEntityUnderMouse(self):
+#        self.previousSelected = self.currentSelected
+#        if len(self.selectionList) >= self.currentSelected: # would mean we are out of bounds
+#            self.selectionList[self.currentSelected].setSelected(False)
+#
+#        self.currentSelected += 1
+#
+#        if len(self.selectionList) == self.currentSelected: # means we are out of bounds and reached the end of the list, reset it to zero
+#            self.currentSelected = 0
+#
+#        if len(self.selectionList) >= self.currentSelected: # would mean we are out of bounds
+#            #print str(self.selectionList[self.currentSelected].distance) + " "  + self.selectionList[self.currentSelected].entity.getName()
+#            if self.rayCastToPolygonLevelOnCurrentSelection():
+#                self.selectionList[self.currentSelected].setSelected(True)
+#                return self.selectionList[self.currentSelected]
 
-    def iterateEntityUnderMouse(self):
-        self.previousSelected = self.currentSelected
-        if len(self.selectionList) >= self.currentSelected: # would mean we are out of bounds
-            self.selectionList[self.currentSelected].setSelected(False)
 
-        self.currentSelected += 1
-
-        if len(self.selectionList) == self.currentSelected: # means we are out of bounds and reached the end of the list, reset it to zero
-            self.currentSelected = 0
-
-        if len(self.selectionList) >= self.currentSelected: # would mean we are out of bounds
-            #print str(self.selectionList[self.currentSelected].distance) + " "  + self.selectionList[self.currentSelected].entity.getName()
-            if self.rayCastToPolygonLevelOnCurrentSelection():
-                self.selectionList[self.currentSelected].setSelected(True)
-                return self.selectionList[self.currentSelected]
-
-
     def getMeshInformation(self,  entity):
         numVertices = 0
         numIndices = 0
@@ -120,11 +144,9 @@
         pMesh = entity.getMesh()
 
         pos =    entity.getParentNode().getWorldPosition()
+        orient = entity.getParentNode().getWorldOrientation()
         scale =  entity.getParentNode().getScale()
-        orient = entity.getParentNode().getWorldOrientation()
 
-
-
         for i in range ( pMesh.getNumSubMeshes() ):
             pSubMesh = pMesh.getSubMesh(i)
             if pSubMesh.useSharedVertices:
@@ -207,7 +229,7 @@
 
             ih = 0
             for blah in self.mVertexList:
-                print str(ih) + ": "  +  str(blah)
+                #print str(ih) + ": "  +  str(blah)
                 ih += 1
 
 #            for blah in self.mIndexList:
@@ -229,15 +251,38 @@
 
 
     def rayCastToPolygonLevelOnSingleMesh(self,  ray,  entity):
+        return True
         self.getMeshInformation(entity)
+        name = entity.getName()
+        print "dbg: " + name
+
+        temp = []
+        for vec in self.mVertexList:
+            temp.append(vec.x)
+            temp.append(vec.y)
+            temp.append(vec.z)
+
         globalPosition = entity.getParentNode().getWorldPosition()
+        globalOrientation = entity.getParentNode().getWorldOrientation()
 
+
         i = 0
         while i <= (len(self.mIndexList) - 3):
-            result = og.Math.intersects(ray, globalPosition + self.mVertexList[self.mIndexList[i]], globalPosition + self.mVertexList[self.mIndexList[i+1]],
-                                                                                                                                                          globalPosition + self.mVertexList[self.mIndexList[i+2]], True, False)
+            verta = globalPosition + self.mVertexList[self.mIndexList[i]]
+            vertb = globalPosition + self.mVertexList[self.mIndexList[i+1]]
+            vertc = globalPosition + self.mVertexList[self.mIndexList[i+2]]
 
+            verta = globalOrientation * verta
+            vertb = globalOrientation * vertb
+            vertc = globalOrientation * vertc
+            normal = og.Math.calculateBasicFaceNormal(verta, vertb, vertc)
+
+            result = og.Math.intersects(ray, verta, vertb, vertc, True, True)
+            #result = og.Math.intersects(ray, globalPosition + self.mVertexList[self.mIndexList[i]], globalPosition + self.mVertexList[self.mIndexList[i+1]],
+            #                                                                                                                                              globalPosition + self.mVertexList[self.mIndexList[i+2]], normal,  True, True)
+
             if result.first:
+                print "dbg: Treffer!!!!!!!!!"
                 return True
 
             i += 3
@@ -267,11 +312,13 @@
         self.raySceneQuery = self.sceneManager.createRayQuery(og.Ray())
 
         self.userSelectionList = []
+        self.cutList = [] # selection objects that has been cut out and wait to be pasted again
+        self.cutListPreviousNodes = [] # contains the nodes they where copnnected to before the cut
 
         self.listenerDings = MyRaySceneQueryListener()
 
         self.lastRay = None
-        self.rayLine = None
+#        self.rayLine = None
 
         self.pivot = None
         self.movingPivot = False
@@ -280,6 +327,13 @@
         self.middleMouseDown = False
         self.rightMouseDown = False
 
+        self.dropCount = 0
+        self.dropNode = None
+        self.dropEntity = None
+        self.dropCollisionPlane = og.Plane(og.Vector3.UNIT_Y, og.Vector3.ZERO)
+
+        self.numerOfCopys = 0 #everytime a copy is made this numer is increased to generate unique node and mesh names
+
     def load(self,  moduleName,  mapFiles):
         self.moduleName = moduleName
         self.mapFiles = mapFiles
@@ -291,6 +345,7 @@
                 self.parseSceneNodes(node)
 
         self.pivot = Pivot(self.sceneManager)
+        self.pivot.hide()
 
     def parseSceneNodes(self,  nodeList):
         for ent in nodeList:
@@ -330,16 +385,17 @@
                 print "Warning: Meshfile " + meshFile + " could not be found."
                 return
 
-            n = self.sceneManager.getRootSceneNode().createChild()
+            n = self.sceneManager.getRootSceneNode().createChild(entityName + "_node")
             n.attachObject(e)
             n.setPosition(nodePosition)
-            n.setOrientation(nodeRotation)
+            #n.setOrientation(nodeRotation)
             n.setScale(nodeScale)
 
         pass
 
     # called when a click into Main Ogre Window occurs
     def selectionClick(self,  ray,  controlDown=False,  shiftDown=False):
+        self.listenerDings.reset()
         self.lastRay = ray
         self.listenerDings.currentRay = ray
         self.raySceneQuery.Ray = ray
@@ -348,7 +404,8 @@
         so = self.listenerDings.rayCastToPolygonLevel(ray)
         if so is not None:
             if not so.isPivot:
-                self.pivot.show()
+                if self.pivot is not None:
+                    self.pivot.show()
                 if not controlDown and not shiftDown:
                     self.resetSelection()
                     so.setSelected(True)
@@ -356,51 +413,146 @@
                     self.updatePivots()
                 elif controlDown and not shiftDown:
                     so.setSelected(True)
+
+                    for soFromList in self.userSelectionList:
+                        if soFromList == so:
+                            return # object already selected
+
                     self.userSelectionList.append(so)
                     self.updatePivots()
+
+
                 elif not controlDown and shiftDown:
                     for selo in self.userSelectionList:
-                        if so.entity.getName() == selo.entity.getName():
+                        if so == selo:
                             so.setSelected(False)
                             self.userSelectionList.remove(selo)
                     self.updatePivots()
             else:
-                print "isPivot: " + str(so.entity.getName())
+                #so.entity is the pivot direction that was clicked
                 self.pivot.startTransforming(so.entity,  self.userSelectionList)
         else:
-            print "noneee"
             self.resetSelection() # click in empty space, deselect everything
-            self.pivot.hide()
+            if self.pivot is not None:
+                self.pivot.hide()
 
-        if self.rayLine == None:
-            self.rayLine = self.sceneManager.createManualObject("rayLine")
-            self.rayLine.setDynamic(True)
-            self.sceneManager.getRootSceneNode().createChildSceneNode("raynode").attachObject(self.rayLine)
+#        if self.rayLine == None:
+#            self.rayLine = self.sceneManager.createManualObject("rayLine")
+#            self.rayLine.setDynamic(True)
+#            self.sceneManager.getRootSceneNode().createChildSceneNode("raynode").attachObject(self.rayLine)
+#
+#            self.rayLine.begin("BaseWhiteNoLighting", og.RenderOperation.OT_LINE_STRIP)
+#
+#            self.rayLine.position(ray.getOrigin())
+#            self.rayLine.position( ray.getPoint(10000))
+#
+#            self.rayLine.end()
+#
+#        else:
+#            self.rayLine.beginUpdate(0)
+#
+#            self.rayLine.position(ray.getOrigin())
+#            self.rayLine.position( ray.getPoint(10000))
+#
+#            self.rayLine.end()
 
-            self.rayLine.begin("BaseWhiteNoLighting", og.RenderOperation.OT_LINE_STRIP)
+    def deleteObjects(self):
+        if len(self.userSelectionList) < 1:
+            return
 
-            self.rayLine.position(ray.getOrigin())
-            self.rayLine.position( ray.getPoint(10000))
+        self.pivot.hide()
 
-            self.rayLine.end()
+        for so in self.userSelectionList:
+            self.sceneManager.destroySceneNode(so.entity.getParentNode().getName())
+            del so
 
-        else:
-            self.rayLine.beginUpdate(0)
+        self.userSelectionList = []
 
-            self.rayLine.position(ray.getOrigin())
-            self.rayLine.position( ray.getPoint(10000))
+    def incrementNameSuffixNumber(self, name):
+        newName = ""
+        split = name.split("_")
+        lastPart = len(split)-1
+        newName = name.rstrip(split[lastPart])
+        newName = newName + str(self.numerOfCopys)
 
-            self.rayLine.end()
+#        if split[lastPart].isdigit() and not split[lastPart].startswith("0"):
+#            num = int(split[lastPart])
+#            num = num + 1
+#            newName = name.rstrip(split[lastPart])
+#            newName = newName + str(num)
+#        else:
+#            newName = name + "_1"
 
+        self.numerOfCopys = self.numerOfCopys + 1
+        return newName
+
+    def copyObjects(self):
+        if len(self.userSelectionList) < 1:
+            return
+
+        newSelectionList = []
+        print "dbg: "
+        for so in self.userSelectionList:
+            nodeName = self.incrementNameSuffixNumber(so.entity.getParentNode().getName())
+            newNode = self.sceneManager.getRootSceneNode().createChild(nodeName)
+
+            entityName = self.incrementNameSuffixNumber(so.entity.getName())
+            newEntity = self.sceneManager.createEntity(entityName, so.entity.getMesh().getName())
+
+            newNode.attachObject(newEntity)
+            newNode.setPosition(so.entity.getParentNode().getPosition())
+            newNode.setOrientation(so.entity.getParentNode().getOrientation())
+            newNode.setScale(so.entity.getParentNode().getScale())
+
+            newSO = SelectionObject(newEntity, so.distance)
+            newSO.setSelected(True)
+            newSelectionList.append(newSO)
+
+        self.resetSelection()
+        self.userSelectionList = newSelectionList
+
+    def cutObjects(self):
+        if len(self.userSelectionList) < 1:
+            return
+
+        self.cutList = []
+        for so in self.userSelectionList:
+            self.cutListPreviousNodes.append(so.entity.getParentNode().getParent())
+            so.entity.getParentNode().getParent().removeChild(so.entity.getParentNode())
+            # set the "point of gravity" of all the cutted nodes to world origin at 0,0,0
+            # so we only have to translate them to their new destination when they get pasted
+            # the position of the pivot point is considered as the center of gravity
+            so.entity.getParentNode().setPosition(so.entity.getParentNode().getPosition() - self.pivot.getPosition())
+            self.cutList.append(so)
+        self.resetSelection()
+    def pasteObjects(self,  ray):
+        if len(self.cutList) < 1:
+            return
+
+        result = og.Math.intersects(ray, self.dropCollisionPlane)
+        if result.first == True:
+            i=0
+            while i < len(self.cutList):
+                self.cutListPreviousNodes[i].addChild(self.cutList[i].entity.getParentNode())
+                self.cutList[i].entity.getParentNode().translate(ray.getPoint(result.second))
+                i = i+1
+        else:
+            i=0
+            while i < len(self.cutList):
+                self.cutListPreviousNodes[i].addChild(self.cutList[i].entity.getParentNode())
+                self.cutList[i].entity.getParentNode().translate(ray.getPoint(100.0))
+                i = i+1
+        self.cutList = []
+
     def leftMouseUp(self):
-        if self.pivot.isTransforming:
+        if self.pivot is not None and self.pivot.isTransforming:
             self.pivot.stopTransforming()
 
-    def iterateEntityUnderMouse(self):
-        self.listenerDings.iterateEntityUnderMouse()
+#    def iterateEntityUnderMouse(self):
+#        self.listenerDings.iterateEntityUnderMouse()
+#
+#        pass
 
-        pass
-
     def resetSelection(self):
         for so in self.userSelectionList:
             so.setSelected(False)
@@ -416,14 +568,36 @@
 
         for so in self.userSelectionList:
             newPivotPosition += so.entity.getParentNode().getPosition()
+        if self.pivot is not None:
+            self.pivot.setPosition(newPivotPosition / len(self.userSelectionList))
 
-        self.pivot.setPosition(newPivotPosition / len(self.userSelectionList))
-
     def unload(self,  saveOnUnload=True):
         pass
 
     def save(self):
         pass
 
+    def startDropModelAction(self, meshFile, ray):
+        self.dropEntity = self.sceneManager.createEntity("dropMesh" + str(self.dropCount), str(meshFile))
+        self.dropNode = self.sceneManager.getRootSceneNode().createChild("dropNode" + str(self.dropCount))
+        self.dropNode.attachObject(self.dropEntity)
 
+        result = og.Math.intersects(ray, self.dropCollisionPlane)
+        if result.first == True:
+            self.dropNode.setPosition(ray.getPoint(result.second))
+        else:
+            self.dropNode.setPosition(ray.getPoint(50))
 
+        self.dropCount += 1
+
+    def moveDropModelAction(self, ray):
+        result = og.Math.intersects(ray, self.dropCollisionPlane)
+        if result.first == True:
+            self.dropNode.setPosition(ray.getPoint(result.second))
+        else:
+            self.dropNode.setPosition(ray.getPoint(50))
+
+
+    def stopDropModelAction(self, ray):
+        pass
+

Modified: rl/branches/newton20/editors/Lockenwickler/src/MovePivot.py
===================================================================
--- rl/branches/newton20/editors/Lockenwickler/src/MovePivot.py	2008-10-19 13:48:32 UTC (rev 4562)
+++ rl/branches/newton20/editors/Lockenwickler/src/MovePivot.py	2008-10-19 16:35:21 UTC (rev 4563)
@@ -1,12 +1,32 @@
+#################################################
+ # Copyright (C) 2008  Stefan Stammberger
+ #
+ # This library is free software; you can redistribute it and/or
+ # modify it under the terms of the GNU Lesser General Public
+ # License as published by the Free Software Foundation; either
+ # version 2.1 of the License, or (at your option) any later version.
+ #
+ # This library is distributed in the hope that it will be useful,
+ # but WITHOUT ANY WARRANTY; without even the implied warranty of
+ # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ # Lesser General Public License for more details.
+ #
+ # You should have received a copy of the GNU Lesser General Public
+ # License along with this library; if not, write to the Free Software
+ # Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ #################################################
+
+
 import sys
 import ogre.renderer.OGRE as og
 
-
 class Pivot():
     def __init__(self,  sceneManager):
         self.sceneManager = sceneManager
+        self.camera = self.sceneManager.getCamera("MainCam")
 
         self.mode = None
+        self.isHidden = True
 
         self.meshManager = og.MeshManager.getSingleton ()
 
@@ -24,6 +44,9 @@
     def __createMovePivot(self):
         self.xMoveEntity = self.sceneManager.createEntity("EditorXArrow",  "Pivot_Arrow.mesh")
         self.xMoveEntity.setMaterialName("Lockenwickler_Pivot_X")
+#        self.xMoveEntity.getSubEntity(0).getMaterial().setDepthCheckEnabled(False)
+#        self.xMoveEntity.getSubEntity(0).getMaterial().setDepthWriteEnabled(False)
+        self.xMoveEntity.setRenderQueueGroup(og.RENDER_QUEUE_OVERLAY)
         self.xMoveNode = self.pivotNode.createChildSceneNode()
         self.xMoveNode.attachObject(self.xMoveEntity)
         self.xMoveNode.translate(og.Vector3(2, 0, 0))
@@ -41,6 +64,7 @@
 
         self.yMoveEntity = self.sceneManager.createEntity("EditorYArrow",  "Pivot_Arrow.mesh")
         self.yMoveEntity.setMaterialName("Lockenwickler_Pivot_Y")
+        self.yMoveEntity.setRenderQueueGroup(og.RENDER_QUEUE_OVERLAY)
         self.yMoveNode = self.pivotNode.createChildSceneNode()
         self.yMoveNode.attachObject(self.yMoveEntity)
         self.yMoveNode.translate(og.Vector3(0, 2, 0))
@@ -58,6 +82,7 @@
 
         self.zMoveEntity = self.sceneManager.createEntity("EditorZArrow",  "Pivot_Arrow.mesh")
         self.zMoveEntity.setMaterialName("Lockenwickler_Pivot_Z")
+        self.zMoveEntity.setRenderQueueGroup(og.RENDER_QUEUE_OVERLAY)
         self.zMoveNode = self.pivotNode.createChildSceneNode()
         self.zMoveNode.attachObject(self.zMoveEntity)
         self.zMoveNode.translate(og.Vector3(0, 0, 2))
@@ -72,6 +97,7 @@
     def __createRotatePivot(self):
         self.xRotateEntity = self.sceneManager.createEntity("EditorXRotator",  "Rotate_Torus.mesh")
         self.xRotateEntity.setMaterialName("Lockenwickler_Pivot_X")
+        self.xRotateEntity.setRenderQueueGroup(og.RENDER_QUEUE_OVERLAY)
         self.xRotateNode = self.pivotNode.createChildSceneNode()
         self.xRotateNode.attachObject(self.xRotateEntity)
         #self.xRotateNode.translate(0, 0, -5)
@@ -79,6 +105,7 @@
 
         self.yRotateEntity = self.sceneManager.createEntity("EditorYRotator",  "Rotate_Torus.mesh")
         self.yRotateEntity.setMaterialName("Lockenwickler_Pivot_Y")
+        self.yRotateEntity.setRenderQueueGroup(og.RENDER_QUEUE_OVERLAY)
         self.yRotateNode = self.pivotNode.createChildSceneNode()
         self.yRotateNode.attachObject(self.yRotateEntity)
         #self.yRotateNode.translate(0, 0, -10)
@@ -86,10 +113,10 @@
 
         self.zRotateEntity = self.sceneManager.createEntity("EditorZRotator",  "Rotate_Torus.mesh")
         self.zRotateEntity.setMaterialName("Lockenwickler_Pivot_Z")
+        self.zRotateEntity.setRenderQueueGroup(og.RENDER_QUEUE_OVERLAY)
         self.zRotateNode = self.pivotNode.createChildSceneNode()
         self.zRotateNode.attachObject(self.zRotateEntity)
 
-        pass
 
     def __createScalePivot(self):
         pass
@@ -97,7 +124,11 @@
     def setPosition(self,  pos):
         self.pivotNode.setPosition(pos)
 
+    def getPosition(self):
+        return self.pivotNode.getPosition()
+
     def startTransforming(self, dirEntity, soList):
+        print "dbg: transforming....."
         self.moveDirection = dirEntity.getName()
         self.selectionList = soList
         self.isTransforming = True
@@ -108,42 +139,80 @@
         pass
 
     def hide(self):
-        self.pivotNode.setVisible(False)
+        self.pivotNode.removeAllChildren()
+        self.isHidden = True
 
     def show(self):
+        self.hide()
         if self.mode == 1:
-            self.xMoveNode.setVisible(True)
-            self.yMoveNode.setVisible(True)
-            self.zMoveNode.setVisible(True)
-            self.freeMoveNode.setVisible(True)
+            self.pivotNode.addChild(self.xMoveNode)
+            self.pivotNode.addChild(self.yMoveNode)
+            self.pivotNode.addChild(self.zMoveNode)
         elif self.mode == 2:
-            self.xRotateNode.setVisible(True)
-            self.yRotateNode.setVisible(True)
-            self.zRotateNode.setVisible(True)
+            self.pivotNode.addChild(self.xRotateNode)
+            self.pivotNode.addChild(self.yRotateNode)
+            self.pivotNode.addChild(self.zRotateNode)
         elif self.mode == 3:
-            pass
+            return
+        self.isHidden = False
 
     def setMoveMode(self):
         self.hide()
         self.mode = 1
-        self.xMoveNode.setVisible(True)
-        self.yMoveNode.setVisible(True)
-        self.zMoveNode.setVisible(True)
-        self.freeMoveNode.setVisible(False)
-
+        self.pivotNode.addChild(self.xMoveNode)
+        self.pivotNode.addChild(self.yMoveNode)
+        self.pivotNode.addChild(self.zMoveNode)
         pass
 
     def setRotateMode(self):
         self.hide()
         self.mode = 2
-        self.xRotateNode.setVisible(True)
-        self.yRotateNode.setVisible(True)
-        self.zRotateNode.setVisible(True)
+        self.pivotNode.addChild(self.xRotateNode)
+        self.pivotNode.addChild(self.yRotateNode)
+        self.pivotNode.addChild(self.zRotateNode)
         pass
 
-    def __setScaleMode(self):
+    def settScaleMode(self):
         pass
 
     def onMouseMoved(self, globalX, globalY, incX, incY):
-        print self.moveDirection
-        pass
+        # move mode
+        if self.isTransforming:
+            if self.mode == 1:
+                transFactor = 0.1
+                transVec = og.Vector3()
+                if self.moveDirection == "EditorXArrow":
+                    transVec = og.Vector3(-incX, 0.0 , 0.0)
+                elif self.moveDirection == "EditorYArrow":
+                    transVec = og.Vector3(0.0, -incY, 0.0)
+                elif self.moveDirection == "EditorZArrow":
+                    transVec = og.Vector3(0.0, 0.0, incX)
+
+                transVec = transVec * transFactor
+                for so in self.selectionList:
+                    so.entity.getParentNode().translate(transVec)
+
+                self.pivotNode.translate(transVec)
+
+            # rotate mode
+            elif self.mode == 2:
+                rotValue = (incX + incY) * 0.05
+
+                if self.moveDirection == "EditorXRotator":
+                    for so in self.selectionList:
+                        so.entity.getParentNode().pitch(rotValue)
+                if self.moveDirection == "EditorYRotator":
+                    for so in self.selectionList:
+                        so.entity.getParentNode().yaw(rotValue)
+                if self.moveDirection == "EditorZRotator":
+                    for so in self.selectionList:
+                        so.entity.getParentNode().roll(rotValue)
+
+        self.update()
+
+    def update(self):
+        if not self.isHidden:
+            dist = self.camera.getPosition().distance(self.pivotNode.getPosition())
+            self.pivotNode.setScale(og.Vector3(0.5,  0.5,  0.5) * (dist / 30))
+
+

Copied: rl/branches/newton20/editors/Lockenwickler/src/ObjectPropertyModel.py (from rev 4561, rl/trunk/editors/Lockenwickler/src/ObjectPropertyModel.py)

Modified: rl/branches/newton20/editors/Lockenwickler/src/ObjectPropertyWin.py
===================================================================
--- rl/branches/newton20/editors/Lockenwickler/src/ObjectPropertyWin.py	2008-10-19 13:48:32 UTC (rev 4562)
+++ rl/branches/newton20/editors/Lockenwickler/src/ObjectPropertyWin.py	2008-10-19 16:35:21 UTC (rev 4563)
@@ -1,17 +1,54 @@
+#################################################
+ # Copyright (C) 2008  Stefan Stammberger
+ #
+ # This library is free software; you can redistribute it and/or
+ # modify it under the terms of the GNU Lesser General Public
+ # License as published by the Free Software Foundation; either
+ # version 2.1 of the License, or (at your option) any later version.
+ #
+ # This library is distributed in the hope that it will be useful,
+ # but WITHOUT ANY WARRANTY; without even the implied warranty of
+ # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ # Lesser General Public License for more details.
+ #
+ # You should have received a copy of the GNU Lesser General Public
+ # License along with this library; if not, write to the Free Software
+ # Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ #################################################
+
+
 import sys
-from ui_obj_prop import *
 
-class ObjectPropertyWin(QtGui.QDialog):
+from PyQt4.QtCore import *
+from PyQt4.QtGui import *
+
+from Property import *
+
+class ObjectPropertyWin(QDialog):
     def __init__(self, parent=None):
-        QtGui.QDialog.__init__(self, parent)
-        
-        self.propWin = Ui_ObjectPropertys()
-        self.propWin.setupUi(self)
-        
-        QtCore.QObject.connect(self.propWin.treeWidget, QtCore.SIGNAL("itemDoubleClicked (QTreeWidgetItem *,int)"), 
+        super(QDialog, self).__init__(parent)
+        self.setupUi()
+
+        self.connect(self.treeWidget, SIGNAL("itemDoubleClicked (QTreeWidgetItem *,int)"),
                                self.onItemClicked)
-        
-        
+
+    def setupUi(self):
+        self.setObjectName("ObjectPropertys")
+        self.resize(QSize(QRect(0,0,761,724).size()).expandedTo(self.minimumSizeHint()))
+
+        self.treeWidget = QTreeWidget(self)
+        self.treeWidget.setGeometry(QRect(0,0,901,721))
+        self.treeWidget.setMinimumSize(QSize(400,400))
+        self.treeWidget.setObjectName("treeWidget")
+
+        self.retranslateUi()
+        QMetaObject.connectSlotsByName(self)
+
+    def retranslateUi(self):
+        self.treeWidget.headerItem().setText(0,QApplication.translate("ObjectPropertys", "Property", None, QApplication.UnicodeUTF8))
+        self.treeWidget.headerItem().setText(1,QApplication.translate("ObjectPropertys", "Value", None, QApplication.UnicodeUTF8))
+        self.treeWidget.clear()
+
+
     def onItemClicked(self, item, column):
-        print item.text(0)
-        print column
\ No newline at end of file
+        pass

Deleted: rl/branches/newton20/editors/Lockenwickler/src/OdeManager.py
===================================================================
--- rl/branches/newton20/editors/Lockenwickler/src/OdeManager.py	2008-10-19 13:48:32 UTC (rev 4562)
+++ rl/branches/newton20/editors/Lockenwickler/src/OdeManager.py	2008-10-19 16:35:21 UTC (rev 4563)
@@ -1 +0,0 @@
-as

Modified: rl/branches/newton20/editors/Lockenwickler/src/OgreMainWindow.py
===================================================================
--- rl/branches/newton20/editors/Lockenwickler/src/OgreMainWindow.py	2008-10-19 13:48:32 UTC (rev 4562)
+++ rl/branches/newton20/editors/Lockenwickler/src/OgreMainWindow.py	2008-10-19 16:35:21 UTC (rev 4563)
@@ -1,3 +1,22 @@
+#################################################
+ # Copyright (C) 2008  Stefan Stammberger
+ #
+ # This library is free software; you can redistribute it and/or
+ # modify it under the terms of the GNU Lesser General Public
+ # License as published by the Free Software Foundation; either
+ # version 2.1 of the License, or (at your option) any later version.
+ #
+ # This library is distributed in the hope that it will be useful,
+ # but WITHOUT ANY WARRANTY; without even the implied warranty of
+ # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ # Lesser General Public License for more details.
+ #
+ # You should have received a copy of the GNU Lesser General Public
+ # License along with this library; if not, write to the Free Software
+ # Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ #################################################
+
+
 import os
 import sys
 import platform
@@ -2,4 +21,7 @@
 
-from PyQt4 import QtGui, QtCore
+from PyQt4.QtGui import *
+from PyQt4.QtCore import *
 
+from ViewportGrid import *
+
 import OgreWidget
@@ -9,9 +31,9 @@
 
 # this class is the heart of the 3d part
 # it manages the two ogre render windows and recieves events from the windows through the event filter
-class OgreMainWindow(QtGui.QWidget):
+class OgreMainWindow(QWidget):
     def __init__(self, moduleManager,  ogreRoot, OgreMainWinSceneMgr,  parent):
-        QtGui.QWidget.__init__(self, parent)
+        QWidget.__init__(self, parent)
         self.moduleManager = moduleManager
         self.ogreRoot = ogreRoot
         self.OgreMainWinSceneMgr = OgreMainWinSceneMgr
@@ -22,45 +44,46 @@
         self.middleMouseDown = False
         self.rightMouseDown = False
 
-        self.dollyCamera = False
+        self.mDollyCamera = False
 
         self.moveCamForward = False
         self.moveCamBackward = False
         self.strafeCamLeft = False
         self.strafeCamRight = False
 
-        self.camUpdateTimer = QtCore.QTimer(self)
-        self.camUpdateTimer.connect(self.camUpdateTimer, QtCore.SIGNAL("timeout()"), self.updateCamera)
+        self.camUpdateTimer = QTimer(self)
+        self.camUpdateTimer.connect(self.camUpdateTimer, SIGNAL("timeout()"), self.updateCamera)
 
         self.lastSelectionClick = None # Qpoint wich saves the last selection click mouse position
 
         self.setupUi(self)
 
+
     def setupUi(self, Form):
         Form.setObjectName("Form")
-        Form.resize(QtCore.QSize(QtCore.QRect(0,0,935,843).size()).expandedTo(Form.minimumSizeHint()))
+        Form.resize(QSize(QRect(0,0,935,843).size()).expandedTo(Form.minimumSizeHint()))
 
-        self.gridlayout = QtGui.QGridLayout(Form)
+        self.gridlayout = QGridLayout(Form)
         self.gridlayout.setObjectName("gridlayout")
 
         # create the vertical splitter ( contains the preferences buttons and the horizontal splitter with the two render windows )
-        self.splitterV = QtGui.QSplitter(Form)
+        self.splitterV = QSplitter(Form)
 
-        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.MinimumExpanding,QtGui.QSizePolicy.MinimumExpanding)
+        sizePolicy = QSizePolicy(QSizePolicy.MinimumExpanding,QSizePolicy.MinimumExpanding)
         sizePolicy.setHorizontalStretch(0)
         sizePolicy.setVerticalStretch(0)
         sizePolicy.setHeightForWidth(self.splitterV.sizePolicy().hasHeightForWidth())
         self.splitterV.setSizePolicy(sizePolicy)
-        self.splitterV.setOrientation(QtCore.Qt.Vertical)
+        self.splitterV.setOrientation(Qt.Vertical)
         self.splitterV.setObjectName("splitter")
 
         # create the preferences buttons and connect the signals
-        self.ogreWindowOptions = QtGui.QToolButton(self)
-        QtCore.QObject.connect(self.ogreWindowOptions, QtCore.SIGNAL("clicked()"),
+        self.ogreWindowOptions = QToolButton(self)
+        QObject.connect(self.ogreWindowOptions, SIGNAL("clicked()"),
                                     self.onPreferencesButton)
         self.ogreWindowOptions.hide()
 
-        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Maximum,QtGui.QSizePolicy.Minimum)
+        sizePolicy = QSizePolicy(QSizePolicy.Maximum,QSizePolicy.Minimum)
         sizePolicy.setHorizontalStretch(0)
         sizePolicy.setVerticalStretch(0)
         sizePolicy.setHeightForWidth(self.ogreWindowOptions.sizePolicy().hasHeightForWidth())
@@ -72,9 +95,9 @@
 
         ##################################
         self.ogreRenderWindow = OgreWidget.OgreWidget("OgreMainWin", self.ogreRoot, self.OgreMainWinSceneMgr, "MainCam", self.splitterV,  0)
-        self.ogreRenderWindow.setMinimumSize(QtCore.QSize(250,250))
+        self.ogreRenderWindow.setMinimumSize(QSize(250,250))
 
-        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Maximum,QtGui.QSizePolicy.Maximum)
+        sizePolicy = QSizePolicy(QSizePolicy.Maximum,QSizePolicy.Maximum)
         sizePolicy.setHorizontalStretch(0)
         sizePolicy.setVerticalStretch(0)
         sizePolicy.setHeightForWidth(self.ogreRenderWindow.sizePolicy().hasHeightForWidth())
@@ -89,38 +112,40 @@
         # register the eventfilters for the render windows
         # this is needed to catch mouse enter and mouse leave events for these windows
         self.ogreRenderWindow.installEventFilter(self)
-
+        self.ogreRenderWindow.setAcceptDrops(True)
         self.lastMousePosX = 0
         self.lastMousePosY = 0
 
         self.retranslateUi(Form)
-        QtCore.QMetaObject.connectSlotsByName(Form)
+        QMetaObject.connectSlotsByName(Form)
 
+        self.viewportGrid = ViewportGrid(self.OgreMainWinSceneMgr, self.ogreRenderWindow.viewport)
+        self.viewportGrid.enable()
     def retranslateUi(self, Form):
-        Form.setWindowTitle(QtGui.QApplication.translate("Form", "Form", None, QtGui.QApplication.UnicodeUTF8))
-        self.ogreWindowOptions.setText(QtGui.QApplication.translate("Form", "...", None, QtGui.QApplication.UnicodeUTF8))
+        Form.setWindowTitle(QApplication.translate("Form", "Form", None, QApplication.UnicodeUTF8))
+        self.ogreWindowOptions.setText(QApplication.translate("Form", "...", None, QApplication.UnicodeUTF8))
 
     def onPreferencesButton(self):
-        self.splitterH.setOrientation(QtCore.Qt.Vertical)
+        self.splitterH.setOrientation(Qt.Vertical)
 
     def keyPressEvent(self,  event):
-        if event.key() == QtCore.Qt.Key_W:
+        if event.key() == Qt.Key_W:
             self.moveCamForward = True
-        elif event.key() == QtCore.Qt.Key_S:
+        elif event.key() == Qt.Key_S:
             self.moveCamBackward = True
-        elif event.key() == QtCore.Qt.Key_A:
+        elif event.key() == Qt.Key_A:
             self.strafeCamLeft = True
-        elif event.key() == QtCore.Qt.Key_D:
+        elif event.key() == Qt.Key_D:
             self.strafeCamRight= True
 
     def keyReleaseEvent(self,  event):
-        if event.key() == QtCore.Qt.Key_W:
+        if event.key() == Qt.Key_W:
             self.moveCamForward = False
-        elif event.key() == QtCore.Qt.Key_S:
+        elif event.key() == Qt.Key_S:
             self.moveCamBackward = False
-        elif event.key() == QtCore.Qt.Key_A:
+        elif event.key() == Qt.Key_A:
             self.strafeCamLeft = False
-        elif event.key() == QtCore.Qt.Key_D:
+        elif event.key() == Qt.Key_D:
             self.strafeCamRight= False
 
     def eventFilter(self, obj, event):
@@ -130,7 +155,7 @@
                 self.moduleManager.leftMouseDown = True
 
                 if self.rightMouseDown: #if right mouse button is already pressed dolly the camera
-                    self.dollyCamera = True
+                    self.mDollyCamera = True
                 else:
                     self.calculateSelectionRay(event)
 
@@ -150,8 +175,8 @@
                 self.moduleManager.leftMouseDown = False
                 self.moduleManager.leftMouseUp()
 
-                if self.dollyCamera == True: #if we dolly the camera set it to false
-                    self.dollyCamera = False
+                if self.mDollyCamera == True: #if we dolly the camera set it to false
+                    self.mDollyCamera = False
 
             elif event.button() == 2: # right mouse button is released
                 self.rightMouseDown = False
@@ -161,56 +186,104 @@
                 self.moduleManager.middleMouseDown = False
 
             if not self.rightMouseDown:
-                self.dollyCamera = False
+                self.mDollyCamera = False
                 self.camUpdateTimer.stop()
 
+            self.lastMousePosX = 0
+            self.lastMousePosY = 0
+
         elif event.type() == 5: #mouse moved while button down
+            if self.lastMousePosX == 0: # check to avoid to huge values which may happen when the user clicks and lastMousePosX/Y is zero
+                self.lastMousePosX = event.globalX()
+            if self.lastMousePosY == 0:# check to avoid to huge values which may happen when the user clicks and lastMousePosX/Y is zero
+                self.lastMousePosY = event.globalY()
+
             incX =  (event.globalX() - self.lastMousePosX)
             incY =  (event.globalY() - self.lastMousePosY)
 
-            if self.leftMouseDown and not self.middleMouseDown and not self.rightMouseDown:
+            if self.moduleManager.pivot is not None and  self.leftMouseDown and not self.middleMouseDown and not self.rightMouseDown:
                 self.moduleManager.pivot.onMouseMoved(event.globalX,  event.globalY,  incX,  incY)
 
             rotX = incX * 0.01
             rotY = incY * 0.01
 
-            if (rotX < 0.3 and rotY < 0.3) and (rotX > -0.3 and rotY > -0.3): # check to avoid to huge values which may happen when the user clicks and lastMousePosX/Y is zero
-                if self.dollyCamera:
-                    self.focusedWindow.dollyCamera(og.Vector3( rotX, -rotY,  0))
-                elif self.rightMouseDown:
-                    obj.orbitCamera(-rotX,  rotY)
+            if self.mDollyCamera:
+                obj.dollyCamera(og.Vector3(rotX, -rotY,  0) * 3)
+            elif self.rightMouseDown:
+                obj.orbitCamera(-rotX,  rotY)
 
             self.lastMousePosX = event.globalX()
             self.lastMousePosY = event.globalY()
 
-        elif event.type() == 3: # mouse released
-            self.lastMousePosX = 0
-            self.lastMousePosY = 0
+        if event.type() == 60: #drag enter
+            self.dragEnterEvent(event)
+        if event.type() == 61: #drag move
+            self.dragMoveEvent(event)
+        if event.type() == 62:
+            print "dbg: DragLeave"
+        if event.type() == 63:
+            self.dropEvent(event)
 
         return False
 
+    def dragEnterEvent(self, event):
+        if event.mimeData().hasFormat("application/x-text"):
+            data = event.mimeData().data("application/x-text")
+            stream = QDataStream(data, QIODevice.ReadOnly)
+            text = QString()
+            stream >> text
+
+            self.moduleManager.startDropModelAction(text, self.getCameraToViewportRay()) #start the model draging
+
+            event.setDropAction(Qt.CopyAction)
+            event.accept()
+
+        else:
+            event.ignore()
+
+
+    def dragMoveEvent(self, event):
+        self.moduleManager.moveDropModelAction(self.getCameraToViewportRay()) #move it with the mouse
+
+        event.accept()
+
+    def dropEvent(self, event):
+        self.moduleManager.stopDropModelAction(self.getCameraToViewportRay()) # place it down
+        event.accept()
+
+    def getCameraToViewportRay(self):
+        relMousePos = self.ogreRenderWindow.mapFromGlobal(QCursor.pos())
+
+        screenX = relMousePos.x()/float(self.ogreRenderWindow.viewport.getActualWidth())
+        screenY = relMousePos.y()/float(self.ogreRenderWindow.viewport.getActualHeight())
+
+        return self.ogreRenderWindow.getCamera().getCameraToViewportRay(screenX, screenY)
+
     #calculates the the selection ray and notifies the ModuleManager that something is about to be selected
     def calculateSelectionRay(self,  event):
-        relMousePos = self.focusedWindow.mapFromGlobal(QtCore.QPoint(event.globalX(),  event.globalY())) # get the mose position relative to the focused window
+        relMousePos = self.ogreRenderWindow.mapFromGlobal(QPoint(event.globalX(),  event.globalY())) # get the mose position relative to the ogre window
 
-        if self.lastSelectionClick != None:
-            if self.lastSelectionClick.x() == relMousePos.x() and self.lastSelectionClick.y() == relMousePos.y(): # mouse didn't move
-                # we don't initiate a new selection based on bounding boxes here, we just iterate through the list generated last time a selection was made
-                # this is based on how far the distance of the object is from the camera (as returned by ogre)
-                self.moduleManager.iterateEntityUnderMouse() # don't select something new, switch through the currently selected models
-                return
+#        if self.lastSelectionClick != None:
+#            if self.lastSelectionClick.x() == relMousePos.x() and self.lastSelectionClick.y() == relMousePos.y(): # mouse didn't move
+#                # we don't initiate a new selection based on bounding boxes here, we just iterate through the list generated last time a selection was made
+#                # this is based on how far the distance of the object is from the camera (as returned by ogre)
+#                self.moduleManager.iterateEntityUnderMouse() # don't select something new, switch through the currently selected models
+#                return
 
         self.lastSelectionClick = relMousePos
-        mouseRay = self.focusedWindow.getCamera().getCameraToViewportRay(relMousePos.x()/float(self.focusedWindow.viewport.getActualHeight()),
-                                                                                                                                           relMousePos.y()/float(self.focusedWindow.viewport.getActualWidth()))
+        screenX = relMousePos.x()/float(self.ogreRenderWindow.viewport.getActualWidth())
+        screenY = relMousePos.y()/float(self.ogreRenderWindow.viewport.getActualHeight())
 
-        if event.modifiers() == QtCore.Qt.ControlModifier:
+        mouseRay = self.ogreRenderWindow.getCamera().getCameraToViewportRay(screenX, screenY)
+
+        if event.modifiers() == Qt.ControlModifier:
             self.moduleManager.selectionClick(mouseRay,  True,  False)
-        elif event.modifiers() == QtCore.Qt.ShiftModifier:
+        elif event.modifiers() == Qt.ShiftModifier:
             self.moduleManager.selectionClick(mouseRay,  False,  True)
         else:
             self.moduleManager.selectionClick(mouseRay)
 
+
     def updateCamera(self):
         if self.moveCamForward:
             self.ogreRenderWindow.dollyCamera(og.Vector3( 0, 0,-0.2))

Modified: rl/branches/newton20/editors/Lockenwickler/src/OgreWidget.py
===================================================================
--- rl/branches/newton20/editors/Lockenwickler/src/OgreWidget.py	2008-10-19 13:48:32 UTC (rev 4562)
+++ rl/branches/newton20/editors/Lockenwickler/src/OgreWidget.py	2008-10-19 16:35:21 UTC (rev 4563)
@@ -1,3 +1,22 @@
+#################################################
+ # Copyright (C) 2008  Stefan Stammberger
+ #
+ # This library is free software; you can redistribute it and/or
+ # modify it under the terms of the GNU Lesser General Public
+ # License as published by the Free Software Foundation; either
+ # version 2.1 of the License, or (at your option) any later version.
+ #
+ # This library is distributed in the hope that it will be useful,
+ # but WITHOUT ANY WARRANTY; without even the implied warranty of
+ # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ # Lesser General Public License for more details.
+ #
+ # You should have received a copy of the GNU Lesser General Public
+ # License along with this library; if not, write to the Free Software
+ # Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ #################################################
+
+
 import sys
 import platform
 import os
@@ -15,7 +34,6 @@
         self.camDistFromFocusNode = camDistFromFocusNode
         self.initOgreWindow(renderWindowName,cameraName)
 
-
     def initOgreWindow(self, renderWindowName, cameraName):
         self.renderParameters = og.NameValuePairList()
 

Modified: rl/branches/newton20/editors/Lockenwickler/src/Plugins-linux.cfg
===================================================================
--- rl/branches/newton20/editors/Lockenwickler/src/Plugins-linux.cfg	2008-10-19 13:48:32 UTC (rev 4562)
+++ rl/branches/newton20/editors/Lockenwickler/src/Plugins-linux.cfg	2008-10-19 16:35:21 UTC (rev 4563)
@@ -1,12 +1,12 @@
-# Defines plugins to load
-
-# Define plugin folder
-PluginFolder=/usr/lib/OGRE
-
-# default plugins installed with the libogre14 package
-Plugin=RenderSystem_GL.so
-Plugin=Plugin_ParticleFX.so
-Plugin=Plugin_OctreeSceneManager.so
-#Plugin=Plugin_CgProgramManager
-
-
+# Defines plugins to load
+
+# Define plugin folder
+PluginFolder=/home/stefan/development/root/usr/lib/OGRE/
+
+# default plugins installed with the libogre14 package
+Plugin=RenderSystem_GL.so
+Plugin=Plugin_ParticleFX.so
+Plugin=Plugin_OctreeSceneManager.so
+#Plugin=Plugin_CgProgramManager
+
+

Modified: rl/branches/newton20/editors/Lockenwickler/src/PreferencesDialog.py
===================================================================
--- rl/branches/newton20/editors/Lockenwickler/src/PreferencesDialog.py	2008-10-19 13:48:32 UTC (rev 4562)
+++ rl/branches/newton20/editors/Lockenwickler/src/PreferencesDialog.py	2008-10-19 16:35:21 UTC (rev 4563)
@@ -1,86 +1,106 @@
-import sys
-import platform
-import string
-from ui_pref_dialog import *
-
-class PreferencesDialog(QtGui.QDialog):
-    def __init__(self, loadModuleCallback, parent=None):
-        QtGui.QDialog.__init__(self, parent)
-
-        self.loadModuleCallback = loadModuleCallback
-
-        self.prefDialog = Ui_PreferencesDialog()
-        self.prefDialog.setupUi(self)
-
-        QtCore.QObject.connect(self.prefDialog.modulConfigSelector, QtCore.SIGNAL("clicked()"),
-                               self.openModulConfigSelector)
-
-        QtCore.QObject.connect(self.prefDialog.loadModuleBtn, QtCore.SIGNAL("clicked()"),
-                               self.onLoadSelectedModule)
-
-        QtCore.QObject.connect(self.prefDialog.listWidget, QtCore.SIGNAL("itemDoubleClicked(QListWidgetItem *)"),
-                               self.onLoadSelectedModule)
-
-        if platform.system() == "Windows" or platform.system() == "MAC":
-            # TODO: delete this when ready
-            self.prefDialog.lineEdit.setText("C:\Users\Stefan\Desktop\Lockenwickler\modules\modules.cfg")
-            self.moduleCfgPath = "C:\Users\Stefan\Desktop\Lockenwickler\modules\modules.cfg"
-            self.moduleCfgIsSelected = True
-            self.modulePath = self.moduleCfgPath.replace("modules.cfg", "")
-            self.readInModules()
-            # end delete
-        else:
-            # TODO: delete this when ready
-            self.prefDialog.lineEdit.setText("/home/stefan/blubb/rl_modules/modules/modules.cfg")
-            self.moduleCfgPath = "/home/stefan/blubb/rl_modules/modules/modules.cfg"
-            self.moduleCfgIsSelected = True
-            self.modulePath = self.moduleCfgPath.replace("modules.cfg", "")
-            self.readInModules()
-            # end delete
-
-        self.moduleCfgIsSelected = False
-
-        self.setModal(True)
-
-    def openModulConfigSelector(self):
-        dialog = QtGui.QFileDialog(self)
-        self.moduleCfgPath = str(dialog.getOpenFileName(self, "Select modules.cfg", "/home/stefan/blubb/rl_modules/modules/", "modules.cfg (*.cfg)"))
-        self.modulePath = self.moduleCfgPath.replace("modules.cfg", "")
-
-        from os.path import isfile
-
-        if isfile(self.moduleCfgPath):
-            self.prefDialog.lineEdit.setText(self.moduleCfgPath)
-            self.moduleCfgIsSelected = True
-            self.readInModules()
-
-    def readInModules(self):
-        if self.moduleCfgIsSelected:
-            import codecs
-            f = codecs.open(self.moduleCfgPath, 'r', 'utf-8')
-
-            for line in f:
-                if line.startswith('#'):
-                    continue
-
-                if line.startswith('module='):
-                    splines = line.split('=')
-                    str = splines[1].rstrip().rstrip()
-                    if str != "common":
-                        self.prefDialog.listWidget.addItem(str)
-
-    def onLoadSelectedModule(self):
-        item = self.prefDialog.listWidget.currentItem()
-
-        if item == None:
-            mbox = QtGui.QMessageBox(self)
-            mbox.setModal(True)
-            mbox.setText("Please select a module.")
-            mbox.show()
-        else:
-            tempo = str(item.text())
-            self.loadModuleCallback(self.modulePath, tempo)
-            self.hide()
-
-
-
+#################################################
+ # Copyright (C) 2008  Stefan Stammberger
+ #
+ # This library is free software; you can redistribute it and/or
+ # modify it under the terms of the GNU Lesser General Public
+ # License as published by the Free Software Foundation; either
+ # version 2.1 of the License, or (at your option) any later version.
+ #
+ # This library is distributed in the hope that it will be useful,
+ # but WITHOUT ANY WARRANTY; without even the implied warranty of
+ # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ # Lesser General Public License for more details.
+ #
+ # You should have received a copy of the GNU Lesser General Public
+ # License along with this library; if not, write to the Free Software
+ # Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ #################################################
+
+
+import sys
+import platform
+import string
+from ui_pref_dialog import *
+
+class PreferencesDialog(QtGui.QDialog):
+    def __init__(self, loadModuleCallback, parent=None):
+        QtGui.QDialog.__init__(self, parent)
+
+        self.loadModuleCallback = loadModuleCallback
+
+        self.prefDialog = Ui_PreferencesDialog()
+        self.prefDialog.setupUi(self)
+
+        QtCore.QObject.connect(self.prefDialog.modulConfigSelector, QtCore.SIGNAL("clicked()"),
+                               self.openModulConfigSelector)
+
+        QtCore.QObject.connect(self.prefDialog.loadModuleBtn, QtCore.SIGNAL("clicked()"),
+                               self.onLoadSelectedModule)
+
+        QtCore.QObject.connect(self.prefDialog.listWidget, QtCore.SIGNAL("itemDoubleClicked(QListWidgetItem *)"),
+                               self.onLoadSelectedModule)
+
+        if platform.system() == "Windows" or platform.system() == "MAC":
+            pass
+            # TODO: delete this when ready
+#            self.prefDialog.lineEdit.setText("C:\Users\Stefan\Desktop\Lockenwickler\modules\modules.cfg")
+#            self.moduleCfgPath = "C:\Users\Stefan\Desktop\Lockenwickler\modules\modules.cfg"
+#            self.moduleCfgIsSelected = True
+#            self.modulePath = self.moduleCfgPath.replace("modules.cfg", "")
+#            self.readInModules()
+            # end delete
+        else:
+            # TODO: delete this when ready
+            self.prefDialog.lineEdit.setText("/home/stefan/blubb/rl_modules/modules/modules.cfg")
+            self.moduleCfgPath = "/home/stefan/blubb/rl_modules/modules/modules.cfg"
+            self.moduleCfgIsSelected = True
+            self.modulePath = self.moduleCfgPath.replace("modules.cfg", "")
+            self.readInModules()
+            # end delete
+
+        self.moduleCfgIsSelected = False
+
+        self.setModal(True)
+
+    def openModulConfigSelector(self):
+        dialog = QtGui.QFileDialog(self)
+        self.moduleCfgPath = str(dialog.getOpenFileName(self, "Select modules.cfg", "/home/stefan/blubb/rl_modules/modules/", "modules.cfg (*.cfg)"))
+        self.modulePath = self.moduleCfgPath.replace("modules.cfg", "")
+
+        from os.path import isfile
+
+        if isfile(self.moduleCfgPath):
+            self.prefDialog.lineEdit.setText(self.moduleCfgPath)
+            self.moduleCfgIsSelected = True
+            self.readInModules()
+
+    def readInModules(self):
+        if self.moduleCfgIsSelected:
+            import codecs
+            f = codecs.open(self.moduleCfgPath, 'r', 'utf-8')
+
+            for line in f:
+                if line.startswith('#'):
+                    continue
+
+                if line.startswith('module='):
+                    splines = line.split('=')
+                    str = splines[1].rstrip().rstrip()
+                    if str != "common":
+                        self.prefDialog.listWidget.addItem(str)
+
+    def onLoadSelectedModule(self):
+        item = self.prefDialog.listWidget.currentItem()
+
+        if item == None:
+            mbox = QtGui.QMessageBox(self)
+            mbox.setModal(True)
+            mbox.setText("Please select a module.")
+            mbox.show()
+        else:
+            tempo = str(item.text())
+            self.loadModuleCallback(self.modulePath, tempo)
+            self.hide()
+
+
+

Copied: rl/branches/newton20/editors/Lockenwickler/src/Property.py (from rev 4561, rl/trunk/editors/Lockenwickler/src/Property.py)

Modified: rl/branches/newton20/editors/Lockenwickler/src/PythonOgreConfig.py
===================================================================
--- rl/branches/newton20/editors/Lockenwickler/src/PythonOgreConfig.py	2008-10-19 13:48:32 UTC (rev 4562)
+++ rl/branches/newton20/editors/Lockenwickler/src/PythonOgreConfig.py	2008-10-19 16:35:21 UTC (rev 4563)
@@ -1,3 +1,22 @@
+#################################################
+ # Copyright (C) 2008  Stefan Stammberger
+ #
+ # This library is free software; you can redistribute it and/or
+ # modify it under the terms of the GNU Lesser General Public
+ # License as published by the Free Software Foundation; either
+ # version 2.1 of the License, or (at your option) any later version.
+ #
+ # This library is distributed in the hope that it will be useful,
+ # but WITHOUT ANY WARRANTY; without even the implied warranty of
+ # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ # Lesser General Public License for more details.
+ #
+ # You should have received a copy of the GNU Lesser General Public
+ # License along with this library; if not, write to the Free Software
+ # Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ #################################################
+
+
 #
 # a single config file that is imported 'first' by the Python-Ogre demos
 # this is primarly used to manage Linux demos when we have binaries in non standard (safe) locations

Modified: rl/branches/newton20/editors/Lockenwickler/src/SceneExplorer.py
===================================================================
--- rl/branches/newton20/editors/Lockenwickler/src/SceneExplorer.py	2008-10-19 13:48:32 UTC (rev 4562)
+++ rl/branches/newton20/editors/Lockenwickler/src/SceneExplorer.py	2008-10-19 16:35:21 UTC (rev 4563)
@@ -1,3 +1,22 @@
+#################################################
+ # Copyright (C) 2008  Stefan Stammberger
+ #
+ # This library is free software; you can redistribute it and/or
+ # modify it under the terms of the GNU Lesser General Public
+ # License as published by the Free Software Foundation; either
+ # version 2.1 of the License, or (at your option) any later version.
+ #
+ # This library is distributed in the hope that it will be useful,
+ # but WITHOUT ANY WARRANTY; without even the implied warranty of
+ # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ # Lesser General Public License for more details.
+ #
+ # You should have received a copy of the GNU Lesser General Public
+ # License along with this library; if not, write to the Free Software
+ # Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ #################################################
+
+
 import sys
 from PyQt4.QtCore import *
 from PyQt4.QtGui import *

Copied: rl/branches/newton20/editors/Lockenwickler/src/ViewportGrid.py (from rev 4561, rl/trunk/editors/Lockenwickler/src/ViewportGrid.py)

Modified: rl/branches/newton20/editors/Lockenwickler/src/media/Pivot_Point.material
===================================================================
--- rl/branches/newton20/editors/Lockenwickler/src/media/Pivot_Point.material	2008-10-19 13:48:32 UTC (rev 4562)
+++ rl/branches/newton20/editors/Lockenwickler/src/media/Pivot_Point.material	2008-10-19 16:35:21 UTC (rev 4563)
@@ -4,10 +4,12 @@
 	{
 		pass
 		{
-			ambient 1.0 0.0 0.0 1.0
-			diffuse 1.0 0.0 0.0 1.0
-			specular 1.0 0.0 0.0 1.0 12.5
-			emissive 1.0 0.0 0.0 1.0
+                        depth_check off
+                        depth_write off
+			ambient 1.0 0.0 0.0 0.5
+			diffuse 1.0 0.0 0.0 0.5
+			specular 1.0 0.0 0.0 0.5 12.5
+			emissive 1.0 0.0 0.0 0.5
 		}
 	}
 }
@@ -16,12 +18,15 @@
 {
 	technique
 	{
+
 		pass
 		{
-			ambient 0.0 0.0 1.0 1.0
-			diffuse 0.0 0.0 1.0 1.0
-			specular 0.0 0.0 1.0 1.0 12.5
-			emissive 0.0 0.0 1.0 1.0
+                        depth_check off
+                        depth_write off
+			ambient 0.0 0.0 1.0 0.5
+			diffuse 0.0 0.0 1.0 0.5
+			specular 0.0 0.0 1.0 0.5 12.5
+			emissive 0.0 0.0 1.0 0.5
 		}
 	}
 }
@@ -32,10 +37,12 @@
 	{
 		pass
 		{
-			ambient 0.0 1.0 0.0 1.0
-			diffuse 0.0 1.0 0.0 1.0
-			specular 0.0 1.0 0.0 1.0 12.5
-			emissive 0.0 1.0 0.0 1.0
+                        depth_check off
+                        depth_write off
+			ambient 0.0 1.0 0.0 0.5
+			diffuse 0.0 1.0 0.0 0.5
+			specular 0.0 1.0 0.0 0.5 12.5
+			emissive 0.0 1.0 0.0 0.5
 		}
 	}
 }
@@ -46,10 +53,10 @@
 	{
 		pass
 		{
-			ambient 0.0 0.0 0.0 1.0
-			diffuse 0.0 0.0 0.0 1.0
-			specular 0.0 0.0 0.0 1.0 12.5
-			emissive 0.0 0.0 0.0 1.0
+			ambient 0.0 0.0 0.0 0.5
+			diffuse 0.0 0.0 0.0 0.5
+			specular 0.0 0.0 0.0 0.5 12.5
+			emissive 0.0 0.0 0.0 0.5
 		}
 	}
 }

Copied: rl/branches/newton20/editors/Lockenwickler/src/setup.py (from rev 4561, rl/trunk/editors/Lockenwickler/src/setup.py)

Deleted: rl/branches/newton20/editors/Lockenwickler/src/ui_FourPanelView.py
===================================================================
--- rl/branches/newton20/editors/Lockenwickler/src/ui_FourPanelView.py	2008-10-19 13:48:32 UTC (rev 4562)
+++ rl/branches/newton20/editors/Lockenwickler/src/ui_FourPanelView.py	2008-10-19 16:35:21 UTC (rev 4563)
@@ -1,50 +0,0 @@
-# -*- coding: utf-8 -*-
-
-# Form implementation generated from reading ui file 'FourPanelView.ui'
-#
-# Created: Mon May 12 15:09:24 2008
-#      by: PyQt4 UI code generator 4.3.3
-#
-# WARNING! All changes made in this file will be lost!
-
-from PyQt4 import QtCore, QtGui
-
-class Ui_FourPaneView(object):
-    def setupUi(self, FourPaneView):
-        FourPaneView.setObjectName("FourPaneView")
-        FourPaneView.resize(QtCore.QSize(QtCore.QRect(0,0,827,856).size()).expandedTo(FourPaneView.minimumSizeHint()))
-
-        self.gridlayout = QtGui.QGridLayout(FourPaneView)
-        self.gridlayout.setObjectName("gridlayout")
-
-        self.splitter_3 = QtGui.QSplitter(FourPaneView)
-        self.splitter_3.setOrientation(QtCore.Qt.Horizontal)
-        self.splitter_3.setObjectName("splitter_3")
-
-        self.splitter = QtGui.QSplitter(self.splitter_3)
-        self.splitter.setOrientation(QtCore.Qt.Vertical)
-        self.splitter.setObjectName("splitter")
-
-        self.widget = QtGui.QWidget(self.splitter)
-        self.widget.setObjectName("widget")
-
-        self.widget_4 = QtGui.QWidget(self.splitter)
-        self.widget_4.setObjectName("widget_4")
-
-        self.splitter_2 = QtGui.QSplitter(self.splitter_3)
-        self.splitter_2.setOrientation(QtCore.Qt.Vertical)
-        self.splitter_2.setObjectName("splitter_2")
-
-        self.widget_2 = QtGui.QWidget(self.splitter_2)
-        self.widget_2.setObjectName("widget_2")
-
-        self.widget_3 = QtGui.QWidget(self.splitter_2)
-        self.widget_3.setObjectName("widget_3")
-        self.gridlayout.addWidget(self.splitter_3,0,0,1,1)
-
-        self.retranslateUi(FourPaneView)
-        QtCore.QMetaObject.connectSlotsByName(FourPaneView)
-
-    def retranslateUi(self, FourPaneView):
-        FourPaneView.setWindowTitle(QtGui.QApplication.translate("FourPaneView", "Form", None, QtGui.QApplication.UnicodeUTF8))
-

Deleted: rl/branches/newton20/editors/Lockenwickler/src/ui_lw.py
===================================================================
--- rl/branches/newton20/editors/Lockenwickler/src/ui_lw.py	2008-10-19 13:48:32 UTC (rev 4562)
+++ rl/branches/newton20/editors/Lockenwickler/src/ui_lw.py	2008-10-19 16:35:21 UTC (rev 4563)
@@ -1 +0,0 @@
-

Deleted: rl/branches/newton20/editors/Lockenwickler/src/ui_model_prev.py
===================================================================
--- rl/branches/newton20/editors/Lockenwickler/src/ui_model_prev.py	2008-10-19 13:48:32 UTC (rev 4562)
+++ rl/branches/newton20/editors/Lockenwickler/src/ui_model_prev.py	2008-10-19 16:35:21 UTC (rev 4563)
@@ -1,13 +0,0 @@
-# -*- coding: utf-8 -*-
-
-# Form implementation generated from reading ui file 'model_preview.ui'
-#
-# Created: Mon May 12 15:09:24 2008
-#      by: PyQt4 UI code generator 4.3.3
-#
-# WARNING! All changes made in this file will be lost!
-
-from PyQt4 import QtCore, QtGui
-
-class Ui_modelPreviewDialog(object):
-

Deleted: rl/branches/newton20/editors/Lockenwickler/src/ui_obj_prop.py
===================================================================
--- rl/branches/newton20/editors/Lockenwickler/src/ui_obj_prop.py	2008-10-19 13:48:32 UTC (rev 4562)
+++ rl/branches/newton20/editors/Lockenwickler/src/ui_obj_prop.py	2008-10-19 16:35:21 UTC (rev 4563)
@@ -1,46 +0,0 @@
-# -*- coding: utf-8 -*-
-
-# Form implementation generated from reading ui file 'object_property.ui'
-#
-# Created: Mon May 12 15:09:23 2008
-#      by: PyQt4 UI code generator 4.3.3
-#
-# WARNING! All changes made in this file will be lost!
-
-from PyQt4 import QtCore, QtGui
-
-class Ui_ObjectPropertys(object):
-    def setupUi(self, ObjectPropertys):
-        ObjectPropertys.setObjectName("ObjectPropertys")
-        ObjectPropertys.resize(QtCore.QSize(QtCore.QRect(0,0,761,724).size()).expandedTo(ObjectPropertys.minimumSizeHint()))
-
-        self.treeWidget = QtGui.QTreeWidget(ObjectPropertys)
-        self.treeWidget.setGeometry(QtCore.QRect(0,0,901,721))
-        self.treeWidget.setMinimumSize(QtCore.QSize(400,400))
-        self.treeWidget.setObjectName("treeWidget")
-
-        self.retranslateUi(ObjectPropertys)
-        QtCore.QMetaObject.connectSlotsByName(ObjectPropertys)
-
-    def retranslateUi(self, ObjectPropertys):
-        ObjectPropertys.setWindowTitle(QtGui.QApplication.translate("ObjectPropertys", "Object Properties", None, QtGui.QApplication.UnicodeUTF8))
-        self.treeWidget.headerItem().setText(0,QtGui.QApplication.translate("ObjectPropertys", "Property", None, QtGui.QApplication.UnicodeUTF8))
-        self.treeWidget.headerItem().setText(1,QtGui.QApplication.translate("ObjectPropertys", "Value", None, QtGui.QApplication.UnicodeUTF8))
-        self.treeWidget.clear()
-
-        item = QtGui.QTreeWidgetItem(self.treeWidget)
-        item.setText(0,QtGui.QApplication.translate("ObjectPropertys", "Position", None, QtGui.QApplication.UnicodeUTF8))
-        item.setText(1,"")
-
-        item1 = QtGui.QTreeWidgetItem(item)
-        item1.setText(0,QtGui.QApplication.translate("ObjectPropertys", "X", None, QtGui.QApplication.UnicodeUTF8))
-        item1.setText(1,"")
-
-        item2 = QtGui.QTreeWidgetItem(item)
-        item2.setText(0,QtGui.QApplication.translate("ObjectPropertys", "Y", None, QtGui.QApplication.UnicodeUTF8))
-        item2.setText(1,"")
-
-        item3 = QtGui.QTreeWidgetItem(item)
-        item3.setText(0,QtGui.QApplication.translate("ObjectPropertys", "Z", None, QtGui.QApplication.UnicodeUTF8))
-        item3.setText(1,"")
-

Modified: rl/branches/newton20/engine/core/include/MessagePump.h
===================================================================
--- rl/branches/newton20/engine/core/include/MessagePump.h	2008-10-19 13:48:32 UTC (rev 4562)
+++ rl/branches/newton20/engine/core/include/MessagePump.h	2008-10-19 16:35:21 UTC (rev 4563)
@@ -1,292 +1,234 @@
-/* This source file is part of Rastullahs Lockenpracht.
-* Copyright (C) 2003-2008 Team Pantheon. http://www.team-pantheon.de
-* 
-*  This program is free software; you can redistribute it and/or modify
-*  it under the terms of the Clarified Artistic License.
-*
-*  This program is distributed in the hope that it will be useful,
-*  but WITHOUT ANY WARRANTY; without even the implied warranty of
-*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-*  Clarified Artistic License for more details.
-*
-*  You should have received a copy of the Clarified Artistic License
-*  along with this program; if not you can get it here
-*  http://www.jpaulmorrison.com/fbp/artistic2.htm.
-*/
-
-#ifndef __Rl_MessagePump_H__
-#define __Rl_MessagePump_H__
-
-#include "CorePrerequisites.h"
-
-#include "MessageType.h"
-#include "GameTask.h"
-
-
-#include <map>
-#include <queue>
-
-#include <boost/noncopyable.hpp>
-
-namespace rl
-{
-
-    class MessageHandlerWrapperBase
-    {
-    public:
-        virtual ~MessageHandlerWrapperBase() {}
-        virtual bool Invoke(MessageObjectBase* obj) = 0;
-    };
-
-    template<class _MessageType>
-    class MessageHandlerWrapper : public MessageHandlerWrapperBase
-    {
-    public:
-        typedef typename _MessageType::MessageObjectType MessageObjectType;
-        typedef typename _MessageType::HandlerType HandlerType;
-
-        MessageHandlerWrapper(const HandlerType& handler)
-            : mHandler(handler)
-        {
-        }
-
-        virtual bool Invoke(MessageObjectBase* obj)
-        {
-            MessageObjectType* obj2 = static_cast<MessageObjectType*>(obj);
-            return obj2->Invoke(mHandler);
-        }
-
-    private:
-        HandlerType mHandler;
-    };
-
-    class _RlCoreExport MessagePump : public GameTask, public Ogre::Singleton<MessagePump>
-    {
-    public:
-        class Connection
-        {
-            friend class MessagePump;
-        public:
-            Connection()
-                : connectionId(-1), pump(NULL)
-            {}
-            void disconnect()
-            {
-                if(pump && connectionId != -1)
-                    pump->disconnectHandler(connectionId);
-            }
-        private:
-            MessagePump* pump;
-            int connectionId;
-        };
-
-        class ScopedConnection : boost::noncopyable
-        {
-        public:
-            ScopedConnection()
-            {}
-            ScopedConnection(const Connection& conn)
-                : mConnection(conn)
-            {}
-            ScopedConnection& operator =(const Connection& conn)
-            {
-                mConnection.disconnect();
-                mConnection = conn;
-                return *this;
-            }
-            ~ScopedConnection()
-            {
-                mConnection.disconnect();
-            }
-        private:
-            Connection mConnection;
-        };
-
-    private:
-        struct MessageHandlerMapEntry
-        {
-            int connectionId;
-            MessageHandlerWrapperBase* handlerWrapper;
-        };
-
-        typedef std::vector<MessageHandlerMapEntry> MessageHandlerMapEntries;
-        typedef std::map<int, MessageHandlerMapEntries*> MessageHandlerMap;
-        typedef std::queue<MessageObjectBase*> MessageQueue;
-
-    public:
-        MessagePump() : mNextConnectionId(0) {}
-        ~MessagePump();
-
-        template<typename _MessageType>
-        Connection addMessageHandler( const typename _MessageType::HandlerType& handler )
-        {
-            MessageHandlerWrapper<_MessageType>* wrapper =
-                new MessageHandlerWrapper<_MessageType>(handler);
-
-            MessageHandlerMapEntries* entries = getOrCreateMapEntries(_MessageType::MessageTypeId);
-            MessageHandlerMapEntry entry = {mNextConnectionId++, wrapper};
-            entries->push_back(entry);
-
-            LOG_MESSAGE("MessagePump", 
-                "Added message handler for message type " 
-                + Ogre::StringConverter::toString(_MessageType::MessageTypeId));
-
-            Connection con;
-            con.pump = this;
-            con.connectionId = entry.connectionId;
-            return con;
-        }
-
-        /*
-        * sendMessage and postMessage is implemented for all possible parameter counts
-        * Thanks to the idea of SFINAE, the compiler will choose 
-        * the correct implementation for all MessageTypes at compile time
-        *
-        * sendMessage processes the message immediatly, while postMessage delays the 
-        * processing to a later frame
-        */
-        template<typename _MessageType>
-        bool sendMessage()
-        {
-            MessageObjectBase* obj = _MessageType::MessageObjectType::Build();
-            return doSend(obj);
-        }
-
-        template<typename _MessageType>
-        bool sendMessage(const typename _MessageType::MessageObjectType::Param1& p1)
-        {
-            MessageObjectBase* obj = _MessageType::MessageObjectType::Build(p1);
-            return doSend(obj);
-        }
-
-        template<typename _MessageType>
-        bool sendMessage(const typename _MessageType::MessageObjectType::Param1& p1,
-            const typename _MessageType::MessageObjectType::Param2& p2)
-        {
-            MessageObjectBase* obj = _MessageType::MessageObjectType::Build(p1, p2);
-            return doSend(obj);
-        }
-
-        template<typename _MessageType>
-        bool sendMessage(const typename _MessageType::MessageObjectType::Param1& p1,
-            const typename _MessageType::MessageObjectType::Param2& p2,
-            const typename _MessageType::MessageObjectType::Param2& p3)
-        {
-            MessageObjectBase* obj = _MessageType::MessageObjectType::Build(p1, p2, p3);
-            return doSend(obj);
-        }
-
-        ////////////////////////////////
-
-        template<typename _MessageType>
-        void postMessage()
-        {
-            MessageObjectBase* obj = _MessageType::MessageObjectType::Build();
-            doPost(obj);
-        }
-
-        template<typename _MessageType>
-        void postMessage(const typename _MessageType::MessageObjectType::Param1& p1)
-        {
-            MessageObjectBase* obj = _MessageType::MessageObjectType::Build(p1);
-            doPost(obj);
-        }
-
-        template<typename _MessageType>
-        void postMessage(const typename _MessageType::MessageObjectType::Param1& p1,
-            const typename _MessageType::MessageObjectType::Param2& p2)
-        {
-            MessageObjectBase* obj = _MessageType::MessageObjectType::Build(p1,p2);
-            doPost(obj);
-        }
-
-        template<typename _MessageType>
-        void postMessage(const typename _MessageType::MessageObjectType::Param1& p1,
-            const typename _MessageType::MessageObjectType::Param2& p2,
-            const typename _MessageType::MessageObjectType::Param2& p3)
-        {
-            MessageObjectBase* obj = _MessageType::MessageObjectType::Build(p1, p2, p3);
-            doPost(obj);
-        }
-
-        void sendPending()
-        {
-            while(!mMessageQueue.empty())
-            {
-                doSend(mMessageQueue.front());
-                mMessageQueue.pop();
-            }
-        }
-
-        // overloads from GameTask
-
-        virtual void run(Ogre::Real elapsedTime);
-
-        virtual const Ogre::String& getName() const;
-
-    private:
-        MessageHandlerMapEntries* getOrCreateMapEntries(int id) 
-        {
-            LOG_MESSAGE("MessagePump", "Create or get id " + Ogre::StringConverter::toString(id));
-            MessageHandlerMap::iterator it = mMessageHandlerMap.find(id);
-            if(it == mMessageHandlerMap.end())
-            {
-                MessageHandlerMapEntries* entries = new MessageHandlerMapEntries();
-                mMessageHandlerMap[id] = entries;
-                return entries;
-            }
-            return it->second;
-        }
-
-        bool doSend(MessageObjectBase* msg)
-        {
-            bool msgHandled = false;
-            MessageHandlerMapEntries* entries = getOrCreateMapEntries(msg->getMessageTypeId());
-            for(MessageHandlerMapEntries::iterator it = entries->begin(); it != entries->end(); ++it)
-            {
-                if((*it).handlerWrapper->Invoke(msg))
-                {
-                    msgHandled = true;
-                }
-            }
-            delete msg;
-            return msgHandled;;
-        }
-
-        void doPost(MessageObjectBase* msg)
-        {
-            mMessageQueue.push(msg);
-        }
-
-        friend class Connection;
-        void disconnectHandler(int connectionId)
-        {
-            //not very performant...definitely needs improvement
-            for (MessageHandlerMap::iterator it = mMessageHandlerMap.begin();
-                it != mMessageHandlerMap.end(); ++it)
-            {
-                MessageHandlerMapEntries* en = it->second;
-                for (MessageHandlerMapEntries::iterator jt = en->begin(); jt != en->end(); ++jt)
-                {
-                    if (jt->connectionId == connectionId)
-                    {
-                        delete jt->handlerWrapper;
-                        en->erase(jt);
-                        if (en->empty())
-                        {
-                            delete en;
-                            mMessageHandlerMap.erase(it);
-                        }
-                        return;
-                    }
-                }
-            }
-        }
-
-    private:
-        int mNextConnectionId;
-        MessageHandlerMap mMessageHandlerMap;
-        MessageQueue mMessageQueue;
-    };
-}
-#endif
+/* This source file is part of Rastullahs Lockenpracht.
+* Copyright (C) 2003-2008 Team Pantheon. http://www.team-pantheon.de
+* 
+*  This program is free software; you can redistribute it and/or modify
+*  it under the terms of the Clarified Artistic License.
+*
+*  This program is distributed in the hope that it will be useful,
+*  but WITHOUT ANY WARRANTY; without even the implied warranty of
+*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+*  Clarified Artistic License for more details.
+*
+*  You should have received a copy of the Clarified Artistic License
+*  along with this program; if not you can get it here
+*  http://www.jpaulmorrison.com/fbp/artistic2.htm.
+*/
+
+#ifndef __Rl_MessagePump_H__
+#define __Rl_MessagePump_H__
+
+#include "CorePrerequisites.h"
+
+#include "MessageType.h"
+#include "GameTask.h"
+
+
+#include <map>
+#include <queue>
+
+#include <boost/noncopyable.hpp>
+
+namespace rl
+{
+
+    class MessageHandlerWrapperBase
+    {
+    public:
+        virtual ~MessageHandlerWrapperBase() {}
+        virtual bool Invoke(MessageObjectBase* obj) = 0;
+    };
+
+    template<class _MessageType>
+    class MessageHandlerWrapper : public MessageHandlerWrapperBase
+    {
+    public:
+        typedef typename _MessageType::MessageObjectType MessageObjectType;
+        typedef typename _MessageType::HandlerType HandlerType;
+
+        MessageHandlerWrapper(const HandlerType& handler)
+            : mHandler(handler)
+        {
+        }
+
+        virtual bool Invoke(MessageObjectBase* obj)
+        {
+            MessageObjectType* obj2 = static_cast<MessageObjectType*>(obj);
+            return obj2->Invoke(mHandler);
+        }
+
+    private:
+        HandlerType mHandler;
+    };
+
+    class _RlCoreExport MessagePump : public GameTask, public Ogre::Singleton<MessagePump>
+    {
+    public:
+        class Connection
+        {
+            friend class MessagePump;
+        public:
+            Connection()
+                : connectionId(-1), pump(NULL)
+            {}
+            void disconnect()
+            {
+                if(pump && connectionId != -1)
+                    pump->disconnectHandler(connectionId);
+            }
+        private:
+            MessagePump* pump;
+            int connectionId;
+        };
+
+        class ScopedConnection : boost::noncopyable
+        {
+        public:
+            ScopedConnection()
+            {}
+            ScopedConnection(const Connection& conn)
+                : mConnection(conn)
+            {}
+            ScopedConnection& operator =(const Connection& conn)
+            {
+                mConnection.disconnect();
+                mConnection = conn;
+                return *this;
+            }
+            ~ScopedConnection()
+            {
+                mConnection.disconnect();
+            }
+        private:
+            Connection mConnection;
+        };
+
+    private:
+        struct MessageHandlerMapEntry
+        {
+            int connectionId;
+            MessageHandlerWrapperBase* handlerWrapper;
+        };
+
+        typedef std::vector<MessageHandlerMapEntry> MessageHandlerMapEntries;
+        typedef std::map<int, MessageHandlerMapEntries*> MessageHandlerMap;
+        typedef std::queue<MessageObjectBase*> MessageQueue;
+
+    public:
+        MessagePump() : mNextConnectionId(0) {}
+        ~MessagePump();
+
+        template<typename _MessageType>
+        Connection addMessageHandler( const typename _MessageType::HandlerType& handler )
+        {
+            MessageHandlerWrapper<_MessageType>* wrapper =
+                new MessageHandlerWrapper<_MessageType>(handler);
+
+            MessageHandlerMapEntries* entries = getOrCreateMapEntries(_MessageType::MessageTypeId);
+            MessageHandlerMapEntry entry = {mNextConnectionId++, wrapper};
+            entries->push_back(entry);
+
+            LOG_MESSAGE("MessagePump", 
+                "Added message handler for message type " 
+                + Ogre::StringConverter::toString(_MessageType::MessageTypeId));
+
+            Connection con;
+            con.pump = this;
+            con.connectionId = entry.connectionId;
+            return con;
+        }
+
+        /*
+        * sendMessage and postMessage is implemented for all possible parameter counts
+        * Thanks to the idea of SFINAE, the compiler will choose 
+        * the correct implementation for all MessageTypes at compile time
+        *
+        * sendMessage processes the message immediatly, while postMessage delays the 
+        * processing to a later frame
+        */
+        template<typename _MessageType>
+        bool sendMessage()
+        {
+            MessageObjectBase* obj = _MessageType::MessageObjectType::Build();
+            return doSend(obj);
+        }
+
+        template<typename _MessageType>
+        bool sendMessage(const typename _MessageType::MessageObjectType::Param1& p1)
+        {
+            MessageObjectBase* obj = _MessageType::MessageObjectType::Build(p1);
+            return doSend(obj);
+        }
+
+        template<typename _MessageType>
+        bool sendMessage(const typename _MessageType::MessageObjectType::Param1& p1,
+            const typename _MessageType::MessageObjectType::Param2& p2)
+        {
+            MessageObjectBase* obj = _MessageType::MessageObjectType::Build(p1, p2);
+            return doSend(obj);
+        }
+
+        template<typename _MessageType>
+        bool sendMessage(const typename _MessageType::MessageObjectType::Param1& p1,
+            const typename _MessageType::MessageObjectType::Param2& p2,
+            const typename _MessageType::MessageObjectType::Param2& p3)
+        {
+            MessageObjectBase* obj = _MessageType::MessageObjectType::Build(p1, p2, p3);
+            return doSend(obj);
+        }
+
+        ////////////////////////////////
+
+        template<typename _MessageType>
+        void postMessage()
+        {
+            MessageObjectBase* obj = _MessageType::MessageObjectType::Build();
+            doPost(obj);
+        }
+
+        template<typename _MessageType>
+        void postMessage(const typename _MessageType::MessageObjectType::Param1& p1)
+        {
+            MessageObjectBase* obj = _MessageType::MessageObjectType::Build(p1);
+            doPost(obj);
+        }
+
+        template<typename _MessageType>
+        void postMessage(const typename _MessageType::MessageObjectType::Param1& p1,
+            const typename _MessageType::MessageObjectType::Param2& p2)
+        {
+            MessageObjectBase* obj = _MessageType::MessageObjectType::Build(p1,p2);
+            doPost(obj);
+        }
+
+        template<typename _MessageType>
+        void postMessage(const typename _MessageType::MessageObjectType::Param1& p1,
+            const typename _MessageType::MessageObjectType::Param2& p2,
+            const typename _MessageType::MessageObjectType::Param2& p3)
+        {
+            MessageObjectBase* obj = _MessageType::MessageObjectType::Build(p1, p2, p3);
+            doPost(obj);
+        }
+
+        void sendPending();
+
+        // overloads from GameTask
+
+        virtual void run(Ogre::Real elapsedTime);
+
+        virtual const Ogre::String& getName() const;
+
+    private:
+        MessageHandlerMapEntries* getOrCreateMapEntries(int id); 
+        bool doSend(MessageObjectBase* msg);
+        void doPost(MessageObjectBase* msg);
+
+        friend class Connection;
+        void disconnectHandler(int connectionId);
+
+    private:
+        int mNextConnectionId;
+        MessageHandlerMap mMessageHandlerMap;
+        MessageQueue mMessageQueue;
+    };
+}
+#endif

Modified: rl/branches/newton20/engine/core/src/MessagePump.cpp
===================================================================
--- rl/branches/newton20/engine/core/src/MessagePump.cpp	2008-10-19 13:48:32 UTC (rev 4562)
+++ rl/branches/newton20/engine/core/src/MessagePump.cpp	2008-10-19 16:35:21 UTC (rev 4563)
@@ -1,57 +1,126 @@
-/* This source file is part of Rastullahs Lockenpracht.
- * Copyright (C) 2003-2008 Team Pantheon. http://www.team-pantheon.de
- * 
- *  This program is free software; you can redistribute it and/or modify
- *  it under the terms of the Clarified Artistic License.
- *
- *  This program is distributed in the hope that it will be useful,
- *  but WITHOUT ANY WARRANTY; without even the implied warranty of
- *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- *  Clarified Artistic License for more details.
- *
- *  You should have received a copy of the Clarified Artistic License
- *  along with this program; if not you can get it here
- *  http://www.jpaulmorrison.com/fbp/artistic2.htm.
- */
-#include "stdinc.h"
-
-#include "MessagePump.h"
-
-template<> rl::MessagePump* Ogre::Singleton<rl::MessagePump>::ms_Singleton = 0;
-
-namespace rl
-{
-    MessagePump::~MessagePump()
-    {
-
-        while(!mMessageQueue.empty())
-        {
-        
-            delete mMessageQueue.front();
-            mMessageQueue.pop();    
-        }
-
-        MessageHandlerMap::iterator it = mMessageHandlerMap.begin();
-        for( ; it != mMessageHandlerMap.end(); it++ )
-            if( it->second != NULL )
-                delete it->second;
-    }
-
-    void MessagePump::run(Ogre::Real elapsedTime)
-    {
-        static bool sending = false;
-        if(!sending)
-        {
-            sending = true;
-            sendPending();
-            sending = false;  
-        }
-    }
-
-    const Ogre::String& MessagePump::getName() const
-    {
-        static Ogre::String name = "MessagePump";
-        return name;
-    }
-
-}
+/* This source file is part of Rastullahs Lockenpracht.
+ * Copyright (C) 2003-2008 Team Pantheon. http://www.team-pantheon.de
+ * 
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the Clarified Artistic License.
+ *
+ *  This program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  Clarified Artistic License for more details.
+ *
+ *  You should have received a copy of the Clarified Artistic License
+ *  along with this program; if not you can get it here
+ *  http://www.jpaulmorrison.com/fbp/artistic2.htm.
+ */
+#include "stdinc.h"
+
+#include "MessagePump.h"
+
+template<> rl::MessagePump* Ogre::Singleton<rl::MessagePump>::ms_Singleton = 0;
+
+namespace rl
+{
+    MessagePump::~MessagePump()
+    {
+
+        while(!mMessageQueue.empty())
+        {
+        
+            delete mMessageQueue.front();
+            mMessageQueue.pop();    
+        }
+
+        MessageHandlerMap::iterator it = mMessageHandlerMap.begin();
+        for( ; it != mMessageHandlerMap.end(); it++ )
+            if( it->second != NULL )
+                delete it->second;
+    }
+
+    void MessagePump::run(Ogre::Real elapsedTime)
+    {
+        static bool sending = false;
+        if(!sending)
+        {
+            sending = true;
+            sendPending();
+            sending = false;  
+        }
+    }
+
+    const Ogre::String& MessagePump::getName() const
+    {
+        static Ogre::String name = "MessagePump";
+        return name;
+    }
+    
+    void MessagePump::sendPending()
+    {
+        while(!mMessageQueue.empty())
+        {
+            doSend(mMessageQueue.front());
+            mMessageQueue.pop();
+        }
+    }
+    
+    
+    MessagePump::MessageHandlerMapEntries* MessagePump::getOrCreateMapEntries(int id)
+    {
+        // if (id != 0x1000204){
+        //     LOG_MESSAGE("MessagePump", "Create or get id " + Ogre::StringConverter::toString(id));                
+        // }
+        MessageHandlerMap::iterator it = mMessageHandlerMap.find(id);
+        if(it == mMessageHandlerMap.end())
+        {
+            MessageHandlerMapEntries* entries = new MessageHandlerMapEntries();
+            mMessageHandlerMap[id] = entries;
+            return entries;
+        }
+        return it->second;
+    }
+    
+    bool MessagePump::doSend(MessageObjectBase* msg)
+    {
+        bool msgHandled = false;
+        MessageHandlerMapEntries* entries = getOrCreateMapEntries(msg->getMessageTypeId());
+        for(MessageHandlerMapEntries::iterator it = entries->begin(); it != entries->end(); ++it)
+        {
+            if((*it).handlerWrapper->Invoke(msg))
+            {
+                msgHandled = true;
+            }
+        }
+        delete msg;
+        return msgHandled;;
+    }
+    
+    void MessagePump::doPost(MessageObjectBase* msg)
+    {
+        mMessageQueue.push(msg);
+    }
+    
+    void MessagePump::disconnectHandler(int connectionId)
+    {
+        //not very performant...definitely needs improvement
+        for (MessageHandlerMap::iterator it = mMessageHandlerMap.begin();
+             it != mMessageHandlerMap.end(); ++it)
+        {
+            MessageHandlerMapEntries* en = it->second;
+            for (MessageHandlerMapEntries::iterator jt = en->begin(); jt != en->end(); ++jt)
+            {
+                if (jt->connectionId == connectionId)
+                {
+                    delete jt->handlerWrapper;
+                    en->erase(jt);
+                    if (en->empty())
+                    {
+                        delete en;
+                        mMessageHandlerMap.erase(it);
+                    }
+                    return;
+                }
+            }
+        }
+    }
+    
+}

Modified: rl/branches/newton20/engine/rules/src/Combat.cpp
===================================================================
--- rl/branches/newton20/engine/rules/src/Combat.cpp	2008-10-19 13:48:32 UTC (rev 4562)
+++ rl/branches/newton20/engine/rules/src/Combat.cpp	2008-10-19 16:35:21 UTC (rev 4563)
@@ -72,9 +72,11 @@
 		  mNextActionId(0),
 		  mAnimationSequenceTicket(0)
     {
+        LOG_MESSAGE("Combat", "Register message handler");
 		mLifeStateChangeConnection =
             MessagePump::getSingleton().addMessageHandler<MessageType_GameObjectLifeStateChanged>(
 			    boost::bind(&Combat::onGameObjectLifeStateChanged, this, _1, _2, _3));
+        LOG_MESSAGE("Combat", "Registering message handler done");
     }
 
     Combat::~Combat()

Modified: rl/branches/newton20/engine/rules/src/FetchItemJob.cpp
===================================================================
--- rl/branches/newton20/engine/rules/src/FetchItemJob.cpp	2008-10-19 13:48:32 UTC (rev 4562)
+++ rl/branches/newton20/engine/rules/src/FetchItemJob.cpp	2008-10-19 16:35:21 UTC (rev 4563)
@@ -52,15 +52,34 @@
 			|| mItem->getState() == GOS_UNLOADED
 			|| mItem->getState() == GOS_LOADED)
 		{
+            if (!mItem) 
+            {
+                LOG_WARNING("FetchItemJob", "Item not set or it has a strange state.");
+            }
+            else if (mTimeLeft < 0)
+            {
+                LOG_MESSAGE("FetchItemJob", "Time is up.");
+            }
+            else
+            {
+                LOG_WARNING("FetchItemJob", "Item has a strange state (" 
+                        + StringConverter::toString(mItem->getState()) + ")");
+            }
+
 			// Stay put where ever we are.
 			mActor->setMovement(CreatureController::MT_STEHEN, Vector3::ZERO, Vector3::ZERO);
 			return true;
 		}
 
-		Vector3 targetPos = mItem->getPosition();
+        Item* target = mItem;
+        while (target->getState() == GOS_IN_POSSESSION)
+        {
+            target = target->getParentContainer();
+        }
+		Vector3 targetPos = target->getPosition();
 
 		// Are we there now?
-		Ogre::Real distance = MathUtil::distance(mItem->getWorldBoundingBox(),
+		Ogre::Real distance = MathUtil::distance(target->getWorldBoundingBox(),
 			mActor->getCreature()->getWorldBoundingBox());
 		if (distance < 1.0f)
 		{
@@ -68,9 +87,9 @@
             
             if (mItem->getState() == GOS_IN_SCENE)
             {
-                    // @todo play pickup animation
-                    mActor->getCreature()->getInventory()->hold(mItem, mTargetSlot);
-                    return true;
+                // @todo play pickup animation
+                mActor->getCreature()->getInventory()->hold(mItem, mTargetSlot);
+                return true;
 			}
             else if (mItem->getState() == GOS_IN_POSSESSION)
 			{
@@ -86,8 +105,8 @@
             else if (mItem->getState() == GOS_READY
 					 || mItem->getState() == GOS_HELD)
 			{
-                    LOG_WARNING("FetchItemJob", "Target item is held by someone");
-                    return true;
+                LOG_WARNING("FetchItemJob", "Target item is held by someone");
+                return true;
             }
 
             return false;

Modified: rl/branches/newton20/engine/ui/src/UiSubsystem.cpp
===================================================================
--- rl/branches/newton20/engine/ui/src/UiSubsystem.cpp	2008-10-19 13:48:32 UTC (rev 4562)
+++ rl/branches/newton20/engine/ui/src/UiSubsystem.cpp	2008-10-19 16:35:21 UTC (rev 4563)
@@ -74,6 +74,7 @@
         mGuiResourceProvider(NULL),
         mGuiSystem(NULL)
     {
+        mWindowFactory = new WindowFactory();
         mSceneClearingConnection =
             MessagePump::getSingleton().addMessageHandler<MessageType_SceneClearing>(
 			    boost::bind(&UiSubsystem::onBeforeClearScene, this));
@@ -86,7 +87,9 @@
         mActiveCharacterChangedConnection = 
             MessagePump::getSingleton().addMessageHandler<MessageType_ActivePlayerCharChanged>(
                 boost::bind(&UiSubsystem::onActiveCharacterChanged, this, _1, _2));
-        mWindowFactory = new WindowFactory();
+        mAllPlayerCharactersDiedConnection =
+            MessagePump::getSingleton().addMessageHandler<MessageType_AllPlayerCharsDied>(
+                boost::bind(&UiSubsystem::onAllPlayerCharactersDied, this));
     }
 
     UiSubsystem::~UiSubsystem()
@@ -110,7 +113,7 @@
         World* world = CoreSubsystem::getSingleton().getWorld();
         SceneManager* sceneMgr = world->getSceneManager();
         
-        CEGUI::System::setDefaultXMLParserName("XercesParser");
+//        CEGUI::System::setDefaultXMLParserName("XercesParser");
 
         LOG_MESSAGE2(Logger::UI,
             "Initializing CEGUI Renderer.", "UiSubsystem::initializeUiSubsystem");



From fusion2 at mail.berlios.de  Sun Oct 26 10:35:48 2008
From: fusion2 at mail.berlios.de (fusion2 at mail.berlios.de)
Date: Sun, 26 Oct 2008 10:35:48 +0100
Subject: [Dsa-hl-svn] r4564 - in rl/trunk/editors/Lockenwickler: . src
	src/media/icons
Message-ID: <200810260935.m9Q9ZmRq018119@sheep.berlios.de>

Author: fusion2
Date: 2008-10-26 10:35:34 +0100 (Sun, 26 Oct 2008)
New Revision: 4564

Added:
   rl/trunk/editors/Lockenwickler/src/GameObjectClass.py
   rl/trunk/editors/Lockenwickler/src/GameObjectClassManager.py
   rl/trunk/editors/Lockenwickler/src/GameObjectClassView.py
   rl/trunk/editors/Lockenwickler/src/MyRaySceneQueryListener.py
   rl/trunk/editors/Lockenwickler/src/media/icons/agt_games.png
   rl/trunk/editors/Lockenwickler/src/media/icons/agt_multimedia.png
   rl/trunk/editors/Lockenwickler/src/media/icons/lockenwickler_provisorium.png
   rl/trunk/editors/Lockenwickler/src/media/icons/lockenwickler_provisorium_small.png
   rl/trunk/editors/Lockenwickler/src/media/icons/multirow.png
Modified:
   rl/trunk/editors/Lockenwickler/Lockenwickler.e4p
   rl/trunk/editors/Lockenwickler/src/Lockenwickler.py
   rl/trunk/editors/Lockenwickler/src/ModuleManager.py
   rl/trunk/editors/Lockenwickler/src/PreferencesDialog.py
Log:
- parsing gof file works, only property maps are not parsed at the moment
- added a game object browser

Modified: rl/trunk/editors/Lockenwickler/Lockenwickler.e4p
===================================================================
--- rl/trunk/editors/Lockenwickler/Lockenwickler.e4p	2008-10-19 16:35:21 UTC (rev 4563)
+++ rl/trunk/editors/Lockenwickler/Lockenwickler.e4p	2008-10-26 09:35:34 UTC (rev 4564)
@@ -1,7 +1,7 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <!DOCTYPE Project SYSTEM "Project-4.5.dtd">
 <!-- eric4 project file for project Lockenwickler -->
-<!-- Saved: 2008-10-16, 19:21:23 -->
+<!-- Saved: 2008-10-23, 19:52:05 -->
 <!-- Copyright (C) 2008 Stefan Stammberger, sstammberger at web.de -->
 <Project version="4.5">
   <ProgLanguage mixed="0">Python</ProgLanguage>
@@ -34,6 +34,11 @@
     <Source>src/Property.py</Source>
     <Source>src/ViewportGrid.py</Source>
     <Source>src/ObjectPropertyModel.py</Source>
+    <Source>src/GameObjectClass.py</Source>
+    <Source>src/GameObjectClassManager.py</Source>
+    <Source>src/setup.py</Source>
+    <Source>src/GameObjectClassView.py</Source>
+    <Source>src/MyRaySceneQueryListener.py</Source>
   </Sources>
   <Forms>
     <Form>ui files/console_window.ui</Form>

Added: rl/trunk/editors/Lockenwickler/src/GameObjectClass.py
===================================================================
--- rl/trunk/editors/Lockenwickler/src/GameObjectClass.py	2008-10-19 16:35:21 UTC (rev 4563)
+++ rl/trunk/editors/Lockenwickler/src/GameObjectClass.py	2008-10-26 09:35:34 UTC (rev 4564)
@@ -0,0 +1,107 @@
+#################################################
+ # Copyright (C) 2008  Stefan Stammberger
+ #
+ # This library is free software; you can redistribute it and/or
+ # modify it under the terms of the GNU Lesser General Public
+ # License as published by the Free Software Foundation; either
+ # version 2.1 of the License, or (at your option) any later version.
+ #
+ # This library is distributed in the hope that it will be useful,
+ # but WITHOUT ANY WARRANTY; without even the implied warranty of
+ # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ # Lesser General Public License for more details.
+ #
+ # You should have received a copy of the GNU Lesser General Public
+ # License along with this library; if not, write to the Free Software
+ # Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ #################################################
+
+from elementtree.ElementTree import *
+
+class GOCStringProperty():
+    def __init__(self, name, data):
+        self.name = name
+        self.data = data
+
+    def getType(self):
+        return "STRING"
+
+class GOCRealProperty():
+    def __init__(self, name, data):
+        self.name = name
+        self.data = data
+
+    def getType(self):
+        return "REAL"
+
+class GOCBoolProperty():
+    def __init__(self, name, data):
+        self.name = name
+        self.data = data
+
+    def getType(self):
+        return "BOOL"
+
+class GOCIntProperty():
+    def __init__(self, name, data):
+        self.name = name
+        self.data = data
+
+    def getType(self):
+        return "INT"
+
+class GOCIntPairProperty():
+    def __init__(self, name, data):
+        self.name = name
+        self.data = data
+
+    def getType(self):
+        return "INTPAIR"
+
+class GOCIntTripleProperty():
+    def __init__(self, name, data):
+        self.name = name
+        self.data = data
+
+    def getType(self):
+        return "INTTRIPPLE"
+
+
+class GameObjectClass():
+    def __init__(self,  parentElement):
+        self.classid = parentElement.get("classid")
+        self.baseclass = parentElement.get("baseclass")
+
+        self.properties = []
+
+        for property in parentElement.getiterator("property"):
+            if property.get("type") == "ARRAY":
+                pass
+            elif property.get("type") == "STRING":
+                name = property.get("name")
+                data = property.get("data")
+                self.properties.append(GOCStringProperty(name, data))
+            elif property.get("type") == "REAL":
+                name = property.get("name")
+                data = property.get("data")
+                self.properties.append(GOCRealProperty(name, data))
+            elif property.get("type") == "BOOL":
+                name = property.get("name")
+                data = property.get("data")
+                self.properties.append(GOCBoolProperty(name, data))
+            elif property.get("type") == "MAP":
+                pass
+            elif property.get("type") == "INT":
+                name = property.get("name")
+                data = property.get("data")
+                self.properties.append(GOCIntProperty(name, data))
+            elif property.get("type") == "INTPAIR":
+                name = property.get("name")
+                data = property.get("data")
+                self.properties.append(GOCIntPairProperty(name, data))
+            elif property.get("type") == "INTTRIPLE":
+                name = property.get("name")
+                data = property.get("data")
+                self.properties.append(GOCIntTripleProperty(name, data))
+            else:
+                print property.get("type")

Added: rl/trunk/editors/Lockenwickler/src/GameObjectClassManager.py
===================================================================
--- rl/trunk/editors/Lockenwickler/src/GameObjectClassManager.py	2008-10-19 16:35:21 UTC (rev 4563)
+++ rl/trunk/editors/Lockenwickler/src/GameObjectClassManager.py	2008-10-26 09:35:34 UTC (rev 4564)
@@ -0,0 +1,44 @@
+#################################################
+ # Copyright (C) 2008  Stefan Stammberger
+ #
+ # This library is free software; you can redistribute it and/or
+ # modify it under the terms of the GNU Lesser General Public
+ # License as published by the Free Software Foundation; either
+ # version 2.1 of the License, or (at your option) any later version.
+ #
+ # This library is distributed in the hope that it will be useful,
+ # but WITHOUT ANY WARRANTY; without even the implied warranty of
+ # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ # Lesser General Public License for more details.
+ #
+ # You should have received a copy of the GNU Lesser General Public
+ # License along with this library; if not, write to the Free Software
+ # Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ #################################################
+
+from elementtree.ElementTree import parse
+
+from GameObjectClass import *
+
+class GameObjectClassManager():
+    def __init__(self):
+        self.fileDict = {}
+        self.callback = None
+
+    def parseGOFFiles(self, filePaths):
+        for filePath in filePaths:
+            tree = parse(filePath)
+            gocList = []
+            for parent in tree.getiterator("gameobjectclass"): # return all allements with the "gameobjectclass" tag
+                go = GameObjectClass(parent)
+                gocList.append(go)
+
+            self.fileDict[filePath] = gocList
+
+        if self.callback is not None:
+            self.callback(self.fileDict)
+
+        # whenever a gameobject changes outside of the view, the view has to update itself wth the new values
+    def setGameObjectsViewUpdateCallback(self, callback):
+        self.callback = callback
+

Added: rl/trunk/editors/Lockenwickler/src/GameObjectClassView.py
===================================================================
--- rl/trunk/editors/Lockenwickler/src/GameObjectClassView.py	2008-10-19 16:35:21 UTC (rev 4563)
+++ rl/trunk/editors/Lockenwickler/src/GameObjectClassView.py	2008-10-26 09:35:34 UTC (rev 4564)
@@ -0,0 +1,80 @@
+#################################################
+ # Copyright (C) 2008  Stefan Stammberger
+ #
+ # This library is free software; you can redistribute it and/or
+ # modify it under the terms of the GNU Lesser General Public
+ # License as published by the Free Software Foundation; either
+ # version 2.1 of the License, or (at your option) any later version.
+ #
+ # This library is distributed in the hope that it will be useful,
+ # but WITHOUT ANY WARRANTY; without even the implied warranty of
+ # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ # Lesser General Public License for more details.
+ #
+ # You should have received a copy of the GNU Lesser General Public
+ # License along with this library; if not, write to the Free Software
+ # Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ #################################################
+
+
+from PyQt4.QtCore import *
+from PyQt4.QtGui import *
+
+from GameObjectClass import *
+
+class GameObjectClassView(QWidget):
+    def __init__(self, gocManager, parent = None):
+        super(GameObjectClassView, self).__init__(parent)
+        self.gocManager = gocManager
+        self.gocManager.setGameObjectsViewUpdateCallback(self.updateObjectList)
+
+        self.setupUi()
+
+    def setupUi(self):
+        self.setObjectName("gameObjectClassView")
+        self.resize(QSize(QRect(0,0,272,744).size()).expandedTo(self.minimumSizeHint()))
+
+        self.gridlayout = QGridLayout(self)
+        self.gridlayout.setObjectName("gridlayout")
+
+        self.treeWidget = QTreeWidget()
+        self.treeWidget.setColumnCount(3)
+        self.treeWidget.setObjectName("ObjectTreeView")
+
+        self.gridlayout.addWidget(self.treeWidget , 1, 0, 1, 1)
+
+        self.setWindowTitle(QApplication.translate("objectPreviewDialog", "Dialog", None, QApplication.UnicodeUTF8))
+
+        QMetaObject.connectSlotsByName(self)
+
+    def updateObjectList(self,  objectsDict):
+        changeColor = True
+        for key in objectsDict:
+            file = objectsDict[key]
+            fileItem = QTreeWidgetItem(self.treeWidget)
+            fileItem.setText(0, str(key))
+            fileItem.setIcon(0, QIcon("media/icons/filenew.png"))
+
+            for go in file:
+                goItem = QTreeWidgetItem(fileItem)
+                goItem.setIcon(0, QIcon("media/icons/agt_games.png"))
+                if changeColor:
+                    goItem.setBackgroundColor(0, QColor("lightGray"))
+                    goItem.setBackgroundColor(1, QColor("lightGray"))
+                    goItem.setBackgroundColor(2, QColor("lightGray"))
+                goItem.setText(0, str(go.classid))
+                goItem.setText(1, str(go.baseclass))
+                changeColor = not changeColor
+
+                for prop in go.properties:
+                    item1 = QTreeWidgetItem(goItem)
+                    if changeColor:
+                        item1.setBackgroundColor(0, QColor("lightGray"))
+                        item1.setBackgroundColor(1, QColor("lightGray"))
+                        item1.setBackgroundColor(2, QColor("lightGray"))
+                    item1.setIcon(0, QIcon("media/icons/agt_multimedia.png"))
+                    item1.setText(0, str(prop.name))
+                    item1.setText(1, prop.getType())
+                    item1.setText(2, unicode(prop.data))
+                    changeColor = not changeColor
+

Modified: rl/trunk/editors/Lockenwickler/src/Lockenwickler.py
===================================================================
--- rl/trunk/editors/Lockenwickler/src/Lockenwickler.py	2008-10-19 16:35:21 UTC (rev 4563)
+++ rl/trunk/editors/Lockenwickler/src/Lockenwickler.py	2008-10-26 09:35:34 UTC (rev 4564)
@@ -1,464 +1,499 @@
-#################################################
- # Copyright (C) 2008  Stefan Stammberger
- #
- # This library is free software; you can redistribute it and/or
- # modify it under the terms of the GNU Lesser General Public
- # License as published by the Free Software Foundation; either
- # version 2.1 of the License, or (at your option) any later version.
- #
- # This library is distributed in the hope that it will be useful,
- # but WITHOUT ANY WARRANTY; without even the implied warranty of
- # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
- # Lesser General Public License for more details.
- #
- # You should have received a copy of the GNU Lesser General Public
- # License along with this library; if not, write to the Free Software
- # Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
- #################################################
-
-
-import os
-import sys
-import platform
-
-sys.path.insert(0,'..')
-import PythonOgreConfig
-
-from random import randint
-from os.path import isfile
-
-from PyQt4 import QtGui, QtCore
-from PreferencesDialog import *
-from ObjectPropertyWin import *
-from ModelSelectionDialog import *
-from ConsoleWindow import *
-from ModuleManager import *
-from SceneExplorer import *
-
-import OgreMainWindow
-import ogre.renderer.OGRE as og
-
-class Lockenwickler(QtGui.QMainWindow):
-    def __init__(self, parent=None):
-        QtGui.QWidget.__init__(self, parent)
-
-        self.setupUi()
-
-        self.consoleWindow = ConsoleWindow(True,  self)
-
-        self.setupOgre()
-
-        self.prefDialog = PreferencesDialog(self.loadModule, self)
-        self.objectPropertyWin = ObjectPropertyWin(self)
-        self.sceneExplorerWin = SceneExplorer(self)
-        self.modelSelectionDialog = ModelSelectionDialog(self.ogreRoot, self)
-
-        self.createDockWindows()
-
-        self.mainTimer = QtCore.QTimer(self)
-        self.mainTimer.connect(self.mainTimer, QtCore.SIGNAL("timeout()"), self.update)
-        self.mainTimer.start(5)
-
-        settings = QtCore.QSettings()
-        self.restoreGeometry(settings.value("MainWindow/Geometry").toByteArray())
-        self.restoreState(settings.value("MainWindow/DockWindows").toByteArray())
-
-        self.setWindowTitle("Rastullahs Lockenwickler")
-#        # Import Psyco if available
-#        try:
-#            import psyco
-#            psyco.full()
-#            #psyco.log()
-#            #psyco.profile()
-#        except ImportError:
-#            pass
-
-        #QtGui.QApplication.setKeyboardInputInterval(5000)
-
-    def createAction(self, text, slot=None, shortcut=None, icon=None, tip=None, checkable=False, signal="triggered()"):
-        action = QtGui.QAction(text, self)
-        if icon is not None:
-            action.setIcon(QtGui.QIcon("media/icons/%s" % icon))
-        if shortcut is not None:
-            action.setShortcut(shortcut)
-        if tip is not None:
-            action.setToolTip(tip)
-            action.setStatusTip(tip)
-        if slot is not None:
-            self.connect(action, QtCore.SIGNAL(signal), slot)
-
-        action.setCheckable(checkable)
-
-        return action
-
-    def addActions(self, target, actions):
-        for act in actions:
-            if act is None:
-               target.addSeparator()
-            else:
-                target.addAction(act)
-
-    def setupUi(self):
-        self.setObjectName("MainWindow")
-
-        self.centralwidget = QtGui.QWidget(self)
-        self.centralwidget.setObjectName("centralwidget")
-
-        self.hboxlayout = QtGui.QHBoxLayout(self.centralwidget)
-        self.hboxlayout.setObjectName("hboxlayout")
-
-        self.gridlayout = QtGui.QGridLayout()
-        self.gridlayout.setObjectName("gridlayout")
-
-        self.menubar = QtGui.QMenuBar(self)
-        self.menubar.setObjectName("menubar")
-
-        self.menuFile = QtGui.QMenu(self.menubar)
-        self.menuFile.setObjectName("menuFile")
-
-        self.menuEdit = QtGui.QMenu(self.menubar)
-        self.menuEdit.setObjectName("menuEdit")
-
-        self.menuView = QtGui.QMenu(self.menubar)
-        self.menuView.setObjectName("menuView")
-        self.setMenuBar(self.menubar)
-
-
-        self.statusbar = QtGui.QStatusBar(self)
-        self.statusbar.setObjectName("statusbar")
-        self.setStatusBar(self.statusbar)
-
-#####################################
-        self.actionNeu =self.createAction("&New",  self.actionNewSlot,  QKeySequence.New,  "filenew.png",  "New")
-        self.actionNeu.setObjectName("actionNeu")
-
-        self.actionClose = self.createAction("Quit",  self.actionQuitSlot,  "Alt + Q",  "exit.png",  "Quit")
-        self.actionClose.setObjectName("actionQuit")
-#####################################
-
-
-#####################################
-        self.actionDelete = self.createAction("Delete",  self.actionDeleteSlot,  QKeySequence.Delete,  "editdelete.png",  "Delete")
-        self.actionDelete.setObjectName("actionDelete")
-
-        self.actionCopy = self.createAction("Copy",  self.actionCopySlot,  QKeySequence.Copy,  "editcopy.png",  "Copy")
-        self.actionCopy.setObjectName("actionCopy")
-
-        self.actionCut = self.createAction("Cut",  self.actionCutSlot,  QKeySequence.Cut,  "editcut.png",  "Cut")
-        self.actionCut.setObjectName("actionCut")
-
-        self.actionPaste = self.createAction("Paste",  self.actionPasteSlot,  QKeySequence.Paste,  "editpaste.png",  "Paste")
-        self.actionPaste.setObjectName("actionPaste")
-
-        self.actionMove = self.createAction("&Move",  self.actionMoveSlot,  "g",  "move.png",  "Move selected object")
-        self.actionMove.setObjectName("actionMove")
-
-        self.actionRotate = self.createAction("&Rotate",  self.actionRotateSlot,  "r",  "rotate.png",  "Rotate selected object")
-        self.actionRotate.setObjectName("actionRotate")
-
-        self.actionScale = self.createAction("&Scale",  self.actionScaleSlot,  "x",  "resizecol.png",  "Scale selected object")
-        self.actionRotate.setObjectName("actionRotate")
-
-
-#####################################
-#####################################
-        self.actionSceneExplorer = self.createAction("&Scene Exlporer",  self.toggleSceneExplorer,  "Alt + E",  "view_tree.png",  "Scene Explorer",  False)
-        self.actionSceneExplorer.setObjectName("actionSceneExplorer")
-
-        self.actionPreferences = self.createAction("&Preferences",  self.togglePreferencesWindow,  "Alt + P",  "configure.png",  "Lockenwickler Preferences",  False)
-        self.actionPreferences.setObjectName("actionPreferences")
-
-        self.actionProperty_Window = self.createAction("Pr&operty Window",  self.togglePropertyWindow,  "Alt + P",  "unsortedlist1.png",  "Property Window")
-        self.actionProperty_Window.setObjectName("actionProperty_Window")
-
-        self.actionObject_Selection = self.createAction("&Model Preview Window",  self.toggleModelPreviewWindow,  "Alt + O",  "tux.png",  "Model Preview")
-        self.actionObject_Selection.setObjectName("actionObject_Selection")
-
-        self.actionConsole_Window = self.createAction("&Console Window",  self.toggleConsoleWindow,  "Alt + C",  "console.png",  "Console Window")
-        self.actionConsole_Window.setObjectName("actionConsole_Window")
-
-#####################################
-#####################################
-
-
-        self.menuFile.addAction(self.actionNeu)
-        self.menuFile.addAction(self.actionClose)
-
-        self.menuEdit.addAction(self.actionMove)
-        self.menuEdit.addAction(self.actionRotate)
-        self.menuEdit.addAction(self.actionScale)
-        self.menuEdit.addSeparator()
-        self.menuEdit.addAction(self.actionDelete)
-        self.menuEdit.addAction(self.actionCopy)
-        self.menuEdit.addAction(self.actionCut)
-        self.menuEdit.addAction(self.actionPaste)
-
-        self.menuView.addAction(self.actionSceneExplorer)
-        self.menuView.addAction(self.actionPreferences)
-        self.menuView.addAction(self.actionProperty_Window)
-        self.menuView.addAction(self.actionObject_Selection)
-        self.menuView.addAction(self.actionConsole_Window)
-        self.menubar.addAction(self.menuFile.menuAction())
-        self.menubar.addAction(self.menuEdit.menuAction())
-        self.menubar.addAction(self.menuView.menuAction())
-
-        self.retranslateUi()
-        QtCore.QMetaObject.connectSlotsByName(self)
-
-    def retranslateUi(self):
-        self.setWindowTitle(QtGui.QApplication.translate("MainWindow", "MainWindow", None, QtGui.QApplication.UnicodeUTF8))
-        self.menuFile.setTitle(QtGui.QApplication.translate("MainWindow", "File", None, QtGui.QApplication.UnicodeUTF8))
-        self.menuEdit.setTitle(QtGui.QApplication.translate("MainWindow", "Edit", None, QtGui.QApplication.UnicodeUTF8))
-        self.menuView.setTitle(QtGui.QApplication.translate("MainWindow", "View", None, QtGui.QApplication.UnicodeUTF8))
-        self.actionNeu.setText(QtGui.QApplication.translate("MainWindow", "New", None, QtGui.QApplication.UnicodeUTF8))
-        self.actionMove.setText(QtGui.QApplication.translate("MainWindow", "Move", None, QtGui.QApplication.UnicodeUTF8))
-        self.actionRotate.setText(QtGui.QApplication.translate("MainWindow", "Rotate", None, QtGui.QApplication.UnicodeUTF8))
-        self.actionSceneExplorer.setText(QtGui.QApplication.translate("MainWindow", "Scene Explorer", None, QtGui.QApplication.UnicodeUTF8))
-        self.actionPreferences.setText(QtGui.QApplication.translate("MainWindow", "Preferences", None, QtGui.QApplication.UnicodeUTF8))
-        self.actionProperty_Window.setText(QtGui.QApplication.translate("MainWindow", "Property Window", None, QtGui.QApplication.UnicodeUTF8))
-        self.actionObject_Selection.setText(QtGui.QApplication.translate("MainWindow", "Object Selection", None, QtGui.QApplication.UnicodeUTF8))
-        self.actionClose.setText(QtGui.QApplication.translate("MainWindow", "Quit", None, QtGui.QApplication.UnicodeUTF8))
-        self.actionConsole_Window.setText(QtGui.QApplication.translate("MainWindow", "Console Window", None, QtGui.QApplication.UnicodeUTF8))
-
-    def setupOgre(self, pluginCfgPath="./Plugins.cfg", ogreCfgPath="./ogre.cfg", logPath="./ogre.log"):
-        if platform.system() == "Windows":
-            pluginCfgPath="./Plugins-windows.cfg"
-        else:
-            pluginCfgPath="./Plugins-linux.cfg"
-
-        root = og.Root(pluginCfgPath, ogreCfgPath, logPath)
-        self.ogreRoot = root
-
-        if  not self.ogreRoot.restoreConfig() and not self.ogreRoot.showConfigDialog():
-            sys.exit('Quit from Config Dialog')
-
-        root.initialise(False)
-
-        self.OgreMainWinSceneMgr = self.ogreRoot.createSceneManager(og.ST_GENERIC, "OgreMainWinSceneMgr")
-        self.OgreMainWinSceneMgr.ambientLight = og.ColourValue(4, 4, 4)
-
-        self.moduleName = ""
-        self.moduleManager = ModuleManager(self.ogreRoot,  self.OgreMainWinSceneMgr)
-
-        self.ogreRenderWindow = OgreMainWindow.OgreMainWindow(self.moduleManager,  root,  self.OgreMainWinSceneMgr,  self)
-        self.gridlayout.addWidget(self.ogreRenderWindow,0,0,1,1)
-        self.hboxlayout.addLayout(self.gridlayout)
-        self.setCentralWidget(self.centralwidget)
-
-        og.ResourceGroupManager.getSingleton().addResourceLocation("./media", "FileSystem", "General", False)
-        og.ResourceGroupManager.getSingleton().initialiseAllResourceGroups()
-
-        oglog = og.LogManager.getSingleton().getDefaultLog()
-        oglog.addListener(self.consoleWindow.lockenLog)
-
-    def update(self):
-#        try:
-#            self.OgreMainWinSceneMgr.getSceneNode("saeule_076_node").yaw(0.02)
-#        except Exception,  e:
-#            pass
-
-        self.ogreRoot.renderOneFrame()
-
-    def actionNewSlot(self):
-        print "dbg: new"
-        return
-
-    def actionQuitSlot(self):
-        self.close()
-
-    def actionDeleteSlot(self):
-        self.moduleManager.deleteObjects()
-
-    def actionCopySlot(self):
-        self.moduleManager.copyObjects()
-
-    def actionCutSlot(self):
-        self.moduleManager.cutObjects()
-
-    def actionPasteSlot(self):
-        self.moduleManager.pasteObjects(self.ogreRenderWindow.getCameraToViewportRay())
-
-    def actionMoveSlot(self):
-        self.moduleManager.pivot.setMoveMode()
-
-    def actionRotateSlot(self):
-        self.moduleManager.pivot.setRotateMode()
-
-    def actionScaleSlot(self):
-        self.moduleManager.pivot.setScaleMode()
-
-    def togglePreferencesWindow(self):
-        if self.prefDialog.isHidden():
-            self.prefDialog.show()
-        else:
-            self.prefDialog.hide()
-
-    def toggleModelPreviewWindow(self):
-        if self.modelSelectionDock.isHidden():
-            self.modelSelectionDock.show()
-        else:
-            self.modelSelectionDock.hide()
-
-    def toggleSceneExplorer(self):
-        if self.sceneExplorerDock.isHidden():
-            self.sceneExplorerDock.show()
-        else:
-            self.sceneExplorerDock.hide()
-
-    def togglePropertyWindow(self):
-        if self.propertyDock.isHidden():
-            self.propertyDock.show()
-        else:
-            self.propertyDock.hide()
-
-    def toggleConsoleWindow(self):
-        if self.consoleDock.isHidden():
-            self.consoleDock.show()
-        else:
-            self.consoleDock.hide()
-
-    # parses the moduleconfig.rb and searches for all loader.loadmap(" statements in the ruby script
-    # and parses them too
-    def loadModule(self, modulePath, moduleName):
-        if self.moduleName == moduleName:
-            return
-
-        self.moduleName = moduleName
-        self.workingDir = modulePath + moduleName # the module path
-        self.workingDirCommon = modulePath + "common" # the module path of the common module
-
-        import codecs
-        import glob
-
-        modConfig = self.workingDir + "/scripts/moduleconfig.rb"
-        if isfile(modConfig): # is the modconfig existing?
-            f = codecs.open(modConfig, 'r', 'utf-8')
-        else:
-            print ("Error: couldn't find module config")
-            pass
-
-        self.mapFiles = [] # a list in case the module has more than one map file
-
-        for line in f:
-            lStripped = line.strip() #strip the whitespace away, not needed here
-
-            # get the map file(s)
-            if lStripped.startswith("loader.loadMap("): # all loadMap commands begin with loader.loadMap(
-                spl = lStripped.split('"')
-                for a in spl:
-                    if a.endswith(".xml"):
-                        pathToMapFile = self.workingDir + "/maps/" + a
-                        self.mapFiles.append(pathToMapFile)
-
-        self.setWindowTitle(moduleName)
-
-        self.modelSelectionDialog.scanDirForModels(self.workingDir, moduleName)
-        self.modelSelectionDialog.scanDirForModels(self.workingDirCommon, "common")
-
-        self.setResourcePaths(self.workingDir, moduleName)
-        self.setResourcePaths(self.workingDirCommon, "common")
-        og.ResourceGroupManager.getSingleton().initialiseAllResourceGroups()
-
-        command = (os.path.join(self.workingDir,  "maps") + "/*.xml")
-        for mf in glob.glob(command): # search for all xml files in the maps directory and add them
-            self.mapFiles.append(mf)
-
-        command = (os.path.join(self.workingDir,  "maps") + "/*.scene")
-        for mf in glob.glob(command): # search for all xml files in the maps directory and add them
-            self.mapFiles.append(mf)
-
-        self.moduleManager.load(moduleName,  self.mapFiles)
-
-    def setResourcePaths(self, path, moduleName):
-        for file in os.listdir(path):
-            curFile = path + "/" + file
-
-            if file.startswith('.'): #ignore dot files (hidden)
-                continue
-            if isdir(curFile):
-                og.ResourceGroupManager.getSingleton().addResourceLocation(curFile, "FileSystem", moduleName, False)
-                self.setResourcePaths(curFile, moduleName)
-                continue
-            if isfile(curFile):
-                pass
-
-    def createDockWindows(self):
-        self.propertyDock = QtGui.QDockWidget(self.tr("Properties"), self)
-        self.propertyDock.setObjectName("PropertyDockWindow")
-        self.propertyDock.setAllowedAreas(QtCore.Qt.LeftDockWidgetArea | QtCore.Qt.RightDockWidgetArea)
-        self.propertyDock.setWidget(self.objectPropertyWin)
-        self.addDockWidget(QtCore.Qt.LeftDockWidgetArea, self.propertyDock)
-
-        self.modelSelectionDock = QtGui.QDockWidget(self.tr("Models"), self)
-        self.modelSelectionDock.setObjectName("ModelSelectionDockWindow")
-        self.modelSelectionDock.setAllowedAreas(QtCore.Qt.LeftDockWidgetArea | QtCore.Qt.RightDockWidgetArea)
-        self.modelSelectionDock.setWidget(self.modelSelectionDialog)
-        self.addDockWidget(QtCore.Qt.RightDockWidgetArea, self.modelSelectionDock)
-
-        self.sceneExplorerDock = QtGui.QDockWidget(self.tr("Scene Explorer"), self)
-        self.sceneExplorerDock.setObjectName("SceneExplorerDockWindow")
-        self.sceneExplorerDock.setAllowedAreas(QtCore.Qt.LeftDockWidgetArea | QtCore.Qt.RightDockWidgetArea)
-        self.sceneExplorerDock.setWidget(self.sceneExplorerWin)
-        self.addDockWidget(QtCore.Qt.LeftDockWidgetArea, self.sceneExplorerDock)
-
-        self.consoleDock = QtGui.QDockWidget(self.tr("Console"), self)
-        self.consoleDock.setObjectName("ConsoleDockWindow")
-        self.consoleDock.setAllowedAreas(QtCore.Qt.BottomDockWidgetArea | QtCore.Qt.TopDockWidgetArea)
-        self.consoleDock.setWidget(self.consoleWindow)
-        self.addDockWidget(QtCore.Qt.BottomDockWidgetArea, self.consoleDock)
-
-        self.fileToolBar = self.addToolBar("File Toolbar")
-        self.fileToolBar.setObjectName("FileToolBar")
-        self.fileToolBar.setAllowedAreas(QtCore.Qt.TopToolBarArea | QtCore.Qt.BottomToolBarArea)
-        self.fileToolBar.addAction(self.actionNeu)
-        self.fileToolBar.addAction(self.actionClose)
-        self.addToolBar(QtCore.Qt.TopToolBarArea, self.fileToolBar)
-
-        self.moveToolBar = self.addToolBar("Transformation Bar")
-        self.moveToolBar.setObjectName("TransformationBar")
-        self.moveToolBar.setAllowedAreas(QtCore.Qt.TopToolBarArea | QtCore.Qt.BottomToolBarArea)
-        self.moveToolBar.addAction(self.actionMove)
-        self.moveToolBar.addAction(self.actionRotate)
-        self.moveToolBar.addAction(self.actionScale)
-        self.addToolBar(QtCore.Qt.TopToolBarArea, self.moveToolBar)
-
-    def keyPressEvent(self,  event):
-        if not event.isAutoRepeat():
-            self.ogreRenderWindow.keyPressEvent(event)
-
-    def keyReleaseEvent(self,  event):
-        if not event.isAutoRepeat():
-            self.ogreRenderWindow.keyReleaseEvent(event)
-        pass
-
-    def connectActionButtons(self):
-        pass
-
-    def saveOnClose(self):
-        reply = QtGui.QMessageBox.question(self,  "Rastullahs Lockenwickler - Unsaved Chages",  "Save unsaved changes?",  QtGui.QMessageBox.Yes|QtGui.QMessageBox.No|QtGui.QMessageBox.Cancel)
-        if reply == QtGui.QMessageBox.Cancel:
-            return False
-        if reply == QtGui.QMessageBox.Yes:
-            print""
-            #TODO: implement save here
-        return True
-
-    def closeEvent(self,  event):
-        if self.saveOnClose():
-            settings = QtCore.QSettings()
-            settings.setValue("MainWindow/Geometry",  QtCore.QVariant(self.saveGeometry()))
-            settings.setValue("MainWIndow/DockWindows",  QtCore.QVariant(self.saveState()))
-        else:
-            event.ignore()
-
-if __name__ == "__main__":
-    app = QtGui.QApplication(sys.argv)
-    app.setOrganizationName("Team Pantheon")
-    app.setOrganizationDomain("rastullahs-lockenpracht.de/team")
-    app.setApplicationName("Lockenwickler")
-
-    form = Lockenwickler()
-    form.show()
-
-    sys.exit(app.exec_())
-
+#################################################
+ # Copyright (C) 2008  Stefan Stammberger
+ #
+ # This library is free software; you can redistribute it and/or
+ # modify it under the terms of the GNU Lesser General Public
+ # License as published by the Free Software Foundation; either
+ # version 2.1 of the License, or (at your option) any later version.
+ #
+ # This library is distributed in the hope that it will be useful,
+ # but WITHOUT ANY WARRANTY; without even the implied warranty of
+ # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ # Lesser General Public License for more details.
+ #
+ # You should have received a copy of the GNU Lesser General Public
+ # License along with this library; if not, write to the Free Software
+ # Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ #################################################
+
+
+import os
+import sys
+import platform
+
+sys.path.insert(0,'..')
+import PythonOgreConfig
+
+from random import randint
+from os.path import isfile
+
+from PyQt4 import QtGui, QtCore
+from PreferencesDialog import *
+from ObjectPropertyWin import *
+from ModelSelectionDialog import *
+from GameObjectClassView import *
+from ConsoleWindow import *
+from ModuleManager import *
+from SceneExplorer import *
+
+import OgreMainWindow
+import ogre.renderer.OGRE as og
+
+class Lockenwickler(QtGui.QMainWindow):
+    def __init__(self, parent=None):
+        QtGui.QWidget.__init__(self, parent)
+
+        pixmap = QPixmap("media/icons/lockenwickler_provisorium.png")
+        splash = QSplashScreen(pixmap, Qt.WindowStaysOnTopHint)
+        splash.setMask(pixmap.mask())
+        splash.showMessage("Starting...")
+        splash.show()
+
+        self.setupUi()
+
+        self.consoleWindow = ConsoleWindow(False,  self)
+
+        self.setupOgre()
+
+        self.prefDialog = PreferencesDialog(self.loadModule, self)
+        self.objectPropertyWin = ObjectPropertyWin(self)
+        self.sceneExplorerWin = SceneExplorer(self)
+        self.modelSelectionDialog = ModelSelectionDialog(self.ogreRoot, self)
+        self.gameObjectClassView = GameObjectClassView(self.moduleManager.gocManager)
+
+        self.createDockWindows()
+
+        self.mainTimer = QtCore.QTimer(self)
+        self.mainTimer.connect(self.mainTimer, QtCore.SIGNAL("timeout()"), self.update)
+        self.mainTimer.start(5)
+
+        settings = QtCore.QSettings()
+        self.restoreGeometry(settings.value("MainWindow/Geometry").toByteArray())
+        self.restoreState(settings.value("MainWindow/DockWindows").toByteArray())
+
+        self.setWindowIcon(QIcon("media/icons/lockenwickler_provisorium_small.png"))
+        self.setWindowTitle("Rastullahs Lockenwickler")
+#        # Import Psyco if available
+#        try:
+#            import psyco
+#            psyco.full()
+#            #psyco.log()
+#            #psyco.profile()
+#        except ImportError:
+#            pass
+
+        #QtGui.QApplication.setKeyboardInputInterval(5000)
+
+        splash.finish(self)
+
+    def createAction(self, text, slot=None, shortcut=None, icon=None, tip=None, checkable=False, signal="triggered()"):
+        action = QtGui.QAction(text, self)
+        if icon is not None:
+            action.setIcon(QtGui.QIcon("media/icons/%s" % icon))
+        if shortcut is not None:
+            action.setShortcut(shortcut)
+        if tip is not None:
+            action.setToolTip(tip)
+            action.setStatusTip(tip)
+        if slot is not None:
+            self.connect(action, QtCore.SIGNAL(signal), slot)
+
+        action.setCheckable(checkable)
+
+        return action
+
+    def addActions(self, target, actions):
+        for act in actions:
+            if act is None:
+               target.addSeparator()
+            else:
+                target.addAction(act)
+
+    def setupUi(self):
+        self.setObjectName("MainWindow")
+
+        self.centralwidget = QtGui.QWidget(self)
+        self.centralwidget.setObjectName("centralwidget")
+
+        self.hboxlayout = QtGui.QHBoxLayout(self.centralwidget)
+        self.hboxlayout.setObjectName("hboxlayout")
+
+        self.gridlayout = QtGui.QGridLayout()
+        self.gridlayout.setObjectName("gridlayout")
+
+        self.menubar = QtGui.QMenuBar(self)
+        self.menubar.setObjectName("menubar")
+
+        self.menuFile = QtGui.QMenu(self.menubar)
+        self.menuFile.setObjectName("menuFile")
+
+        self.menuEdit = QtGui.QMenu(self.menubar)
+        self.menuEdit.setObjectName("menuEdit")
+
+        self.menuView = QtGui.QMenu(self.menubar)
+        self.menuView.setObjectName("menuView")
+        self.setMenuBar(self.menubar)
+
+
+        self.statusbar = QtGui.QStatusBar(self)
+        self.statusbar.setObjectName("statusbar")
+        self.setStatusBar(self.statusbar)
+
+#####################################
+        self.actionNeu =self.createAction("&New",  self.actionNewSlot,  QKeySequence.New,  "filenew.png",  "New")
+        self.actionNeu.setObjectName("actionNeu")
+
+        self.actionClose = self.createAction("Quit",  self.actionQuitSlot,  "Alt + Q",  "exit.png",  "Quit")
+        self.actionClose.setObjectName("actionQuit")
+#####################################
+
+
+#####################################
+        self.actionDelete = self.createAction("Delete",  self.actionDeleteSlot,  QKeySequence.Delete,  "editdelete.png",  "Delete")
+        self.actionDelete.setObjectName("actionDelete")
+
+        self.actionCopy = self.createAction("Copy",  self.actionCopySlot,  QKeySequence.Copy,  "editcopy.png",  "Copy")
+        self.actionCopy.setObjectName("actionCopy")
+
+        self.actionCut = self.createAction("Cut",  self.actionCutSlot,  QKeySequence.Cut,  "editcut.png",  "Cut")
+        self.actionCut.setObjectName("actionCut")
+
+        self.actionPaste = self.createAction("Paste",  self.actionPasteSlot,  QKeySequence.Paste,  "editpaste.png",  "Paste")
+        self.actionPaste.setObjectName("actionPaste")
+
+        self.actionMove = self.createAction("&Move",  self.actionMoveSlot,  "g",  "move.png",  "Move selected object")
+        self.actionMove.setObjectName("actionMove")
+
+        self.actionRotate = self.createAction("&Rotate",  self.actionRotateSlot,  "r",  "rotate.png",  "Rotate selected object")
+        self.actionRotate.setObjectName("actionRotate")
+
+        self.actionScale = self.createAction("&Scale",  self.actionScaleSlot,  "x",  "resizecol.png",  "Scale selected object")
+        self.actionRotate.setObjectName("actionRotate")
+
+
+#####################################
+#####################################
+        self.actionSceneExplorer = self.createAction("&Scene Exlporer",  self.toggleSceneExplorer,  "Alt + E",  "view_tree.png",  "Scene Explorer",  False)
+        self.actionSceneExplorer.setObjectName("actionSceneExplorer")
+
+        self.actionPreferences = self.createAction("&Preferences",  self.togglePreferencesWindow,  "Alt + P",  "configure.png",  "Lockenwickler Preferences",  False)
+        self.actionPreferences.setObjectName("actionPreferences")
+
+        self.actionProperty_Window = self.createAction("Pr&operty Window",  self.togglePropertyWindow,  "Alt + P",  "unsortedlist1.png",  "Property Window")
+        self.actionProperty_Window.setObjectName("actionProperty_Window")
+
+        self.actionObject_Selection = self.createAction("&Model Preview Window",  self.toggleModelPreviewWindow,  "Alt + O",  "tux.png",  "Model Preview")
+        self.actionObject_Selection.setObjectName("actionObject_Selection")
+
+        self.actionGameObjectClass_Selection = self.createAction("&Game Object Class Preview Window",  self.toggleGameObjectViewWindow,  "Alt + G",  "multirow.png",  "GameObjectClass Preview")
+        self.actionGameObjectClass_Selection.setObjectName("actionObject_Selection")
+
+        self.actionConsole_Window = self.createAction("&Console Window",  self.toggleConsoleWindow,  "Alt + C",  "console.png",  "Console Window")
+        self.actionConsole_Window.setObjectName("actionConsole_Window")
+
+#####################################
+#####################################
+
+
+        self.menuFile.addAction(self.actionNeu)
+        self.menuFile.addAction(self.actionClose)
+
+        self.menuEdit.addAction(self.actionMove)
+        self.menuEdit.addAction(self.actionRotate)
+        self.menuEdit.addAction(self.actionScale)
+        self.menuEdit.addSeparator()
+        self.menuEdit.addAction(self.actionDelete)
+        self.menuEdit.addAction(self.actionCopy)
+        self.menuEdit.addAction(self.actionCut)
+        self.menuEdit.addAction(self.actionPaste)
+
+        self.menuView.addAction(self.actionSceneExplorer)
+        self.menuView.addAction(self.actionPreferences)
+        self.menuView.addAction(self.actionProperty_Window)
+        self.menuView.addAction(self.actionObject_Selection)
+        self.menuView.addAction(self.actionGameObjectClass_Selection)
+        self.menuView.addAction(self.actionConsole_Window)
+        self.menubar.addAction(self.menuFile.menuAction())
+        self.menubar.addAction(self.menuEdit.menuAction())
+        self.menubar.addAction(self.menuView.menuAction())
+
+        self.retranslateUi()
+        QtCore.QMetaObject.connectSlotsByName(self)
+
+    def retranslateUi(self):
+        self.setWindowTitle(QtGui.QApplication.translate("MainWindow", "MainWindow", None, QtGui.QApplication.UnicodeUTF8))
+        self.menuFile.setTitle(QtGui.QApplication.translate("MainWindow", "File", None, QtGui.QApplication.UnicodeUTF8))
+        self.menuEdit.setTitle(QtGui.QApplication.translate("MainWindow", "Edit", None, QtGui.QApplication.UnicodeUTF8))
+        self.menuView.setTitle(QtGui.QApplication.translate("MainWindow", "View", None, QtGui.QApplication.UnicodeUTF8))
+        self.actionNeu.setText(QtGui.QApplication.translate("MainWindow", "New", None, QtGui.QApplication.UnicodeUTF8))
+        self.actionMove.setText(QtGui.QApplication.translate("MainWindow", "Move", None, QtGui.QApplication.UnicodeUTF8))
+        self.actionRotate.setText(QtGui.QApplication.translate("MainWindow", "Rotate", None, QtGui.QApplication.UnicodeUTF8))
+        self.actionSceneExplorer.setText(QtGui.QApplication.translate("MainWindow", "Scene Explorer", None, QtGui.QApplication.UnicodeUTF8))
+        self.actionPreferences.setText(QtGui.QApplication.translate("MainWindow", "Preferences", None, QtGui.QApplication.UnicodeUTF8))
+        self.actionProperty_Window.setText(QtGui.QApplication.translate("MainWindow", "Property Window", None, QtGui.QApplication.UnicodeUTF8))
+        self.actionObject_Selection.setText(QtGui.QApplication.translate("MainWindow", "Object Selection", None, QtGui.QApplication.UnicodeUTF8))
+        self.actionClose.setText(QtGui.QApplication.translate("MainWindow", "Quit", None, QtGui.QApplication.UnicodeUTF8))
+        self.actionConsole_Window.setText(QtGui.QApplication.translate("MainWindow", "Console Window", None, QtGui.QApplication.UnicodeUTF8))
+
+    def setupOgre(self, pluginCfgPath="./Plugins.cfg", ogreCfgPath="./ogre.cfg", logPath="./ogre.log"):
+        if platform.system() == "Windows":
+            pluginCfgPath="./Plugins-windows.cfg"
+        else:
+            pluginCfgPath="./Plugins-linux.cfg"
+
+        root = og.Root(pluginCfgPath, ogreCfgPath, logPath)
+        self.ogreRoot = root
+
+        if  not self.ogreRoot.restoreConfig() and not self.ogreRoot.showConfigDialog():
+            sys.exit('Quit from Config Dialog')
+
+        root.initialise(False)
+
+        self.OgreMainWinSceneMgr = self.ogreRoot.createSceneManager(og.ST_GENERIC, "OgreMainWinSceneMgr")
+        self.OgreMainWinSceneMgr.ambientLight = og.ColourValue(4, 4, 4)
+
+        self.moduleName = ""
+        self.moduleManager = ModuleManager(self.ogreRoot,  self.OgreMainWinSceneMgr)
+
+        self.ogreRenderWindow = OgreMainWindow.OgreMainWindow(self.moduleManager,  root,  self.OgreMainWinSceneMgr,  self)
+        self.gridlayout.addWidget(self.ogreRenderWindow,0,0,1,1)
+        self.hboxlayout.addLayout(self.gridlayout)
+        self.setCentralWidget(self.centralwidget)
+
+        og.ResourceGroupManager.getSingleton().addResourceLocation("./media", "FileSystem", "General", False)
+        og.ResourceGroupManager.getSingleton().initialiseAllResourceGroups()
+
+        oglog = og.LogManager.getSingleton().getDefaultLog()
+        oglog.addListener(self.consoleWindow.lockenLog)
+
+    def update(self):
+#        try:
+#            self.OgreMainWinSceneMgr.getSceneNode("saeule_076_node").yaw(0.02)
+#        except Exception,  e:
+#            pass
+
+        self.ogreRoot.renderOneFrame()
+
+    def actionNewSlot(self):
+        print "dbg: new"
+        return
+
+    def actionQuitSlot(self):
+        self.close()
+
+    def actionDeleteSlot(self):
+        self.moduleManager.deleteObjects()
+
+    def actionCopySlot(self):
+        self.moduleManager.copyObjects()
+
+    def actionCutSlot(self):
+        self.moduleManager.cutObjects()
+
+    def actionPasteSlot(self):
+        self.moduleManager.pasteObjects(self.ogreRenderWindow.getCameraToViewportRay())
+
+    def actionMoveSlot(self):
+        self.moduleManager.pivot.setMoveMode()
+
+    def actionRotateSlot(self):
+        self.moduleManager.pivot.setRotateMode()
+
+    def actionScaleSlot(self):
+        self.moduleManager.pivot.setScaleMode()
+
+    def togglePreferencesWindow(self):
+        if self.prefDialog.isHidden():
+            self.prefDialog.show()
+        else:
+            self.prefDialog.hide()
+
+    def toggleModelPreviewWindow(self):
+        if self.modelSelectionDock.isHidden():
+            self.modelSelectionDock.show()
+        else:
+            self.modelSelectionDock.hide()
+
+    def toggleGameObjectViewWindow(self):
+        if self.gameObjectClassViewDock.isHidden():
+            self.gameObjectClassViewDock.show()
+        else:
+            self.gameObjectClassViewDock.hide()
+
+    def toggleSceneExplorer(self):
+        if self.sceneExplorerDock.isHidden():
+            self.sceneExplorerDock.show()
+        else:
+            self.sceneExplorerDock.hide()
+
+    def togglePropertyWindow(self):
+        if self.propertyDock.isHidden():
+            self.propertyDock.show()
+        else:
+            self.propertyDock.hide()
+
+    def toggleConsoleWindow(self):
+        if self.consoleDock.isHidden():
+            self.consoleDock.show()
+        else:
+            self.consoleDock.hide()
+
+    # parses the moduleconfig.rb and searches for all loader.loadmap(" statements in the ruby script
+    # and parses them too
+    def loadModule(self, modulePath, moduleName):
+        if self.moduleName == moduleName:
+            return
+
+        self.moduleName = moduleName
+        self.workingDir = modulePath + moduleName # the module path
+        self.workingDirCommon = modulePath + "common" # the module path of the common module
+
+        import codecs
+        import glob
+
+        modConfig = self.workingDir + "/scripts/moduleconfig.rb"
+        if isfile(modConfig): # is the modconfig existing?
+            f = codecs.open(modConfig, 'r', 'utf-8')
+        else:
+            print ("Error: couldn't find module config")
+            pass
+
+        self.mapFiles = [] # a list in case the module has more than one map file
+        self.gofFiles = [] # gof File list
+        for line in f:
+            lStripped = line.strip() #strip the whitespace away, not needed here
+
+            # get the map file(s)
+            if lStripped.startswith("loader.loadMap("): # all loadMap commands begin with loader.loadMap(
+                spl = lStripped.split('"')
+                for a in spl:
+                    if a.endswith(".xml"):
+                        pathToMapFile = self.workingDir + "/maps/" + a
+                        self.mapFiles.append(pathToMapFile)
+
+        self.setWindowTitle(moduleName)
+
+        self.modelSelectionDialog.scanDirForModels(self.workingDir, moduleName)
+        self.modelSelectionDialog.scanDirForModels(self.workingDirCommon, "common")
+
+        self.setResourcePaths(self.workingDir, moduleName)
+        self.setResourcePaths(self.workingDirCommon, "common")
+        og.ResourceGroupManager.getSingleton().initialiseAllResourceGroups()
+
+        command = (os.path.join(self.workingDir,  "maps") + "/*.xml")
+        for mf in glob.glob(command): # search for all xml files in the maps directory and add them
+            self.mapFiles.append(mf)
+
+        command = (os.path.join(self.workingDir,  "maps") + "/*.scene")
+        for mf in glob.glob(command): # search for all .scene files in the maps directory and add them
+            self.mapFiles.append(mf)
+
+        command = (os.path.join(self.workingDir,  "dsa") + "/*.gof")
+        for gf in glob.glob(command): # search for all .gof files in the dsa directory in the module dir
+            self.gofFiles.append(gf)
+
+        command = (os.path.join(self.workingDirCommon,  "dsa") + "/*.gof")
+        for gf in glob.glob(command): # search for all .gof files in the dsa directory in the common module dir
+            self.gofFiles.append(gf)
+
+        self.moduleManager.load(moduleName,  self.mapFiles,  self.gofFiles)
+
+    def setResourcePaths(self, path, moduleName):
+        for file in os.listdir(path):
+            curFile = path + "/" + file
+
+            if file.startswith('.'): #ignore dot files (hidden)
+                continue
+            if isdir(curFile):
+                og.ResourceGroupManager.getSingleton().addResourceLocation(curFile, "FileSystem", moduleName, False)
+                self.setResourcePaths(curFile, moduleName)
+                continue
+            if isfile(curFile):
+                pass
+
+    def createDockWindows(self):
+        self.propertyDock = QtGui.QDockWidget(self.tr("Properties"), self)
+        self.propertyDock.setObjectName("PropertyDockWindow")
+        self.propertyDock.setAllowedAreas(QtCore.Qt.LeftDockWidgetArea | QtCore.Qt.RightDockWidgetArea)
+        self.propertyDock.setWidget(self.objectPropertyWin)
+        self.addDockWidget(QtCore.Qt.LeftDockWidgetArea, self.propertyDock)
+
+        self.modelSelectionDock = QtGui.QDockWidget(self.tr("Models"), self)
+        self.modelSelectionDock.setObjectName("ModelSelectionDockWindow")
+        self.modelSelectionDock.setAllowedAreas(QtCore.Qt.LeftDockWidgetArea | QtCore.Qt.RightDockWidgetArea)
+        self.modelSelectionDock.setWidget(self.modelSelectionDialog)
+        self.addDockWidget(QtCore.Qt.RightDockWidgetArea, self.modelSelectionDock)
+
+        self.gameObjectClassViewDock = QtGui.QDockWidget(self.tr("GameObjectClasses"), self)
+        self.gameObjectClassViewDock.setObjectName("GameObjectClassView")
+        self.gameObjectClassViewDock.setAllowedAreas(QtCore.Qt.LeftDockWidgetArea | QtCore.Qt.RightDockWidgetArea)
+        self.gameObjectClassViewDock.setWidget(self.gameObjectClassView)
+        self.addDockWidget(QtCore.Qt.RightDockWidgetArea, self.gameObjectClassViewDock)
+
+        self.sceneExplorerDock = QtGui.QDockWidget(self.tr("Scene Explorer"), self)
+        self.sceneExplorerDock.setObjectName("SceneExplorerDockWindow")
+        self.sceneExplorerDock.setAllowedAreas(QtCore.Qt.LeftDockWidgetArea | QtCore.Qt.RightDockWidgetArea)
+        self.sceneExplorerDock.setWidget(self.sceneExplorerWin)
+        self.addDockWidget(QtCore.Qt.LeftDockWidgetArea, self.sceneExplorerDock)
+
+        self.consoleDock = QtGui.QDockWidget(self.tr("Console"), self)
+        self.consoleDock.setObjectName("ConsoleDockWindow")
+        self.consoleDock.setAllowedAreas(QtCore.Qt.BottomDockWidgetArea | QtCore.Qt.TopDockWidgetArea)
+        self.consoleDock.setWidget(self.consoleWindow)
+        self.addDockWidget(QtCore.Qt.BottomDockWidgetArea, self.consoleDock)
+
+        self.fileToolBar = self.addToolBar("File Toolbar")
+        self.fileToolBar.setObjectName("FileToolBar")
+        self.fileToolBar.setAllowedAreas(QtCore.Qt.TopToolBarArea | QtCore.Qt.BottomToolBarArea)
+        self.fileToolBar.addAction(self.actionNeu)
+        self.fileToolBar.addAction(self.actionClose)
+        self.addToolBar(QtCore.Qt.TopToolBarArea, self.fileToolBar)
+
+        self.moveToolBar = self.addToolBar("Transformation Bar")
+        self.moveToolBar.setObjectName("TransformationBar")
+        self.moveToolBar.setAllowedAreas(QtCore.Qt.TopToolBarArea | QtCore.Qt.BottomToolBarArea)
+        self.moveToolBar.addAction(self.actionMove)
+        self.moveToolBar.addAction(self.actionRotate)
+        self.moveToolBar.addAction(self.actionScale)
+        self.addToolBar(QtCore.Qt.TopToolBarArea, self.moveToolBar)
+
+    def keyPressEvent(self,  event):
+        if not event.isAutoRepeat():
+            self.ogreRenderWindow.keyPressEvent(event)
+
+    def keyReleaseEvent(self,  event):
+        if not event.isAutoRepeat():
+            self.ogreRenderWindow.keyReleaseEvent(event)
+        pass
+
+    def connectActionButtons(self):
+        pass
+
+    def saveOnClose(self):
+        reply = QtGui.QMessageBox.question(self,  "Rastullahs Lockenwickler - Unsaved Chages",  "Save unsaved changes?",  QtGui.QMessageBox.Yes|QtGui.QMessageBox.No|QtGui.QMessageBox.Cancel)
+        if reply == QtGui.QMessageBox.Cancel:
+            return False
+        if reply == QtGui.QMessageBox.Yes:
+            print""
+            #TODO: implement save here
+        return True
+
+    def closeEvent(self,  event):
+        if self.saveOnClose():
+            settings = QtCore.QSettings()
+            settings.setValue("MainWindow/Geometry",  QtCore.QVariant(self.saveGeometry()))
+            settings.setValue("MainWIndow/DockWindows",  QtCore.QVariant(self.saveState()))
+        else:
+            event.ignore()
+
+if __name__ == "__main__":
+    app = QtGui.QApplication(sys.argv)
+    app.setOrganizationName("Team Pantheon")
+    app.setOrganizationDomain("rastullahs-lockenpracht.de/team")
+    app.setApplicationName("Lockenwickler")
+
+    form = Lockenwickler()
+    form.show()
+
+    sys.exit(app.exec_())
+

Modified: rl/trunk/editors/Lockenwickler/src/ModuleManager.py
===================================================================
--- rl/trunk/editors/Lockenwickler/src/ModuleManager.py	2008-10-19 16:35:21 UTC (rev 4563)
+++ rl/trunk/editors/Lockenwickler/src/ModuleManager.py	2008-10-26 09:35:34 UTC (rev 4564)
@@ -23,294 +23,17 @@
 import ogre.renderer.OGRE as og
 
 from MovePivot import *
+from GameObjectClassManager import *
+from MyRaySceneQueryListener import *
 
-# a class to store information about a object that got selected
-class SelectionObject():
-    def __init__(self,  entity,  distance):
-        self.entityName = entity.getName()
-        self.entity = entity #the selected entity
-        self.distance = distance # the distance from camera at the time of selection
-        self.isPivot = False
-
-    #if True this instance will show its bounding box else it will hide it
-    def setSelected(self,  selected):
-        if selected == True:
-            self.entity.getParentNode().showBoundingBox(True)
-        else:
-            self.entity.getParentNode().showBoundingBox(False)
-
-    def __eq__(self, other):
-        return self.entity.getName() == other.entity.getName()
-
-    def __ne__(self, other):
-        return self.entity.getName() != other.entity.getName()
-
-class MyRaySceneQueryListener ( og.RaySceneQueryListener ):
-    def __init__( self ):
-        super ( MyRaySceneQueryListener, self ).__init__()
-        self.previouseSelection = None
-        self.selectionList = []
-        self.previousSelected = -1
-        self.currentSelected = -1
-
-        self.mNormalList = []
-        self.mVertexList = []
-        self.mIndexList = []
-
-        self.currentRay = None
-        self.lastRay = None
-
-    # sort algorithm for the selection list
-    def sortCompareImp(self,  x,  y):
-        if x.distance > y.distance:
-            return 1
-        elif x.distance == y.distance:
-            return 0
-        else: # x<y
-            return -1
-
-    def queryResult ( self, entity, distance ):
-        #print "dbg: " + entity.getName()
-        if distance == 0.0: #camera is in the bounding box, ignore this selection
-            return True
-#        elif entity.getName() == "rayLine" :
-#            return True
-        elif entity.getName() == "OgreMainWin::0::ViewportGrid":
-            return True
-        elif entity.isVisible() and entity.getName() == "EditorXArrow":
-            so = SelectionObject(entity,  distance)
-            so.isPivot = True
-            self.selectionList.append(so)
-            return False
-        elif entity.isVisible() and entity.getName() == "EditorYArrow":
-            so = SelectionObject(entity,  distance)
-            so.isPivot = True
-            self.selectionList.append(so)
-            return False
-        elif entity.isVisible() and entity.getName() == "EditorZArrow":
-            so = SelectionObject(entity,  distance)
-            so.isPivot = True
-            self.selectionList.append(so)
-            return False
-        elif entity.isVisible() and entity.getName() == "EditorFreeMover":
-            return True
-        elif entity.getName() == "EditorXRotator" or entity.getName() == "EditorYRotator" or entity.getName() == "EditorZRotator":
-            if entity.isVisible() and self.rayCastToPolygonLevelOnSingleMesh(self.currentRay,  entity):
-                so = SelectionObject(entity,  distance)
-                so.isPivot = True
-                self.selectionList.append(so)
-                return False
-            else:
-                return True
-        else:
-            so = SelectionObject(entity,  distance)
-            self.selectionList.append(so)
-
-        self.selectionList.sort(self.sortCompareImp)
-
-        return True
-
-    def reset(self):
-        self.previousSelected = -1
-        self.currentSelected = -1
-        del self.selectionList[:]
-        #self.selectionList = []
-
-#    def iterateEntityUnderMouse(self):
-#        self.previousSelected = self.currentSelected
-#        if len(self.selectionList) >= self.currentSelected: # would mean we are out of bounds
-#            self.selectionList[self.currentSelected].setSelected(False)
-#
-#        self.currentSelected += 1
-#
-#        if len(self.selectionList) == self.currentSelected: # means we are out of bounds and reached the end of the list, reset it to zero
-#            self.currentSelected = 0
-#
-#        if len(self.selectionList) >= self.currentSelected: # would mean we are out of bounds
-#            #print str(self.selectionList[self.currentSelected].distance) + " "  + self.selectionList[self.currentSelected].entity.getName()
-#            if self.rayCastToPolygonLevelOnCurrentSelection():
-#                self.selectionList[self.currentSelected].setSelected(True)
-#                return self.selectionList[self.currentSelected]
-
-
-    def getMeshInformation(self,  entity):
-        numVertices = 0
-        numIndices = 0
-        useSharedVertices = False
-
-        if not entity:
-            return False
-
-        pMesh = entity.getMesh()
-
-        pos =    entity.getParentNode().getWorldPosition()
-        orient = entity.getParentNode().getWorldOrientation()
-        scale =  entity.getParentNode().getScale()
-
-        for i in range ( pMesh.getNumSubMeshes() ):
-            pSubMesh = pMesh.getSubMesh(i)
-            if pSubMesh.useSharedVertices:
-                useSharedVertices = True
-            else:
-                numVertices += pSubMesh.vertexData.vertexCount
-            numIndices += pSubMesh.indexData.indexCount
-
-        if useSharedVertices:
-            numVertices += pMesh.sharedVertexData.vertexCount
-
-            storageclass = ctypes.c_float * 3
-            test=storageclass(0.0,  0.0,  0.0)
-#         mVertexList = new Point[numVertices];
-#         mIndexList = new unsigned int[numIndices];
-
-        self.mVertexList = []
-        self.mIndexList = []
-
-        ## Count the number of vertices and incides so we can Set them
-        indexCount = 0
-        vertListCount = 0
-
-        if useSharedVertices:
-            ## Real* pVertices (x, y, z order x numVertices)
-            elem = pMesh.sharedVertexData.vertexDeclaration.findElementBySemantic(og.VES_POSITION)
-
-            if not elem:
-                ogre.Except(Exception.ERR_ITEM_NOT_FOUND, "Can't find position elements in the "
-                    "mesh to be written!", "MeshSerializerImpl.writeGeometry")
-
-            vbuf = pMesh.sharedVertexData.vertexBufferBinding.getBuffer(elem.getSource())
-
-            ## need space for the 3 verticies
-            storageclass = ctypes.c_float * 3
-            test=storageclass(0.0,  0.0,  0.0)
-
-            for j in range ( pMesh.sharedVertexData.vertexCount ):
-                vbuf.readData(j * vbuf.getVertexSize(), 3 * ctype.sizeof(ctype.c_float), ctype.addressof(test))
-                self.mVertexList.append( og.Vector3(test[0], test[1], test[2]) )
-                vertListCount+=1
-
-        for i in range ( pMesh.getNumSubMeshes() ):
-            pSubMesh = pMesh.getSubMesh(i)
-            if not pSubMesh.useSharedVertices:
-                ## Real* pVertices (x, y, z order x numVertices)
-                elem = pSubMesh.vertexData.vertexDeclaration.findElementBySemantic(og.VES_POSITION)
-
-                if not elem:
-                    og.Except(Exception.ERR_ITEM_NOT_FOUND, "Can't find position elements in the "
-                        "mesh to be written!", "MeshSerializerImpl.writeGeometry")
-
-                vbuf = pSubMesh.vertexData.vertexBufferBinding.getBuffer(elem.getSource())
-
-                ## need space for the verticies
-                storageclass = ctypes.c_float * (pSubMesh.vertexData.vertexCount * 6)
-                test=storageclass(0.0)
-
-                vbuf.readData(0, pSubMesh.vertexData.vertexCount * 6 * ctypes.sizeof(ctypes.c_float), ctypes.addressof(test))
-
-                for j in range ( 0,  pSubMesh.vertexData.vertexCount * 6,  6):
-                    #print j
-                    p = og.Vector3(test[j], test[j+1], test[j+2])
-                    p /= scale
-                    p += pos
-                    p = orient * p
-                    self.mVertexList.append( p )
-                    vertListCount += 1
-
-            ibuf = pSubMesh.indexData.indexBuffer
-            ## need space for the verticies
-            storageclass = ctypes.c_ushort * pSubMesh.indexData.indexCount
-            test2=storageclass()
-
-
-            ibuf.readData(0, ibuf.getSizeInBytes(), ctypes.addressof(test2))
-            for j in range ( pSubMesh.indexData.indexCount ):
-                self.mIndexList.append (test2[j])   # unsigned short
-                indexCount += 1
-
-            ih = 0
-            for blah in self.mVertexList:
-                #print str(ih) + ": "  +  str(blah)
-                ih += 1
-
-#            for blah in self.mIndexList:
-#                print blah
-
-
-    # used when a new selection is made, meaning when not iterationg through the selected objects
-    def rayCastToPolygonLevel(self,  ray):
-        self.lastRay = ray
-
-        for so in self.selectionList:
-            if so.isPivot:
-                return so
-
-        if len(self.selectionList) >= 1:
-            for so in self.selectionList:
-                if self.rayCastToPolygonLevelOnSingleMesh(ray,  so.entity):
-                    return so
-
-
-    def rayCastToPolygonLevelOnSingleMesh(self,  ray,  entity):
-        return True
-        self.getMeshInformation(entity)
-        name = entity.getName()
-        print "dbg: " + name
-
-        temp = []
-        for vec in self.mVertexList:
-            temp.append(vec.x)
-            temp.append(vec.y)
-            temp.append(vec.z)
-
-        globalPosition = entity.getParentNode().getWorldPosition()
-        globalOrientation = entity.getParentNode().getWorldOrientation()
-
-
-        i = 0
-        while i <= (len(self.mIndexList) - 3):
-            verta = globalPosition + self.mVertexList[self.mIndexList[i]]
-            vertb = globalPosition + self.mVertexList[self.mIndexList[i+1]]
-            vertc = globalPosition + self.mVertexList[self.mIndexList[i+2]]
-
-            verta = globalOrientation * verta
-            vertb = globalOrientation * vertb
-            vertc = globalOrientation * vertc
-            normal = og.Math.calculateBasicFaceNormal(verta, vertb, vertc)
-
-            result = og.Math.intersects(ray, verta, vertb, vertc, True, True)
-            #result = og.Math.intersects(ray, globalPosition + self.mVertexList[self.mIndexList[i]], globalPosition + self.mVertexList[self.mIndexList[i+1]],
-            #                                                                                                                                              globalPosition + self.mVertexList[self.mIndexList[i+2]], normal,  True, True)
-
-            if result.first:
-                print "dbg: Treffer!!!!!!!!!"
-                return True
-
-            i += 3
-
-        return False
-
-    def rayCastToPolygonLevelOnCurrentSelection(self):
-        if len(self.selectionList) >= 1:
-            self.getMeshInformation(self.selectionList[self.currentSelected].entity)
-
-            i = 0
-            while i <= (len(self.mIndexList) - 3):
-                globalPosition = self.selectionList[self.currentSelected].entity.getParentNode().getPosition()
-                result = og.Math.intersects(self.lastRay, globalPosition + self.mVertexList[self.mIndexList[i]], globalPosition + self.mVertexList[self.mIndexList[i+1]],
-                                                                                                                                                          globalPosition + self.mVertexList[self.mIndexList[i+2]], True, True)
-
-                if result.first:
-                   return True
-
-                i += 3
-            return False
-
 class ModuleManager(object):
     def __init__(self,  ogreRoot,  sceneManager):
         self.sceneManager = sceneManager
         self.ogreRoot = ogreRoot
         self.raySceneQuery = self.sceneManager.createRayQuery(og.Ray())
 
+        self.gocManager = GameObjectClassManager()
+
         self.userSelectionList = []
         self.cutList = [] # selection objects that has been cut out and wait to be pasted again
         self.cutListPreviousNodes = [] # contains the nodes they where copnnected to before the cut
@@ -334,10 +57,13 @@
 
         self.numerOfCopys = 0 #everytime a copy is made this numer is increased to generate unique node and mesh names
 
-    def load(self,  moduleName,  mapFiles):
+    def load(self,  moduleName,  mapFiles,  gofFiles):
         self.moduleName = moduleName
         self.mapFiles = mapFiles
+        self.gofFiles = gofFiles
 
+        self.gocManager.parseGOFFiles(self.gofFiles)
+
         for a in self.mapFiles:
             doc = xml.parse(a)
             node = doc.getElementsByTagName("entity")

Added: rl/trunk/editors/Lockenwickler/src/MyRaySceneQueryListener.py
===================================================================
--- rl/trunk/editors/Lockenwickler/src/MyRaySceneQueryListener.py	2008-10-19 16:35:21 UTC (rev 4563)
+++ rl/trunk/editors/Lockenwickler/src/MyRaySceneQueryListener.py	2008-10-26 09:35:34 UTC (rev 4564)
@@ -0,0 +1,300 @@
+#################################################
+ # Copyright (C) 2008  Stefan Stammberger
+ #
+ # This library is free software; you can redistribute it and/or
+ # modify it under the terms of the GNU Lesser General Public
+ # License as published by the Free Software Foundation; either
+ # version 2.1 of the License, or (at your option) any later version.
+ #
+ # This library is distributed in the hope that it will be useful,
+ # but WITHOUT ANY WARRANTY; without even the implied warranty of
+ # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ # Lesser General Public License for more details.
+ #
+ # You should have received a copy of the GNU Lesser General Public
+ # License along with this library; if not, write to the Free Software
+ # Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ #################################################
+
+import ctypes
+import ogre.renderer.OGRE as og
+
+# a class to store information about a object that got selected
+class SelectionObject():
+    def __init__(self,  entity,  distance):
+        self.entityName = entity.getName()
+        self.entity = entity #the selected entity
+        self.distance = distance # the distance from camera at the time of selection
+        self.isPivot = False
+    #if True this instance will show its bounding box else it will hide it
+    def setSelected(self,  selected):
+        if selected == True:
+            self.entity.getParentNode().showBoundingBox(True)
+        else:
+            self.entity.getParentNode().showBoundingBox(False)
+
+    def __eq__(self, other):
+        return self.entity.getName() == other.entity.getName()
+
+    def __ne__(self, other):
+        return self.entity.getName() != other.entity.getName()
+
+class MyRaySceneQueryListener ( og.RaySceneQueryListener ):
+    def __init__( self ):
+        super ( MyRaySceneQueryListener, self ).__init__()
+        self.previouseSelection = None
+        self.selectionList = []
+        self.previousSelected = -1
+        self.currentSelected = -1
+
+        self.mNormalList = []
+        self.mVertexList = []
+        self.mIndexList = []
+
+        self.currentRay = None
+        self.lastRay = None
+
+    # sort algorithm for the selection list
+    def sortCompareImp(self,  x,  y):
+        if x.distance > y.distance:
+            return 1
+        elif x.distance == y.distance:
+            return 0
+        else: # x<y
+            return -1
+
+    def queryResult ( self, entity, distance ):
+        #print "dbg: " + entity.getName()
+        if distance == 0.0: #camera is in the bounding box, ignore this selection
+            return True
+#        elif entity.getName() == "rayLine" :
+#            return True
+        elif entity.getName() == "OgreMainWin::0::ViewportGrid":
+            return True
+        elif entity.isVisible() and entity.getName() == "EditorXArrow":
+            so = SelectionObject(entity,  distance)
+            so.isPivot = True
+            self.selectionList.append(so)
+            return False
+        elif entity.isVisible() and entity.getName() == "EditorYArrow":
+            so = SelectionObject(entity,  distance)
+            so.isPivot = True
+            self.selectionList.append(so)
+            return False
+        elif entity.isVisible() and entity.getName() == "EditorZArrow":
+            so = SelectionObject(entity,  distance)
+            so.isPivot = True
+            self.selectionList.append(so)
+            return False
+        elif entity.isVisible() and entity.getName() == "EditorFreeMover":
+            return True
+        elif entity.getName() == "EditorXRotator" or entity.getName() == "EditorYRotator" or entity.getName() == "EditorZRotator":
+            if entity.isVisible() and self.rayCastToPolygonLevelOnSingleMesh(self.currentRay,  entity):
+                so = SelectionObject(entity,  distance)
+                so.isPivot = True
+                self.selectionList.append(so)
+                return False
+            else:
+                return True
+        else:
+            so = SelectionObject(entity,  distance)
+            self.selectionList.append(so)
+
+        self.selectionList.sort(self.sortCompareImp)
+
+        return True
+
+    def reset(self):
+        self.previousSelected = -1
+        self.currentSelected = -1
+        del self.selectionList[:]
+        #self.selectionList = []
+
+#    def iterateEntityUnderMouse(self):
+#        self.previousSelected = self.currentSelected
+#        if len(self.selectionList) >= self.currentSelected: # would mean we are out of bounds
+#            self.selectionList[self.currentSelected].setSelected(False)
+#
+#        self.currentSelected += 1
+#
+#        if len(self.selectionList) == self.currentSelected: # means we are out of bounds and reached the end of the list, reset it to zero
+#            self.currentSelected = 0
+#
+#        if len(self.selectionList) >= self.currentSelected: # would mean we are out of bounds
+#            #print str(self.selectionList[self.currentSelected].distance) + " "  + self.selectionList[self.currentSelected].entity.getName()
+#            if self.rayCastToPolygonLevelOnCurrentSelection():
+#                self.selectionList[self.currentSelected].setSelected(True)
+#                return self.selectionList[self.currentSelected]
+
+
+    def getMeshInformation(self,  entity):
+        numVertices = 0
+        numIndices = 0
+        useSharedVertices = False
+
+        if not entity:
+            return False
+
+        pMesh = entity.getMesh()
+
+        pos =    entity.getParentNode().getWorldPosition()
+        orient = entity.getParentNode().getWorldOrientation()
+        scale =  entity.getParentNode().getScale()
+
+        for i in range ( pMesh.getNumSubMeshes() ):
+            pSubMesh = pMesh.getSubMesh(i)
+            if pSubMesh.useSharedVertices:
+                useSharedVertices = True
+            else:
+                numVertices += pSubMesh.vertexData.vertexCount
+            numIndices += pSubMesh.indexData.indexCount
+
+        if useSharedVertices:
+            numVertices += pMesh.sharedVertexData.vertexCount
+
+            storageclass = ctypes.c_float * 3
+            test=storageclass(0.0,  0.0,  0.0)
+#         mVertexList = new Point[numVertices];
+#         mIndexList = new unsigned int[numIndices];
+
+        self.mVertexList = []
+        self.mIndexList = []
+
+        ## Count the number of vertices and incides so we can Set them
+        indexCount = 0
+        vertListCount = 0
+
+        if useSharedVertices:
+            ## Real* pVertices (x, y, z order x numVertices)
+            elem = pMesh.sharedVertexData.vertexDeclaration.findElementBySemantic(og.VES_POSITION)
+
+            if not elem:
+                ogre.Except(Exception.ERR_ITEM_NOT_FOUND, "Can't find position elements in the "
+                    "mesh to be written!", "MeshSerializerImpl.writeGeometry")
+
+            vbuf = pMesh.sharedVertexData.vertexBufferBinding.getBuffer(elem.getSource())
+
+            ## need space for the 3 verticies
+            storageclass = ctypes.c_float * 3
+            test=storageclass(0.0,  0.0,  0.0)
+
+            for j in range ( pMesh.sharedVertexData.vertexCount ):
+                vbuf.readData(j * vbuf.getVertexSize(), 3 * ctype.sizeof(ctype.c_float), ctype.addressof(test))
+                self.mVertexList.append( og.Vector3(test[0], test[1], test[2]) )
+                vertListCount+=1
+
+        for i in range ( pMesh.getNumSubMeshes() ):
+            pSubMesh = pMesh.getSubMesh(i)
+            if not pSubMesh.useSharedVertices:
+                ## Real* pVertices (x, y, z order x numVertices)
+                elem = pSubMesh.vertexData.vertexDeclaration.findElementBySemantic(og.VES_POSITION)
+
+                if not elem:
+                    og.Except(Exception.ERR_ITEM_NOT_FOUND, "Can't find position elements in the "
+                        "mesh to be written!", "MeshSerializerImpl.writeGeometry")
+
+                vbuf = pSubMesh.vertexData.vertexBufferBinding.getBuffer(elem.getSource())
+
+                ## need space for the verticies
+                storageclass = ctypes.c_float * (pSubMesh.vertexData.vertexCount * 6)
+                test=storageclass(0.0)
+
+                vbuf.readData(0, pSubMesh.vertexData.vertexCount * 6 * ctypes.sizeof(ctypes.c_float), ctypes.addressof(test))
+
+                for j in range ( 0,  pSubMesh.vertexData.vertexCount * 6,  6):
+                    #print j
+                    p = og.Vector3(test[j], test[j+1], test[j+2])
+                    p /= scale
+                    p += pos
+                    p = orient * p
+                    self.mVertexList.append( p )
+                    vertListCount += 1
+
+            ibuf = pSubMesh.indexData.indexBuffer
+            ## need space for the verticies
+            storageclass = ctypes.c_ushort * pSubMesh.indexData.indexCount
+            test2=storageclass()
+
+
+            ibuf.readData(0, ibuf.getSizeInBytes(), ctypes.addressof(test2))
+            for j in range ( pSubMesh.indexData.indexCount ):
+                self.mIndexList.append (test2[j])   # unsigned short
+                indexCount += 1
+
+            ih = 0
+            for blah in self.mVertexList:
+                #print str(ih) + ": "  +  str(blah)
+                ih += 1
+
+#            for blah in self.mIndexList:
+#                print blah
+
+
+    # used when a new selection is made, meaning when not iterationg through the selected objects
+    def rayCastToPolygonLevel(self,  ray):
+        self.lastRay = ray
+
+        for so in self.selectionList:
+            if so.isPivot:
+                return so
+
+        if len(self.selectionList) >= 1:
+            for so in self.selectionList:
+                if self.rayCastToPolygonLevelOnSingleMesh(ray,  so.entity):
+                    return so
+
+
+    def rayCastToPolygonLevelOnSingleMesh(self,  ray,  entity):
+        return True
+        self.getMeshInformation(entity)
+        name = entity.getName()
+        print "dbg: " + name
+
+        temp = []
+        for vec in self.mVertexList:
+            temp.append(vec.x)
+            temp.append(vec.y)
+            temp.append(vec.z)
+
+        globalPosition = entity.getParentNode().getWorldPosition()
+        globalOrientation = entity.getParentNode().getWorldOrientation()
+
+
+        i = 0
+        while i <= (len(self.mIndexList) - 3):
+            verta = globalPosition + self.mVertexList[self.mIndexList[i]]
+            vertb = globalPosition + self.mVertexList[self.mIndexList[i+1]]
+            vertc = globalPosition + self.mVertexList[self.mIndexList[i+2]]
+
+            verta = globalOrientation * verta
+            vertb = globalOrientation * vertb
+            vertc = globalOrientation * vertc
+            normal = og.Math.calculateBasicFaceNormal(verta, vertb, vertc)
+
+            result = og.Math.intersects(ray, verta, vertb, vertc, True, True)
+            #result = og.Math.intersects(ray, globalPosition + self.mVertexList[self.mIndexList[i]], globalPosition + self.mVertexList[self.mIndexList[i+1]],
+            #                                                                                                                                              globalPosition + self.mVertexList[self.mIndexList[i+2]], normal,  True, True)
+
+            if result.first:
+                print "dbg: Treffer!!!!!!!!!"
+                return True
+
+            i += 3
+
+        return False
+
+    def rayCastToPolygonLevelOnCurrentSelection(self):
+        if len(self.selectionList) >= 1:
+            self.getMeshInformation(self.selectionList[self.currentSelected].entity)
+
+            i = 0
+            while i <= (len(self.mIndexList) - 3):
+                globalPosition = self.selectionList[self.currentSelected].entity.getParentNode().getPosition()
+                result = og.Math.intersects(self.lastRay, globalPosition + self.mVertexList[self.mIndexList[i]], globalPosition + self.mVertexList[self.mIndexList[i+1]],
+                                                                                                                                                          globalPosition + self.mVertexList[self.mIndexList[i+2]], True, True)
+
+                if result.first:
+                   return True
+
+                i += 3
+            return False

Modified: rl/trunk/editors/Lockenwickler/src/PreferencesDialog.py
===================================================================
--- rl/trunk/editors/Lockenwickler/src/PreferencesDialog.py	2008-10-19 16:35:21 UTC (rev 4563)
+++ rl/trunk/editors/Lockenwickler/src/PreferencesDialog.py	2008-10-26 09:35:34 UTC (rev 4564)
@@ -1,106 +1,106 @@
-#################################################
- # Copyright (C) 2008  Stefan Stammberger
- #
- # This library is free software; you can redistribute it and/or
- # modify it under the terms of the GNU Lesser General Public
- # License as published by the Free Software Foundation; either
- # version 2.1 of the License, or (at your option) any later version.
- #
- # This library is distributed in the hope that it will be useful,
- # but WITHOUT ANY WARRANTY; without even the implied warranty of
- # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
- # Lesser General Public License for more details.
- #
- # You should have received a copy of the GNU Lesser General Public
- # License along with this library; if not, write to the Free Software
- # Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
- #################################################
-
-
-import sys
-import platform
-import string
-from ui_pref_dialog import *
-
-class PreferencesDialog(QtGui.QDialog):
-    def __init__(self, loadModuleCallback, parent=None):
-        QtGui.QDialog.__init__(self, parent)
-
-        self.loadModuleCallback = loadModuleCallback
-
-        self.prefDialog = Ui_PreferencesDialog()
-        self.prefDialog.setupUi(self)
-
-        QtCore.QObject.connect(self.prefDialog.modulConfigSelector, QtCore.SIGNAL("clicked()"),
-                               self.openModulConfigSelector)
-
-        QtCore.QObject.connect(self.prefDialog.loadModuleBtn, QtCore.SIGNAL("clicked()"),
-                               self.onLoadSelectedModule)
-
-        QtCore.QObject.connect(self.prefDialog.listWidget, QtCore.SIGNAL("itemDoubleClicked(QListWidgetItem *)"),
-                               self.onLoadSelectedModule)
-
-        if platform.system() == "Windows" or platform.system() == "MAC":
-            pass
-            # TODO: delete this when ready
-#            self.prefDialog.lineEdit.setText("C:\Users\Stefan\Desktop\Lockenwickler\modules\modules.cfg")
-#            self.moduleCfgPath = "C:\Users\Stefan\Desktop\Lockenwickler\modules\modules.cfg"
-#            self.moduleCfgIsSelected = True
-#            self.modulePath = self.moduleCfgPath.replace("modules.cfg", "")
-#            self.readInModules()
-            # end delete
-        else:
-            # TODO: delete this when ready
-            self.prefDialog.lineEdit.setText("/home/stefan/blubb/rl_modules/modules/modules.cfg")
-            self.moduleCfgPath = "/home/stefan/blubb/rl_modules/modules/modules.cfg"
-            self.moduleCfgIsSelected = True
-            self.modulePath = self.moduleCfgPath.replace("modules.cfg", "")
-            self.readInModules()
-            # end delete
-
-        self.moduleCfgIsSelected = False
-
-        self.setModal(True)
-
-    def openModulConfigSelector(self):
-        dialog = QtGui.QFileDialog(self)
-        self.moduleCfgPath = str(dialog.getOpenFileName(self, "Select modules.cfg", "/home/stefan/blubb/rl_modules/modules/", "modules.cfg (*.cfg)"))
-        self.modulePath = self.moduleCfgPath.replace("modules.cfg", "")
-
-        from os.path import isfile
-
-        if isfile(self.moduleCfgPath):
-            self.prefDialog.lineEdit.setText(self.moduleCfgPath)
-            self.moduleCfgIsSelected = True
-            self.readInModules()
-
-    def readInModules(self):
-        if self.moduleCfgIsSelected:
-            import codecs
-            f = codecs.open(self.moduleCfgPath, 'r', 'utf-8')
-
-            for line in f:
-                if line.startswith('#'):
-                    continue
-
-                if line.startswith('module='):
-                    splines = line.split('=')
-                    str = splines[1].rstrip().rstrip()
-                    if str != "common":
-                        self.prefDialog.listWidget.addItem(str)
-
-    def onLoadSelectedModule(self):
-        item = self.prefDialog.listWidget.currentItem()
-
-        if item == None:
-            mbox = QtGui.QMessageBox(self)
-            mbox.setModal(True)
-            mbox.setText("Please select a module.")
-            mbox.show()
-        else:
-            tempo = str(item.text())
-            self.loadModuleCallback(self.modulePath, tempo)
-            self.hide()
-
-
-
+#################################################
+ # Copyright (C) 2008  Stefan Stammberger
+ #
+ # This library is free software; you can redistribute it and/or
+ # modify it under the terms of the GNU Lesser General Public
+ # License as published by the Free Software Foundation; either
+ # version 2.1 of the License, or (at your option) any later version.
+ #
+ # This library is distributed in the hope that it will be useful,
+ # but WITHOUT ANY WARRANTY; without even the implied warranty of
+ # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ # Lesser General Public License for more details.
+ #
+ # You should have received a copy of the GNU Lesser General Public
+ # License along with this library; if not, write to the Free Software
+ # Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ #################################################
+
+
+import sys
+import platform
+import string
+from ui_pref_dialog import *
+
+class PreferencesDialog(QtGui.QDialog):
+    def __init__(self, loadModuleCallback, parent=None):
+        QtGui.QDialog.__init__(self, parent)
+
+        self.loadModuleCallback = loadModuleCallback
+
+        self.prefDialog = Ui_PreferencesDialog()
+        self.prefDialog.setupUi(self)
+
+        QtCore.QObject.connect(self.prefDialog.modulConfigSelector, QtCore.SIGNAL("clicked()"),
+                               self.openModulConfigSelector)
+
+        QtCore.QObject.connect(self.prefDialog.loadModuleBtn, QtCore.SIGNAL("clicked()"),
+                               self.onLoadSelectedModule)
+
+        QtCore.QObject.connect(self.prefDialog.listWidget, QtCore.SIGNAL("itemDoubleClicked(QListWidgetItem *)"),
+                               self.onLoadSelectedModule)
+
+        if platform.system() == "Windows" or platform.system() == "MAC":
+            pass
+            # TODO: delete this when ready
+#            self.prefDialog.lineEdit.setText("C:\Users\Stefan\Desktop\Lockenwickler\modules\modules.cfg")
+#            self.moduleCfgPath = "C:\Users\Stefan\Desktop\Lockenwickler\modules\modules.cfg"
+#            self.moduleCfgIsSelected = True
+#            self.modulePath = self.moduleCfgPath.replace("modules.cfg", "")
+#            self.readInModules()
+            # end delete
+        else:
+            # TODO: delete this when ready
+            self.prefDialog.lineEdit.setText("/home/stefan/blubb/rl_modules/modules/modules.cfg")
+            self.moduleCfgPath = "/home/stefan/blubb/rl_modules/modules/modules.cfg"
+            self.moduleCfgIsSelected = True
+            self.modulePath = self.moduleCfgPath.replace("modules.cfg", "")
+            self.readInModules()
+            # end delete
+
+        self.moduleCfgIsSelected = False
+
+        self.setModal(True)
+
+    def openModulConfigSelector(self):
+        dialog = QtGui.QFileDialog(self)
+        self.moduleCfgPath = str(dialog.getOpenFileName(self, "Select modules.cfg", "/home/stefan/blubb/rl_modules/modules/", "modules.cfg (*.cfg)"))
+        self.modulePath = self.moduleCfgPath.replace("modules.cfg", "")
+
+        from os.path import isfile
+
+        if isfile(self.moduleCfgPath):
+            self.prefDialog.lineEdit.setText(self.moduleCfgPath)
+            self.moduleCfgIsSelected = True
+            self.readInModules()
+
+    def readInModules(self):
+        if self.moduleCfgIsSelected:
+            import codecs
+            f = codecs.open(self.moduleCfgPath, 'r', 'utf-8')
+
+            for line in f:
+                if line.startswith('#'):
+                    continue
+
+                if line.startswith('module='):
+                    splines = line.split('=')
+                    str = splines[1].rstrip().rstrip()
+                    if str != "common":
+                        self.prefDialog.listWidget.addItem(str)
+
+    def onLoadSelectedModule(self):
+        item = self.prefDialog.listWidget.currentItem()
+
+        if item == None:
+            mbox = QtGui.QMessageBox(self)
+            mbox.setModal(True)
+            mbox.setText("Please select a module.")
+            mbox.show()
+        else:
+            tempo = str(item.text())
+            self.loadModuleCallback(self.modulePath, tempo)
+            self.hide()
+
+
+

Added: rl/trunk/editors/Lockenwickler/src/media/icons/agt_games.png
===================================================================
(Binary files differ)


Property changes on: rl/trunk/editors/Lockenwickler/src/media/icons/agt_games.png
___________________________________________________________________
Name: svn:executable
   + *
Name: svn:mime-type
   + application/octet-stream

Added: rl/trunk/editors/Lockenwickler/src/media/icons/agt_multimedia.png
===================================================================
(Binary files differ)


Property changes on: rl/trunk/editors/Lockenwickler/src/media/icons/agt_multimedia.png
___________________________________________________________________
Name: svn:executable
   + *
Name: svn:mime-type
   + application/octet-stream

Added: rl/trunk/editors/Lockenwickler/src/media/icons/lockenwickler_provisorium.png
===================================================================
(Binary files differ)


Property changes on: rl/trunk/editors/Lockenwickler/src/media/icons/lockenwickler_provisorium.png
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: rl/trunk/editors/Lockenwickler/src/media/icons/lockenwickler_provisorium_small.png
===================================================================
(Binary files differ)


Property changes on: rl/trunk/editors/Lockenwickler/src/media/icons/lockenwickler_provisorium_small.png
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: rl/trunk/editors/Lockenwickler/src/media/icons/multirow.png
===================================================================
(Binary files differ)


Property changes on: rl/trunk/editors/Lockenwickler/src/media/icons/multirow.png
___________________________________________________________________
Name: svn:executable
   + *
Name: svn:mime-type
   + application/octet-stream



From fusion2 at mail.berlios.de  Sun Oct 26 12:28:58 2008
From: fusion2 at mail.berlios.de (fusion2 at mail.berlios.de)
Date: Sun, 26 Oct 2008 12:28:58 +0100
Subject: [Dsa-hl-svn] r4565 - rl/trunk/editors/Lockenwickler/src
Message-ID: <200810261128.m9QBSwRj024800@sheep.berlios.de>

Author: fusion2
Date: 2008-10-26 12:28:55 +0100 (Sun, 26 Oct 2008)
New Revision: 4565

Modified:
   rl/trunk/editors/Lockenwickler/src/GameObjectClass.py
   rl/trunk/editors/Lockenwickler/src/GameObjectClassView.py
Log:
- property type map is handled better now

Modified: rl/trunk/editors/Lockenwickler/src/GameObjectClass.py
===================================================================
--- rl/trunk/editors/Lockenwickler/src/GameObjectClass.py	2008-10-26 09:35:34 UTC (rev 4564)
+++ rl/trunk/editors/Lockenwickler/src/GameObjectClass.py	2008-10-26 11:28:55 UTC (rev 4565)
@@ -66,7 +66,14 @@
     def getType(self):
         return "INTTRIPPLE"
 
+class GOCMapProperty():
+    def __init__(self, name):
+        self.name = name
+        self.childProperties = []
 
+    def getType(self):
+        return "MAP"
+
 class GameObjectClass():
     def __init__(self,  parentElement):
         self.classid = parentElement.get("classid")
@@ -74,34 +81,53 @@
 
         self.properties = []
 
-        for property in parentElement.getiterator("property"):
+        for property in parentElement:#.getiterator("property"):
             if property.get("type") == "ARRAY":
                 pass
-            elif property.get("type") == "STRING":
-                name = property.get("name")
-                data = property.get("data")
-                self.properties.append(GOCStringProperty(name, data))
-            elif property.get("type") == "REAL":
-                name = property.get("name")
-                data = property.get("data")
-                self.properties.append(GOCRealProperty(name, data))
-            elif property.get("type") == "BOOL":
-                name = property.get("name")
-                data = property.get("data")
-                self.properties.append(GOCBoolProperty(name, data))
             elif property.get("type") == "MAP":
-                pass
-            elif property.get("type") == "INT":
-                name = property.get("name")
-                data = property.get("data")
-                self.properties.append(GOCIntProperty(name, data))
-            elif property.get("type") == "INTPAIR":
-                name = property.get("name")
-                data = property.get("data")
-                self.properties.append(GOCIntPairProperty(name, data))
-            elif property.get("type") == "INTTRIPLE":
-                name = property.get("name")
-                data = property.get("data")
-                self.properties.append(GOCIntTripleProperty(name, data))
+                self.properties.append(self.createPropertyMap(property))
             else:
-                print property.get("type")
+                self.properties.append(self.createProperty(property))
+
+    def createPropertyMap(self, property):
+        propMap = GOCMapProperty(property.get("name"))
+        for subProperty in property:
+            if subProperty.get("type") == "MAP":
+                propMap.childProperties.append(self.createPropertyMap(property))
+            else:
+                for subProperty in property:
+                    propMap.childProperties.append(self.createProperty(subProperty))
+
+        return propMap
+
+
+    def createProperty(self, property):
+        if property.get("type") == "STRING":
+            name = property.get("name")
+            data = property.get("data")
+            return GOCStringProperty(name, data)
+        elif property.get("type") == "REAL":
+            name = property.get("name")
+            data = property.get("data")
+            return GOCRealProperty(name, data)
+        elif property.get("type") == "BOOL":
+            name = property.get("name")
+            data = property.get("data")
+            return GOCBoolProperty(name, data)
+        elif property.get("type") == "INT":
+            name = property.get("name")
+            data = property.get("data")
+            return GOCIntProperty(name, data)
+        elif property.get("type") == "INTPAIR":
+            name = property.get("name")
+            data = property.get("data")
+            return GOCIntPairProperty(name, data)
+        elif property.get("type") == "INTTRIPLE":
+            name = property.get("name")
+            data = property.get("data")
+            return GOCIntTripleProperty(name, data)
+        else:
+            print property.get("type")
+
+
+

Modified: rl/trunk/editors/Lockenwickler/src/GameObjectClassView.py
===================================================================
--- rl/trunk/editors/Lockenwickler/src/GameObjectClassView.py	2008-10-26 09:35:34 UTC (rev 4564)
+++ rl/trunk/editors/Lockenwickler/src/GameObjectClassView.py	2008-10-26 11:28:55 UTC (rev 4565)
@@ -75,6 +75,12 @@
                     item1.setIcon(0, QIcon("media/icons/agt_multimedia.png"))
                     item1.setText(0, str(prop.name))
                     item1.setText(1, prop.getType())
-                    item1.setText(2, unicode(prop.data))
+                    if prop.getType() is "MAP":
+                        pass
+                    elif prop.getType() is "ARRAY":
+                        pass
+                    else:
+                        item1.setText(2, unicode(prop.data))
+
                     changeColor = not changeColor
 



From timm at mail.berlios.de  Sun Oct 26 21:39:10 2008
From: timm at mail.berlios.de (timm at mail.berlios.de)
Date: Sun, 26 Oct 2008 21:39:10 +0100
Subject: [Dsa-hl-svn] r4566 - in rl/branches/persistence: common/include
	core/include core/src script/include
Message-ID: <200810262039.m9QKdAdu015389@sheep.berlios.de>

Author: timm
Date: 2008-10-26 21:38:58 +0100 (Sun, 26 Oct 2008)
New Revision: 4566

Modified:
   rl/branches/persistence/common/include/ScriptSerializer.h
   rl/branches/persistence/core/include/ContentLoader.h
   rl/branches/persistence/core/include/SaveAble.h
   rl/branches/persistence/core/include/SaveAbleSerializer.h
   rl/branches/persistence/core/include/SaveGameFile.h
   rl/branches/persistence/core/src/SaveAbleManager.cpp
   rl/branches/persistence/core/src/SaveGameFile.cpp
   rl/branches/persistence/script/include/MapLoader.h
Log:
working at different places

Modified: rl/branches/persistence/common/include/ScriptSerializer.h
===================================================================
--- rl/branches/persistence/common/include/ScriptSerializer.h	2008-10-26 11:28:55 UTC (rev 4565)
+++ rl/branches/persistence/common/include/ScriptSerializer.h	2008-10-26 20:38:58 UTC (rev 4566)
@@ -16,14 +16,14 @@
 
 #ifndef __ScriptSerializer_H__
 #define __ScriptSerializer_H__
-
-#include "CommonPrerequisites.h"
-
-namespace rl
-{
-	class ScriptSerializer : public Ogre::ScriptLoader
-	{
-	};
-}
-
+
+#include "CommonPrerequisites.h"
+
+namespace rl
+{
+	class ScriptSerializer : public Ogre::ScriptLoader
+	{
+	};
+}
+
 #endif
\ No newline at end of file

Modified: rl/branches/persistence/core/include/ContentLoader.h
===================================================================
--- rl/branches/persistence/core/include/ContentLoader.h	2008-10-26 11:28:55 UTC (rev 4565)
+++ rl/branches/persistence/core/include/ContentLoader.h	2008-10-26 20:38:58 UTC (rev 4566)
@@ -31,9 +31,9 @@
         virtual void loadContent() = 0;
         virtual void unloadContent() = 0;
 
-        const Property getProperty(const CeGuiString& key) const;
-        void setProperty(const CeGuiString& key, const Property& value);
-
+        const Property getProperty(const CeGuiString& key) const;
+        void setProperty(const CeGuiString& key, const Property& value);
+
         PropertyKeys getAllPropertyKeys() const;
 
         virtual const CeGuiString getClassName() const = 0;

Modified: rl/branches/persistence/core/include/SaveAble.h
===================================================================
--- rl/branches/persistence/core/include/SaveAble.h	2008-10-26 11:28:55 UTC (rev 4565)
+++ rl/branches/persistence/core/include/SaveAble.h	2008-10-26 20:38:58 UTC (rev 4566)
@@ -31,6 +31,8 @@
 	{
 	};
 
+	typedef std::pair<CeGuiString, SaveAblePtr>  SaveAbleReference;
+
 	class _RlCoreExport SaveAble : public PropertyHolder
 	{
 	public:
@@ -43,16 +45,15 @@
         virtual void setProperty(const CeGuiString& key, const Property& value);
         virtual PropertyKeys getAllPropertyKeys() const;
 		
-		SaveAblePtr getParent() const { return mParentSaveAble; };
+		SaveAblePtr getParent() const { return mParentSaveAble.second; };
 
 		CeGuiString getId() const;
 	protected:
-		SaveAblePtr mParentSaveAble;
+		SaveAbleReference mParentSaveAble;
+		std::map<CeGuiString, SaveAblePtr> mChildrenSaveAbles;
 		CeGuiString mId;
 		bool mIsSaveAble;
 	};	
-
-	typedef std::pair<int, SaveAblePtr>  SaveAbleReference;
 }
 
 

Modified: rl/branches/persistence/core/include/SaveAbleSerializer.h
===================================================================
--- rl/branches/persistence/core/include/SaveAbleSerializer.h	2008-10-26 11:28:55 UTC (rev 4565)
+++ rl/branches/persistence/core/include/SaveAbleSerializer.h	2008-10-26 20:38:58 UTC (rev 4566)
@@ -22,6 +22,9 @@
 #include "SaveGameFile.h"
 #include "ScriptSerializer.h"
 
+#include "SaveGameFileReader.h"
+#include "SaveGameFileWriter.h"
+
 namespace rl
 {
 	class _RlCoreExport SaveAbleSerializer : public ScriptSerializer
@@ -31,6 +34,8 @@
 		void readFromSaveGameFile();
 	protected:
 		std::map<CeGuiString, SaveGameFile*> mSaveGameFile;
+		SaveGameFileReader mReader;
+		SaveGameFileWriter mWriter;
 	};
 }
 

Modified: rl/branches/persistence/core/include/SaveGameFile.h
===================================================================
--- rl/branches/persistence/core/include/SaveGameFile.h	2008-10-26 11:28:55 UTC (rev 4565)
+++ rl/branches/persistence/core/include/SaveGameFile.h	2008-10-26 20:38:58 UTC (rev 4566)
@@ -25,11 +25,13 @@
 
 #include "Property.h"
 #include "Properties.h"
+#include "WriteableDataStream.h"
+#include "ScriptSerializer.h"
 
 
 namespace rl
 {
-    class _RlCoreExport SaveGameFile : public PropertyHolder, public Ogre::ScriptLoader
+    class _RlCoreExport SaveGameFile : public PropertyHolder, public ScriptSerializer
     {
     public:
         static const Ogre::String PROPERTY_MODULEID;
@@ -40,12 +42,13 @@
         SaveGameFile(const CeGuiString &name, int id = 0);
         ~SaveGameFile();
         CeGuiString buildFilename();
-        CeGuiString getName();
+        CeGuiString getName() const;
+		CeGuiString getModuleId() const;
         int getId();
         bool saveGameExists();
 
         //access to file
-        Ogre::DataStreamPtr &getDataStream();
+        WriteableDataStreamPtr &getDataStream();
         void closeDataStream();
         XERCES_CPP_NAMESPACE::XMLFormatTarget* getFormatTarget();
         void deleteFileFromStorage();
@@ -68,7 +71,7 @@
 
         //file access
         Ogre::StringVector mScriptPatterns;
-        Ogre::DataStreamPtr mStream;
+        WriteableDataStreamPtr mStream;
         int mSaveGameId;
     };
 }

Modified: rl/branches/persistence/core/src/SaveAbleManager.cpp
===================================================================
--- rl/branches/persistence/core/src/SaveAbleManager.cpp	2008-10-26 11:28:55 UTC (rev 4565)
+++ rl/branches/persistence/core/src/SaveAbleManager.cpp	2008-10-26 20:38:58 UTC (rev 4566)
@@ -18,4 +18,9 @@
 
 #include "SaveAbleManager.h"
 
-template<> rl::SaveAbleManager* Ogre::Singleton<rl::SaveAbleManager>::ms_Singleton = 0;
\ No newline at end of file
+template<> rl::SaveAbleManager* Ogre::Singleton<rl::SaveAbleManager>::ms_Singleton = 0;
+
+namespace rl
+{
+	
+}

Modified: rl/branches/persistence/core/src/SaveGameFile.cpp
===================================================================
--- rl/branches/persistence/core/src/SaveGameFile.cpp	2008-10-26 11:28:55 UTC (rev 4565)
+++ rl/branches/persistence/core/src/SaveGameFile.cpp	2008-10-26 20:38:58 UTC (rev 4566)
@@ -32,7 +32,7 @@
     const Ogre::String SaveGameFile::PROPERTY_MODULENAME = "modulename";
 
 
-    SaveGameFile::SaveGameFile(const CeGuiString &name, int id) : mStream((Ogre::DataStream*)NULL)
+    SaveGameFile::SaveGameFile(const CeGuiString &name, int id) : mStream((WriteableDataStream*)NULL)
     {
         setProperty(PROPERTY_NAME,name);
         mSaveGameId = id;
@@ -53,17 +53,22 @@
 #       endif        
     }
 
-    CeGuiString SaveGameFile::getName()
+    CeGuiString SaveGameFile::getName() const
     {
         return getProperty(PROPERTY_NAME);
     }
 
+	CeGuiString SaveGameFile::getModuleId() const
+	{
+		return mModuleID;
+	}
+
     int SaveGameFile::getId()
     {
         return mSaveGameId;
     }
 
-    Ogre::DataStreamPtr &SaveGameFile::getDataStream()
+    WriteableDataStreamPtr &SaveGameFile::getDataStream()
     {
         Ogre::ResourceGroupManager::getSingleton().createResourceGroup("SaveGame");
 
@@ -161,7 +166,7 @@
 
     void SaveGameFile::parseScript(Ogre::DataStreamPtr &stream, const Ogre::String &groupName)
     {
-        mStream = stream;
+		mStream.bind(static_cast<WriteableDataStream*>(stream.get()));
     }
 
     Ogre::Real SaveGameFile::getLoadingOrder() const

Modified: rl/branches/persistence/script/include/MapLoader.h
===================================================================
--- rl/branches/persistence/script/include/MapLoader.h	2008-10-26 11:28:55 UTC (rev 4565)
+++ rl/branches/persistence/script/include/MapLoader.h	2008-10-26 20:38:58 UTC (rev 4566)
@@ -33,7 +33,7 @@
     class AbstractMapNodeProcessor;
     class ProgressWindow;
 
-    class _RlScriptExport MapLoader : public ContentLoader,private XmlProcessor 
+    class _RlScriptExport MapLoader : public ContentLoader, protected XmlProcessor 
     {
     public:
         static const CeGuiString PROPERTY_ACTIVEMAPS;



From fusion2 at mail.berlios.de  Mon Oct 27 21:25:54 2008
From: fusion2 at mail.berlios.de (fusion2 at mail.berlios.de)
Date: Mon, 27 Oct 2008 21:25:54 +0100
Subject: [Dsa-hl-svn] r4567 - in rl/trunk/editors/Lockenwickler: . src ui
	files
Message-ID: <200810272025.m9RKPsj6000674@sheep.berlios.de>

Author: fusion2
Date: 2008-10-27 21:25:20 +0100 (Mon, 27 Oct 2008)
New Revision: 4567

Added:
   rl/trunk/editors/Lockenwickler/src/GOStringEditor.py
   rl/trunk/editors/Lockenwickler/src/Ui_GOPropertyEditorDialogSTRING.py
   rl/trunk/editors/Lockenwickler/ui files/GOPropertyEditorDialogINT.ui
   rl/trunk/editors/Lockenwickler/ui files/GOPropertyEditorDialogSTRING.ui
   rl/trunk/editors/Lockenwickler/ui files/PropertyEditorDialog.ui
Removed:
   rl/trunk/editors/Lockenwickler/ui files/FourPanelView.ui
   rl/trunk/editors/Lockenwickler/ui files/batch_convert_ui.py
   rl/trunk/editors/Lockenwickler/ui files/console_window.ui
   rl/trunk/editors/Lockenwickler/ui files/lockewickler.ui
   rl/trunk/editors/Lockenwickler/ui files/model_preview.ui
   rl/trunk/editors/Lockenwickler/ui files/object_property.ui
   rl/trunk/editors/Lockenwickler/ui files/preferences_dialog.ui
   rl/trunk/editors/Lockenwickler/ui files/ui_ConsoleWindow.py
   rl/trunk/editors/Lockenwickler/ui files/ui_FourPanelView.py
   rl/trunk/editors/Lockenwickler/ui files/ui_lw.py
   rl/trunk/editors/Lockenwickler/ui files/ui_model_prev.py
   rl/trunk/editors/Lockenwickler/ui files/ui_obj_prop.py
   rl/trunk/editors/Lockenwickler/ui files/ui_pref_dialog.py
Modified:
   rl/trunk/editors/Lockenwickler/Lockenwickler.e4p
   rl/trunk/editors/Lockenwickler/src/GameObjectClass.py
   rl/trunk/editors/Lockenwickler/src/GameObjectClassView.py
   rl/trunk/editors/Lockenwickler/src/Lockenwickler.py
   rl/trunk/editors/Lockenwickler/src/Plugins-linux.cfg
Log:
- editing string properties works


Modified: rl/trunk/editors/Lockenwickler/Lockenwickler.e4p
===================================================================
--- rl/trunk/editors/Lockenwickler/Lockenwickler.e4p	2008-10-26 20:38:58 UTC (rev 4566)
+++ rl/trunk/editors/Lockenwickler/Lockenwickler.e4p	2008-10-27 20:25:20 UTC (rev 4567)
@@ -1,7 +1,7 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <!DOCTYPE Project SYSTEM "Project-4.5.dtd">
 <!-- eric4 project file for project Lockenwickler -->
-<!-- Saved: 2008-10-23, 19:52:05 -->
+<!-- Saved: 2008-10-27, 21:11:54 -->
 <!-- Copyright (C) 2008 Stefan Stammberger, sstammberger at web.de -->
 <Project version="4.5">
   <ProgLanguage mixed="0">Python</ProgLanguage>
@@ -39,6 +39,15 @@
     <Source>src/setup.py</Source>
     <Source>src/GameObjectClassView.py</Source>
     <Source>src/MyRaySceneQueryListener.py</Source>
+    <Source>src/GOStringEditor.py</Source>
+    <Source>ui files/Ui_console_window.py</Source>
+    <Source>ui files/Ui_FourPanelView.py</Source>
+    <Source>ui files/Ui_lockewickler.py</Source>
+    <Source>ui files/Ui_model_preview.py</Source>
+    <Source>ui files/Ui_object_property.py</Source>
+    <Source>ui files/Ui_preferences_dialog.py</Source>
+    <Source>ui files/Ui_GOPropertyEditorDialogINT.py</Source>
+    <Source>ui files/Ui_GOPropertyEditorDialogSTRING.py</Source>
   </Sources>
   <Forms>
     <Form>ui files/console_window.ui</Form>
@@ -47,6 +56,8 @@
     <Form>ui files/model_preview.ui</Form>
     <Form>ui files/object_property.ui</Form>
     <Form>ui files/preferences_dialog.ui</Form>
+    <Form>ui files/GOPropertyEditorDialogINT.ui</Form>
+    <Form>ui files/GOPropertyEditorDialogSTRING.ui</Form>
   </Forms>
   <Translations>
   </Translations>

Added: rl/trunk/editors/Lockenwickler/src/GOStringEditor.py
===================================================================
--- rl/trunk/editors/Lockenwickler/src/GOStringEditor.py	2008-10-26 20:38:58 UTC (rev 4566)
+++ rl/trunk/editors/Lockenwickler/src/GOStringEditor.py	2008-10-27 20:25:20 UTC (rev 4567)
@@ -0,0 +1,37 @@
+# -*- coding: utf-8 -*-
+
+"""
+Module implementing GOStringEditor.
+"""
+
+from PyQt4.QtGui import QDialog
+from PyQt4.QtCore import pyqtSignature
+
+from Ui_GOPropertyEditorDialogSTRING import Ui_PropertyEditDialog
+
+class GOStringEditor(QDialog, Ui_PropertyEditDialog):
+    """
+    Class documentation goes here.
+    """
+    def __init__(self, parent = None):
+        """
+        Constructor
+        """
+        QDialog.__init__(self, parent)
+        self.setupUi(self)
+
+    @pyqtSignature("")
+    def on_buttonBox_accepted(self):
+        """
+        Slot documentation goes here.
+        """
+        # TODO: not implemented yet
+        #raise NotImplementedError
+
+    @pyqtSignature("")
+    def on_buttonBox_rejected(self):
+        """
+        Slot documentation goes here.
+        """
+        # TODO: not implemented yet
+        #raise NotImplementedError

Modified: rl/trunk/editors/Lockenwickler/src/GameObjectClass.py
===================================================================
--- rl/trunk/editors/Lockenwickler/src/GameObjectClass.py	2008-10-26 20:38:58 UTC (rev 4566)
+++ rl/trunk/editors/Lockenwickler/src/GameObjectClass.py	2008-10-27 20:25:20 UTC (rev 4567)
@@ -18,6 +18,11 @@
 
 from elementtree.ElementTree import *
 
+from PyQt4.QtCore import *
+from PyQt4.QtGui import *
+
+from GOStringEditor import *
+
 class GOCStringProperty():
     def __init__(self, name, data):
         self.name = name
@@ -26,6 +31,17 @@
     def getType(self):
         return "STRING"
 
+    def openEditor(self, row, parent = None):
+        dlg = GOStringEditor(parent)
+        dlg.nameEdit.setText(self.name)
+        dlg.dataEdit.setText(self.data)
+        result = dlg.exec_()
+        if result:
+            self.name = dlg.nameEdit.text()
+            self.data = dlg.dataEdit.toPlainText()
+
+        return result
+
 class GOCRealProperty():
     def __init__(self, name, data):
         self.name = name
@@ -95,8 +111,8 @@
             if subProperty.get("type") == "MAP":
                 propMap.childProperties.append(self.createPropertyMap(property))
             else:
-                for subProperty in property:
-                    propMap.childProperties.append(self.createProperty(subProperty))
+                for subProperty1 in property:
+                    propMap.childProperties.append(self.createProperty(subProperty1))
 
         return propMap
 

Modified: rl/trunk/editors/Lockenwickler/src/GameObjectClassView.py
===================================================================
--- rl/trunk/editors/Lockenwickler/src/GameObjectClassView.py	2008-10-26 20:38:58 UTC (rev 4566)
+++ rl/trunk/editors/Lockenwickler/src/GameObjectClassView.py	2008-10-27 20:25:20 UTC (rev 4567)
@@ -28,8 +28,13 @@
         self.gocManager = gocManager
         self.gocManager.setGameObjectsViewUpdateCallback(self.updateObjectList)
 
+        self.gameObjectDict = {}
+
         self.setupUi()
 
+    def addItemToDict(self, property, item):
+        self.gameObjectDict[item] = property
+
     def setupUi(self):
         self.setObjectName("gameObjectClassView")
         self.resize(QSize(QRect(0,0,272,744).size()).expandedTo(self.minimumSizeHint()))
@@ -44,12 +49,40 @@
         self.gridlayout.addWidget(self.treeWidget , 1, 0, 1, 1)
 
         self.setWindowTitle(QApplication.translate("objectPreviewDialog", "Dialog", None, QApplication.UnicodeUTF8))
-
+        self.connect(self.treeWidget, SIGNAL("itemDoubleClicked (QTreeWidgetItem *,int)"), self.onDoubleClick)
         QMetaObject.connectSlotsByName(self)
 
+    def onDoubleClick(self, item,  row):
+        if self.gameObjectDict[item].getType() == "MAP" or self.gameObjectDict[item].getType() == "ARRAY":
+            print "NOT YET :)"
+        else:
+            if self.gameObjectDict[item].openEditor(row, self):
+                item.setText(0, str(self.gameObjectDict[item].name))
+                item.setText(2, str(self.gameObjectDict[item].data))
+
+
+
+    def createPropertyMapItem(self, property, parentItem):
+        for subProperty in property.childProperties:
+            if subProperty is not None:
+                if subProperty.getType() == "MAP":
+                    item = QTreeWidgetItem(parentItem)
+                    self.addItemToDict(subProperty, item)
+                    item.setText(0, subProperty.name)
+                    item.setText(1, subProperty.getType())
+                    self.createPropertyMapItem(property, item)
+                else:
+                    item = QTreeWidgetItem(parentItem)
+                    self.addItemToDict(subProperty, item)
+                    item.setText(0, subProperty.name)
+                    item.setText(1, subProperty.getType())
+                    if not subProperty.getType() == "ARRAY":
+                        item.setText(2, subProperty.data)
+
+
     def updateObjectList(self,  objectsDict):
-        changeColor = True
         for key in objectsDict:
+            changeColor = True
             file = objectsDict[key]
             fileItem = QTreeWidgetItem(self.treeWidget)
             fileItem.setText(0, str(key))
@@ -57,6 +90,7 @@
 
             for go in file:
                 goItem = QTreeWidgetItem(fileItem)
+                self.addItemToDict(go, goItem)
                 goItem.setIcon(0, QIcon("media/icons/agt_games.png"))
                 if changeColor:
                     goItem.setBackgroundColor(0, QColor("lightGray"))
@@ -66,8 +100,10 @@
                 goItem.setText(1, str(go.baseclass))
                 changeColor = not changeColor
 
+                changeColor2 = False
                 for prop in go.properties:
-                    item1 = QTreeWidgetItem(goItem)
+                    item1 = QTreeWidgetItem(goItem) #the property item, needs to be created regardless the type
+                    self.addItemToDict(prop, item1)
                     if changeColor:
                         item1.setBackgroundColor(0, QColor("lightGray"))
                         item1.setBackgroundColor(1, QColor("lightGray"))
@@ -76,11 +112,11 @@
                     item1.setText(0, str(prop.name))
                     item1.setText(1, prop.getType())
                     if prop.getType() is "MAP":
-                        pass
+                        self.createPropertyMapItem(prop, item1)
                     elif prop.getType() is "ARRAY":
                         pass
                     else:
                         item1.setText(2, unicode(prop.data))
 
-                    changeColor = not changeColor
+                    changeColor2 = not changeColor
 

Modified: rl/trunk/editors/Lockenwickler/src/Lockenwickler.py
===================================================================
--- rl/trunk/editors/Lockenwickler/src/Lockenwickler.py	2008-10-26 20:38:58 UTC (rev 4566)
+++ rl/trunk/editors/Lockenwickler/src/Lockenwickler.py	2008-10-27 20:25:20 UTC (rev 4567)
@@ -21,8 +21,8 @@
 import sys
 import platform
 
-sys.path.insert(0,'..')
-import PythonOgreConfig
+#sys.path.insert(0,'..')
+#import PythonOgreConfig
 
 from random import randint
 from os.path import isfile

Modified: rl/trunk/editors/Lockenwickler/src/Plugins-linux.cfg
===================================================================
--- rl/trunk/editors/Lockenwickler/src/Plugins-linux.cfg	2008-10-26 20:38:58 UTC (rev 4566)
+++ rl/trunk/editors/Lockenwickler/src/Plugins-linux.cfg	2008-10-27 20:25:20 UTC (rev 4567)
@@ -1,7 +1,8 @@
 # Defines plugins to load
 
 # Define plugin folder
-PluginFolder=/home/stefan/development/root/usr/lib/OGRE/
+#PluginFolder=/home/stefan/development/root/usr/lib/OGRE/
+PluginFolder=/usr/lib/OGRE
 
 # default plugins installed with the libogre14 package
 Plugin=RenderSystem_GL.so

Added: rl/trunk/editors/Lockenwickler/src/Ui_GOPropertyEditorDialogSTRING.py
===================================================================
--- rl/trunk/editors/Lockenwickler/src/Ui_GOPropertyEditorDialogSTRING.py	2008-10-26 20:38:58 UTC (rev 4566)
+++ rl/trunk/editors/Lockenwickler/src/Ui_GOPropertyEditorDialogSTRING.py	2008-10-27 20:25:20 UTC (rev 4567)
@@ -0,0 +1,84 @@
+# -*- coding: utf-8 -*-
+
+# Form implementation generated from reading ui file '/home/stefan/Lockenwickler/ui files/GOPropertyEditorDialogSTRING.ui'
+#
+# Created: Mon Oct 27 20:13:11 2008
+#      by: PyQt4 UI code generator 4.4.3
+#
+# WARNING! All changes made in this file will be lost!
+
+from PyQt4 import QtCore, QtGui
+
+class Ui_PropertyEditDialog(object):
+    def setupUi(self, PropertyEditDialog):
+        PropertyEditDialog.setObjectName("PropertyEditDialog")
+        PropertyEditDialog.setWindowModality(QtCore.Qt.ApplicationModal)
+        PropertyEditDialog.resize(419, 124)
+        self.gridLayout = QtGui.QGridLayout(PropertyEditDialog)
+        self.gridLayout.setObjectName("gridLayout")
+        self.label = QtGui.QLabel(PropertyEditDialog)
+        self.label.setObjectName("label")
+        self.gridLayout.addWidget(self.label, 0, 0, 1, 1)
+        self.label_2 = QtGui.QLabel(PropertyEditDialog)
+        self.label_2.setObjectName("label_2")
+        self.gridLayout.addWidget(self.label_2, 0, 1, 1, 1)
+        self.label_3 = QtGui.QLabel(PropertyEditDialog)
+        self.label_3.setObjectName("label_3")
+        self.gridLayout.addWidget(self.label_3, 0, 2, 1, 1)
+        self.nameEdit = QtGui.QLineEdit(PropertyEditDialog)
+        self.nameEdit.setMinimumSize(QtCore.QSize(120, 0))
+        self.nameEdit.setMaximumSize(QtCore.QSize(250, 16777215))
+        self.nameEdit.setObjectName("nameEdit")
+        self.gridLayout.addWidget(self.nameEdit, 1, 0, 1, 1)
+        self.comboBox = QtGui.QComboBox(PropertyEditDialog)
+        self.comboBox.setObjectName("comboBox")
+        self.comboBox.addItem(QtCore.QString())
+        self.comboBox.addItem(QtCore.QString())
+        self.comboBox.addItem(QtCore.QString())
+        self.comboBox.addItem(QtCore.QString())
+        self.comboBox.addItem(QtCore.QString())
+        self.comboBox.addItem(QtCore.QString())
+        self.comboBox.addItem(QtCore.QString())
+        self.comboBox.addItem(QtCore.QString())
+        self.gridLayout.addWidget(self.comboBox, 1, 1, 1, 1)
+        self.dataEdit = QtGui.QTextEdit(PropertyEditDialog)
+        self.dataEdit.setObjectName("dataEdit")
+        self.gridLayout.addWidget(self.dataEdit, 1, 2, 1, 1)
+        self.buttonBox = QtGui.QDialogButtonBox(PropertyEditDialog)
+        self.buttonBox.setOrientation(QtCore.Qt.Horizontal)
+        self.buttonBox.setStandardButtons(QtGui.QDialogButtonBox.Cancel|QtGui.QDialogButtonBox.Ok)
+        self.buttonBox.setObjectName("buttonBox")
+        self.gridLayout.addWidget(self.buttonBox, 2, 0, 1, 3)
+        self.label.setBuddy(self.nameEdit)
+        self.label_2.setBuddy(self.comboBox)
+        self.label_3.setBuddy(self.dataEdit)
+
+        self.retranslateUi(PropertyEditDialog)
+        QtCore.QObject.connect(self.buttonBox, QtCore.SIGNAL("accepted()"), PropertyEditDialog.accept)
+        QtCore.QObject.connect(self.buttonBox, QtCore.SIGNAL("rejected()"), PropertyEditDialog.reject)
+        QtCore.QMetaObject.connectSlotsByName(PropertyEditDialog)
+
+    def retranslateUi(self, PropertyEditDialog):
+        PropertyEditDialog.setWindowTitle(QtGui.QApplication.translate("PropertyEditDialog", "Dialog", None, QtGui.QApplication.UnicodeUTF8))
+        self.label.setText(QtGui.QApplication.translate("PropertyEditDialog", "&Name", None, QtGui.QApplication.UnicodeUTF8))
+        self.label_2.setText(QtGui.QApplication.translate("PropertyEditDialog", "&Type", None, QtGui.QApplication.UnicodeUTF8))
+        self.label_3.setText(QtGui.QApplication.translate("PropertyEditDialog", "&Data", None, QtGui.QApplication.UnicodeUTF8))
+        self.comboBox.setItemText(0, QtGui.QApplication.translate("PropertyEditDialog", "STRING", None, QtGui.QApplication.UnicodeUTF8))
+        self.comboBox.setItemText(1, QtGui.QApplication.translate("PropertyEditDialog", "BOOL", None, QtGui.QApplication.UnicodeUTF8))
+        self.comboBox.setItemText(2, QtGui.QApplication.translate("PropertyEditDialog", "INT", None, QtGui.QApplication.UnicodeUTF8))
+        self.comboBox.setItemText(3, QtGui.QApplication.translate("PropertyEditDialog", "INTPAIR", None, QtGui.QApplication.UnicodeUTF8))
+        self.comboBox.setItemText(4, QtGui.QApplication.translate("PropertyEditDialog", "INTTRIPPLE", None, QtGui.QApplication.UnicodeUTF8))
+        self.comboBox.setItemText(5, QtGui.QApplication.translate("PropertyEditDialog", "REAL", None, QtGui.QApplication.UnicodeUTF8))
+        self.comboBox.setItemText(6, QtGui.QApplication.translate("PropertyEditDialog", "MAP", None, QtGui.QApplication.UnicodeUTF8))
+        self.comboBox.setItemText(7, QtGui.QApplication.translate("PropertyEditDialog", "ARRAY", None, QtGui.QApplication.UnicodeUTF8))
+
+
+if __name__ == "__main__":
+    import sys
+    app = QtGui.QApplication(sys.argv)
+    PropertyEditDialog = QtGui.QDialog()
+    ui = Ui_PropertyEditDialog()
+    ui.setupUi(PropertyEditDialog)
+    PropertyEditDialog.show()
+    sys.exit(app.exec_())
+

Deleted: rl/trunk/editors/Lockenwickler/ui files/FourPanelView.ui
===================================================================
--- rl/trunk/editors/Lockenwickler/ui files/FourPanelView.ui	2008-10-26 20:38:58 UTC (rev 4566)
+++ rl/trunk/editors/Lockenwickler/ui files/FourPanelView.ui	2008-10-27 20:25:20 UTC (rev 4567)
@@ -1,41 +0,0 @@
-<ui version="4.0" >
- <class>FourPaneView</class>
- <widget class="QWidget" name="FourPaneView" >
-  <property name="geometry" >
-   <rect>
-    <x>0</x>
-    <y>0</y>
-    <width>902</width>
-    <height>759</height>
-   </rect>
-  </property>
-  <property name="windowTitle" >
-   <string>Form</string>
-  </property>
-  <layout class="QGridLayout" >
-   <item row="0" column="0" >
-    <widget class="QSplitter" name="splitter_3" >
-     <property name="orientation" >
-      <enum>Qt::Horizontal</enum>
-     </property>
-     <widget class="QSplitter" name="splitter" >
-      <property name="orientation" >
-       <enum>Qt::Vertical</enum>
-      </property>
-      <widget class="QWidget" native="1" name="widget" />
-      <widget class="QWidget" native="1" name="widget_4" />
-     </widget>
-     <widget class="QSplitter" name="splitter_2" >
-      <property name="orientation" >
-       <enum>Qt::Vertical</enum>
-      </property>
-      <widget class="QWidget" native="1" name="widget_2" />
-      <widget class="QWidget" native="1" name="widget_3" />
-     </widget>
-    </widget>
-   </item>
-  </layout>
- </widget>
- <resources/>
- <connections/>
-</ui>

Added: rl/trunk/editors/Lockenwickler/ui files/GOPropertyEditorDialogINT.ui
===================================================================
--- rl/trunk/editors/Lockenwickler/ui files/GOPropertyEditorDialogINT.ui	2008-10-26 20:38:58 UTC (rev 4566)
+++ rl/trunk/editors/Lockenwickler/ui files/GOPropertyEditorDialogINT.ui	2008-10-27 20:25:20 UTC (rev 4567)
@@ -0,0 +1,172 @@
+<ui version="4.0" >
+ <class>PropertyEditDialog</class>
+ <widget class="QDialog" name="PropertyEditDialog" >
+  <property name="windowModality" >
+   <enum>Qt::ApplicationModal</enum>
+  </property>
+  <property name="geometry" >
+   <rect>
+    <x>0</x>
+    <y>0</y>
+    <width>464</width>
+    <height>93</height>
+   </rect>
+  </property>
+  <property name="windowTitle" >
+   <string>Dialog</string>
+  </property>
+  <layout class="QGridLayout" name="gridLayout" >
+   <item row="0" column="0" >
+    <widget class="QLabel" name="label" >
+     <property name="text" >
+      <string>&amp;Name</string>
+     </property>
+     <property name="buddy" >
+      <cstring>nameEdit</cstring>
+     </property>
+    </widget>
+   </item>
+   <item row="0" column="1" >
+    <widget class="QLabel" name="label_2" >
+     <property name="text" >
+      <string>&amp;Type</string>
+     </property>
+     <property name="buddy" >
+      <cstring>comboBox</cstring>
+     </property>
+    </widget>
+   </item>
+   <item row="0" column="2" >
+    <widget class="QLabel" name="label_3" >
+     <property name="text" >
+      <string>&amp;Data</string>
+     </property>
+     <property name="buddy" >
+      <cstring>dataEdit</cstring>
+     </property>
+    </widget>
+   </item>
+   <item row="1" column="0" >
+    <widget class="QLineEdit" name="nameEdit" >
+     <property name="minimumSize" >
+      <size>
+       <width>120</width>
+       <height>0</height>
+      </size>
+     </property>
+     <property name="maximumSize" >
+      <size>
+       <width>250</width>
+       <height>16777215</height>
+      </size>
+     </property>
+    </widget>
+   </item>
+   <item row="1" column="1" >
+    <widget class="QComboBox" name="comboBox" >
+     <item>
+      <property name="text" >
+       <string>INT</string>
+      </property>
+     </item>
+     <item>
+      <property name="text" >
+       <string>STRING</string>
+      </property>
+     </item>
+     <item>
+      <property name="text" >
+       <string>BOOL</string>
+      </property>
+     </item>
+     <item>
+      <property name="text" >
+       <string>INTPAIR</string>
+      </property>
+     </item>
+     <item>
+      <property name="text" >
+       <string>INTTRIPPLE</string>
+      </property>
+     </item>
+     <item>
+      <property name="text" >
+       <string>REAL</string>
+      </property>
+     </item>
+     <item>
+      <property name="text" >
+       <string>MAP</string>
+      </property>
+     </item>
+     <item>
+      <property name="text" >
+       <string>ARRAY</string>
+      </property>
+     </item>
+    </widget>
+   </item>
+   <item row="1" column="2" >
+    <widget class="QLineEdit" name="dataEdit" >
+     <property name="minimumSize" >
+      <size>
+       <width>120</width>
+       <height>0</height>
+      </size>
+     </property>
+     <property name="inputMask" >
+      <string>999999999999999999999999999999; </string>
+     </property>
+     <property name="text" >
+      <string/>
+     </property>
+    </widget>
+   </item>
+   <item row="2" column="0" colspan="3" >
+    <widget class="QDialogButtonBox" name="buttonBox" >
+     <property name="orientation" >
+      <enum>Qt::Horizontal</enum>
+     </property>
+     <property name="standardButtons" >
+      <set>QDialogButtonBox::Cancel|QDialogButtonBox::Ok</set>
+     </property>
+    </widget>
+   </item>
+  </layout>
+ </widget>
+ <resources/>
+ <connections>
+  <connection>
+   <sender>buttonBox</sender>
+   <signal>accepted()</signal>
+   <receiver>PropertyEditDialog</receiver>
+   <slot>accept()</slot>
+   <hints>
+    <hint type="sourcelabel" >
+     <x>328</x>
+     <y>64</y>
+    </hint>
+    <hint type="destinationlabel" >
+     <x>157</x>
+     <y>85</y>
+    </hint>
+   </hints>
+  </connection>
+  <connection>
+   <sender>buttonBox</sender>
+   <signal>rejected()</signal>
+   <receiver>PropertyEditDialog</receiver>
+   <slot>reject()</slot>
+   <hints>
+    <hint type="sourcelabel" >
+     <x>396</x>
+     <y>70</y>
+    </hint>
+    <hint type="destinationlabel" >
+     <x>286</x>
+     <y>85</y>
+    </hint>
+   </hints>
+  </connection>
+ </connections>
+</ui>

Added: rl/trunk/editors/Lockenwickler/ui files/GOPropertyEditorDialogSTRING.ui
===================================================================
--- rl/trunk/editors/Lockenwickler/ui files/GOPropertyEditorDialogSTRING.ui	2008-10-26 20:38:58 UTC (rev 4566)
+++ rl/trunk/editors/Lockenwickler/ui files/GOPropertyEditorDialogSTRING.ui	2008-10-27 20:25:20 UTC (rev 4567)
@@ -0,0 +1,159 @@
+<ui version="4.0" >
+ <class>PropertyEditDialog</class>
+ <widget class="QDialog" name="PropertyEditDialog" >
+  <property name="windowModality" >
+   <enum>Qt::ApplicationModal</enum>
+  </property>
+  <property name="geometry" >
+   <rect>
+    <x>0</x>
+    <y>0</y>
+    <width>419</width>
+    <height>124</height>
+   </rect>
+  </property>
+  <property name="windowTitle" >
+   <string>Dialog</string>
+  </property>
+  <layout class="QGridLayout" name="gridLayout" >
+   <item row="0" column="0" >
+    <widget class="QLabel" name="label" >
+     <property name="text" >
+      <string>&amp;Name</string>
+     </property>
+     <property name="buddy" >
+      <cstring>nameEdit</cstring>
+     </property>
+    </widget>
+   </item>
+   <item row="0" column="1" >
+    <widget class="QLabel" name="label_2" >
+     <property name="text" >
+      <string>&amp;Type</string>
+     </property>
+     <property name="buddy" >
+      <cstring>comboBox</cstring>
+     </property>
+    </widget>
+   </item>
+   <item row="0" column="2" >
+    <widget class="QLabel" name="label_3" >
+     <property name="text" >
+      <string>&amp;Data</string>
+     </property>
+     <property name="buddy" >
+      <cstring>dataEdit</cstring>
+     </property>
+    </widget>
+   </item>
+   <item row="1" column="0" >
+    <widget class="QLineEdit" name="nameEdit" >
+     <property name="minimumSize" >
+      <size>
+       <width>120</width>
+       <height>0</height>
+      </size>
+     </property>
+     <property name="maximumSize" >
+      <size>
+       <width>250</width>
+       <height>16777215</height>
+      </size>
+     </property>
+    </widget>
+   </item>
+   <item row="1" column="1" >
+    <widget class="QComboBox" name="comboBox" >
+     <item>
+      <property name="text" >
+       <string>STRING</string>
+      </property>
+     </item>
+     <item>
+      <property name="text" >
+       <string>BOOL</string>
+      </property>
+     </item>
+     <item>
+      <property name="text" >
+       <string>INT</string>
+      </property>
+     </item>
+     <item>
+      <property name="text" >
+       <string>INTPAIR</string>
+      </property>
+     </item>
+     <item>
+      <property name="text" >
+       <string>INTTRIPPLE</string>
+      </property>
+     </item>
+     <item>
+      <property name="text" >
+       <string>REAL</string>
+      </property>
+     </item>
+     <item>
+      <property name="text" >
+       <string>MAP</string>
+      </property>
+     </item>
+     <item>
+      <property name="text" >
+       <string>ARRAY</string>
+      </property>
+     </item>
+    </widget>
+   </item>
+   <item row="1" column="2" >
+    <widget class="QTextEdit" name="dataEdit" />
+   </item>
+   <item row="2" column="0" colspan="3" >
+    <widget class="QDialogButtonBox" name="buttonBox" >
+     <property name="orientation" >
+      <enum>Qt::Horizontal</enum>
+     </property>
+     <property name="standardButtons" >
+      <set>QDialogButtonBox::Cancel|QDialogButtonBox::Ok</set>
+     </property>
+    </widget>
+   </item>
+  </layout>
+ </widget>
+ <resources/>
+ <connections>
+  <connection>
+   <sender>buttonBox</sender>
+   <signal>accepted()</signal>
+   <receiver>PropertyEditDialog</receiver>
+   <slot>accept()</slot>
+   <hints>
+    <hint type="sourcelabel" >
+     <x>328</x>
+     <y>64</y>
+    </hint>
+    <hint type="destinationlabel" >
+     <x>157</x>
+     <y>85</y>
+    </hint>
+   </hints>
+  </connection>
+  <connection>
+   <sender>buttonBox</sender>
+   <signal>rejected()</signal>
+   <receiver>PropertyEditDialog</receiver>
+   <slot>reject()</slot>
+   <hints>
+    <hint type="sourcelabel" >
+     <x>396</x>
+     <y>70</y>
+    </hint>
+    <hint type="destinationlabel" >
+     <x>286</x>
+     <y>85</y>
+    </hint>
+   </hints>
+  </connection>
+ </connections>
+</ui>

Added: rl/trunk/editors/Lockenwickler/ui files/PropertyEditorDialog.ui
===================================================================
--- rl/trunk/editors/Lockenwickler/ui files/PropertyEditorDialog.ui	2008-10-26 20:38:58 UTC (rev 4566)
+++ rl/trunk/editors/Lockenwickler/ui files/PropertyEditorDialog.ui	2008-10-27 20:25:20 UTC (rev 4567)
@@ -0,0 +1,156 @@
+<ui version="4.0" >
+ <class>PropertyEditDialog</class>
+ <widget class="QDialog" name="PropertyEditDialog" >
+  <property name="windowModality" >
+   <enum>Qt::ApplicationModal</enum>
+  </property>
+  <property name="geometry" >
+   <rect>
+    <x>0</x>
+    <y>0</y>
+    <width>419</width>
+    <height>124</height>
+   </rect>
+  </property>
+  <property name="windowTitle" >
+   <string>Dialog</string>
+  </property>
+  <layout class="QGridLayout" name="gridLayout" >
+   <item row="0" column="0" >
+    <widget class="QLabel" name="label" >
+     <property name="text" >
+      <string>&amp;Name</string>
+     </property>
+     <property name="buddy" >
+      <cstring>lineEdit2</cstring>
+     </property>
+    </widget>
+   </item>
+   <item row="0" column="1" >
+    <widget class="QLabel" name="label_2" >
+     <property name="text" >
+      <string>&amp;Type</string>
+     </property>
+     <property name="buddy" >
+      <cstring>comboBox</cstring>
+     </property>
+    </widget>
+   </item>
+   <item row="0" column="2" >
+    <widget class="QLabel" name="label_3" >
+     <property name="text" >
+      <string>&amp;Data</string>
+     </property>
+    </widget>
+   </item>
+   <item row="1" column="0" >
+    <widget class="QLineEdit" name="lineEdit2" >
+     <property name="minimumSize" >
+      <size>
+       <width>120</width>
+       <height>0</height>
+      </size>
+     </property>
+     <property name="maximumSize" >
+      <size>
+       <width>250</width>
+       <height>16777215</height>
+      </size>
+     </property>
+    </widget>
+   </item>
+   <item row="1" column="1" >
+    <widget class="QComboBox" name="comboBox" >
+     <item>
+      <property name="text" >
+       <string>STRING</string>
+      </property>
+     </item>
+     <item>
+      <property name="text" >
+       <string>BOOL</string>
+      </property>
+     </item>
+     <item>
+      <property name="text" >
+       <string>INT</string>
+      </property>
+     </item>
+     <item>
+      <property name="text" >
+       <string>INTPAIR</string>
+      </property>
+     </item>
+     <item>
+      <property name="text" >
+       <string>INTTRIPPLE</string>
+      </property>
+     </item>
+     <item>
+      <property name="text" >
+       <string>REAL</string>
+      </property>
+     </item>
+     <item>
+      <property name="text" >
+       <string>MAP</string>
+      </property>
+     </item>
+     <item>
+      <property name="text" >
+       <string>ARRAY</string>
+      </property>
+     </item>
+    </widget>
+   </item>
+   <item row="1" column="2" >
+    <widget class="QTextEdit" name="textEdit" />
+   </item>
+   <item row="2" column="0" colspan="3" >
+    <widget class="QDialogButtonBox" name="buttonBox" >
+     <property name="orientation" >
+      <enum>Qt::Horizontal</enum>
+     </property>
+     <property name="standardButtons" >
+      <set>QDialogButtonBox::Cancel|QDialogButtonBox::Ok</set>
+     </property>
+    </widget>
+   </item>
+  </layout>
+ </widget>
+ <resources/>
+ <connections>
+  <connection>
+   <sender>buttonBox</sender>
+   <signal>accepted()</signal>
+   <receiver>PropertyEditDialog</receiver>
+   <slot>accept()</slot>
+   <hints>
+    <hint type="sourcelabel" >
+     <x>328</x>
+     <y>64</y>
+    </hint>
+    <hint type="destinationlabel" >
+     <x>157</x>
+     <y>85</y>
+    </hint>
+   </hints>
+  </connection>
+  <connection>
+   <sender>buttonBox</sender>
+   <signal>rejected()</signal>
+   <receiver>PropertyEditDialog</receiver>
+   <slot>reject()</slot>
+   <hints>
+    <hint type="sourcelabel" >
+     <x>396</x>
+     <y>70</y>
+    </hint>
+    <hint type="destinationlabel" >
+     <x>286</x>
+     <y>85</y>
+    </hint>
+   </hints>
+  </connection>
+ </connections>
+</ui>

Deleted: rl/trunk/editors/Lockenwickler/ui files/batch_convert_ui.py
===================================================================
--- rl/trunk/editors/Lockenwickler/ui files/batch_convert_ui.py	2008-10-26 20:38:58 UTC (rev 4566)
+++ rl/trunk/editors/Lockenwickler/ui files/batch_convert_ui.py	2008-10-27 20:25:20 UTC (rev 4567)
@@ -1,72 +0,0 @@
-import sys
-import os
-import platform
-
-copyCommand = "cp "
-cpDestination =  " ../src/"
-
-if platform.system() == "Windows":
-    copyCommand = "copy "
-    cpDestination = " ..\src\\"
-
-###########################################################################
-output = os.popen("pyuic4 lockewickler.ui > ui_lw.py")
-for line in output.readlines():
-    print line
-
-output = os.popen(copyCommand + "ui_lw.py" + cpDestination)
-for line in output.readlines():
-    print "pyuic4 lockewickler.ui > ui_lw.py " + line
-###########################################################################
-
-###########################################################################
-output = os.popen("pyuic4 preferences_dialog.ui > ui_pref_dialog.py")
-for line in output.readlines():
-    print line
-
-output = os.popen(copyCommand + "ui_pref_dialog.py" + cpDestination)
-for line in output.readlines():
-    print "pyuic4 preferences_dialog.ui > ui_pref_dialog.py " + line
-###########################################################################
-
-###########################################################################
-output = os.popen("pyuic4 object_property.ui > ui_obj_prop.py")
-for line in output.readlines():
-    print line
-
-output = os.popen(copyCommand + "ui_obj_prop.py" + cpDestination)
-for line in output.readlines():
-    print "pyuic4 object_property.ui > ui_obj_prop.py " + line
-###########################################################################
-
-###########################################################################
-output = os.popen("pyuic4 model_preview.ui > ui_model_prev.py")
-for line in output.readlines():
-    print line
-
-output = os.popen(copyCommand + "ui_model_prev.py" + cpDestination)
-for line in output.readlines():
-    print "pyuic4 model_preview.ui > ui_model_prev.py " + line
-###########################################################################
-
-###########################################################################
-output = os.popen("pyuic4 FourPanelView.ui > ui_FourPanelView.py")
-for line in output.readlines():
-        print line
-
-output = os.popen(copyCommand + "ui_FourPanelView.py" + cpDestination)
-for line in output.readlines():
-    print "pyuic4 FourPanelView.ui > ui_FourPanelView.py " + line
-###########################################################################
-
-###########################################################################
-output = os.popen("pyuic4 console_window.ui > ui_ConsoleWindow.py")
-for line in output.readlines():
-        print line
-
-output = os.popen(copyCommand + "ui_ConsoleWindow.py" + cpDestination)
-for line in output.readlines():
-    print "pyuic4 console_window.ui > ui_ConsoleWindow.py " + line
-###########################################################################
-
-print "Fertig!"

Deleted: rl/trunk/editors/Lockenwickler/ui files/console_window.ui
===================================================================
--- rl/trunk/editors/Lockenwickler/ui files/console_window.ui	2008-10-26 20:38:58 UTC (rev 4566)
+++ rl/trunk/editors/Lockenwickler/ui files/console_window.ui	2008-10-27 20:25:20 UTC (rev 4567)
@@ -1,23 +0,0 @@
-<ui version="4.0" >
- <class>ConsoleWindow</class>
- <widget class="QWidget" name="ConsoleWindow" >
-  <property name="geometry" >
-   <rect>
-    <x>0</x>
-    <y>0</y>
-    <width>884</width>
-    <height>225</height>
-   </rect>
-  </property>
-  <property name="windowTitle" >
-   <string>Form</string>
-  </property>
-  <layout class="QGridLayout" >
-   <item row="0" column="0" >
-    <widget class="QTextEdit" name="textEdit" />
-   </item>
-  </layout>
- </widget>
- <resources/>
- <connections/>
-</ui>

Deleted: rl/trunk/editors/Lockenwickler/ui files/lockewickler.ui
===================================================================
--- rl/trunk/editors/Lockenwickler/ui files/lockewickler.ui	2008-10-26 20:38:58 UTC (rev 4566)
+++ rl/trunk/editors/Lockenwickler/ui files/lockewickler.ui	2008-10-27 20:25:20 UTC (rev 4567)
@@ -1,108 +0,0 @@
-<ui version="4.0" >
- <author>Stefan Stammberger</author>
- <class>MainWindow</class>
- <widget class="QMainWindow" name="MainWindow" >
-  <property name="geometry" >
-   <rect>
-    <x>0</x>
-    <y>0</y>
-    <width>660</width>
-    <height>657</height>
-   </rect>
-  </property>
-  <property name="windowTitle" >
-   <string>MainWindow</string>
-  </property>
-  <widget class="QWidget" name="centralwidget" >
-   <layout class="QHBoxLayout" >
-    <item>
-     <layout class="QGridLayout" >
-      <item row="0" column="0" >
-       <widget class="QWidget" native="1" name="ogreRenderWindow" >
-        <property name="minimumSize" >
-         <size>
-          <width>250</width>
-          <height>250</height>
-         </size>
-        </property>
-       </widget>
-      </item>
-     </layout>
-    </item>
-   </layout>
-  </widget>
-  <widget class="QMenuBar" name="menubar" >
-   <property name="geometry" >
-    <rect>
-     <x>0</x>
-     <y>0</y>
-     <width>660</width>
-     <height>22</height>
-    </rect>
-   </property>
-   <widget class="QMenu" name="menuFile" >
-    <property name="title" >
-     <string>File</string>
-    </property>
-    <addaction name="actionNeu" />
-    <addaction name="actionClose" />
-   </widget>
-   <widget class="QMenu" name="menuView" >
-    <property name="title" >
-     <string>View</string>
-    </property>
-    <addaction name="actionSceneGraph" />
-    <addaction name="actionPreferences" />
-    <addaction name="actionProperty_Window" />
-    <addaction name="actionObject_Selection" />
-    <addaction name="actionConsole_Window" />
-   </widget>
-   <addaction name="menuFile" />
-   <addaction name="menuView" />
-  </widget>
-  <widget class="QStatusBar" name="statusbar" />
-  <action name="actionNeu" >
-   <property name="text" >
-    <string>Neu</string>
-   </property>
-  </action>
-  <action name="actionSceneGraph" >
-   <property name="checkable" >
-    <bool>false</bool>
-   </property>
-   <property name="text" >
-    <string>SceneGraph</string>
-   </property>
-  </action>
-  <action name="actionPreferences" >
-   <property name="checkable" >
-    <bool>false</bool>
-   </property>
-   <property name="text" >
-    <string>Preferences</string>
-   </property>
-  </action>
-  <action name="actionProperty_Window" >
-   <property name="text" >
-    <string>Property Window</string>
-   </property>
-  </action>
-  <action name="actionObject_Selection" >
-   <property name="text" >
-    <string>Object Selection</string>
-   </property>
-  </action>
-  <action name="actionClose" >
-   <property name="text" >
-    <string>Quit</string>
-   </property>
-  </action>
-  <action name="actionConsole_Window" >
-   <property name="text" >
-    <string>Console Window</string>
-   </property>
-  </action>
- </widget>
- <resources/>
- <connections/>
-</ui>

Deleted: rl/trunk/editors/Lockenwickler/ui files/model_preview.ui
===================================================================
--- rl/trunk/editors/Lockenwickler/ui files/model_preview.ui	2008-10-26 20:38:58 UTC (rev 4566)
+++ rl/trunk/editors/Lockenwickler/ui files/model_preview.ui	2008-10-27 20:25:20 UTC (rev 4567)
@@ -1,56 +0,0 @@
-<ui version="4.0" >
- <class>modelPreviewDialog</class>
- <widget class="QDialog" name="modelPreviewDialog" >
-  <property name="geometry" >
-   <rect>
-    <x>0</x>
-    <y>0</y>
-    <width>272</width>
-    <height>744</height>
-   </rect>
-  </property>
-  <property name="windowTitle" >
-   <string>Dialog</string>
-  </property>
-  <layout class="QGridLayout" >
-   <item row="0" column="0" >
-    <widget class="QLineEdit" name="modelSearchBox" />
-   </item>
-   <item row="1" column="0" >
-    <widget class="QSplitter" name="splitter" >
-     <property name="orientation" >
-      <enum>Qt::Vertical</enum>
-     </property>
-     <widget class="QListWidget" name="listWidget" />
-     <widget class="QWidget" native="1" name="modelPreviewWindow" >
-      <property name="minimumSize" >
-       <size>
-        <width>200</width>
-        <height>200</height>
-       </size>
-      </property>
-     </widget>
-    </widget>
-   </item>
-  </layout>
- </widget>
- <resources/>
- <connections>
-  <connection>
-   <sender>modelSearchBox</sender>
-   <signal>textChanged(QString)</signal>
-   <receiver>listWidget</receiver>
-   <slot>clearSelection()</slot>
-   <hints>
-    <hint type="sourcelabel" >
-     <x>115</x>
-     <y>20</y>
-    </hint>
-    <hint type="destinationlabel" >
-     <x>114</x>
-     <y>48</y>
-    </hint>
-   </hints>
-  </connection>
- </connections>
-</ui>

Deleted: rl/trunk/editors/Lockenwickler/ui files/object_property.ui
===================================================================
--- rl/trunk/editors/Lockenwickler/ui files/object_property.ui	2008-10-26 20:38:58 UTC (rev 4566)
+++ rl/trunk/editors/Lockenwickler/ui files/object_property.ui	2008-10-27 20:25:20 UTC (rev 4567)
@@ -1,76 +0,0 @@
-<ui version="4.0" >
- <class>ObjectPropertys</class>
- <widget class="QDialog" name="ObjectPropertys" >
-  <property name="geometry" >
-   <rect>
-    <x>0</x>
-    <y>0</y>
-    <width>202</width>
-    <height>724</height>
-   </rect>
-  </property>
-  <property name="windowTitle" >
-   <string>Object Properties</string>
-  </property>
-  <widget class="QTreeWidget" name="treeWidget" >
-   <property name="geometry" >
-    <rect>
-     <x>0</x>
-     <y>0</y>
-     <width>901</width>
-     <height>721</height>
-    </rect>
-   </property>
-   <property name="minimumSize" >
-    <size>
-     <width>400</width>
-     <height>400</height>
-    </size>
-   </property>
-   <column>
-    <property name="text" >
-     <string>Property</string>
-    </property>
-   </column>
-   <column>
-    <property name="text" >
-     <string>Value</string>
-    </property>
-   </column>
-   <item>
-    <property name="text" >
-     <string>Position</string>
-    </property>
-    <property name="text" >
-     <string/>
-    </property>
-    <item>
-     <property name="text" >
-      <string>X</string>
-     </property>
-     <property name="text" >
-      <string/>
-     </property>
-    </item>
-    <item>
-     <property name="text" >
-      <string>Y</string>
-     </property>
-     <property name="text" >
-      <string/>
-     </property>
-    </item>
-    <item>
-     <property name="text" >
-      <string>Z</string>
-     </property>
-     <property name="text" >
-      <string/>
-     </property>
-    </item>
-   </item>
-  </widget>
- </widget>
- <resources/>
- <connections/>
-</ui>

Deleted: rl/trunk/editors/Lockenwickler/ui files/preferences_dialog.ui
===================================================================
--- rl/trunk/editors/Lockenwickler/ui files/preferences_dialog.ui	2008-10-26 20:38:58 UTC (rev 4566)
+++ rl/trunk/editors/Lockenwickler/ui files/preferences_dialog.ui	2008-10-27 20:25:20 UTC (rev 4567)
@@ -1,159 +0,0 @@
-<ui version="4.0" >
- <class>PreferencesDialog</class>
- <widget class="QDialog" name="PreferencesDialog" >
-  <property name="geometry" >
-   <rect>
-    <x>0</x>
-    <y>0</y>
-    <width>528</width>
-    <height>626</height>
-   </rect>
-  </property>
-  <property name="windowTitle" >
-   <string>Dialog</string>
-  </property>
-  <layout class="QGridLayout" >
-   <item row="0" column="0" >
-    <widget class="QToolBox" name="toolBox" >
-     <property name="currentIndex" >
-      <number>0</number>
-     </property>
-     <widget class="QWidget" name="ResourcePaths" >
-      <property name="geometry" >
-       <rect>
-        <x>0</x>
-        <y>0</y>
-        <width>510</width>
-        <height>505</height>
-       </rect>
-      </property>
-      <attribute name="label" >
-       <string>Resource Paths</string>
-      </attribute>
-      <layout class="QGridLayout" >
-       <item row="0" column="0" >
-        <widget class="QListWidget" name="listWidget" />
-       </item>
-       <item row="1" column="0" >
-        <widget class="QGroupBox" name="groupBox" >
-         <property name="minimumSize" >
-          <size>
-           <width>0</width>
-           <height>95</height>
-          </size>
-         </property>
-         <property name="title" >
-          <string>GroupBox</string>
-         </property>
-         <widget class="QWidget" name="layoutWidget" >
-          <property name="geometry" >
-           <rect>
-            <x>10</x>
-            <y>20</y>
-            <width>471</width>
-            <height>67</height>
-           </rect>
-          </property>
-          <layout class="QGridLayout" >
-           <item row="0" column="0" >
-            <widget class="QLineEdit" name="lineEdit" />
-           </item>
-           <item row="1" column="0" colspan="2" >
-            <widget class="QPushButton" name="loadModuleBtn" >
-             <property name="text" >
-              <string>Load Selected Module</string>
-             </property>
-            </widget>
-           </item>
-           <item row="0" column="1" >
-            <widget class="QPushButton" name="modulConfigSelector" >
-             <property name="text" >
-              <string>...</string>
-             </property>
-            </widget>
-           </item>
-          </layout>
-         </widget>
-        </widget>
-       </item>
-      </layout>
-     </widget>
-     <widget class="QWidget" name="OgreSettings" >
-      <property name="geometry" >
-       <rect>
-        <x>0</x>
-        <y>0</y>
-        <width>96</width>
-        <height>26</height>
-       </rect>
-      </property>
-      <attribute name="label" >
-       <string>Ogre Settings</string>
-      </attribute>
-     </widget>
-    </widget>
-   </item>
-   <item row="1" column="0" >
-    <widget class="QDialogButtonBox" name="buttonBox" >
-     <property name="orientation" >
-      <enum>Qt::Horizontal</enum>
-     </property>
-     <property name="standardButtons" >
-      <set>QDialogButtonBox::Cancel|QDialogButtonBox::NoButton|QDialogButtonBox::Ok</set>
-     </property>
-    </widget>
-   </item>
-  </layout>
- </widget>
- <resources/>
- <connections>
-  <connection>
-   <sender>buttonBox</sender>
-   <signal>accepted()</signal>
-   <receiver>PreferencesDialog</receiver>
-   <slot>accept()</slot>
-   <hints>
-    <hint type="sourcelabel" >
-     <x>227</x>
-     <y>387</y>
-    </hint>
-    <hint type="destinationlabel" >
-     <x>157</x>
-     <y>274</y>
-    </hint>
-   </hints>
-  </connection>
-  <connection>
-   <sender>buttonBox</sender>
-   <signal>rejected()</signal>
-   <receiver>PreferencesDialog</receiver>
-   <slot>reject()</slot>
-   <hints>
-    <hint type="sourcelabel" >
-     <x>295</x>
-     <y>387</y>
-    </hint>
-    <hint type="destinationlabel" >
-     <x>286</x>
-     <y>274</y>
-    </hint>
-   </hints>
-  </connection>
-  <connection>
-   <sender>buttonBox</sender>
-   <signal>clicked(QAbstractButton*)</signal>
-   <receiver>PreferencesDialog</receiver>
-   <slot>close()</slot>
-   <hints>
-    <hint type="sourcelabel" >
-     <x>467</x>
-     <y>387</y>
-    </hint>
-    <hint type="destinationlabel" >
-     <x>240</x>
-     <y>0</y>
-    </hint>
-   </hints>
-  </connection>
- </connections>
-</ui>

Deleted: rl/trunk/editors/Lockenwickler/ui files/ui_ConsoleWindow.py
===================================================================
--- rl/trunk/editors/Lockenwickler/ui files/ui_ConsoleWindow.py	2008-10-26 20:38:58 UTC (rev 4566)
+++ rl/trunk/editors/Lockenwickler/ui files/ui_ConsoleWindow.py	2008-10-27 20:25:20 UTC (rev 4567)
@@ -1,29 +0,0 @@
-# -*- coding: utf-8 -*-
-
-# Form implementation generated from reading ui file 'console_window.ui'
-#
-# Created: Mon May 12 15:09:24 2008
-#      by: PyQt4 UI code generator 4.3.3
-#
-# WARNING! All changes made in this file will be lost!
-
-from PyQt4 import QtCore, QtGui
-
-class Ui_ConsoleWindow(object):
-    def setupUi(self, ConsoleWindow):
-        ConsoleWindow.setObjectName("ConsoleWindow")
-        ConsoleWindow.resize(QtCore.QSize(QtCore.QRect(0,0,884,225).size()).expandedTo(ConsoleWindow.minimumSizeHint()))
-
-        self.gridlayout = QtGui.QGridLayout(ConsoleWindow)
-        self.gridlayout.setObjectName("gridlayout")
-
-        self.textEdit = QtGui.QTextEdit(ConsoleWindow)
-        self.textEdit.setObjectName("textEdit")
-        self.gridlayout.addWidget(self.textEdit,0,0,1,1)
-
-        self.retranslateUi(ConsoleWindow)
-        QtCore.QMetaObject.connectSlotsByName(ConsoleWindow)
-
-    def retranslateUi(self, ConsoleWindow):
-        ConsoleWindow.setWindowTitle(QtGui.QApplication.translate("ConsoleWindow", "Form", None, QtGui.QApplication.UnicodeUTF8))
-

Deleted: rl/trunk/editors/Lockenwickler/ui files/ui_FourPanelView.py
===================================================================
--- rl/trunk/editors/Lockenwickler/ui files/ui_FourPanelView.py	2008-10-26 20:38:58 UTC (rev 4566)
+++ rl/trunk/editors/Lockenwickler/ui files/ui_FourPanelView.py	2008-10-27 20:25:20 UTC (rev 4567)
@@ -1,50 +0,0 @@
-# -*- coding: utf-8 -*-
-
-# Form implementation generated from reading ui file 'FourPanelView.ui'
-#
-# Created: Mon May 12 15:09:24 2008
-#      by: PyQt4 UI code generator 4.3.3
-#
-# WARNING! All changes made in this file will be lost!
-
-from PyQt4 import QtCore, QtGui
-
-class Ui_FourPaneView(object):
-    def setupUi(self, FourPaneView):
-        FourPaneView.setObjectName("FourPaneView")
-        FourPaneView.resize(QtCore.QSize(QtCore.QRect(0,0,827,856).size()).expandedTo(FourPaneView.minimumSizeHint()))
-
-        self.gridlayout = QtGui.QGridLayout(FourPaneView)
-        self.gridlayout.setObjectName("gridlayout")
-
-        self.splitter_3 = QtGui.QSplitter(FourPaneView)
-        self.splitter_3.setOrientation(QtCore.Qt.Horizontal)
-        self.splitter_3.setObjectName("splitter_3")
-
-        self.splitter = QtGui.QSplitter(self.splitter_3)
-        self.splitter.setOrientation(QtCore.Qt.Vertical)
-        self.splitter.setObjectName("splitter")
-
-        self.widget = QtGui.QWidget(self.splitter)
-        self.widget.setObjectName("widget")
-
-        self.widget_4 = QtGui.QWidget(self.splitter)
-        self.widget_4.setObjectName("widget_4")
-
-        self.splitter_2 = QtGui.QSplitter(self.splitter_3)
-        self.splitter_2.setOrientation(QtCore.Qt.Vertical)
-        self.splitter_2.setObjectName("splitter_2")
-
-        self.widget_2 = QtGui.QWidget(self.splitter_2)
-        self.widget_2.setObjectName("widget_2")
-
-        self.widget_3 = QtGui.QWidget(self.splitter_2)
-        self.widget_3.setObjectName("widget_3")
-        self.gridlayout.addWidget(self.splitter_3,0,0,1,1)
-
-        self.retranslateUi(FourPaneView)
-        QtCore.QMetaObject.connectSlotsByName(FourPaneView)
-
-    def retranslateUi(self, FourPaneView):
-        FourPaneView.setWindowTitle(QtGui.QApplication.translate("FourPaneView", "Form", None, QtGui.QApplication.UnicodeUTF8))
-

Deleted: rl/trunk/editors/Lockenwickler/ui files/ui_lw.py
===================================================================
--- rl/trunk/editors/Lockenwickler/ui files/ui_lw.py	2008-10-26 20:38:58 UTC (rev 4566)
+++ rl/trunk/editors/Lockenwickler/ui files/ui_lw.py	2008-10-27 20:25:20 UTC (rev 4567)
@@ -1,94 +0,0 @@
-# -*- coding: utf-8 -*-
-
-# Form implementation generated from reading ui file 'lockewickler.ui'
-#
-# Created: Mon May 12 15:09:23 2008
-#      by: PyQt4 UI code generator 4.3.3
-#
-# WARNING! All changes made in this file will be lost!
-
-from PyQt4 import QtCore, QtGui
-
-class Ui_MainWindow(object):
-    def setupUi(self, MainWindow):
-        MainWindow.setObjectName("MainWindow")
-        MainWindow.resize(QtCore.QSize(QtCore.QRect(0,0,660,657).size()).expandedTo(MainWindow.minimumSizeHint()))
-
-        self.centralwidget = QtGui.QWidget(MainWindow)
-        self.centralwidget.setObjectName("centralwidget")
-
-        self.hboxlayout = QtGui.QHBoxLayout(self.centralwidget)
-        self.hboxlayout.setObjectName("hboxlayout")
-
-        self.gridlayout = QtGui.QGridLayout()
-        self.gridlayout.setObjectName("gridlayout")
-
-        self.ogreRenderWindow = QtGui.QWidget(self.centralwidget)
-        self.ogreRenderWindow.setMinimumSize(QtCore.QSize(250,250))
-        self.ogreRenderWindow.setObjectName("ogreRenderWindow")
-        self.gridlayout.addWidget(self.ogreRenderWindow,0,0,1,1)
-        self.hboxlayout.addLayout(self.gridlayout)
-        MainWindow.setCentralWidget(self.centralwidget)
-
-        self.menubar = QtGui.QMenuBar(MainWindow)
-        self.menubar.setGeometry(QtCore.QRect(0,0,660,22))
-        self.menubar.setObjectName("menubar")
-
-        self.menuFile = QtGui.QMenu(self.menubar)
-        self.menuFile.setObjectName("menuFile")
-
-        self.menuView = QtGui.QMenu(self.menubar)
-        self.menuView.setObjectName("menuView")
-        MainWindow.setMenuBar(self.menubar)
-
-        self.statusbar = QtGui.QStatusBar(MainWindow)
-        self.statusbar.setObjectName("statusbar")
-        MainWindow.setStatusBar(self.statusbar)
-
-        self.actionNeu = QtGui.QAction(MainWindow)
-        self.actionNeu.setObjectName("actionNeu")
-
-        self.actionSceneGraph = QtGui.QAction(MainWindow)
-        self.actionSceneGraph.setCheckable(False)
-        self.actionSceneGraph.setObjectName("actionSceneGraph")
-
-        self.actionPreferences = QtGui.QAction(MainWindow)
-        self.actionPreferences.setCheckable(False)
-        self.actionPreferences.setObjectName("actionPreferences")
-
-        self.actionProperty_Window = QtGui.QAction(MainWindow)
-        self.actionProperty_Window.setObjectName("actionProperty_Window")
-
-        self.actionObject_Selection = QtGui.QAction(MainWindow)
-        self.actionObject_Selection.setObjectName("actionObject_Selection")
-
-        self.actionClose = QtGui.QAction(MainWindow)
-        self.actionClose.setObjectName("actionClose")
-
-        self.actionConsole_Window = QtGui.QAction(MainWindow)
-        self.actionConsole_Window.setObjectName("actionConsole_Window")
-        self.menuFile.addAction(self.actionNeu)
-        self.menuFile.addAction(self.actionClose)
-        self.menuView.addAction(self.actionSceneGraph)
-        self.menuView.addAction(self.actionPreferences)
-        self.menuView.addAction(self.actionProperty_Window)
-        self.menuView.addAction(self.actionObject_Selection)
-        self.menuView.addAction(self.actionConsole_Window)
-        self.menubar.addAction(self.menuFile.menuAction())
-        self.menubar.addAction(self.menuView.menuAction())
-
-        self.retranslateUi(MainWindow)
-        QtCore.QMetaObject.connectSlotsByName(MainWindow)
-
-    def retranslateUi(self, MainWindow):
-        MainWindow.setWindowTitle(QtGui.QApplication.translate("MainWindow", "MainWindow", None, QtGui.QApplication.UnicodeUTF8))
-        self.menuFile.setTitle(QtGui.QApplication.translate("MainWindow", "File", None, QtGui.QApplication.UnicodeUTF8))
-        self.menuView.setTitle(QtGui.QApplication.translate("MainWindow", "View", None, QtGui.QApplication.UnicodeUTF8))
-        self.actionNeu.setText(QtGui.QApplication.translate("MainWindow", "Neu", None, QtGui.QApplication.UnicodeUTF8))
-        self.actionSceneGraph.setText(QtGui.QApplication.translate("MainWindow", "SceneGraph", None, QtGui.QApplication.UnicodeUTF8))
-        self.actionPreferences.setText(QtGui.QApplication.translate("MainWindow", "Preferences", None, QtGui.QApplication.UnicodeUTF8))
-        self.actionProperty_Window.setText(QtGui.QApplication.translate("MainWindow", "Property Window", None, QtGui.QApplication.UnicodeUTF8))
-        self.actionObject_Selection.setText(QtGui.QApplication.translate("MainWindow", "Object Selection", None, QtGui.QApplication.UnicodeUTF8))
-        self.actionClose.setText(QtGui.QApplication.translate("MainWindow", "Quit", None, QtGui.QApplication.UnicodeUTF8))
-        self.actionConsole_Window.setText(QtGui.QApplication.translate("MainWindow", "Console Window", None, QtGui.QApplication.UnicodeUTF8))
-

Deleted: rl/trunk/editors/Lockenwickler/ui files/ui_model_prev.py
===================================================================
--- rl/trunk/editors/Lockenwickler/ui files/ui_model_prev.py	2008-10-26 20:38:58 UTC (rev 4566)
+++ rl/trunk/editors/Lockenwickler/ui files/ui_model_prev.py	2008-10-27 20:25:20 UTC (rev 4567)
@@ -1,42 +0,0 @@
-# -*- coding: utf-8 -*-
-
-# Form implementation generated from reading ui file 'model_preview.ui'
-#
-# Created: Mon May 12 15:09:24 2008
-#      by: PyQt4 UI code generator 4.3.3
-#
-# WARNING! All changes made in this file will be lost!
-
-from PyQt4 import QtCore, QtGui
-
-class Ui_modelPreviewDialog(object):
-    def setupUi(self, modelPreviewDialog):
-        modelPreviewDialog.setObjectName("modelPreviewDialog")
-        modelPreviewDialog.resize(QtCore.QSize(QtCore.QRect(0,0,272,744).size()).expandedTo(modelPreviewDialog.minimumSizeHint()))
-
-        self.gridlayout = QtGui.QGridLayout(modelPreviewDialog)
-        self.gridlayout.setObjectName("gridlayout")
-
-        self.modelSearchBox = QtGui.QLineEdit(modelPreviewDialog)
-        self.modelSearchBox.setObjectName("modelSearchBox")
-        self.gridlayout.addWidget(self.modelSearchBox,0,0,1,1)
-
-        self.splitter = QtGui.QSplitter(modelPreviewDialog)
-        self.splitter.setOrientation(QtCore.Qt.Vertical)
-        self.splitter.setObjectName("splitter")
-
-        self.listWidget = QtGui.QListWidget(self.splitter)
-        self.listWidget.setObjectName("listWidget")
-
-        self.modelPreviewWindow = QtGui.QWidget(self.splitter)
-        self.modelPreviewWindow.setMinimumSize(QtCore.QSize(200,200))
-        self.modelPreviewWindow.setObjectName("modelPreviewWindow")
-        self.gridlayout.addWidget(self.splitter,1,0,1,1)
-
-        self.retranslateUi(modelPreviewDialog)
-        QtCore.QObject.connect(self.modelSearchBox,QtCore.SIGNAL("textChanged(QString)"),self.listWidget.clearSelection)
-        QtCore.QMetaObject.connectSlotsByName(modelPreviewDialog)
-
-    def retranslateUi(self, modelPreviewDialog):
-        modelPreviewDialog.setWindowTitle(QtGui.QApplication.translate("modelPreviewDialog", "Dialog", None, QtGui.QApplication.UnicodeUTF8))
-

Deleted: rl/trunk/editors/Lockenwickler/ui files/ui_obj_prop.py
===================================================================
--- rl/trunk/editors/Lockenwickler/ui files/ui_obj_prop.py	2008-10-26 20:38:58 UTC (rev 4566)
+++ rl/trunk/editors/Lockenwickler/ui files/ui_obj_prop.py	2008-10-27 20:25:20 UTC (rev 4567)
@@ -1,46 +0,0 @@
-# -*- coding: utf-8 -*-
-
-# Form implementation generated from reading ui file 'object_property.ui'
-#
-# Created: Mon May 12 15:09:23 2008
-#      by: PyQt4 UI code generator 4.3.3
-#
-# WARNING! All changes made in this file will be lost!
-
-from PyQt4 import QtCore, QtGui
-
-class Ui_ObjectPropertys(object):
-    def setupUi(self, ObjectPropertys):
-        ObjectPropertys.setObjectName("ObjectPropertys")
-        ObjectPropertys.resize(QtCore.QSize(QtCore.QRect(0,0,761,724).size()).expandedTo(ObjectPropertys.minimumSizeHint()))
-
-        self.treeWidget = QtGui.QTreeWidget(ObjectPropertys)
-        self.treeWidget.setGeometry(QtCore.QRect(0,0,901,721))
-        self.treeWidget.setMinimumSize(QtCore.QSize(400,400))
-        self.treeWidget.setObjectName("treeWidget")
-
-        self.retranslateUi(ObjectPropertys)
-        QtCore.QMetaObject.connectSlotsByName(ObjectPropertys)
-
-    def retranslateUi(self, ObjectPropertys):
-        ObjectPropertys.setWindowTitle(QtGui.QApplication.translate("ObjectPropertys", "Object Properties", None, QtGui.QApplication.UnicodeUTF8))
-        self.treeWidget.headerItem().setText(0,QtGui.QApplication.translate("ObjectPropertys", "Property", None, QtGui.QApplication.UnicodeUTF8))
-        self.treeWidget.headerItem().setText(1,QtGui.QApplication.translate("ObjectPropertys", "Value", None, QtGui.QApplication.UnicodeUTF8))
-        self.treeWidget.clear()
-
-        item = QtGui.QTreeWidgetItem(self.treeWidget)
-        item.setText(0,QtGui.QApplication.translate("ObjectPropertys", "Position", None, QtGui.QApplication.UnicodeUTF8))
-        item.setText(1,"")
-
-        item1 = QtGui.QTreeWidgetItem(item)
-        item1.setText(0,QtGui.QApplication.translate("ObjectPropertys", "X", None, QtGui.QApplication.UnicodeUTF8))
-        item1.setText(1,"")
-
-        item2 = QtGui.QTreeWidgetItem(item)
-        item2.setText(0,QtGui.QApplication.translate("ObjectPropertys", "Y", None, QtGui.QApplication.UnicodeUTF8))
-        item2.setText(1,"")
-
-        item3 = QtGui.QTreeWidgetItem(item)
-        item3.setText(0,QtGui.QApplication.translate("ObjectPropertys", "Z", None, QtGui.QApplication.UnicodeUTF8))
-        item3.setText(1,"")
-

Deleted: rl/trunk/editors/Lockenwickler/ui files/ui_pref_dialog.py
===================================================================
--- rl/trunk/editors/Lockenwickler/ui files/ui_pref_dialog.py	2008-10-26 20:38:58 UTC (rev 4566)
+++ rl/trunk/editors/Lockenwickler/ui files/ui_pref_dialog.py	2008-10-27 20:25:20 UTC (rev 4567)
@@ -1,85 +0,0 @@
-# -*- coding: utf-8 -*-
-
-# Form implementation generated from reading ui file 'preferences_dialog.ui'
-#
-# Created: Mon May 12 15:09:23 2008
-#      by: PyQt4 UI code generator 4.3.3
-#
-# WARNING! All changes made in this file will be lost!
-
-from PyQt4 import QtCore, QtGui
-
-class Ui_PreferencesDialog(object):
-    def setupUi(self, PreferencesDialog):
-        PreferencesDialog.setObjectName("PreferencesDialog")
-        PreferencesDialog.resize(QtCore.QSize(QtCore.QRect(0,0,528,626).size()).expandedTo(PreferencesDialog.minimumSizeHint()))
-
-        self.gridlayout = QtGui.QGridLayout(PreferencesDialog)
-        self.gridlayout.setObjectName("gridlayout")
-
-        self.toolBox = QtGui.QToolBox(PreferencesDialog)
-        self.toolBox.setObjectName("toolBox")
-
-        self.ResourcePaths = QtGui.QWidget()
-        self.ResourcePaths.setGeometry(QtCore.QRect(0,0,510,505))
-        self.ResourcePaths.setObjectName("ResourcePaths")
-
-        self.gridlayout1 = QtGui.QGridLayout(self.ResourcePaths)
-        self.gridlayout1.setObjectName("gridlayout1")
-
-        self.listWidget = QtGui.QListWidget(self.ResourcePaths)
-        self.listWidget.setObjectName("listWidget")
-        self.gridlayout1.addWidget(self.listWidget,0,0,1,1)
-
-        self.groupBox = QtGui.QGroupBox(self.ResourcePaths)
-        self.groupBox.setMinimumSize(QtCore.QSize(0,95))
-        self.groupBox.setObjectName("groupBox")
-
-        self.layoutWidget = QtGui.QWidget(self.groupBox)
-        self.layoutWidget.setGeometry(QtCore.QRect(10,20,471,67))
-        self.layoutWidget.setObjectName("layoutWidget")
-
-        self.gridlayout2 = QtGui.QGridLayout(self.layoutWidget)
-        self.gridlayout2.setObjectName("gridlayout2")
-
-        self.lineEdit = QtGui.QLineEdit(self.layoutWidget)
-        self.lineEdit.setObjectName("lineEdit")
-        self.gridlayout2.addWidget(self.lineEdit,0,0,1,1)
-
-        self.loadModuleBtn = QtGui.QPushButton(self.layoutWidget)
-        self.loadModuleBtn.setObjectName("loadModuleBtn")
-        self.gridlayout2.addWidget(self.loadModuleBtn,1,0,1,2)
-
-        self.modulConfigSelector = QtGui.QPushButton(self.layoutWidget)
-        self.modulConfigSelector.setObjectName("modulConfigSelector")
-        self.gridlayout2.addWidget(self.modulConfigSelector,0,1,1,1)
-        self.gridlayout1.addWidget(self.groupBox,1,0,1,1)
-        self.toolBox.addItem(self.ResourcePaths,"")
-
-        self.OgreSettings = QtGui.QWidget()
-        self.OgreSettings.setGeometry(QtCore.QRect(0,0,96,26))
-        self.OgreSettings.setObjectName("OgreSettings")
-        self.toolBox.addItem(self.OgreSettings,"")
-        self.gridlayout.addWidget(self.toolBox,0,0,1,1)
-
-        self.buttonBox = QtGui.QDialogButtonBox(PreferencesDialog)
-        self.buttonBox.setOrientation(QtCore.Qt.Horizontal)
-        self.buttonBox.setStandardButtons(QtGui.QDialogButtonBox.Cancel|QtGui.QDialogButtonBox.NoButton|QtGui.QDialogButtonBox.Ok)
-        self.buttonBox.setObjectName("buttonBox")
-        self.gridlayout.addWidget(self.buttonBox,1,0,1,1)
-
-        self.retranslateUi(PreferencesDialog)
-        self.toolBox.setCurrentIndex(0)
-        QtCore.QObject.connect(self.buttonBox,QtCore.SIGNAL("accepted()"),PreferencesDialog.accept)
-        QtCore.QObject.connect(self.buttonBox,QtCore.SIGNAL("rejected()"),PreferencesDialog.reject)
-        QtCore.QObject.connect(self.buttonBox,QtCore.SIGNAL("clicked(QAbstractButton*)"),PreferencesDialog.close)
-        QtCore.QMetaObject.connectSlotsByName(PreferencesDialog)
-
-    def retranslateUi(self, PreferencesDialog):
-        PreferencesDialog.setWindowTitle(QtGui.QApplication.translate("PreferencesDialog", "Dialog", None, QtGui.QApplication.UnicodeUTF8))
-        self.groupBox.setTitle(QtGui.QApplication.translate("PreferencesDialog", "GroupBox", None, QtGui.QApplication.UnicodeUTF8))
-        self.loadModuleBtn.setText(QtGui.QApplication.translate("PreferencesDialog", "Load Selected Module", None, QtGui.QApplication.UnicodeUTF8))
-        self.modulConfigSelector.setText(QtGui.QApplication.translate("PreferencesDialog", "...", None, QtGui.QApplication.UnicodeUTF8))
-        self.toolBox.setItemText(self.toolBox.indexOf(self.ResourcePaths), QtGui.QApplication.translate("PreferencesDialog", "Resource Paths", None, QtGui.QApplication.UnicodeUTF8))
-        self.toolBox.setItemText(self.toolBox.indexOf(self.OgreSettings), QtGui.QApplication.translate("PreferencesDialog", "Ogre Settings", None, QtGui.QApplication.UnicodeUTF8))
-



From fusion2 at mail.berlios.de  Fri Oct 31 11:45:30 2008
From: fusion2 at mail.berlios.de (fusion2 at mail.berlios.de)
Date: Fri, 31 Oct 2008 11:45:30 +0100
Subject: [Dsa-hl-svn] r4568 - rl/trunk/editors/Lockenwickler/src
Message-ID: <200810311045.m9VAjUv5004009@sheep.berlios.de>

Author: fusion2
Date: 2008-10-31 11:45:24 +0100 (Fri, 31 Oct 2008)
New Revision: 4568

Modified:
   rl/trunk/editors/Lockenwickler/src/GameObjectClass.py
   rl/trunk/editors/Lockenwickler/src/GameObjectClassManager.py
   rl/trunk/editors/Lockenwickler/src/GameObjectClassView.py
   rl/trunk/editors/Lockenwickler/src/ModelSelectionDialog.py
   rl/trunk/editors/Lockenwickler/src/ModuleManager.py
   rl/trunk/editors/Lockenwickler/src/OgreMainWindow.py
Log:
- drag and drop game objects into the scene works


Modified: rl/trunk/editors/Lockenwickler/src/GameObjectClass.py
===================================================================
--- rl/trunk/editors/Lockenwickler/src/GameObjectClass.py	2008-10-27 20:25:20 UTC (rev 4567)
+++ rl/trunk/editors/Lockenwickler/src/GameObjectClass.py	2008-10-31 10:45:24 UTC (rev 4568)
@@ -90,11 +90,24 @@
     def getType(self):
         return "MAP"
 
+class GameObjectRepresentation():
+    def __init__(self, inWorldId, gameObjectClass, node, meshFile = None):
+        self.inWorldId = inWorldId
+        self.goc = gameObjectClass
+        self.node = node
+        self.meshFile = meshFile
+
+    def setPosition(self, pos):
+        self.name.setPosition(pos)
+
+
 class GameObjectClass():
     def __init__(self,  parentElement):
         self.classid = parentElement.get("classid")
         self.baseclass = parentElement.get("baseclass")
 
+        self.meshFile = None
+
         self.properties = []
 
         for property in parentElement:#.getiterator("property"):
@@ -105,6 +118,9 @@
             else:
                 self.properties.append(self.createProperty(property))
 
+    def getType(self):
+        return "GAME_OBJECT"
+
     def createPropertyMap(self, property):
         propMap = GOCMapProperty(property.get("name"))
         for subProperty in property:
@@ -116,7 +132,18 @@
 
         return propMap
 
+    def getMeshFileName(self):
+        if self.meshFile is None:
+            for prop in self.properties:
+                if prop.getType() == "STRING":
+                    if prop.name == "meshfile":
+                        self.meshFile = prop.data
+                        return self.meshFile
+            return None
+        else:
+            return self.meshFile
 
+
     def createProperty(self, property):
         if property.get("type") == "STRING":
             name = property.get("name")

Modified: rl/trunk/editors/Lockenwickler/src/GameObjectClassManager.py
===================================================================
--- rl/trunk/editors/Lockenwickler/src/GameObjectClassManager.py	2008-10-27 20:25:20 UTC (rev 4567)
+++ rl/trunk/editors/Lockenwickler/src/GameObjectClassManager.py	2008-10-31 10:45:24 UTC (rev 4568)
@@ -38,6 +38,14 @@
         if self.callback is not None:
             self.callback(self.fileDict)
 
+    def getGameObjectWithClassId(self, id):
+        for key in self.fileDict:
+            for go in self.fileDict[key]:
+                if go.classid == id:
+                    return go
+
+        return None
+
         # whenever a gameobject changes outside of the view, the view has to update itself wth the new values
     def setGameObjectsViewUpdateCallback(self, callback):
         self.callback = callback

Modified: rl/trunk/editors/Lockenwickler/src/GameObjectClassView.py
===================================================================
--- rl/trunk/editors/Lockenwickler/src/GameObjectClassView.py	2008-10-27 20:25:20 UTC (rev 4567)
+++ rl/trunk/editors/Lockenwickler/src/GameObjectClassView.py	2008-10-31 10:45:24 UTC (rev 4568)
@@ -22,6 +22,23 @@
 
 from GameObjectClass import *
 
+# The drag events are processed in ObgreMainWindow.py
+
+class GoTreeWidget(QTreeWidget):
+    def __init__(self, parent = None):
+        super(GoTreeWidget, self).__init__(parent)
+        self.setDragEnabled(True)
+
+    def startDrag(self,  dropActions):
+        data = QByteArray()
+        stream = QDataStream(data,  QIODevice.WriteOnly)
+        stream << self.currentItem().text(0)
+        mimeData = QMimeData()
+        mimeData.setData("application/x-game_object", data)
+        drag = QDrag(self)
+        drag.setMimeData(mimeData)
+        drag.start(Qt.CopyAction)
+
 class GameObjectClassView(QWidget):
     def __init__(self, gocManager, parent = None):
         super(GameObjectClassView, self).__init__(parent)
@@ -42,7 +59,7 @@
         self.gridlayout = QGridLayout(self)
         self.gridlayout.setObjectName("gridlayout")
 
-        self.treeWidget = QTreeWidget()
+        self.treeWidget = GoTreeWidget()
         self.treeWidget.setColumnCount(3)
         self.treeWidget.setObjectName("ObjectTreeView")
 
@@ -53,7 +70,7 @@
         QMetaObject.connectSlotsByName(self)
 
     def onDoubleClick(self, item,  row):
-        if self.gameObjectDict[item].getType() == "MAP" or self.gameObjectDict[item].getType() == "ARRAY":
+        if self.gameObjectDict[item].getType() == "MAP" or self.gameObjectDict[item].getType() == "ARRAY"or self.gameObjectDict[item].getType() == "GAME_OBJECT":
             print "NOT YET :)"
         else:
             if self.gameObjectDict[item].openEditor(row, self):

Modified: rl/trunk/editors/Lockenwickler/src/ModelSelectionDialog.py
===================================================================
--- rl/trunk/editors/Lockenwickler/src/ModelSelectionDialog.py	2008-10-27 20:25:20 UTC (rev 4567)
+++ rl/trunk/editors/Lockenwickler/src/ModelSelectionDialog.py	2008-10-31 10:45:24 UTC (rev 4568)
@@ -28,6 +28,7 @@
 import OgreWidget
 import ogre.renderer.OGRE as og
 
+# The drag events are processed in ObgreMainWindow.py
 
 class MyListWidget(QListWidget):
     def __init__(self,  parent):
@@ -39,7 +40,7 @@
         stream = QDataStream(data,  QIODevice.WriteOnly)
         stream << self.currentItem().text()
         mimeData = QMimeData()
-        mimeData.setData("application/x-text", data)
+        mimeData.setData("application/x-static_model", data)
         drag = QDrag(self)
         drag.setMimeData(mimeData)
         drag.start(Qt.CopyAction)

Modified: rl/trunk/editors/Lockenwickler/src/ModuleManager.py
===================================================================
--- rl/trunk/editors/Lockenwickler/src/ModuleManager.py	2008-10-27 20:25:20 UTC (rev 4567)
+++ rl/trunk/editors/Lockenwickler/src/ModuleManager.py	2008-10-31 10:45:24 UTC (rev 4568)
@@ -240,6 +240,7 @@
     def cutObjects(self):
         if len(self.userSelectionList) < 1:
             return
+            return
 
         self.cutList = []
         for so in self.userSelectionList:
@@ -303,6 +304,36 @@
     def save(self):
         pass
 
+    def startDropGameObjectAction(self, classid, ray):
+        go = self.gocManager.getGameObjectWithClassId(classid)
+        meshFile = go.getMeshFileName()
+
+        if go is not None:
+            dropEntity = self.sceneManager.createEntity("dropMesh" + str(self.dropCount), str(meshFile))
+            dropNode = self.sceneManager.getRootSceneNode().createChild("dropNode" + str(self.dropCount))
+            dropNode.attachObject(self.dropEntity)
+
+            result = og.Math.intersects(ray, self.dropCollisionPlane)
+            if result.first == True:
+                dropNode.setPosition(ray.getPoint(result.second))
+            else:
+                dropNode.setPosition(ray.getPoint(50))
+
+            self.dropGO = GameObjectRepresentation(self.dropCount, classid, dropNode, meshFile)
+            dropEntity.setUserAny(self.dropGO)
+
+        self.dropCount += 1
+
+    def moveDropGameObjectAction(self, ray):
+        result = og.Math.intersects(ray, self.dropCollisionPlane)
+        if result.first == True:
+            self.dropGO.setPosition(ray.getPoint(result.second))
+        else:
+            self.dropGO.setPosition(ray.getPoint(50))
+
+    def stopDropGameObjectAction(self, ray):
+        print "sd"
+
     def startDropModelAction(self, meshFile, ray):
         self.dropEntity = self.sceneManager.createEntity("dropMesh" + str(self.dropCount), str(meshFile))
         self.dropNode = self.sceneManager.getRootSceneNode().createChild("dropNode" + str(self.dropCount))

Modified: rl/trunk/editors/Lockenwickler/src/OgreMainWindow.py
===================================================================
--- rl/trunk/editors/Lockenwickler/src/OgreMainWindow.py	2008-10-27 20:25:20 UTC (rev 4567)
+++ rl/trunk/editors/Lockenwickler/src/OgreMainWindow.py	2008-10-31 10:45:24 UTC (rev 4568)
@@ -227,8 +227,8 @@
         return False
 
     def dragEnterEvent(self, event):
-        if event.mimeData().hasFormat("application/x-text"):
-            data = event.mimeData().data("application/x-text")
+        if event.mimeData().hasFormat("application/x-static_model"):
+            data = event.mimeData().data("application/x-static_model")
             stream = QDataStream(data, QIODevice.ReadOnly)
             text = QString()
             stream >> text
@@ -238,18 +238,39 @@
             event.setDropAction(Qt.CopyAction)
             event.accept()
 
+        elif event.mimeData().hasFormat("application/x-game_object"):
+            data = event.mimeData().data("application/x-game_object")
+            stream = QDataStream(data, QIODevice.ReadOnly)
+            text = QString()
+            stream >> text
+
+            self.moduleManager.startDropGameObjectAction(text, self.getCameraToViewportRay()) #start the model draging
+
+            event.setDropAction(Qt.CopyAction)
+            event.accept()
         else:
             event.ignore()
 
 
     def dragMoveEvent(self, event):
-        self.moduleManager.moveDropModelAction(self.getCameraToViewportRay()) #move it with the mouse
+        if event.mimeData().hasFormat("application/x-static_model"):
+            self.moduleManager.moveDropModelAction(self.getCameraToViewportRay()) #move it with the mouse
+            event.accept()
+        elif event.mimeData().hasFormat("application/x-game_object"):
+            self.moduleManager.moveDropGameObjectAction(self.getCameraToViewportRay()) #move it with the mouse
+            event.accept()
+        else:
+            event.ignore()
 
-        event.accept()
-
     def dropEvent(self, event):
-        self.moduleManager.stopDropModelAction(self.getCameraToViewportRay()) # place it down
-        event.accept()
+        if event.mimeData().hasFormat("application/x-static_model"):
+            self.moduleManager.stopDropModelAction(self.getCameraToViewportRay()) #move it with the mouse
+            event.accept()
+        elif event.mimeData().hasFormat("application/x-game_object"):
+            self.moduleManager.stopDropGameObjectAction(self.getCameraToViewportRay()) #move it with the mouse
+            event.accept()
+        else:
+            event.ignore()
 
     def getCameraToViewportRay(self):
         relMousePos = self.ogreRenderWindow.mapFromGlobal(QCursor.pos())



From fusion2 at mail.berlios.de  Fri Oct 31 11:46:06 2008
From: fusion2 at mail.berlios.de (fusion2 at mail.berlios.de)
Date: Fri, 31 Oct 2008 11:46:06 +0100
Subject: [Dsa-hl-svn] r4569 - rl/trunk/editors/Lockenwickler
Message-ID: <200810311046.m9VAk6Vo004101@sheep.berlios.de>

Author: fusion2
Date: 2008-10-31 11:46:04 +0100 (Fri, 31 Oct 2008)
New Revision: 4569

Modified:
   rl/trunk/editors/Lockenwickler/Lockenwickler.e4p
Log:
- missed a file in last commit


Modified: rl/trunk/editors/Lockenwickler/Lockenwickler.e4p
===================================================================
--- rl/trunk/editors/Lockenwickler/Lockenwickler.e4p	2008-10-31 10:45:24 UTC (rev 4568)
+++ rl/trunk/editors/Lockenwickler/Lockenwickler.e4p	2008-10-31 10:46:04 UTC (rev 4569)
@@ -1,7 +1,7 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <!DOCTYPE Project SYSTEM "Project-4.5.dtd">
 <!-- eric4 project file for project Lockenwickler -->
-<!-- Saved: 2008-10-27, 21:11:54 -->
+<!-- Saved: 2008-10-31, 11:20:58 -->
 <!-- Copyright (C) 2008 Stefan Stammberger, sstammberger at web.de -->
 <Project version="4.5">
   <ProgLanguage mixed="0">Python</ProgLanguage>
@@ -23,13 +23,6 @@
     <Source>src/PythonOgreConfig.py</Source>
     <Source>src/ui_ConsoleWindow.py</Source>
     <Source>src/ui_pref_dialog.py</Source>
-    <Source>ui files/batch_convert_ui.py</Source>
-    <Source>ui files/ui_ConsoleWindow.py</Source>
-    <Source>ui files/ui_FourPanelView.py</Source>
-    <Source>ui files/ui_lw.py</Source>
-    <Source>ui files/ui_model_prev.py</Source>
-    <Source>ui files/ui_obj_prop.py</Source>
-    <Source>ui files/ui_pref_dialog.py</Source>
     <Source>src/SceneExplorer.py</Source>
     <Source>src/Property.py</Source>
     <Source>src/ViewportGrid.py</Source>
@@ -40,22 +33,8 @@
     <Source>src/GameObjectClassView.py</Source>
     <Source>src/MyRaySceneQueryListener.py</Source>
     <Source>src/GOStringEditor.py</Source>
-    <Source>ui files/Ui_console_window.py</Source>
-    <Source>ui files/Ui_FourPanelView.py</Source>
-    <Source>ui files/Ui_lockewickler.py</Source>
-    <Source>ui files/Ui_model_preview.py</Source>
-    <Source>ui files/Ui_object_property.py</Source>
-    <Source>ui files/Ui_preferences_dialog.py</Source>
-    <Source>ui files/Ui_GOPropertyEditorDialogINT.py</Source>
-    <Source>ui files/Ui_GOPropertyEditorDialogSTRING.py</Source>
   </Sources>
   <Forms>
-    <Form>ui files/console_window.ui</Form>
-    <Form>ui files/FourPanelView.ui</Form>
-    <Form>ui files/lockewickler.ui</Form>
-    <Form>ui files/model_preview.ui</Form>
-    <Form>ui files/object_property.ui</Form>
-    <Form>ui files/preferences_dialog.ui</Form>
     <Form>ui files/GOPropertyEditorDialogINT.ui</Form>
     <Form>ui files/GOPropertyEditorDialogSTRING.ui</Form>
   </Forms>



From fusion2 at mail.berlios.de  Fri Oct 31 17:37:20 2008
From: fusion2 at mail.berlios.de (fusion2 at mail.berlios.de)
Date: Fri, 31 Oct 2008 17:37:20 +0100
Subject: [Dsa-hl-svn] r4570 - rl/trunk/editors/Lockenwickler/src
Message-ID: <200810311637.m9VGbK6O028010@sheep.berlios.de>

Author: fusion2
Date: 2008-10-31 17:37:06 +0100 (Fri, 31 Oct 2008)
New Revision: 4570

Modified:
   rl/trunk/editors/Lockenwickler/src/ConsoleWindow.py
   rl/trunk/editors/Lockenwickler/src/GameObjectClass.py
   rl/trunk/editors/Lockenwickler/src/GameObjectClassManager.py
   rl/trunk/editors/Lockenwickler/src/Lockenwickler.py
   rl/trunk/editors/Lockenwickler/src/ModuleManager.py
   rl/trunk/editors/Lockenwickler/src/PreferencesDialog.py
Log:
- more work on placing game objects

Modified: rl/trunk/editors/Lockenwickler/src/ConsoleWindow.py
===================================================================
--- rl/trunk/editors/Lockenwickler/src/ConsoleWindow.py	2008-10-31 10:46:04 UTC (rev 4569)
+++ rl/trunk/editors/Lockenwickler/src/ConsoleWindow.py	2008-10-31 16:37:06 UTC (rev 4570)
@@ -1,74 +1,74 @@
-#################################################
- # Copyright (C) 2008  Stefan Stammberger
- #
- # This library is free software; you can redistribute it and/or
- # modify it under the terms of the GNU Lesser General Public
- # License as published by the Free Software Foundation; either
- # version 2.1 of the License, or (at your option) any later version.
- #
- # This library is distributed in the hope that it will be useful,
- # but WITHOUT ANY WARRANTY; without even the implied warranty of
- # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
- # Lesser General Public License for more details.
- #
- # You should have received a copy of the GNU Lesser General Public
- # License along with this library; if not, write to the Free Software
- # Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
- #################################################
-
-
-import sys
-from PyQt4.QtCore import *
-from PyQt4.QtGui import *
-
-from ui_ConsoleWindow import *
-import ogre.renderer.OGRE as og
-
-
-
-class LockenLog(og.LogListener):
-    def __init__(self, logFunction):
-        og.LogListener.__init__(self)
-        self.logFunction = logFunction
-
-    def messageLogged(self, message, level, debug, logName):
-        self.logFunction(str(message))
-
-class ConsoleWindow(QtGui.QDialog):
-    def __init__(self, filterLog, parent=None):
-        QtGui.QDialog.__init__(self, parent)
-        self.filterLog = filterLog
-
-        self.consoleWindow = Ui_ConsoleWindow()
-        self.consoleWindow.setupUi(self)
-        self.consoleWindow.textEdit.setReadOnly(True)
-        self.lockenLog = LockenLog(self.write)
-
-        sys.stdout = self
-        sys.stderr = self
-
-        clearAction= QAction("Clear Window",  self)
-        self.consoleWindow.textEdit.addAction(clearAction)
-        self.consoleWindow.textEdit.setContextMenuPolicy(Qt.ActionsContextMenu)
-        clearAction.setShortcut("Ctrl + R")
-        self.connect(clearAction, SIGNAL("triggered()"), self.consoleWindow.textEdit.clear)
-
-
-    def write(self, text):
-        if self.filterLog:
-            if text.isspace():
-                return
-            elif text.startswith("Error"):
-                self.consoleWindow.textEdit.append(text)
-                return
-            elif text.startswith("OGRE EXCEPTION"):
-                self.consoleWindow.textEdit.append(text)
-                return
-            elif text.startswith("dbg:"):
-                self.consoleWindow.textEdit.append(text)
-                return
-        else:
-            self.consoleWindow.textEdit.append(text)
-
-    def clear(self):
-        self.consoleWindow.textEdit.clear()
+#################################################
+ # Copyright (C) 2008  Stefan Stammberger
+ #
+ # This library is free software; you can redistribute it and/or
+ # modify it under the terms of the GNU Lesser General Public
+ # License as published by the Free Software Foundation; either
+ # version 2.1 of the License, or (at your option) any later version.
+ #
+ # This library is distributed in the hope that it will be useful,
+ # but WITHOUT ANY WARRANTY; without even the implied warranty of
+ # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ # Lesser General Public License for more details.
+ #
+ # You should have received a copy of the GNU Lesser General Public
+ # License along with this library; if not, write to the Free Software
+ # Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ #################################################
+
+
+import sys
+from PyQt4.QtCore import *
+from PyQt4.QtGui import *
+
+from ui_ConsoleWindow import *
+import ogre.renderer.OGRE as og
+
+
+
+class LockenLog(og.LogListener):
+    def __init__(self, logFunction):
+        og.LogListener.__init__(self)
+        self.logFunction = logFunction
+
+    def messageLogged(self, message, level, debug, logName):
+        self.logFunction(str(message))
+
+class ConsoleWindow(QtGui.QDialog):
+    def __init__(self, filterLog, parent=None):
+        QtGui.QDialog.__init__(self, parent)
+        self.filterLog = filterLog
+
+        self.consoleWindow = Ui_ConsoleWindow()
+        self.consoleWindow.setupUi(self)
+        self.consoleWindow.textEdit.setReadOnly(True)
+        self.lockenLog = LockenLog(self.write)
+
+        sys.stdout = self
+        sys.stderr = self
+
+        clearAction= QAction("Clear Window",  self)
+        self.consoleWindow.textEdit.addAction(clearAction)
+        self.consoleWindow.textEdit.setContextMenuPolicy(Qt.ActionsContextMenu)
+        clearAction.setShortcut("Ctrl + R")
+        self.connect(clearAction, SIGNAL("triggered()"), self.consoleWindow.textEdit.clear)
+
+
+    def write(self, text):
+        if self.filterLog:
+            if text.isspace():
+                return
+            elif text.startswith("Error"):
+                self.consoleWindow.textEdit.append(text)
+                return
+            elif text.startswith("OGRE EXCEPTION"):
+                self.consoleWindow.textEdit.append(text)
+                return
+            elif text.startswith("dbg:"):
+                self.consoleWindow.textEdit.append(text)
+                return
+        else:
+            self.consoleWindow.textEdit.append(text)
+
+    def clear(self):
+        self.consoleWindow.textEdit.clear()

Modified: rl/trunk/editors/Lockenwickler/src/GameObjectClass.py
===================================================================
--- rl/trunk/editors/Lockenwickler/src/GameObjectClass.py	2008-10-31 10:46:04 UTC (rev 4569)
+++ rl/trunk/editors/Lockenwickler/src/GameObjectClass.py	2008-10-31 16:37:06 UTC (rev 4570)
@@ -1,176 +1,176 @@
-#################################################
- # Copyright (C) 2008  Stefan Stammberger
- #
- # This library is free software; you can redistribute it and/or
- # modify it under the terms of the GNU Lesser General Public
- # License as published by the Free Software Foundation; either
- # version 2.1 of the License, or (at your option) any later version.
- #
- # This library is distributed in the hope that it will be useful,
- # but WITHOUT ANY WARRANTY; without even the implied warranty of
- # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
- # Lesser General Public License for more details.
- #
- # You should have received a copy of the GNU Lesser General Public
- # License along with this library; if not, write to the Free Software
- # Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
- #################################################
-
-from elementtree.ElementTree import *
-
-from PyQt4.QtCore import *
-from PyQt4.QtGui import *
-
-from GOStringEditor import *
-
-class GOCStringProperty():
-    def __init__(self, name, data):
-        self.name = name
-        self.data = data
-
-    def getType(self):
-        return "STRING"
-
-    def openEditor(self, row, parent = None):
-        dlg = GOStringEditor(parent)
-        dlg.nameEdit.setText(self.name)
-        dlg.dataEdit.setText(self.data)
-        result = dlg.exec_()
-        if result:
-            self.name = dlg.nameEdit.text()
-            self.data = dlg.dataEdit.toPlainText()
-
-        return result
-
-class GOCRealProperty():
-    def __init__(self, name, data):
-        self.name = name
-        self.data = data
-
-    def getType(self):
-        return "REAL"
-
-class GOCBoolProperty():
-    def __init__(self, name, data):
-        self.name = name
-        self.data = data
-
-    def getType(self):
-        return "BOOL"
-
-class GOCIntProperty():
-    def __init__(self, name, data):
-        self.name = name
-        self.data = data
-
-    def getType(self):
-        return "INT"
-
-class GOCIntPairProperty():
-    def __init__(self, name, data):
-        self.name = name
-        self.data = data
-
-    def getType(self):
-        return "INTPAIR"
-
-class GOCIntTripleProperty():
-    def __init__(self, name, data):
-        self.name = name
-        self.data = data
-
-    def getType(self):
-        return "INTTRIPPLE"
-
-class GOCMapProperty():
-    def __init__(self, name):
-        self.name = name
-        self.childProperties = []
-
-    def getType(self):
-        return "MAP"
-
-class GameObjectRepresentation():
-    def __init__(self, inWorldId, gameObjectClass, node, meshFile = None):
-        self.inWorldId = inWorldId
-        self.goc = gameObjectClass
-        self.node = node
-        self.meshFile = meshFile
-
-    def setPosition(self, pos):
-        self.name.setPosition(pos)
-
-
-class GameObjectClass():
-    def __init__(self,  parentElement):
-        self.classid = parentElement.get("classid")
-        self.baseclass = parentElement.get("baseclass")
-
-        self.meshFile = None
-
-        self.properties = []
-
-        for property in parentElement:#.getiterator("property"):
-            if property.get("type") == "ARRAY":
-                pass
-            elif property.get("type") == "MAP":
-                self.properties.append(self.createPropertyMap(property))
-            else:
-                self.properties.append(self.createProperty(property))
-
-    def getType(self):
-        return "GAME_OBJECT"
-
-    def createPropertyMap(self, property):
-        propMap = GOCMapProperty(property.get("name"))
-        for subProperty in property:
-            if subProperty.get("type") == "MAP":
-                propMap.childProperties.append(self.createPropertyMap(property))
-            else:
-                for subProperty1 in property:
-                    propMap.childProperties.append(self.createProperty(subProperty1))
-
-        return propMap
-
-    def getMeshFileName(self):
-        if self.meshFile is None:
-            for prop in self.properties:
-                if prop.getType() == "STRING":
-                    if prop.name == "meshfile":
-                        self.meshFile = prop.data
-                        return self.meshFile
-            return None
-        else:
-            return self.meshFile
-
-
-    def createProperty(self, property):
-        if property.get("type") == "STRING":
-            name = property.get("name")
-            data = property.get("data")
-            return GOCStringProperty(name, data)
-        elif property.get("type") == "REAL":
-            name = property.get("name")
-            data = property.get("data")
-            return GOCRealProperty(name, data)
-        elif property.get("type") == "BOOL":
-            name = property.get("name")
-            data = property.get("data")
-            return GOCBoolProperty(name, data)
-        elif property.get("type") == "INT":
-            name = property.get("name")
-            data = property.get("data")
-            return GOCIntProperty(name, data)
-        elif property.get("type") == "INTPAIR":
-            name = property.get("name")
-            data = property.get("data")
-            return GOCIntPairProperty(name, data)
-        elif property.get("type") == "INTTRIPLE":
-            name = property.get("name")
-            data = property.get("data")
-            return GOCIntTripleProperty(name, data)
-        else:
-            print property.get("type")
-
-
-
+#################################################
+ # Copyright (C) 2008  Stefan Stammberger
+ #
+ # This library is free software; you can redistribute it and/or
+ # modify it under the terms of the GNU Lesser General Public
+ # License as published by the Free Software Foundation; either
+ # version 2.1 of the License, or (at your option) any later version.
+ #
+ # This library is distributed in the hope that it will be useful,
+ # but WITHOUT ANY WARRANTY; without even the implied warranty of
+ # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ # Lesser General Public License for more details.
+ #
+ # You should have received a copy of the GNU Lesser General Public
+ # License along with this library; if not, write to the Free Software
+ # Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ #################################################
+
+from elementtree.ElementTree import *
+
+from PyQt4.QtCore import *
+from PyQt4.QtGui import *
+
+from GOStringEditor import *
+
+class GOCStringProperty():
+    def __init__(self, name, data):
+        self.name = name
+        self.data = data
+
+    def getType(self):
+        return "STRING"
+
+    def openEditor(self, row, parent = None):
+        dlg = GOStringEditor(parent)
+        dlg.nameEdit.setText(self.name)
+        dlg.dataEdit.setText(self.data)
+        result = dlg.exec_()
+        if result:
+            self.name = dlg.nameEdit.text()
+            self.data = dlg.dataEdit.toPlainText()
+
+        return result
+
+class GOCRealProperty():
+    def __init__(self, name, data):
+        self.name = name
+        self.data = data
+
+    def getType(self):
+        return "REAL"
+
+class GOCBoolProperty():
+    def __init__(self, name, data):
+        self.name = name
+        self.data = data
+
+    def getType(self):
+        return "BOOL"
+
+class GOCIntProperty():
+    def __init__(self, name, data):
+        self.name = name
+        self.data = data
+
+    def getType(self):
+        return "INT"
+
+class GOCIntPairProperty():
+    def __init__(self, name, data):
+        self.name = name
+        self.data = data
+
+    def getType(self):
+        return "INTPAIR"
+
+class GOCIntTripleProperty():
+    def __init__(self, name, data):
+        self.name = name
+        self.data = data
+
+    def getType(self):
+        return "INTTRIPPLE"
+
+class GOCMapProperty():
+    def __init__(self, name):
+        self.name = name
+        self.childProperties = []
+
+    def getType(self):
+        return "MAP"
+
+class GameObjectRepresentation():
+    def __init__(self, inWorldId, gameObjectClass, node, meshFile = None):
+        self.inWorldId = inWorldId
+        self.goc = gameObjectClass
+        self.node = node
+        self.meshFile = meshFile
+
+    def setPosition(self, pos):
+        self.node.setPosition(pos)
+
+
+class GameObjectClass():
+    def __init__(self,  parentElement):
+        self.classid = parentElement.get("classid")
+        self.baseclass = parentElement.get("baseclass")
+
+        self.meshFile = None
+
+        self.properties = []
+
+        for property in parentElement:#.getiterator("property"):
+            if property.get("type") == "ARRAY":
+                pass
+            elif property.get("type") == "MAP":
+                self.properties.append(self.createPropertyMap(property))
+            else:
+                self.properties.append(self.createProperty(property))
+
+    def getType(self):
+        return "GAME_OBJECT"
+
+    def createPropertyMap(self, property):
+        propMap = GOCMapProperty(property.get("name"))
+        for subProperty in property:
+            if subProperty.get("type") == "MAP":
+                propMap.childProperties.append(self.createPropertyMap(property))
+            else:
+                for subProperty1 in property:
+                    propMap.childProperties.append(self.createProperty(subProperty1))
+
+        return propMap
+
+    def getMeshFileName(self):
+        if self.meshFile is None:
+            for prop in self.properties:
+                if prop.getType() == "STRING":
+                    if prop.name == "meshfile":
+                        self.meshFile = prop.data
+                        return self.meshFile
+            return None
+        else:
+            return self.meshFile
+
+
+    def createProperty(self, property):
+        if property.get("type") == "STRING":
+            name = property.get("name")
+            data = property.get("data")
+            return GOCStringProperty(name, data)
+        elif property.get("type") == "REAL":
+            name = property.get("name")
+            data = property.get("data")
+            return GOCRealProperty(name, data)
+        elif property.get("type") == "BOOL":
+            name = property.get("name")
+            data = property.get("data")
+            return GOCBoolProperty(name, data)
+        elif property.get("type") == "INT":
+            name = property.get("name")
+            data = property.get("data")
+            return GOCIntProperty(name, data)
+        elif property.get("type") == "INTPAIR":
+            name = property.get("name")
+            data = property.get("data")
+            return GOCIntPairProperty(name, data)
+        elif property.get("type") == "INTTRIPLE":
+            name = property.get("name")
+            data = property.get("data")
+            return GOCIntTripleProperty(name, data)
+        else:
+            print property.get("type")
+
+
+

Modified: rl/trunk/editors/Lockenwickler/src/GameObjectClassManager.py
===================================================================
--- rl/trunk/editors/Lockenwickler/src/GameObjectClassManager.py	2008-10-31 10:46:04 UTC (rev 4569)
+++ rl/trunk/editors/Lockenwickler/src/GameObjectClassManager.py	2008-10-31 16:37:06 UTC (rev 4570)
@@ -1,52 +1,52 @@
-#################################################
- # Copyright (C) 2008  Stefan Stammberger
- #
- # This library is free software; you can redistribute it and/or
- # modify it under the terms of the GNU Lesser General Public
- # License as published by the Free Software Foundation; either
- # version 2.1 of the License, or (at your option) any later version.
- #
- # This library is distributed in the hope that it will be useful,
- # but WITHOUT ANY WARRANTY; without even the implied warranty of
- # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
- # Lesser General Public License for more details.
- #
- # You should have received a copy of the GNU Lesser General Public
- # License along with this library; if not, write to the Free Software
- # Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
- #################################################
-
-from elementtree.ElementTree import parse
-
-from GameObjectClass import *
-
-class GameObjectClassManager():
-    def __init__(self):
-        self.fileDict = {}
-        self.callback = None
-
-    def parseGOFFiles(self, filePaths):
-        for filePath in filePaths:
-            tree = parse(filePath)
-            gocList = []
-            for parent in tree.getiterator("gameobjectclass"): # return all allements with the "gameobjectclass" tag
-                go = GameObjectClass(parent)
-                gocList.append(go)
-
-            self.fileDict[filePath] = gocList
-
-        if self.callback is not None:
-            self.callback(self.fileDict)
-
-    def getGameObjectWithClassId(self, id):
-        for key in self.fileDict:
-            for go in self.fileDict[key]:
-                if go.classid == id:
-                    return go
-
-        return None
-
-        # whenever a gameobject changes outside of the view, the view has to update itself wth the new values
-    def setGameObjectsViewUpdateCallback(self, callback):
-        self.callback = callback
-
+#################################################
+ # Copyright (C) 2008  Stefan Stammberger
+ #
+ # This library is free software; you can redistribute it and/or
+ # modify it under the terms of the GNU Lesser General Public
+ # License as published by the Free Software Foundation; either
+ # version 2.1 of the License, or (at your option) any later version.
+ #
+ # This library is distributed in the hope that it will be useful,
+ # but WITHOUT ANY WARRANTY; without even the implied warranty of
+ # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ # Lesser General Public License for more details.
+ #
+ # You should have received a copy of the GNU Lesser General Public
+ # License along with this library; if not, write to the Free Software
+ # Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ #################################################
+
+from elementtree.ElementTree import parse
+
+from GameObjectClass import *
+
+class GameObjectClassManager():
+    def __init__(self):
+        self.fileDict = {}
+        self.callback = None
+
+    def parseGOFFiles(self, filePaths):
+        for filePath in filePaths:
+            tree = parse(filePath)
+            gocList = []
+            for parent in tree.getiterator("gameobjectclass"): # return all allements with the "gameobjectclass" tag
+                go = GameObjectClass(parent)
+                gocList.append(go)
+
+            self.fileDict[filePath] = gocList
+
+        if self.callback is not None:
+            self.callback(self.fileDict)
+
+    def getGameObjectWithClassId(self, id):
+        for key in self.fileDict:
+            for go in self.fileDict[key]:
+                if go.classid == id:
+                    return go
+
+        return None
+
+        # whenever a gameobject changes outside of the view, the view has to update itself wth the new values
+    def setGameObjectsViewUpdateCallback(self, callback):
+        self.callback = callback
+

Modified: rl/trunk/editors/Lockenwickler/src/Lockenwickler.py
===================================================================
--- rl/trunk/editors/Lockenwickler/src/Lockenwickler.py	2008-10-31 10:46:04 UTC (rev 4569)
+++ rl/trunk/editors/Lockenwickler/src/Lockenwickler.py	2008-10-31 16:37:06 UTC (rev 4570)
@@ -1,499 +1,499 @@
-#################################################
- # Copyright (C) 2008  Stefan Stammberger
- #
- # This library is free software; you can redistribute it and/or
- # modify it under the terms of the GNU Lesser General Public
- # License as published by the Free Software Foundation; either
- # version 2.1 of the License, or (at your option) any later version.
- #
- # This library is distributed in the hope that it will be useful,
- # but WITHOUT ANY WARRANTY; without even the implied warranty of
- # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
- # Lesser General Public License for more details.
- #
- # You should have received a copy of the GNU Lesser General Public
- # License along with this library; if not, write to the Free Software
- # Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
- #################################################
-
-
-import os
-import sys
-import platform
-
-#sys.path.insert(0,'..')
-#import PythonOgreConfig
-
-from random import randint
-from os.path import isfile
-
-from PyQt4 import QtGui, QtCore
-from PreferencesDialog import *
-from ObjectPropertyWin import *
-from ModelSelectionDialog import *
-from GameObjectClassView import *
-from ConsoleWindow import *
-from ModuleManager import *
-from SceneExplorer import *
-
-import OgreMainWindow
-import ogre.renderer.OGRE as og
-
-class Lockenwickler(QtGui.QMainWindow):
-    def __init__(self, parent=None):
-        QtGui.QWidget.__init__(self, parent)
-
-        pixmap = QPixmap("media/icons/lockenwickler_provisorium.png")
-        splash = QSplashScreen(pixmap, Qt.WindowStaysOnTopHint)
-        splash.setMask(pixmap.mask())
-        splash.showMessage("Starting...")
-        splash.show()
-
-        self.setupUi()
-
-        self.consoleWindow = ConsoleWindow(False,  self)
-
-        self.setupOgre()
-
-        self.prefDialog = PreferencesDialog(self.loadModule, self)
-        self.objectPropertyWin = ObjectPropertyWin(self)
-        self.sceneExplorerWin = SceneExplorer(self)
-        self.modelSelectionDialog = ModelSelectionDialog(self.ogreRoot, self)
-        self.gameObjectClassView = GameObjectClassView(self.moduleManager.gocManager)
-
-        self.createDockWindows()
-
-        self.mainTimer = QtCore.QTimer(self)
-        self.mainTimer.connect(self.mainTimer, QtCore.SIGNAL("timeout()"), self.update)
-        self.mainTimer.start(5)
-
-        settings = QtCore.QSettings()
-        self.restoreGeometry(settings.value("MainWindow/Geometry").toByteArray())
-        self.restoreState(settings.value("MainWindow/DockWindows").toByteArray())
-
-        self.setWindowIcon(QIcon("media/icons/lockenwickler_provisorium_small.png"))
-        self.setWindowTitle("Rastullahs Lockenwickler")
-#        # Import Psyco if available
-#        try:
-#            import psyco
-#            psyco.full()
-#            #psyco.log()
-#            #psyco.profile()
-#        except ImportError:
-#            pass
-
-        #QtGui.QApplication.setKeyboardInputInterval(5000)
-
-        splash.finish(self)
-
-    def createAction(self, text, slot=None, shortcut=None, icon=None, tip=None, checkable=False, signal="triggered()"):
-        action = QtGui.QAction(text, self)
-        if icon is not None:
-            action.setIcon(QtGui.QIcon("media/icons/%s" % icon))
-        if shortcut is not None:
-            action.setShortcut(shortcut)
-        if tip is not None:
-            action.setToolTip(tip)
-            action.setStatusTip(tip)
-        if slot is not None:
-            self.connect(action, QtCore.SIGNAL(signal), slot)
-
-        action.setCheckable(checkable)
-
-        return action
-
-    def addActions(self, target, actions):
-        for act in actions:
-            if act is None:
-               target.addSeparator()
-            else:
-                target.addAction(act)
-
-    def setupUi(self):
-        self.setObjectName("MainWindow")
-
-        self.centralwidget = QtGui.QWidget(self)
-        self.centralwidget.setObjectName("centralwidget")
-
-        self.hboxlayout = QtGui.QHBoxLayout(self.centralwidget)
-        self.hboxlayout.setObjectName("hboxlayout")
-
-        self.gridlayout = QtGui.QGridLayout()
-        self.gridlayout.setObjectName("gridlayout")
-
-        self.menubar = QtGui.QMenuBar(self)
-        self.menubar.setObjectName("menubar")
-
-        self.menuFile = QtGui.QMenu(self.menubar)
-        self.menuFile.setObjectName("menuFile")
-
-        self.menuEdit = QtGui.QMenu(self.menubar)
-        self.menuEdit.setObjectName("menuEdit")
-
-        self.menuView = QtGui.QMenu(self.menubar)
-        self.menuView.setObjectName("menuView")
-        self.setMenuBar(self.menubar)
-
-
-        self.statusbar = QtGui.QStatusBar(self)
-        self.statusbar.setObjectName("statusbar")
-        self.setStatusBar(self.statusbar)
-
-#####################################
-        self.actionNeu =self.createAction("&New",  self.actionNewSlot,  QKeySequence.New,  "filenew.png",  "New")
-        self.actionNeu.setObjectName("actionNeu")
-
-        self.actionClose = self.createAction("Quit",  self.actionQuitSlot,  "Alt + Q",  "exit.png",  "Quit")
-        self.actionClose.setObjectName("actionQuit")
-#####################################
-
-
-#####################################
-        self.actionDelete = self.createAction("Delete",  self.actionDeleteSlot,  QKeySequence.Delete,  "editdelete.png",  "Delete")
-        self.actionDelete.setObjectName("actionDelete")
-
-        self.actionCopy = self.createAction("Copy",  self.actionCopySlot,  QKeySequence.Copy,  "editcopy.png",  "Copy")
-        self.actionCopy.setObjectName("actionCopy")
-
-        self.actionCut = self.createAction("Cut",  self.actionCutSlot,  QKeySequence.Cut,  "editcut.png",  "Cut")
-        self.actionCut.setObjectName("actionCut")
-
-        self.actionPaste = self.createAction("Paste",  self.actionPasteSlot,  QKeySequence.Paste,  "editpaste.png",  "Paste")
-        self.actionPaste.setObjectName("actionPaste")
-
-        self.actionMove = self.createAction("&Move",  self.actionMoveSlot,  "g",  "move.png",  "Move selected object")
-        self.actionMove.setObjectName("actionMove")
-
-        self.actionRotate = self.createAction("&Rotate",  self.actionRotateSlot,  "r",  "rotate.png",  "Rotate selected object")
-        self.actionRotate.setObjectName("actionRotate")
-
-        self.actionScale = self.createAction("&Scale",  self.actionScaleSlot,  "x",  "resizecol.png",  "Scale selected object")
-        self.actionRotate.setObjectName("actionRotate")
-
-
-#####################################
-#####################################
-        self.actionSceneExplorer = self.createAction("&Scene Exlporer",  self.toggleSceneExplorer,  "Alt + E",  "view_tree.png",  "Scene Explorer",  False)
-        self.actionSceneExplorer.setObjectName("actionSceneExplorer")
-
-        self.actionPreferences = self.createAction("&Preferences",  self.togglePreferencesWindow,  "Alt + P",  "configure.png",  "Lockenwickler Preferences",  False)
-        self.actionPreferences.setObjectName("actionPreferences")
-
-        self.actionProperty_Window = self.createAction("Pr&operty Window",  self.togglePropertyWindow,  "Alt + P",  "unsortedlist1.png",  "Property Window")
-        self.actionProperty_Window.setObjectName("actionProperty_Window")
-
-        self.actionObject_Selection = self.createAction("&Model Preview Window",  self.toggleModelPreviewWindow,  "Alt + O",  "tux.png",  "Model Preview")
-        self.actionObject_Selection.setObjectName("actionObject_Selection")
-
-        self.actionGameObjectClass_Selection = self.createAction("&Game Object Class Preview Window",  self.toggleGameObjectViewWindow,  "Alt + G",  "multirow.png",  "GameObjectClass Preview")
-        self.actionGameObjectClass_Selection.setObjectName("actionObject_Selection")
-
-        self.actionConsole_Window = self.createAction("&Console Window",  self.toggleConsoleWindow,  "Alt + C",  "console.png",  "Console Window")
-        self.actionConsole_Window.setObjectName("actionConsole_Window")
-
-#####################################
-#####################################
-
-
-        self.menuFile.addAction(self.actionNeu)
-        self.menuFile.addAction(self.actionClose)
-
-        self.menuEdit.addAction(self.actionMove)
-        self.menuEdit.addAction(self.actionRotate)
-        self.menuEdit.addAction(self.actionScale)
-        self.menuEdit.addSeparator()
-        self.menuEdit.addAction(self.actionDelete)
-        self.menuEdit.addAction(self.actionCopy)
-        self.menuEdit.addAction(self.actionCut)
-        self.menuEdit.addAction(self.actionPaste)
-
-        self.menuView.addAction(self.actionSceneExplorer)
-        self.menuView.addAction(self.actionPreferences)
-        self.menuView.addAction(self.actionProperty_Window)
-        self.menuView.addAction(self.actionObject_Selection)
-        self.menuView.addAction(self.actionGameObjectClass_Selection)
-        self.menuView.addAction(self.actionConsole_Window)
-        self.menubar.addAction(self.menuFile.menuAction())
-        self.menubar.addAction(self.menuEdit.menuAction())
-        self.menubar.addAction(self.menuView.menuAction())
-
-        self.retranslateUi()
-        QtCore.QMetaObject.connectSlotsByName(self)
-
-    def retranslateUi(self):
-        self.setWindowTitle(QtGui.QApplication.translate("MainWindow", "MainWindow", None, QtGui.QApplication.UnicodeUTF8))
-        self.menuFile.setTitle(QtGui.QApplication.translate("MainWindow", "File", None, QtGui.QApplication.UnicodeUTF8))
-        self.menuEdit.setTitle(QtGui.QApplication.translate("MainWindow", "Edit", None, QtGui.QApplication.UnicodeUTF8))
-        self.menuView.setTitle(QtGui.QApplication.translate("MainWindow", "View", None, QtGui.QApplication.UnicodeUTF8))
-        self.actionNeu.setText(QtGui.QApplication.translate("MainWindow", "New", None, QtGui.QApplication.UnicodeUTF8))
-        self.actionMove.setText(QtGui.QApplication.translate("MainWindow", "Move", None, QtGui.QApplication.UnicodeUTF8))
-        self.actionRotate.setText(QtGui.QApplication.translate("MainWindow", "Rotate", None, QtGui.QApplication.UnicodeUTF8))
-        self.actionSceneExplorer.setText(QtGui.QApplication.translate("MainWindow", "Scene Explorer", None, QtGui.QApplication.UnicodeUTF8))
-        self.actionPreferences.setText(QtGui.QApplication.translate("MainWindow", "Preferences", None, QtGui.QApplication.UnicodeUTF8))
-        self.actionProperty_Window.setText(QtGui.QApplication.translate("MainWindow", "Property Window", None, QtGui.QApplication.UnicodeUTF8))
-        self.actionObject_Selection.setText(QtGui.QApplication.translate("MainWindow", "Object Selection", None, QtGui.QApplication.UnicodeUTF8))
-        self.actionClose.setText(QtGui.QApplication.translate("MainWindow", "Quit", None, QtGui.QApplication.UnicodeUTF8))
-        self.actionConsole_Window.setText(QtGui.QApplication.translate("MainWindow", "Console Window", None, QtGui.QApplication.UnicodeUTF8))
-
-    def setupOgre(self, pluginCfgPath="./Plugins.cfg", ogreCfgPath="./ogre.cfg", logPath="./ogre.log"):
-        if platform.system() == "Windows":
-            pluginCfgPath="./Plugins-windows.cfg"
-        else:
-            pluginCfgPath="./Plugins-linux.cfg"
-
-        root = og.Root(pluginCfgPath, ogreCfgPath, logPath)
-        self.ogreRoot = root
-
-        if  not self.ogreRoot.restoreConfig() and not self.ogreRoot.showConfigDialog():
-            sys.exit('Quit from Config Dialog')
-
-        root.initialise(False)
-
-        self.OgreMainWinSceneMgr = self.ogreRoot.createSceneManager(og.ST_GENERIC, "OgreMainWinSceneMgr")
-        self.OgreMainWinSceneMgr.ambientLight = og.ColourValue(4, 4, 4)
-
-        self.moduleName = ""
-        self.moduleManager = ModuleManager(self.ogreRoot,  self.OgreMainWinSceneMgr)
-
-        self.ogreRenderWindow = OgreMainWindow.OgreMainWindow(self.moduleManager,  root,  self.OgreMainWinSceneMgr,  self)
-        self.gridlayout.addWidget(self.ogreRenderWindow,0,0,1,1)
-        self.hboxlayout.addLayout(self.gridlayout)
-        self.setCentralWidget(self.centralwidget)
-
-        og.ResourceGroupManager.getSingleton().addResourceLocation("./media", "FileSystem", "General", False)
-        og.ResourceGroupManager.getSingleton().initialiseAllResourceGroups()
-
-        oglog = og.LogManager.getSingleton().getDefaultLog()
-        oglog.addListener(self.consoleWindow.lockenLog)
-
-    def update(self):
-#        try:
-#            self.OgreMainWinSceneMgr.getSceneNode("saeule_076_node").yaw(0.02)
-#        except Exception,  e:
-#            pass
-
-        self.ogreRoot.renderOneFrame()
-
-    def actionNewSlot(self):
-        print "dbg: new"
-        return
-
-    def actionQuitSlot(self):
-        self.close()
-
-    def actionDeleteSlot(self):
-        self.moduleManager.deleteObjects()
-
-    def actionCopySlot(self):
-        self.moduleManager.copyObjects()
-
-    def actionCutSlot(self):
-        self.moduleManager.cutObjects()
-
-    def actionPasteSlot(self):
-        self.moduleManager.pasteObjects(self.ogreRenderWindow.getCameraToViewportRay())
-
-    def actionMoveSlot(self):
-        self.moduleManager.pivot.setMoveMode()
-
-    def actionRotateSlot(self):
-        self.moduleManager.pivot.setRotateMode()
-
-    def actionScaleSlot(self):
-        self.moduleManager.pivot.setScaleMode()
-
-    def togglePreferencesWindow(self):
-        if self.prefDialog.isHidden():
-            self.prefDialog.show()
-        else:
-            self.prefDialog.hide()
-
-    def toggleModelPreviewWindow(self):
-        if self.modelSelectionDock.isHidden():
-            self.modelSelectionDock.show()
-        else:
-            self.modelSelectionDock.hide()
-
-    def toggleGameObjectViewWindow(self):
-        if self.gameObjectClassViewDock.isHidden():
-            self.gameObjectClassViewDock.show()
-        else:
-            self.gameObjectClassViewDock.hide()
-
-    def toggleSceneExplorer(self):
-        if self.sceneExplorerDock.isHidden():
-            self.sceneExplorerDock.show()
-        else:
-            self.sceneExplorerDock.hide()
-
-    def togglePropertyWindow(self):
-        if self.propertyDock.isHidden():
-            self.propertyDock.show()
-        else:
-            self.propertyDock.hide()
-
-    def toggleConsoleWindow(self):
-        if self.consoleDock.isHidden():
-            self.consoleDock.show()
-        else:
-            self.consoleDock.hide()
-
-    # parses the moduleconfig.rb and searches for all loader.loadmap(" statements in the ruby script
-    # and parses them too
-    def loadModule(self, modulePath, moduleName):
-        if self.moduleName == moduleName:
-            return
-
-        self.moduleName = moduleName
-        self.workingDir = modulePath + moduleName # the module path
-        self.workingDirCommon = modulePath + "common" # the module path of the common module
-
-        import codecs
-        import glob
-
-        modConfig = self.workingDir + "/scripts/moduleconfig.rb"
-        if isfile(modConfig): # is the modconfig existing?
-            f = codecs.open(modConfig, 'r', 'utf-8')
-        else:
-            print ("Error: couldn't find module config")
-            pass
-
-        self.mapFiles = [] # a list in case the module has more than one map file
-        self.gofFiles = [] # gof File list
-        for line in f:
-            lStripped = line.strip() #strip the whitespace away, not needed here
-
-            # get the map file(s)
-            if lStripped.startswith("loader.loadMap("): # all loadMap commands begin with loader.loadMap(
-                spl = lStripped.split('"')
-                for a in spl:
-                    if a.endswith(".xml"):
-                        pathToMapFile = self.workingDir + "/maps/" + a
-                        self.mapFiles.append(pathToMapFile)
-
-        self.setWindowTitle(moduleName)
-
-        self.modelSelectionDialog.scanDirForModels(self.workingDir, moduleName)
-        self.modelSelectionDialog.scanDirForModels(self.workingDirCommon, "common")
-
-        self.setResourcePaths(self.workingDir, moduleName)
-        self.setResourcePaths(self.workingDirCommon, "common")
-        og.ResourceGroupManager.getSingleton().initialiseAllResourceGroups()
-
-        command = (os.path.join(self.workingDir,  "maps") + "/*.xml")
-        for mf in glob.glob(command): # search for all xml files in the maps directory and add them
-            self.mapFiles.append(mf)
-
-        command = (os.path.join(self.workingDir,  "maps") + "/*.scene")
-        for mf in glob.glob(command): # search for all .scene files in the maps directory and add them
-            self.mapFiles.append(mf)
-
-        command = (os.path.join(self.workingDir,  "dsa") + "/*.gof")
-        for gf in glob.glob(command): # search for all .gof files in the dsa directory in the module dir
-            self.gofFiles.append(gf)
-
-        command = (os.path.join(self.workingDirCommon,  "dsa") + "/*.gof")
-        for gf in glob.glob(command): # search for all .gof files in the dsa directory in the common module dir
-            self.gofFiles.append(gf)
-
-        self.moduleManager.load(moduleName,  self.mapFiles,  self.gofFiles)
-
-    def setResourcePaths(self, path, moduleName):
-        for file in os.listdir(path):
-            curFile = path + "/" + file
-
-            if file.startswith('.'): #ignore dot files (hidden)
-                continue
-            if isdir(curFile):
-                og.ResourceGroupManager.getSingleton().addResourceLocation(curFile, "FileSystem", moduleName, False)
-                self.setResourcePaths(curFile, moduleName)
-                continue
-            if isfile(curFile):
-                pass
-
-    def createDockWindows(self):
-        self.propertyDock = QtGui.QDockWidget(self.tr("Properties"), self)
-        self.propertyDock.setObjectName("PropertyDockWindow")
-        self.propertyDock.setAllowedAreas(QtCore.Qt.LeftDockWidgetArea | QtCore.Qt.RightDockWidgetArea)
-        self.propertyDock.setWidget(self.objectPropertyWin)
-        self.addDockWidget(QtCore.Qt.LeftDockWidgetArea, self.propertyDock)
-
-        self.modelSelectionDock = QtGui.QDockWidget(self.tr("Models"), self)
-        self.modelSelectionDock.setObjectName("ModelSelectionDockWindow")
-        self.modelSelectionDock.setAllowedAreas(QtCore.Qt.LeftDockWidgetArea | QtCore.Qt.RightDockWidgetArea)
-        self.modelSelectionDock.setWidget(self.modelSelectionDialog)
-        self.addDockWidget(QtCore.Qt.RightDockWidgetArea, self.modelSelectionDock)
-
-        self.gameObjectClassViewDock = QtGui.QDockWidget(self.tr("GameObjectClasses"), self)
-        self.gameObjectClassViewDock.setObjectName("GameObjectClassView")
-        self.gameObjectClassViewDock.setAllowedAreas(QtCore.Qt.LeftDockWidgetArea | QtCore.Qt.RightDockWidgetArea)
-        self.gameObjectClassViewDock.setWidget(self.gameObjectClassView)
-        self.addDockWidget(QtCore.Qt.RightDockWidgetArea, self.gameObjectClassViewDock)
-
-        self.sceneExplorerDock = QtGui.QDockWidget(self.tr("Scene Explorer"), self)
-        self.sceneExplorerDock.setObjectName("SceneExplorerDockWindow")
-        self.sceneExplorerDock.setAllowedAreas(QtCore.Qt.LeftDockWidgetArea | QtCore.Qt.RightDockWidgetArea)
-        self.sceneExplorerDock.setWidget(self.sceneExplorerWin)
-        self.addDockWidget(QtCore.Qt.LeftDockWidgetArea, self.sceneExplorerDock)
-
-        self.consoleDock = QtGui.QDockWidget(self.tr("Console"), self)
-        self.consoleDock.setObjectName("ConsoleDockWindow")
-        self.consoleDock.setAllowedAreas(QtCore.Qt.BottomDockWidgetArea | QtCore.Qt.TopDockWidgetArea)
-        self.consoleDock.setWidget(self.consoleWindow)
-        self.addDockWidget(QtCore.Qt.BottomDockWidgetArea, self.consoleDock)
-
-        self.fileToolBar = self.addToolBar("File Toolbar")
-        self.fileToolBar.setObjectName("FileToolBar")
-        self.fileToolBar.setAllowedAreas(QtCore.Qt.TopToolBarArea | QtCore.Qt.BottomToolBarArea)
-        self.fileToolBar.addAction(self.actionNeu)
-        self.fileToolBar.addAction(self.actionClose)
-        self.addToolBar(QtCore.Qt.TopToolBarArea, self.fileToolBar)
-
-        self.moveToolBar = self.addToolBar("Transformation Bar")
-        self.moveToolBar.setObjectName("TransformationBar")
-        self.moveToolBar.setAllowedAreas(QtCore.Qt.TopToolBarArea | QtCore.Qt.BottomToolBarArea)
-        self.moveToolBar.addAction(self.actionMove)
-        self.moveToolBar.addAction(self.actionRotate)
-        self.moveToolBar.addAction(self.actionScale)
-        self.addToolBar(QtCore.Qt.TopToolBarArea, self.moveToolBar)
-
-    def keyPressEvent(self,  event):
-        if not event.isAutoRepeat():
-            self.ogreRenderWindow.keyPressEvent(event)
-
-    def keyReleaseEvent(self,  event):
-        if not event.isAutoRepeat():
-            self.ogreRenderWindow.keyReleaseEvent(event)
-        pass
-
-    def connectActionButtons(self):
-        pass
-
-    def saveOnClose(self):
-        reply = QtGui.QMessageBox.question(self,  "Rastullahs Lockenwickler - Unsaved Chages",  "Save unsaved changes?",  QtGui.QMessageBox.Yes|QtGui.QMessageBox.No|QtGui.QMessageBox.Cancel)
-        if reply == QtGui.QMessageBox.Cancel:
-            return False
-        if reply == QtGui.QMessageBox.Yes:
-            print""
-            #TODO: implement save here
-        return True
-
-    def closeEvent(self,  event):
-        if self.saveOnClose():
-            settings = QtCore.QSettings()
-            settings.setValue("MainWindow/Geometry",  QtCore.QVariant(self.saveGeometry()))
-            settings.setValue("MainWIndow/DockWindows",  QtCore.QVariant(self.saveState()))
-        else:
-            event.ignore()
-
-if __name__ == "__main__":
-    app = QtGui.QApplication(sys.argv)
-    app.setOrganizationName("Team Pantheon")
-    app.setOrganizationDomain("rastullahs-lockenpracht.de/team")
-    app.setApplicationName("Lockenwickler")
-
-    form = Lockenwickler()
-    form.show()
-
-    sys.exit(app.exec_())
-
+#################################################
+ # Copyright (C) 2008  Stefan Stammberger
+ #
+ # This library is free software; you can redistribute it and/or
+ # modify it under the terms of the GNU Lesser General Public
+ # License as published by the Free Software Foundation; either
+ # version 2.1 of the License, or (at your option) any later version.
+ #
+ # This library is distributed in the hope that it will be useful,
+ # but WITHOUT ANY WARRANTY; without even the implied warranty of
+ # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ # Lesser General Public License for more details.
+ #
+ # You should have received a copy of the GNU Lesser General Public
+ # License along with this library; if not, write to the Free Software
+ # Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ #################################################
+
+
+import os
+import sys
+import platform
+
+#sys.path.insert(0,'..')
+#import PythonOgreConfig
+
+from random import randint
+from os.path import isfile
+
+from PyQt4 import QtGui, QtCore
+from PreferencesDialog import *
+from ObjectPropertyWin import *
+from ModelSelectionDialog import *
+from GameObjectClassView import *
+from ConsoleWindow import *
+from ModuleManager import *
+from SceneExplorer import *
+
+import OgreMainWindow
+import ogre.renderer.OGRE as og
+
+class Lockenwickler(QtGui.QMainWindow):
+    def __init__(self, parent=None):
+        QtGui.QWidget.__init__(self, parent)
+
+        pixmap = QPixmap("media/icons/lockenwickler_provisorium.png")
+        splash = QSplashScreen(pixmap, Qt.WindowStaysOnTopHint)
+        splash.setMask(pixmap.mask())
+        splash.showMessage("Starting...")
+        splash.show()
+
+        self.setupUi()
+
+        self.consoleWindow = ConsoleWindow(False,  self)
+
+        self.setupOgre()
+
+        self.prefDialog = PreferencesDialog(self.loadModule, self)
+        self.objectPropertyWin = ObjectPropertyWin(self)
+        self.sceneExplorerWin = SceneExplorer(self)
+        self.modelSelectionDialog = ModelSelectionDialog(self.ogreRoot, self)
+        self.gameObjectClassView = GameObjectClassView(self.moduleManager.gocManager)
+
+        self.createDockWindows()
+
+        self.mainTimer = QtCore.QTimer(self)
+        self.mainTimer.connect(self.mainTimer, QtCore.SIGNAL("timeout()"), self.update)
+        self.mainTimer.start(5)
+
+        settings = QtCore.QSettings()
+        self.restoreGeometry(settings.value("MainWindow/Geometry").toByteArray())
+        self.restoreState(settings.value("MainWindow/DockWindows").toByteArray())
+
+        self.setWindowIcon(QIcon("media/icons/lockenwickler_provisorium_small.png"))
+        self.setWindowTitle("Rastullahs Lockenwickler")
+#        # Import Psyco if available
+#        try:
+#            import psyco
+#            psyco.full()
+#            #psyco.log()
+#            #psyco.profile()
+#        except ImportError:
+#            pass
+
+        #QtGui.QApplication.setKeyboardInputInterval(5000)
+
+        splash.finish(self)
+
+    def createAction(self, text, slot=None, shortcut=None, icon=None, tip=None, checkable=False, signal="triggered()"):
+        action = QtGui.QAction(text, self)
+        if icon is not None:
+            action.setIcon(QtGui.QIcon("media/icons/%s" % icon))
+        if shortcut is not None:
+            action.setShortcut(shortcut)
+        if tip is not None:
+            action.setToolTip(tip)
+            action.setStatusTip(tip)
+        if slot is not None:
+            self.connect(action, QtCore.SIGNAL(signal), slot)
+
+        action.setCheckable(checkable)
+
+        return action
+
+    def addActions(self, target, actions):
+        for act in actions:
+            if act is None:
+               target.addSeparator()
+            else:
+                target.addAction(act)
+
+    def setupUi(self):
+        self.setObjectName("MainWindow")
+
+        self.centralwidget = QtGui.QWidget(self)
+        self.centralwidget.setObjectName("centralwidget")
+
+        self.hboxlayout = QtGui.QHBoxLayout(self.centralwidget)
+        self.hboxlayout.setObjectName("hboxlayout")
+
+        self.gridlayout = QtGui.QGridLayout()
+        self.gridlayout.setObjectName("gridlayout")
+
+        self.menubar = QtGui.QMenuBar(self)
+        self.menubar.setObjectName("menubar")
+
+        self.menuFile = QtGui.QMenu(self.menubar)
+        self.menuFile.setObjectName("menuFile")
+
+        self.menuEdit = QtGui.QMenu(self.menubar)
+        self.menuEdit.setObjectName("menuEdit")
+
+        self.menuView = QtGui.QMenu(self.menubar)
+        self.menuView.setObjectName("menuView")
+        self.setMenuBar(self.menubar)
+
+
+        self.statusbar = QtGui.QStatusBar(self)
+        self.statusbar.setObjectName("statusbar")
+        self.setStatusBar(self.statusbar)
+
+#####################################
+        self.actionNeu =self.createAction("&New",  self.actionNewSlot,  QKeySequence.New,  "filenew.png",  "New")
+        self.actionNeu.setObjectName("actionNeu")
+
+        self.actionClose = self.createAction("Quit",  self.actionQuitSlot,  "Alt + Q",  "exit.png",  "Quit")
+        self.actionClose.setObjectName("actionQuit")
+#####################################
+
+
+#####################################
+        self.actionDelete = self.createAction("Delete",  self.actionDeleteSlot,  QKeySequence.Delete,  "editdelete.png",  "Delete")
+        self.actionDelete.setObjectName("actionDelete")
+
+        self.actionCopy = self.createAction("Copy",  self.actionCopySlot,  QKeySequence.Copy,  "editcopy.png",  "Copy")
+        self.actionCopy.setObjectName("actionCopy")
+
+        self.actionCut = self.createAction("Cut",  self.actionCutSlot,  QKeySequence.Cut,  "editcut.png",  "Cut")
+        self.actionCut.setObjectName("actionCut")
+
+        self.actionPaste = self.createAction("Paste",  self.actionPasteSlot,  QKeySequence.Paste,  "editpaste.png",  "Paste")
+        self.actionPaste.setObjectName("actionPaste")
+
+        self.actionMove = self.createAction("&Move",  self.actionMoveSlot,  "g",  "move.png",  "Move selected object")
+        self.actionMove.setObjectName("actionMove")
+
+        self.actionRotate = self.createAction("&Rotate",  self.actionRotateSlot,  "r",  "rotate.png",  "Rotate selected object")
+        self.actionRotate.setObjectName("actionRotate")
+
+        self.actionScale = self.createAction("&Scale",  self.actionScaleSlot,  "x",  "resizecol.png",  "Scale selected object")
+        self.actionRotate.setObjectName("actionRotate")
+
+
+#####################################
+#####################################
+        self.actionSceneExplorer = self.createAction("&Scene Exlporer",  self.toggleSceneExplorer,  "Alt + E",  "view_tree.png",  "Scene Explorer",  False)
+        self.actionSceneExplorer.setObjectName("actionSceneExplorer")
+
+        self.actionPreferences = self.createAction("&Preferences",  self.togglePreferencesWindow,  "Alt + P",  "configure.png",  "Lockenwickler Preferences",  False)
+        self.actionPreferences.setObjectName("actionPreferences")
+
+        self.actionProperty_Window = self.createAction("Pr&operty Window",  self.togglePropertyWindow,  "Alt + P",  "unsortedlist1.png",  "Property Window")
+        self.actionProperty_Window.setObjectName("actionProperty_Window")
+
+        self.actionObject_Selection = self.createAction("&Model Preview Window",  self.toggleModelPreviewWindow,  "Alt + O",  "tux.png",  "Model Preview")
+        self.actionObject_Selection.setObjectName("actionObject_Selection")
+
+        self.actionGameObjectClass_Selection = self.createAction("&Game Object Class Preview Window",  self.toggleGameObjectViewWindow,  "Alt + G",  "multirow.png",  "GameObjectClass Preview")
+        self.actionGameObjectClass_Selection.setObjectName("actionObject_Selection")
+
+        self.actionConsole_Window = self.createAction("&Console Window",  self.toggleConsoleWindow,  "Alt + C",  "console.png",  "Console Window")
+        self.actionConsole_Window.setObjectName("actionConsole_Window")
+
+#####################################
+#####################################
+
+
+        self.menuFile.addAction(self.actionNeu)
+        self.menuFile.addAction(self.actionClose)
+
+        self.menuEdit.addAction(self.actionMove)
+        self.menuEdit.addAction(self.actionRotate)
+        self.menuEdit.addAction(self.actionScale)
+        self.menuEdit.addSeparator()
+        self.menuEdit.addAction(self.actionDelete)
+        self.menuEdit.addAction(self.actionCopy)
+        self.menuEdit.addAction(self.actionCut)
+        self.menuEdit.addAction(self.actionPaste)
+
+        self.menuView.addAction(self.actionSceneExplorer)
+        self.menuView.addAction(self.actionPreferences)
+        self.menuView.addAction(self.actionProperty_Window)
+        self.menuView.addAction(self.actionObject_Selection)
+        self.menuView.addAction(self.actionGameObjectClass_Selection)
+        self.menuView.addAction(self.actionConsole_Window)
+        self.menubar.addAction(self.menuFile.menuAction())
+        self.menubar.addAction(self.menuEdit.menuAction())
+        self.menubar.addAction(self.menuView.menuAction())
+
+        self.retranslateUi()
+        QtCore.QMetaObject.connectSlotsByName(self)
+
+    def retranslateUi(self):
+        self.setWindowTitle(QtGui.QApplication.translate("MainWindow", "MainWindow", None, QtGui.QApplication.UnicodeUTF8))
+        self.menuFile.setTitle(QtGui.QApplication.translate("MainWindow", "File", None, QtGui.QApplication.UnicodeUTF8))
+        self.menuEdit.setTitle(QtGui.QApplication.translate("MainWindow", "Edit", None, QtGui.QApplication.UnicodeUTF8))
+        self.menuView.setTitle(QtGui.QApplication.translate("MainWindow", "View", None, QtGui.QApplication.UnicodeUTF8))
+        self.actionNeu.setText(QtGui.QApplication.translate("MainWindow", "New", None, QtGui.QApplication.UnicodeUTF8))
+        self.actionMove.setText(QtGui.QApplication.translate("MainWindow", "Move", None, QtGui.QApplication.UnicodeUTF8))
+        self.actionRotate.setText(QtGui.QApplication.translate("MainWindow", "Rotate", None, QtGui.QApplication.UnicodeUTF8))
+        self.actionSceneExplorer.setText(QtGui.QApplication.translate("MainWindow", "Scene Explorer", None, QtGui.QApplication.UnicodeUTF8))
+        self.actionPreferences.setText(QtGui.QApplication.translate("MainWindow", "Preferences", None, QtGui.QApplication.UnicodeUTF8))
+        self.actionProperty_Window.setText(QtGui.QApplication.translate("MainWindow", "Property Window", None, QtGui.QApplication.UnicodeUTF8))
+        self.actionObject_Selection.setText(QtGui.QApplication.translate("MainWindow", "Object Selection", None, QtGui.QApplication.UnicodeUTF8))
+        self.actionClose.setText(QtGui.QApplication.translate("MainWindow", "Quit", None, QtGui.QApplication.UnicodeUTF8))
+        self.actionConsole_Window.setText(QtGui.QApplication.translate("MainWindow", "Console Window", None, QtGui.QApplication.UnicodeUTF8))
+
+    def setupOgre(self, pluginCfgPath="./Plugins.cfg", ogreCfgPath="./ogre.cfg", logPath="./ogre.log"):
+        if platform.system() == "Windows":
+            pluginCfgPath="./Plugins-windows.cfg"
+        else:
+            pluginCfgPath="./Plugins-linux.cfg"
+
+        root = og.Root(pluginCfgPath, ogreCfgPath, logPath)
+        self.ogreRoot = root
+
+        if  not self.ogreRoot.restoreConfig() and not self.ogreRoot.showConfigDialog():
+            sys.exit('Quit from Config Dialog')
+
+        root.initialise(False)
+
+        self.OgreMainWinSceneMgr = self.ogreRoot.createSceneManager(og.ST_GENERIC, "OgreMainWinSceneMgr")
+        self.OgreMainWinSceneMgr.ambientLight = og.ColourValue(4, 4, 4)
+
+        self.moduleName = ""
+        self.moduleManager = ModuleManager(self.ogreRoot,  self.OgreMainWinSceneMgr)
+
+        self.ogreRenderWindow = OgreMainWindow.OgreMainWindow(self.moduleManager,  root,  self.OgreMainWinSceneMgr,  self)
+        self.gridlayout.addWidget(self.ogreRenderWindow,0,0,1,1)
+        self.hboxlayout.addLayout(self.gridlayout)
+        self.setCentralWidget(self.centralwidget)
+
+        og.ResourceGroupManager.getSingleton().addResourceLocation("./media", "FileSystem", "General", False)
+        og.ResourceGroupManager.getSingleton().initialiseAllResourceGroups()
+
+        oglog = og.LogManager.getSingleton().getDefaultLog()
+        oglog.addListener(self.consoleWindow.lockenLog)
+
+    def update(self):
+#        try:
+#            self.OgreMainWinSceneMgr.getSceneNode("saeule_076_node").yaw(0.02)
+#        except Exception,  e:
+#            pass
+
+        self.ogreRoot.renderOneFrame()
+
+    def actionNewSlot(self):
+        print "dbg: new"
+        return
+
+    def actionQuitSlot(self):
+        self.close()
+
+    def actionDeleteSlot(self):
+        self.moduleManager.deleteObjects()
+
+    def actionCopySlot(self):
+        self.moduleManager.copyObjects()
+
+    def actionCutSlot(self):
+        self.moduleManager.cutObjects()
+
+    def actionPasteSlot(self):
+        self.moduleManager.pasteObjects(self.ogreRenderWindow.getCameraToViewportRay())
+
+    def actionMoveSlot(self):
+        self.moduleManager.pivot.setMoveMode()
+
+    def actionRotateSlot(self):
+        self.moduleManager.pivot.setRotateMode()
+
+    def actionScaleSlot(self):
+        self.moduleManager.pivot.setScaleMode()
+
+    def togglePreferencesWindow(self):
+        if self.prefDialog.isHidden():
+            self.prefDialog.show()
+        else:
+            self.prefDialog.hide()
+
+    def toggleModelPreviewWindow(self):
+        if self.modelSelectionDock.isHidden():
+            self.modelSelectionDock.show()
+        else:
+            self.modelSelectionDock.hide()
+
+    def toggleGameObjectViewWindow(self):
+        if self.gameObjectClassViewDock.isHidden():
+            self.gameObjectClassViewDock.show()
+        else:
+            self.gameObjectClassViewDock.hide()
+
+    def toggleSceneExplorer(self):
+        if self.sceneExplorerDock.isHidden():
+            self.sceneExplorerDock.show()
+        else:
+            self.sceneExplorerDock.hide()
+
+    def togglePropertyWindow(self):
+        if self.propertyDock.isHidden():
+            self.propertyDock.show()
+        else:
+            self.propertyDock.hide()
+
+    def toggleConsoleWindow(self):
+        if self.consoleDock.isHidden():
+            self.consoleDock.show()
+        else:
+            self.consoleDock.hide()
+
+    # parses the moduleconfig.rb and searches for all loader.loadmap(" statements in the ruby script
+    # and parses them too
+    def loadModule(self, modulePath, moduleName):
+        if self.moduleName == moduleName:
+            return
+
+        self.moduleName = moduleName
+        self.workingDir = modulePath + moduleName # the module path
+        self.workingDirCommon = modulePath + "common" # the module path of the common module
+
+        import codecs
+        import glob
+
+        modConfig = self.workingDir + "/scripts/moduleconfig.rb"
+        if isfile(modConfig): # is the modconfig existing?
+            f = codecs.open(modConfig, 'r', 'utf-8')
+        else:
+            print ("Error: couldn't find module config")
+            pass
+
+        self.mapFiles = [] # a list in case the module has more than one map file
+        self.gofFiles = [] # gof File list
+        for line in f:
+            lStripped = line.strip() #strip the whitespace away, not needed here
+
+            # get the map file(s)
+            if lStripped.startswith("loader.loadMap("): # all loadMap commands begin with loader.loadMap(
+                spl = lStripped.split('"')
+                for a in spl:
+                    if a.endswith(".xml"):
+                        pathToMapFile = self.workingDir + "/maps/" + a
+                        self.mapFiles.append(pathToMapFile)
+
+        self.setWindowTitle(moduleName)
+
+        self.modelSelectionDialog.scanDirForModels(self.workingDir, moduleName)
+        self.modelSelectionDialog.scanDirForModels(self.workingDirCommon, "common")
+
+        self.setResourcePaths(self.workingDir, moduleName)
+        self.setResourcePaths(self.workingDirCommon, "common")
+        og.ResourceGroupManager.getSingleton().initialiseAllResourceGroups()
+
+        command = (os.path.join(self.workingDir,  "maps") + "/*.xml")
+        for mf in glob.glob(command): # search for all xml files in the maps directory and add them
+            self.mapFiles.append(mf)
+
+        command = (os.path.join(self.workingDir,  "maps") + "/*.scene")
+        for mf in glob.glob(command): # search for all .scene files in the maps directory and add them
+            self.mapFiles.append(mf)
+
+        command = (os.path.join(self.workingDir,  "dsa") + "/*.gof")
+        for gf in glob.glob(command): # search for all .gof files in the dsa directory in the module dir
+            self.gofFiles.append(gf)
+
+        command = (os.path.join(self.workingDirCommon,  "dsa") + "/*.gof")
+        for gf in glob.glob(command): # search for all .gof files in the dsa directory in the common module dir
+            self.gofFiles.append(gf)
+
+        self.moduleManager.load(moduleName,  self.mapFiles,  self.gofFiles)
+
+    def setResourcePaths(self, path, moduleName):
+        for file in os.listdir(path):
+            curFile = path + "/" + file
+
+            if file.startswith('.'): #ignore dot files (hidden)
+                continue
+            if isdir(curFile):
+                og.ResourceGroupManager.getSingleton().addResourceLocation(curFile, "FileSystem", moduleName, False)
+                self.setResourcePaths(curFile, moduleName)
+                continue
+            if isfile(curFile):
+                pass
+
+    def createDockWindows(self):
+        self.propertyDock = QtGui.QDockWidget(self.tr("Properties"), self)
+        self.propertyDock.setObjectName("PropertyDockWindow")
+        self.propertyDock.setAllowedAreas(QtCore.Qt.LeftDockWidgetArea | QtCore.Qt.RightDockWidgetArea)
+        self.propertyDock.setWidget(self.objectPropertyWin)
+        self.addDockWidget(QtCore.Qt.LeftDockWidgetArea, self.propertyDock)
+
+        self.modelSelectionDock = QtGui.QDockWidget(self.tr("Models"), self)
+        self.modelSelectionDock.setObjectName("ModelSelectionDockWindow")
+        self.modelSelectionDock.setAllowedAreas(QtCore.Qt.LeftDockWidgetArea | QtCore.Qt.RightDockWidgetArea)
+        self.modelSelectionDock.setWidget(self.modelSelectionDialog)
+        self.addDockWidget(QtCore.Qt.RightDockWidgetArea, self.modelSelectionDock)
+
+        self.gameObjectClassViewDock = QtGui.QDockWidget(self.tr("GameObjectClasses"), self)
+        self.gameObjectClassViewDock.setObjectName("GameObjectClassView")
+        self.gameObjectClassViewDock.setAllowedAreas(QtCore.Qt.LeftDockWidgetArea | QtCore.Qt.RightDockWidgetArea)
+        self.gameObjectClassViewDock.setWidget(self.gameObjectClassView)
+        self.addDockWidget(QtCore.Qt.RightDockWidgetArea, self.gameObjectClassViewDock)
+
+        self.sceneExplorerDock = QtGui.QDockWidget(self.tr("Scene Explorer"), self)
+        self.sceneExplorerDock.setObjectName("SceneExplorerDockWindow")
+        self.sceneExplorerDock.setAllowedAreas(QtCore.Qt.LeftDockWidgetArea | QtCore.Qt.RightDockWidgetArea)
+        self.sceneExplorerDock.setWidget(self.sceneExplorerWin)
+        self.addDockWidget(QtCore.Qt.LeftDockWidgetArea, self.sceneExplorerDock)
+
+        self.consoleDock = QtGui.QDockWidget(self.tr("Console"), self)
+        self.consoleDock.setObjectName("ConsoleDockWindow")
+        self.consoleDock.setAllowedAreas(QtCore.Qt.BottomDockWidgetArea | QtCore.Qt.TopDockWidgetArea)
+        self.consoleDock.setWidget(self.consoleWindow)
+        self.addDockWidget(QtCore.Qt.BottomDockWidgetArea, self.consoleDock)
+
+        self.fileToolBar = self.addToolBar("File Toolbar")
+        self.fileToolBar.setObjectName("FileToolBar")
+        self.fileToolBar.setAllowedAreas(QtCore.Qt.TopToolBarArea | QtCore.Qt.BottomToolBarArea)
+        self.fileToolBar.addAction(self.actionNeu)
+        self.fileToolBar.addAction(self.actionClose)
+        self.addToolBar(QtCore.Qt.TopToolBarArea, self.fileToolBar)
+
+        self.moveToolBar = self.addToolBar("Transformation Bar")
+        self.moveToolBar.setObjectName("TransformationBar")
+        self.moveToolBar.setAllowedAreas(QtCore.Qt.TopToolBarArea | QtCore.Qt.BottomToolBarArea)
+        self.moveToolBar.addAction(self.actionMove)
+        self.moveToolBar.addAction(self.actionRotate)
+        self.moveToolBar.addAction(self.actionScale)
+        self.addToolBar(QtCore.Qt.TopToolBarArea, self.moveToolBar)
+
+    def keyPressEvent(self,  event):
+        if not event.isAutoRepeat():
+            self.ogreRenderWindow.keyPressEvent(event)
+
+    def keyReleaseEvent(self,  event):
+        if not event.isAutoRepeat():
+            self.ogreRenderWindow.keyReleaseEvent(event)
+        pass
+
+    def connectActionButtons(self):
+        pass
+
+    def saveOnClose(self):
+        reply = QtGui.QMessageBox.question(self,  "Rastullahs Lockenwickler - Unsaved Chages",  "Save unsaved changes?",  QtGui.QMessageBox.Yes|QtGui.QMessageBox.No|QtGui.QMessageBox.Cancel)
+        if reply == QtGui.QMessageBox.Cancel:
+            return False
+        if reply == QtGui.QMessageBox.Yes:
+            print""
+            #TODO: implement save here
+        return True
+
+    def closeEvent(self,  event):
+        if self.saveOnClose():
+            settings = QtCore.QSettings()
+            settings.setValue("MainWindow/Geometry",  QtCore.QVariant(self.saveGeometry()))
+            settings.setValue("MainWIndow/DockWindows",  QtCore.QVariant(self.saveState()))
+        else:
+            event.ignore()
+
+if __name__ == "__main__":
+    app = QtGui.QApplication(sys.argv)
+    app.setOrganizationName("Team Pantheon")
+    app.setOrganizationDomain("rastullahs-lockenpracht.de/team")
+    app.setApplicationName("Lockenwickler")
+
+    form = Lockenwickler()
+    form.show()
+
+    sys.exit(app.exec_())
+

Modified: rl/trunk/editors/Lockenwickler/src/ModuleManager.py
===================================================================
--- rl/trunk/editors/Lockenwickler/src/ModuleManager.py	2008-10-31 10:46:04 UTC (rev 4569)
+++ rl/trunk/editors/Lockenwickler/src/ModuleManager.py	2008-10-31 16:37:06 UTC (rev 4570)
@@ -1,360 +1,360 @@
-#################################################
- # Copyright (C) 2008  Stefan Stammberger
- #
- # This library is free software; you can redistribute it and/or
- # modify it under the terms of the GNU Lesser General Public
- # License as published by the Free Software Foundation; either
- # version 2.1 of the License, or (at your option) any later version.
- #
- # This library is distributed in the hope that it will be useful,
- # but WITHOUT ANY WARRANTY; without even the implied warranty of
- # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
- # Lesser General Public License for more details.
- #
- # You should have received a copy of the GNU Lesser General Public
- # License along with this library; if not, write to the Free Software
- # Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
- #################################################
-
-import sys
-import xml.dom.minidom as xml
-
-import ctypes
-import ogre.renderer.OGRE as og
-
-from MovePivot import *
-from GameObjectClassManager import *
-from MyRaySceneQueryListener import *
-
-class ModuleManager(object):
-    def __init__(self,  ogreRoot,  sceneManager):
-        self.sceneManager = sceneManager
-        self.ogreRoot = ogreRoot
-        self.raySceneQuery = self.sceneManager.createRayQuery(og.Ray())
-
-        self.gocManager = GameObjectClassManager()
-
-        self.userSelectionList = []
-        self.cutList = [] # selection objects that has been cut out and wait to be pasted again
-        self.cutListPreviousNodes = [] # contains the nodes they where copnnected to before the cut
-
-        self.listenerDings = MyRaySceneQueryListener()
-
-        self.lastRay = None
-#        self.rayLine = None
-
-        self.pivot = None
-        self.movingPivot = False
-
-        self.leftMouseDown = False
-        self.middleMouseDown = False
-        self.rightMouseDown = False
-
-        self.dropCount = 0
-        self.dropNode = None
-        self.dropEntity = None
-        self.dropCollisionPlane = og.Plane(og.Vector3.UNIT_Y, og.Vector3.ZERO)
-
-        self.numerOfCopys = 0 #everytime a copy is made this numer is increased to generate unique node and mesh names
-
-    def load(self,  moduleName,  mapFiles,  gofFiles):
-        self.moduleName = moduleName
-        self.mapFiles = mapFiles
-        self.gofFiles = gofFiles
-
-        self.gocManager.parseGOFFiles(self.gofFiles)
-
-        for a in self.mapFiles:
-            doc = xml.parse(a)
-            node = doc.getElementsByTagName("entity")
-            if node != None:
-                self.parseSceneNodes(node)
-
-        self.pivot = Pivot(self.sceneManager)
-        self.pivot.hide()
-
-    def parseSceneNodes(self,  nodeList):
-        for ent in nodeList:
-            entityName = ent.attributes["name"].nodeValue # get the name of the ent
-            meshFile = ent.attributes["meshfile"].nodeValue # meshfile
-            nodePosition = None
-            nodeRotation = None
-            nodeScale = None
-
-            for cn in ent.childNodes:
-                if cn.nodeType == cn.ELEMENT_NODE:
-                    if cn.localName == "position":
-                        px = float(cn.attributes["x"].nodeValue)
-                        py = float(cn.attributes["y"].nodeValue)
-                        pz = float(cn.attributes["z"].nodeValue)
-                        nodePosition = og.Vector3(px, py, pz)
-                        continue
-
-                    if cn.localName == "rotation":
-                        qw = float(cn.attributes["qw"].nodeValue)
-                        qx = float(cn.attributes["qx"].nodeValue)
-                        qy = float(cn.attributes["qy"].nodeValue)
-                        qz = float(cn.attributes["qz"].nodeValue)
-                        nodeRotation = og.Quaternion(qw,  qx, qy, qz)
-                        continue
-
-                    if cn.localName == "scale":
-                        px = float(cn.attributes["x"].nodeValue)
-                        py = float(cn.attributes["y"].nodeValue)
-                        pz = float(cn.attributes["z"].nodeValue)
-                        nodeScale = og.Vector3(px, py, pz)
-                        continue
-
-            try:
-                e = self.sceneManager.createEntity(entityName, meshFile)
-            except:
-                print "Warning: Meshfile " + meshFile + " could not be found."
-                return
-
-            n = self.sceneManager.getRootSceneNode().createChild(entityName + "_node")
-            n.attachObject(e)
-            n.setPosition(nodePosition)
-            #n.setOrientation(nodeRotation)
-            n.setScale(nodeScale)
-
-        pass
-
-    # called when a click into Main Ogre Window occurs
-    def selectionClick(self,  ray,  controlDown=False,  shiftDown=False):
-        self.listenerDings.reset()
-        self.lastRay = ray
-        self.listenerDings.currentRay = ray
-        self.raySceneQuery.Ray = ray
-        self.raySceneQuery.execute(self.listenerDings)
-
-        so = self.listenerDings.rayCastToPolygonLevel(ray)
-        if so is not None:
-            if not so.isPivot:
-                if self.pivot is not None:
-                    self.pivot.show()
-                if not controlDown and not shiftDown:
-                    self.resetSelection()
-                    so.setSelected(True)
-                    self.userSelectionList.append(so)
-                    self.updatePivots()
-                elif controlDown and not shiftDown:
-                    so.setSelected(True)
-
-                    for soFromList in self.userSelectionList:
-                        if soFromList == so:
-                            return # object already selected
-
-                    self.userSelectionList.append(so)
-                    self.updatePivots()
-
-
-                elif not controlDown and shiftDown:
-                    for selo in self.userSelectionList:
-                        if so == selo:
-                            so.setSelected(False)
-                            self.userSelectionList.remove(selo)
-                    self.updatePivots()
-            else:
-                #so.entity is the pivot direction that was clicked
-                self.pivot.startTransforming(so.entity,  self.userSelectionList)
-        else:
-            self.resetSelection() # click in empty space, deselect everything
-            if self.pivot is not None:
-                self.pivot.hide()
-
-#        if self.rayLine == None:
-#            self.rayLine = self.sceneManager.createManualObject("rayLine")
-#            self.rayLine.setDynamic(True)
-#            self.sceneManager.getRootSceneNode().createChildSceneNode("raynode").attachObject(self.rayLine)
-#
-#            self.rayLine.begin("BaseWhiteNoLighting", og.RenderOperation.OT_LINE_STRIP)
-#
-#            self.rayLine.position(ray.getOrigin())
-#            self.rayLine.position( ray.getPoint(10000))
-#
-#            self.rayLine.end()
-#
-#        else:
-#            self.rayLine.beginUpdate(0)
-#
-#            self.rayLine.position(ray.getOrigin())
-#            self.rayLine.position( ray.getPoint(10000))
-#
-#            self.rayLine.end()
-
-    def deleteObjects(self):
-        if len(self.userSelectionList) < 1:
-            return
-
-        self.pivot.hide()
-
-        for so in self.userSelectionList:
-            self.sceneManager.destroySceneNode(so.entity.getParentNode().getName())
-            del so
-
-        self.userSelectionList = []
-
-    def incrementNameSuffixNumber(self, name):
-        newName = ""
-        split = name.split("_")
-        lastPart = len(split)-1
-        newName = name.rstrip(split[lastPart])
-        newName = newName + str(self.numerOfCopys)
-
-#        if split[lastPart].isdigit() and not split[lastPart].startswith("0"):
-#            num = int(split[lastPart])
-#            num = num + 1
-#            newName = name.rstrip(split[lastPart])
-#            newName = newName + str(num)
-#        else:
-#            newName = name + "_1"
-
-        self.numerOfCopys = self.numerOfCopys + 1
-        return newName
-
-    def copyObjects(self):
-        if len(self.userSelectionList) < 1:
-            return
-
-        newSelectionList = []
-        print "dbg: "
-        for so in self.userSelectionList:
-            nodeName = self.incrementNameSuffixNumber(so.entity.getParentNode().getName())
-            newNode = self.sceneManager.getRootSceneNode().createChild(nodeName)
-
-            entityName = self.incrementNameSuffixNumber(so.entity.getName())
-            newEntity = self.sceneManager.createEntity(entityName, so.entity.getMesh().getName())
-
-            newNode.attachObject(newEntity)
-            newNode.setPosition(so.entity.getParentNode().getPosition())
-            newNode.setOrientation(so.entity.getParentNode().getOrientation())
-            newNode.setScale(so.entity.getParentNode().getScale())
-
-            newSO = SelectionObject(newEntity, so.distance)
-            newSO.setSelected(True)
-            newSelectionList.append(newSO)
-
-        self.resetSelection()
-        self.userSelectionList = newSelectionList
-
-    def cutObjects(self):
-        if len(self.userSelectionList) < 1:
-            return
-            return
-
-        self.cutList = []
-        for so in self.userSelectionList:
-            self.cutListPreviousNodes.append(so.entity.getParentNode().getParent())
-            so.entity.getParentNode().getParent().removeChild(so.entity.getParentNode())
-            # set the "point of gravity" of all the cutted nodes to world origin at 0,0,0
-            # so we only have to translate them to their new destination when they get pasted
-            # the position of the pivot point is considered as the center of gravity
-            so.entity.getParentNode().setPosition(so.entity.getParentNode().getPosition() - self.pivot.getPosition())
-            self.cutList.append(so)
-        self.resetSelection()
-    def pasteObjects(self,  ray):
-        if len(self.cutList) < 1:
-            return
-
-        result = og.Math.intersects(ray, self.dropCollisionPlane)
-        if result.first == True:
-            i=0
-            while i < len(self.cutList):
-                self.cutListPreviousNodes[i].addChild(self.cutList[i].entity.getParentNode())
-                self.cutList[i].entity.getParentNode().translate(ray.getPoint(result.second))
-                i = i+1
-        else:
-            i=0
-            while i < len(self.cutList):
-                self.cutListPreviousNodes[i].addChild(self.cutList[i].entity.getParentNode())
-                self.cutList[i].entity.getParentNode().translate(ray.getPoint(100.0))
-                i = i+1
-        self.cutList = []
-
-    def leftMouseUp(self):
-        if self.pivot is not None and self.pivot.isTransforming:
-            self.pivot.stopTransforming()
-
-#    def iterateEntityUnderMouse(self):
-#        self.listenerDings.iterateEntityUnderMouse()
-#
-#        pass
-
-    def resetSelection(self):
-        for so in self.userSelectionList:
-            so.setSelected(False)
-
-        self.userSelectionList = []
-
-        self.listenerDings.reset()
-        pass
-
-
-    def updatePivots(self):
-        newPivotPosition = og.Vector3(0, 0, 0)
-
-        for so in self.userSelectionList:
-            newPivotPosition += so.entity.getParentNode().getPosition()
-        if self.pivot is not None:
-            self.pivot.setPosition(newPivotPosition / len(self.userSelectionList))
-
-    def unload(self,  saveOnUnload=True):
-        pass
-
-    def save(self):
-        pass
-
-    def startDropGameObjectAction(self, classid, ray):
-        go = self.gocManager.getGameObjectWithClassId(classid)
-        meshFile = go.getMeshFileName()
-
-        if go is not None:
-            dropEntity = self.sceneManager.createEntity("dropMesh" + str(self.dropCount), str(meshFile))
-            dropNode = self.sceneManager.getRootSceneNode().createChild("dropNode" + str(self.dropCount))
-            dropNode.attachObject(self.dropEntity)
-
-            result = og.Math.intersects(ray, self.dropCollisionPlane)
-            if result.first == True:
-                dropNode.setPosition(ray.getPoint(result.second))
-            else:
-                dropNode.setPosition(ray.getPoint(50))
-
-            self.dropGO = GameObjectRepresentation(self.dropCount, classid, dropNode, meshFile)
-            dropEntity.setUserAny(self.dropGO)
-
-        self.dropCount += 1
-
-    def moveDropGameObjectAction(self, ray):
-        result = og.Math.intersects(ray, self.dropCollisionPlane)
-        if result.first == True:
-            self.dropGO.setPosition(ray.getPoint(result.second))
-        else:
-            self.dropGO.setPosition(ray.getPoint(50))
-
-    def stopDropGameObjectAction(self, ray):
-        print "sd"
-
-    def startDropModelAction(self, meshFile, ray):
-        self.dropEntity = self.sceneManager.createEntity("dropMesh" + str(self.dropCount), str(meshFile))
-        self.dropNode = self.sceneManager.getRootSceneNode().createChild("dropNode" + str(self.dropCount))
-        self.dropNode.attachObject(self.dropEntity)
-
-        result = og.Math.intersects(ray, self.dropCollisionPlane)
-        if result.first == True:
-            self.dropNode.setPosition(ray.getPoint(result.second))
-        else:
-            self.dropNode.setPosition(ray.getPoint(50))
-
-        self.dropCount += 1
-
-    def moveDropModelAction(self, ray):
-        result = og.Math.intersects(ray, self.dropCollisionPlane)
-        if result.first == True:
-            self.dropNode.setPosition(ray.getPoint(result.second))
-        else:
-            self.dropNode.setPosition(ray.getPoint(50))
-
-
-    def stopDropModelAction(self, ray):
-        pass
-
+#################################################
+ # Copyright (C) 2008  Stefan Stammberger
+ #
+ # This library is free software; you can redistribute it and/or
+ # modify it under the terms of the GNU Lesser General Public
+ # License as published by the Free Software Foundation; either
+ # version 2.1 of the License, or (at your option) any later version.
+ #
+ # This library is distributed in the hope that it will be useful,
+ # but WITHOUT ANY WARRANTY; without even the implied warranty of
+ # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ # Lesser General Public License for more details.
+ #
+ # You should have received a copy of the GNU Lesser General Public
+ # License along with this library; if not, write to the Free Software
+ # Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ #################################################
+
+import sys
+import xml.dom.minidom as xml
+
+import ctypes
+import ogre.renderer.OGRE as og
+
+from MovePivot import *
+from GameObjectClassManager import *
+from MyRaySceneQueryListener import *
+
+class ModuleManager(object):
+    def __init__(self,  ogreRoot,  sceneManager):
+        self.sceneManager = sceneManager
+        self.ogreRoot = ogreRoot
+        self.raySceneQuery = self.sceneManager.createRayQuery(og.Ray())
+
+        self.gocManager = GameObjectClassManager()
+
+        self.userSelectionList = []
+        self.cutList = [] # selection objects that has been cut out and wait to be pasted again
+        self.cutListPreviousNodes = [] # contains the nodes they where copnnected to before the cut
+
+        self.listenerDings = MyRaySceneQueryListener()
+
+        self.lastRay = None
+#        self.rayLine = None
+
+        self.pivot = None
+        self.movingPivot = False
+
+        self.leftMouseDown = False
+        self.middleMouseDown = False
+        self.rightMouseDown = False
+
+        self.dropCount = 0
+        self.dropNode = None
+        self.dropEntity = None
+        self.dropCollisionPlane = og.Plane(og.Vector3.UNIT_Y, og.Vector3.ZERO)
+
+        self.numerOfCopys = 0 #everytime a copy is made this numer is increased to generate unique node and mesh names
+
+    def load(self,  moduleName,  mapFiles,  gofFiles):
+        self.moduleName = moduleName
+        self.mapFiles = mapFiles
+        self.gofFiles = gofFiles
+
+        self.gocManager.parseGOFFiles(self.gofFiles)
+
+        for a in self.mapFiles:
+            doc = xml.parse(a)
+            node = doc.getElementsByTagName("entity")
+            if node != None:
+                self.parseSceneNodes(node)
+
+        self.pivot = Pivot(self.sceneManager)
+        self.pivot.hide()
+
+    def parseSceneNodes(self,  nodeList):
+        for ent in nodeList:
+            entityName = ent.attributes["name"].nodeValue # get the name of the ent
+            meshFile = ent.attributes["meshfile"].nodeValue # meshfile
+            nodePosition = None
+            nodeRotation = None
+            nodeScale = None
+
+            for cn in ent.childNodes:
+                if cn.nodeType == cn.ELEMENT_NODE:
+                    if cn.localName == "position":
+                        px = float(cn.attributes["x"].nodeValue)
+                        py = float(cn.attributes["y"].nodeValue)
+                        pz = float(cn.attributes["z"].nodeValue)
+                        nodePosition = og.Vector3(px, py, pz)
+                        continue
+
+                    if cn.localName == "rotation":
+                        qw = float(cn.attributes["qw"].nodeValue)
+                        qx = float(cn.attributes["qx"].nodeValue)
+                        qy = float(cn.attributes["qy"].nodeValue)
+                        qz = float(cn.attributes["qz"].nodeValue)
+                        nodeRotation = og.Quaternion(qw,  qx, qy, qz)
+                        continue
+
+                    if cn.localName == "scale":
+                        px = float(cn.attributes["x"].nodeValue)
+                        py = float(cn.attributes["y"].nodeValue)
+                        pz = float(cn.attributes["z"].nodeValue)
+                        nodeScale = og.Vector3(px, py, pz)
+                        continue
+
+            try:
+                e = self.sceneManager.createEntity(entityName, meshFile)
+            except:
+                print "Warning: Meshfile " + meshFile + " could not be found."
+                return
+
+            n = self.sceneManager.getRootSceneNode().createChild(entityName + "_node")
+            n.attachObject(e)
+            n.setPosition(nodePosition)
+            #n.setOrientation(nodeRotation)
+            n.setScale(nodeScale)
+
+        pass
+
+    # called when a click into Main Ogre Window occurs
+    def selectionClick(self,  ray,  controlDown=False,  shiftDown=False):
+        self.listenerDings.reset()
+        self.lastRay = ray
+        self.listenerDings.currentRay = ray
+        self.raySceneQuery.Ray = ray
+        self.raySceneQuery.execute(self.listenerDings)
+
+        so = self.listenerDings.rayCastToPolygonLevel(ray)
+        if so is not None:
+            if not so.isPivot:
+                if self.pivot is not None:
+                    self.pivot.show()
+                if not controlDown and not shiftDown:
+                    self.resetSelection()
+                    so.setSelected(True)
+                    self.userSelectionList.append(so)
+                    self.updatePivots()
+                elif controlDown and not shiftDown:
+                    so.setSelected(True)
+
+                    for soFromList in self.userSelectionList:
+                        if soFromList == so:
+                            return # object already selected
+
+                    self.userSelectionList.append(so)
+                    self.updatePivots()
+
+
+                elif not controlDown and shiftDown:
+                    for selo in self.userSelectionList:
+                        if so == selo:
+                            so.setSelected(False)
+                            self.userSelectionList.remove(selo)
+                    self.updatePivots()
+            else:
+                #so.entity is the pivot direction that was clicked
+                self.pivot.startTransforming(so.entity,  self.userSelectionList)
+        else:
+            self.resetSelection() # click in empty space, deselect everything
+            if self.pivot is not None:
+                self.pivot.hide()
+
+#        if self.rayLine == None:
+#            self.rayLine = self.sceneManager.createManualObject("rayLine")
+#            self.rayLine.setDynamic(True)
+#            self.sceneManager.getRootSceneNode().createChildSceneNode("raynode").attachObject(self.rayLine)
+#
+#            self.rayLine.begin("BaseWhiteNoLighting", og.RenderOperation.OT_LINE_STRIP)
+#
+#            self.rayLine.position(ray.getOrigin())
+#            self.rayLine.position( ray.getPoint(10000))
+#
+#            self.rayLine.end()
+#
+#        else:
+#            self.rayLine.beginUpdate(0)
+#
+#            self.rayLine.position(ray.getOrigin())
+#            self.rayLine.position( ray.getPoint(10000))
+#
+#            self.rayLine.end()
+
+    def deleteObjects(self):
+        if len(self.userSelectionList) < 1:
+            return
+
+        self.pivot.hide()
+
+        for so in self.userSelectionList:
+            self.sceneManager.destroySceneNode(so.entity.getParentNode().getName())
+            del so
+
+        self.userSelectionList = []
+
+    def incrementNameSuffixNumber(self, name):
+        newName = ""
+        split = name.split("_")
+        lastPart = len(split)-1
+        newName = name.rstrip(split[lastPart])
+        newName = newName + str(self.numerOfCopys)
+
+#        if split[lastPart].isdigit() and not split[lastPart].startswith("0"):
+#            num = int(split[lastPart])
+#            num = num + 1
+#            newName = name.rstrip(split[lastPart])
+#            newName = newName + str(num)
+#        else:
+#            newName = name + "_1"
+
+        self.numerOfCopys = self.numerOfCopys + 1
+        return newName
+
+    def copyObjects(self):
+        if len(self.userSelectionList) < 1:
+            return
+
+        newSelectionList = []
+        print "dbg: "
+        for so in self.userSelectionList:
+            nodeName = self.incrementNameSuffixNumber(so.entity.getParentNode().getName())
+            newNode = self.sceneManager.getRootSceneNode().createChild(nodeName)
+
+            entityName = self.incrementNameSuffixNumber(so.entity.getName())
+            newEntity = self.sceneManager.createEntity(entityName, so.entity.getMesh().getName())
+
+            newNode.attachObject(newEntity)
+            newNode.setPosition(so.entity.getParentNode().getPosition())
+            newNode.setOrientation(so.entity.getParentNode().getOrientation())
+            newNode.setScale(so.entity.getParentNode().getScale())
+
+            newSO = SelectionObject(newEntity, so.distance)
+            newSO.setSelected(True)
+            newSelectionList.append(newSO)
+
+        self.resetSelection()
+        self.userSelectionList = newSelectionList
+
+    def cutObjects(self):
+        if len(self.userSelectionList) < 1:
+            return
+            return
+
+        self.cutList = []
+        for so in self.userSelectionList:
+            self.cutListPreviousNodes.append(so.entity.getParentNode().getParent())
+            so.entity.getParentNode().getParent().removeChild(so.entity.getParentNode())
+            # set the "point of gravity" of all the cutted nodes to world origin at 0,0,0
+            # so we only have to translate them to their new destination when they get pasted
+            # the position of the pivot point is considered as the center of gravity
+            so.entity.getParentNode().setPosition(so.entity.getParentNode().getPosition() - self.pivot.getPosition())
+            self.cutList.append(so)
+        self.resetSelection()
+    def pasteObjects(self,  ray):
+        if len(self.cutList) < 1:
+            return
+
+        result = og.Math.intersects(ray, self.dropCollisionPlane)
+        if result.first == True:
+            i=0
+            while i < len(self.cutList):
+                self.cutListPreviousNodes[i].addChild(self.cutList[i].entity.getParentNode())
+                self.cutList[i].entity.getParentNode().translate(ray.getPoint(result.second))
+                i = i+1
+        else:
+            i=0
+            while i < len(self.cutList):
+                self.cutListPreviousNodes[i].addChild(self.cutList[i].entity.getParentNode())
+                self.cutList[i].entity.getParentNode().translate(ray.getPoint(100.0))
+                i = i+1
+        self.cutList = []
+
+    def leftMouseUp(self):
+        if self.pivot is not None and self.pivot.isTransforming:
+            self.pivot.stopTransforming()
+
+#    def iterateEntityUnderMouse(self):
+#        self.listenerDings.iterateEntityUnderMouse()
+#
+#        pass
+
+    def resetSelection(self):
+        for so in self.userSelectionList:
+            so.setSelected(False)
+
+        self.userSelectionList = []
+
+        self.listenerDings.reset()
+        pass
+
+
+    def updatePivots(self):
+        newPivotPosition = og.Vector3(0, 0, 0)
+
+        for so in self.userSelectionList:
+            newPivotPosition += so.entity.getParentNode().getPosition()
+        if self.pivot is not None:
+            self.pivot.setPosition(newPivotPosition / len(self.userSelectionList))
+
+    def unload(self,  saveOnUnload=True):
+        pass
+
+    def save(self):
+        pass
+
+    def startDropGameObjectAction(self, classid, ray):
+        go = self.gocManager.getGameObjectWithClassId(classid)
+        meshFile = go.getMeshFileName()
+
+        if go is not None:
+            dropEntity = self.sceneManager.createEntity("dropMesh" + str(self.dropCount), str(meshFile))
+            dropNode = self.sceneManager.getRootSceneNode().createChild("dropNode" + str(self.dropCount))
+            dropNode.attachObject(dropEntity)
+
+            result = og.Math.intersects(ray, self.dropCollisionPlane)
+            if result.first == True:
+                dropNode.setPosition(ray.getPoint(result.second))
+            else:
+                dropNode.setPosition(ray.getPoint(50))
+
+            self.dropGO = GameObjectRepresentation(self.dropCount, classid, dropNode, meshFile)
+            dropEntity.setUserObject(self.dropGO)
+
+        self.dropCount += 1
+
+    def moveDropGameObjectAction(self, ray):
+        result = og.Math.intersects(ray, self.dropCollisionPlane)
+        if result.first == True:
+            self.dropGO.setPosition(ray.getPoint(result.second))
+        else:
+            self.dropGO.setPosition(ray.getPoint(50))
+
+    def stopDropGameObjectAction(self, ray):
+        print "sd"
+
+    def startDropModelAction(self, meshFile, ray):
+        self.dropEntity = self.sceneManager.createEntity("dropMesh" + str(self.dropCount), str(meshFile))
+        self.dropNode = self.sceneManager.getRootSceneNode().createChild("dropNode" + str(self.dropCount))
+        self.dropNode.attachObject(self.dropEntity)
+
+        result = og.Math.intersects(ray, self.dropCollisionPlane)
+        if result.first == True:
+            self.dropNode.setPosition(ray.getPoint(result.second))
+        else:
+            self.dropNode.setPosition(ray.getPoint(50))
+
+        self.dropCount += 1
+
+    def moveDropModelAction(self, ray):
+        result = og.Math.intersects(ray, self.dropCollisionPlane)
+        if result.first == True:
+            self.dropNode.setPosition(ray.getPoint(result.second))
+        else:
+            self.dropNode.setPosition(ray.getPoint(50))
+
+
+    def stopDropModelAction(self, ray):
+        pass
+

Modified: rl/trunk/editors/Lockenwickler/src/PreferencesDialog.py
===================================================================
--- rl/trunk/editors/Lockenwickler/src/PreferencesDialog.py	2008-10-31 10:46:04 UTC (rev 4569)
+++ rl/trunk/editors/Lockenwickler/src/PreferencesDialog.py	2008-10-31 16:37:06 UTC (rev 4570)
@@ -1,106 +1,106 @@
-#################################################
- # Copyright (C) 2008  Stefan Stammberger
- #
- # This library is free software; you can redistribute it and/or
- # modify it under the terms of the GNU Lesser General Public
- # License as published by the Free Software Foundation; either
- # version 2.1 of the License, or (at your option) any later version.
- #
- # This library is distributed in the hope that it will be useful,
- # but WITHOUT ANY WARRANTY; without even the implied warranty of
- # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
- # Lesser General Public License for more details.
- #
- # You should have received a copy of the GNU Lesser General Public
- # License along with this library; if not, write to the Free Software
- # Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
- #################################################
-
-
-import sys
-import platform
-import string
-from ui_pref_dialog import *
-
-class PreferencesDialog(QtGui.QDialog):
-    def __init__(self, loadModuleCallback, parent=None):
-        QtGui.QDialog.__init__(self, parent)
-
-        self.loadModuleCallback = loadModuleCallback
-
-        self.prefDialog = Ui_PreferencesDialog()
-        self.prefDialog.setupUi(self)
-
-        QtCore.QObject.connect(self.prefDialog.modulConfigSelector, QtCore.SIGNAL("clicked()"),
-                               self.openModulConfigSelector)
-
-        QtCore.QObject.connect(self.prefDialog.loadModuleBtn, QtCore.SIGNAL("clicked()"),
-                               self.onLoadSelectedModule)
-
-        QtCore.QObject.connect(self.prefDialog.listWidget, QtCore.SIGNAL("itemDoubleClicked(QListWidgetItem *)"),
-                               self.onLoadSelectedModule)
-
-        if platform.system() == "Windows" or platform.system() == "MAC":
-            pass
-            # TODO: delete this when ready
-#            self.prefDialog.lineEdit.setText("C:\Users\Stefan\Desktop\Lockenwickler\modules\modules.cfg")
-#            self.moduleCfgPath = "C:\Users\Stefan\Desktop\Lockenwickler\modules\modules.cfg"
-#            self.moduleCfgIsSelected = True
-#            self.modulePath = self.moduleCfgPath.replace("modules.cfg", "")
-#            self.readInModules()
-            # end delete
-        else:
-            # TODO: delete this when ready
-            self.prefDialog.lineEdit.setText("/home/stefan/blubb/rl_modules/modules/modules.cfg")
-            self.moduleCfgPath = "/home/stefan/blubb/rl_modules/modules/modules.cfg"
-            self.moduleCfgIsSelected = True
-            self.modulePath = self.moduleCfgPath.replace("modules.cfg", "")
-            self.readInModules()
-            # end delete
-
-        self.moduleCfgIsSelected = False
-
-        self.setModal(True)
-
-    def openModulConfigSelector(self):
-        dialog = QtGui.QFileDialog(self)
-        self.moduleCfgPath = str(dialog.getOpenFileName(self, "Select modules.cfg", "/home/stefan/blubb/rl_modules/modules/", "modules.cfg (*.cfg)"))
-        self.modulePath = self.moduleCfgPath.replace("modules.cfg", "")
-
-        from os.path import isfile
-
-        if isfile(self.moduleCfgPath):
-            self.prefDialog.lineEdit.setText(self.moduleCfgPath)
-            self.moduleCfgIsSelected = True
-            self.readInModules()
-
-    def readInModules(self):
-        if self.moduleCfgIsSelected:
-            import codecs
-            f = codecs.open(self.moduleCfgPath, 'r', 'utf-8')
-
-            for line in f:
-                if line.startswith('#'):
-                    continue
-
-                if line.startswith('module='):
-                    splines = line.split('=')
-                    str = splines[1].rstrip().rstrip()
-                    if str != "common":
-                        self.prefDialog.listWidget.addItem(str)
-
-    def onLoadSelectedModule(self):
-        item = self.prefDialog.listWidget.currentItem()
-
-        if item == None:
-            mbox = QtGui.QMessageBox(self)
-            mbox.setModal(True)
-            mbox.setText("Please select a module.")
-            mbox.show()
-        else:
-            tempo = str(item.text())
-            self.loadModuleCallback(self.modulePath, tempo)
-            self.hide()
-
-
-
+#################################################
+ # Copyright (C) 2008  Stefan Stammberger
+ #
+ # This library is free software; you can redistribute it and/or
+ # modify it under the terms of the GNU Lesser General Public
+ # License as published by the Free Software Foundation; either
+ # version 2.1 of the License, or (at your option) any later version.
+ #
+ # This library is distributed in the hope that it will be useful,
+ # but WITHOUT ANY WARRANTY; without even the implied warranty of
+ # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ # Lesser General Public License for more details.
+ #
+ # You should have received a copy of the GNU Lesser General Public
+ # License along with this library; if not, write to the Free Software
+ # Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ #################################################
+
+
+import sys
+import platform
+import string
+from ui_pref_dialog import *
+
+class PreferencesDialog(QtGui.QDialog):
+    def __init__(self, loadModuleCallback, parent=None):
+        QtGui.QDialog.__init__(self, parent)
+
+        self.loadModuleCallback = loadModuleCallback
+
+        self.prefDialog = Ui_PreferencesDialog()
+        self.prefDialog.setupUi(self)
+
+        QtCore.QObject.connect(self.prefDialog.modulConfigSelector, QtCore.SIGNAL("clicked()"),
+                               self.openModulConfigSelector)
+
+        QtCore.QObject.connect(self.prefDialog.loadModuleBtn, QtCore.SIGNAL("clicked()"),
+                               self.onLoadSelectedModule)
+
+        QtCore.QObject.connect(self.prefDialog.listWidget, QtCore.SIGNAL("itemDoubleClicked(QListWidgetItem *)"),
+                               self.onLoadSelectedModule)
+
+        if platform.system() == "Windows" or platform.system() == "MAC":
+            pass
+            # TODO: delete this when ready
+            self.prefDialog.lineEdit.setText("C:/a11/modules/modules.cfg")
+            self.moduleCfgPath = 'C:/a11/modules/modules.cfg'
+            self.moduleCfgIsSelected = True
+            self.modulePath = self.moduleCfgPath.replace("modules.cfg", "")
+            self.readInModules()
+            # end delete
+        else:
+            # TODO: delete this when ready
+            self.prefDialog.lineEdit.setText("/home/stefan/blubb/rl_modules/modules/modules.cfg")
+            self.moduleCfgPath = "/home/stefan/blubb/rl_modules/modules/modules.cfg"
+            self.moduleCfgIsSelected = True
+            self.modulePath = self.moduleCfgPath.replace("modules.cfg", "")
+            self.readInModules()
+            # end delete
+
+        self.moduleCfgIsSelected = False
+
+        self.setModal(True)
+
+    def openModulConfigSelector(self):
+        dialog = QtGui.QFileDialog(self)
+        self.moduleCfgPath = str(dialog.getOpenFileName(self, "Select modules.cfg", "/home/stefan/blubb/rl_modules/modules/", "modules.cfg (*.cfg)"))
+        self.modulePath = self.moduleCfgPath.replace("modules.cfg", "")
+
+        from os.path import isfile
+
+        if isfile(self.moduleCfgPath):
+            self.prefDialog.lineEdit.setText(self.moduleCfgPath)
+            self.moduleCfgIsSelected = True
+            self.readInModules()
+
+    def readInModules(self):
+        if self.moduleCfgIsSelected:
+            import codecs
+            f = codecs.open(self.moduleCfgPath, 'r', 'utf-8')
+
+            for line in f:
+                if line.startswith('#'):
+                    continue
+
+                if line.startswith('module='):
+                    splines = line.split('=')
+                    str = splines[1].rstrip().rstrip()
+                    if str != "common":
+                        self.prefDialog.listWidget.addItem(str)
+
+    def onLoadSelectedModule(self):
+        item = self.prefDialog.listWidget.currentItem()
+
+        if item == None:
+            mbox = QtGui.QMessageBox(self)
+            mbox.setModal(True)
+            mbox.setText("Please select a module.")
+            mbox.show()
+        else:
+            tempo = str(item.text())
+            self.loadModuleCallback(self.modulePath, tempo)
+            self.hide()
+
+
+



