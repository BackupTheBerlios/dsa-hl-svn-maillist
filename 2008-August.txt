From chrber at mail.berlios.de  Mon Aug  4 19:47:59 2008
From: chrber at mail.berlios.de (chrber at mail.berlios.de)
Date: Mon, 4 Aug 2008 19:47:59 +0200
Subject: [Dsa-hl-svn] r4456 - in rl/trunk: . engine/common/include
	engine/script/src
Message-ID: <200808041747.m74HlxuL012623@sheep.berlios.de>

Author: chrber
Date: 2008-08-04 19:47:54 +0200 (Mon, 04 Aug 2008)
New Revision: 4456

Modified:
   rl/trunk/configure.in
   rl/trunk/engine/common/include/FixRubyHeaders.h
   rl/trunk/engine/script/src/PlaneNodeProcessor.cpp
Log:
Bumped required CeGUI Version to 0.6
Add newlines at end of file


Modified: rl/trunk/configure.in
===================================================================
--- rl/trunk/configure.in	2008-07-25 08:42:37 UTC (rev 4455)
+++ rl/trunk/configure.in	2008-08-04 17:47:54 UTC (rev 4456)
@@ -73,7 +73,7 @@
 AC_SUBST(OGRE_PLUGINDIR)
 
 # CEGUI
-PKG_CHECK_MODULES([CEGUI], [CEGUI >= 0.5.0])
+PKG_CHECK_MODULES([CEGUI], [CEGUI >= 0.6.0])
 PKG_CHECK_MODULES([CEGUIOGRE], [CEGUI-OGRE])
 
 dnl Other stuff we need

Modified: rl/trunk/engine/common/include/FixRubyHeaders.h
===================================================================
--- rl/trunk/engine/common/include/FixRubyHeaders.h	2008-07-25 08:42:37 UTC (rev 4455)
+++ rl/trunk/engine/common/include/FixRubyHeaders.h	2008-08-04 17:47:54 UTC (rev 4456)
@@ -1,6 +1,6 @@
 /* This source file is part of Rastullahs Lockenpracht.
  * Copyright (C) 2003-2008 Team Pantheon. http://www.team-pantheon.de
- * 
+ *
  *  This program is free software; you can redistribute it and/or modify
  *  it under the terms of the Clarified Artistic License.
  *
@@ -41,44 +41,44 @@
 #undef PACKAGE_TARNAME
 #undef HAVE_VSNPRINTF
 
-#undef EWOULDBLOCK	
-#undef EINPROGRESS	
-#undef EALREADY	
-#undef ENOTSOCK	
-#undef EDESTADDRREQ	
-#undef EMSGSIZE	
-#undef EPROTOTYPE	
-#undef ENOPROTOOPT	
-#undef EPROTONOSUPPORT	
-#undef ESOCKTNOSUPPORT	
-#undef EOPNOTSUPP	
-#undef EPFNOSUPPORT	
-#undef EAFNOSUPPORT	
-#undef EADDRINUSE	
-#undef EADDRNOTAVAIL	
-#undef ENETDOWN	
-#undef ENETUNREACH	
-#undef ENETRESET	
-#undef ECONNABORTED	
-#undef ECONNRESET	
-#undef ENOBUFS		
-#undef EISCONN		
-#undef ENOTCONN	
-#undef ESHUTDOWN	
-#undef ETOOMANYREFS	
-#undef ETIMEDOUT	
-#undef ECONNREFUSED	
-#undef ELOOP		
+#undef EWOULDBLOCK
+#undef EINPROGRESS
+#undef EALREADY
+#undef ENOTSOCK
+#undef EDESTADDRREQ
+#undef EMSGSIZE
+#undef EPROTOTYPE
+#undef ENOPROTOOPT
+#undef EPROTONOSUPPORT
+#undef ESOCKTNOSUPPORT
+#undef EOPNOTSUPP
+#undef EPFNOSUPPORT
+#undef EAFNOSUPPORT
+#undef EADDRINUSE
+#undef EADDRNOTAVAIL
+#undef ENETDOWN
+#undef ENETUNREACH
+#undef ENETRESET
+#undef ECONNABORTED
+#undef ECONNRESET
+#undef ENOBUFS
+#undef EISCONN
+#undef ENOTCONN
+#undef ESHUTDOWN
+#undef ETOOMANYREFS
+#undef ETIMEDOUT
+#undef ECONNREFUSED
+#undef ELOOP
 /*#undef ENAMETOOLONG	*/
-#undef EHOSTDOWN	
-#undef EHOSTUNREACH	
+#undef EHOSTDOWN
+#undef EHOSTUNREACH
 /*#undef ENOTEMPTY	*/
-#undef EPROCLIM	
-#undef EUSERS		
-#undef EDQUOT		
-#undef ESTALE		
-#undef EREMOTE		
+#undef EPROCLIM
+#undef EUSERS
+#undef EDQUOT
+#undef ESTALE
+#undef EREMOTE
 
 #undef CONNECT
 #undef T_CONNECT
-#undef T_DATA
\ No newline at end of file
+#undef T_DATA

Modified: rl/trunk/engine/script/src/PlaneNodeProcessor.cpp
===================================================================
--- rl/trunk/engine/script/src/PlaneNodeProcessor.cpp	2008-07-25 08:42:37 UTC (rev 4455)
+++ rl/trunk/engine/script/src/PlaneNodeProcessor.cpp	2008-08-04 17:47:54 UTC (rev 4456)
@@ -32,7 +32,7 @@
 	{
 	}
 
-	bool PlaneNodeProcessor::processNode(xercesc_2_7::DOMElement *nodeElem, bool loadGameObjects)
+	bool PlaneNodeProcessor::processNode(DOMElement *nodeElem, bool loadGameObjects)
 	{
 		if (!hasNodeName(nodeElem, "plane"))
         {
@@ -119,7 +119,7 @@
 		return true;
 	}
 
-	void PlaneNodeProcessor::createCollision(Ogre::Entity *entity, xercesc_2_7::DOMElement *physicsProxyElem)
+	void PlaneNodeProcessor::createCollision(Ogre::Entity *entity, DOMElement *physicsProxyElem)
 	{
 		bool collisionEnabled = false;
 		if (physicsProxyElem == NULL || !hasAttribute(physicsProxyElem, "type"))
@@ -154,4 +154,4 @@
 			}
 		}
 	}
-}
\ No newline at end of file
+}



From timm at mail.berlios.de  Thu Aug  7 12:29:25 2008
From: timm at mail.berlios.de (timm at mail.berlios.de)
Date: Thu, 7 Aug 2008 12:29:25 +0200
Subject: [Dsa-hl-svn] r4457 - rl/trunk
Message-ID: <200808071029.m77ATPFx003737@sheep.berlios.de>

Author: timm
Date: 2008-08-07 12:29:21 +0200 (Thu, 07 Aug 2008)
New Revision: 4457

Modified:
   rl/trunk/configure.in
Log:
newer boost required

Modified: rl/trunk/configure.in
===================================================================
--- rl/trunk/configure.in	2008-08-04 17:47:54 UTC (rev 4456)
+++ rl/trunk/configure.in	2008-08-07 10:29:21 UTC (rev 4457)
@@ -102,7 +102,7 @@
 PKG_CHECK_MODULES(OIS, OIS >= 1.0.0)
 
 # Boost
-AX_BOOST_BASE(1.33.1)
+AX_BOOST_BASE(1.34)
 AX_BOOST_FILESYSTEM()
 
 dnl --------------------------------------------



From timm at mail.berlios.de  Mon Aug 18 10:58:55 2008
From: timm at mail.berlios.de (timm at mail.berlios.de)
Date: Mon, 18 Aug 2008 10:58:55 +0200
Subject: [Dsa-hl-svn] r4472 - in rl/trunk/engine/script: include src
Message-ID: <200808180858.m7I8wtb0018860@sheep.berlios.de>

Author: timm
Date: 2008-08-18 10:58:43 +0200 (Mon, 18 Aug 2008)
New Revision: 4472

Modified:
   rl/trunk/engine/script/include/PlaneNodeProcessor.h
   rl/trunk/engine/script/src/PlaneNodeProcessor.cpp
Log:
fixed mistyping

Modified: rl/trunk/engine/script/include/PlaneNodeProcessor.h
===================================================================
--- rl/trunk/engine/script/include/PlaneNodeProcessor.h	2008-08-14 10:21:04 UTC (rev 4471)
+++ rl/trunk/engine/script/include/PlaneNodeProcessor.h	2008-08-18 08:58:43 UTC (rev 4472)
@@ -58,12 +58,12 @@
 		void postRenderTargetUpdate(const Ogre::RenderTargetEvent& evt);
 	};
 
-	class PlaneRefactionTextureListener : public Ogre::RenderTargetListener
+	class PlaneRefractionTextureListener : public Ogre::RenderTargetListener
 	{
 	protected:
 		Ogre::Entity* mEntity;
 	public:
-		PlaneRefactionTextureListener(Ogre::Entity* ent);
+		PlaneRefractionTextureListener(Ogre::Entity* ent);
 		void preRenderTargetUpdate(const Ogre::RenderTargetEvent& evt);
 		void postRenderTargetUpdate(const Ogre::RenderTargetEvent& evt);
 	};

Modified: rl/trunk/engine/script/src/PlaneNodeProcessor.cpp
===================================================================
--- rl/trunk/engine/script/src/PlaneNodeProcessor.cpp	2008-08-14 10:21:04 UTC (rev 4471)
+++ rl/trunk/engine/script/src/PlaneNodeProcessor.cpp	2008-08-18 08:58:43 UTC (rev 4472)
@@ -96,22 +96,22 @@
 		plane->d = 0;
 		plane->normal = Vector3::UNIT_Y;
 
-		MeshManager::getSingleton().createPlane(entName, "custom", *plane, 1, 1, 1, 1, true, 1, 1, 1, Vector3::UNIT_Z);
+		MeshManager::getSingleton().createPlane(entName, "custom", *plane, scale.x, scale.y, 1, 1, true, 1, 1, 1, Vector3::UNIT_Z);
 
 		Entity* ent = CoreSubsystem::getSingleton().getWorld()->getSceneManager()->createEntity(entName, entName);
 
 		LOG_DEBUG(Logger::RULES, " Loaded plane "+entName);
 
 		node->attachObject(ent);
-		node->scale(scale.x,1,scale.y);
+		//node->scale(scale.x,1,scale.y);
 
 		createCollision(ent, getChildNamed(nodeElem, "physicsproxy"));
 		
 		DOMElement* materialElem = getChildNamed(nodeElem, "material");
 		if(materialElem)
-		{
+		{	
+			createRenderToTextures(ent, plane, getChildNamed(nodeElem, "renderToTexture"));
 			ent->setMaterialName(getAttributeValueAsStdString(materialElem, "name"));
-			createRenderToTextures(ent, plane, getChildNamed(nodeElem, "renderToTexture"));
 		}
 		else
         {
@@ -164,37 +164,40 @@
 		MeshPtr mesh = entity->getMesh();
 
 		if(getAttributeValueAsBool(rttElem, "reflection"))
-			{
+		{
 			TexturePtr texture = Ogre::TextureManager::getSingleton().createManual( "Reflection" + entity->getName(), 
 				ResourceGroupManager::DEFAULT_RESOURCE_GROUP_NAME, TEX_TYPE_2D, 
 				512, 512, 0, PF_R8G8B8, TU_RENDERTARGET );
 			RenderTexture* rttTex = texture->getBuffer()->getRenderTarget();
-			
+
+			CoreSubsystem::getSingleton().getWorld()->getActiveCamera()->setAutoAspectRatio(true);
 			Viewport *v = rttTex->addViewport( CoreSubsystem::getSingleton().getWorld()->getActiveCamera() ); //Bleibt die Kamera immer die gleiche?
 			v->setOverlaysEnabled(false);
 			rttTex->addListener(new PlaneReflectionTextureListener(entity, CoreSubsystem::getSingleton().getWorld()->getActiveCamera(), plane));
 			
+			int num = mesh->getNumSubMeshes();
 			for(int i = 0; i < mesh->getNumSubMeshes(); i++)
 			{
 				SubMesh* sub = mesh->getSubMesh(i);
 				sub->addTextureAlias("reflection", "Reflection" + entity->getName());
 			}
+			mesh->updateMaterialForAllSubMeshes();
 		}
-		if(getAttributeValueAsBool(rttElem, "refaction"))
+		if(getAttributeValueAsBool(rttElem, "refraction"))
 		{
-			TexturePtr texture = Ogre::TextureManager::getSingleton().createManual( "Refaction" + entity->getName(), 
+			TexturePtr texture = Ogre::TextureManager::getSingleton().createManual( "Refraction" + entity->getName(), 
 				ResourceGroupManager::DEFAULT_RESOURCE_GROUP_NAME, TEX_TYPE_2D, 
 				512, 512, 0, PF_R8G8B8, TU_RENDERTARGET );
 			RenderTexture* rttTex = texture->getBuffer()->getRenderTarget();
 			
 			Viewport *v = rttTex->addViewport( CoreSubsystem::getSingleton().getWorld()->getActiveCamera());
 			v->setOverlaysEnabled(false);
-			rttTex->addListener(new PlaneRefactionTextureListener(entity));
+			rttTex->addListener(new PlaneRefractionTextureListener(entity));
 
 			for(int i = 0; i < mesh->getNumSubMeshes(); i++)
 			{
 				SubMesh* sub = mesh->getSubMesh(i);
-				sub->addTextureAlias("refaction", "Refaction" + entity->getName());
+				sub->addTextureAlias("refraction", "Refraction" + entity->getName());
 			}
 		}
 	}
@@ -218,17 +221,17 @@
 		mCamera->disableReflection();
 	}
 
-	PlaneRefactionTextureListener::PlaneRefactionTextureListener(Entity* ent)
+	PlaneRefractionTextureListener::PlaneRefractionTextureListener(Entity* ent)
 	{
 		mEntity = ent;
 	}
 
-	void PlaneRefactionTextureListener::preRenderTargetUpdate(const Ogre::RenderTargetEvent& evt)
+	void PlaneRefractionTextureListener::preRenderTargetUpdate(const Ogre::RenderTargetEvent& evt)
 	{
 		mEntity->setVisible(false);
 	}
 
-	void PlaneRefactionTextureListener::postRenderTargetUpdate(const Ogre::RenderTargetEvent& evt)
+	void PlaneRefractionTextureListener::postRenderTargetUpdate(const Ogre::RenderTargetEvent& evt)
 	{
 		mEntity->setVisible(true);
 	}



From agrajag at mail.berlios.de  Mon Aug 18 22:41:02 2008
From: agrajag at mail.berlios.de (agrajag at BerliOS)
Date: Mon, 18 Aug 2008 22:41:02 +0200
Subject: [Dsa-hl-svn] r4473 - modules/ruchin/dialogs
Message-ID: <200808182041.m7IKf2V9001316@sheep.berlios.de>

Author: agrajag
Date: 2008-08-18 22:41:01 +0200 (Mon, 18 Aug 2008)
New Revision: 4473

Added:
   modules/ruchin/dialogs/05alrikerafur.dialog
   modules/ruchin/dialogs/06hagenalrike.dialog
Log:
still first sketches of dialogs

Added: modules/ruchin/dialogs/05alrikerafur.dialog
===================================================================
--- modules/ruchin/dialogs/05alrikerafur.dialog	2008-08-18 08:58:43 UTC (rev 4472)
+++ modules/ruchin/dialogs/05alrikerafur.dialog	2008-08-18 20:41:01 UTC (rev 4473)
@@ -0,0 +1,25 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no" ?>
+<!DOCTYPE dialog SYSTEM "/home/mot/DSA-HL/dialog.dtd.xml">
+<dialog name="05AlrikeRafur">
+	<start>
+		<response id="0">
+			<option id="1" autoSelect="true">
+			<t language="de">
+				<p>Heda! Wartet einen Augenblick!</p>
+			</t>
+			<gotoresponse id="2" />
+			</option>
+		</response>
+	</start>
+	<response>
+		TODO HIER MUSS EIN SKRIPT AUSLOESEN, DASS RAFUR WEGRENNEN LAESST
+		<gotoresponse id="3"/>
+	</response>
+	<response id="3">
+		<option id="4" autoSelect="true">
+			<t language="de">
+				<p>Heilige Einfalt - nie machen sie, was man ihnen sagt!</p>
+			</t>
+		</option>
+	</response>
+</dialog>
\ No newline at end of file


Property changes on: modules/ruchin/dialogs/05alrikerafur.dialog
___________________________________________________________________
Name: svn:executable
   + *

Added: modules/ruchin/dialogs/06hagenalrike.dialog
===================================================================
--- modules/ruchin/dialogs/06hagenalrike.dialog	2008-08-18 08:58:43 UTC (rev 4472)
+++ modules/ruchin/dialogs/06hagenalrike.dialog	2008-08-18 20:41:01 UTC (rev 4473)
@@ -0,0 +1,32 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no" ?>
+<!DOCTYPE dialog SYSTEM "/home/mot/DSA-HL/dialog.dtd.xml">
+<dialog name="06HagenAlrike">
+<start>
+<response id="0">
+	<t language="de">
+		<p>So Freundchen, haben wir dich!</p>
+	</t>
+	<gotoresponse id="10"/>
+</response>
+</start>
+
+<response id="10"/>
+<option id="1">
+	<t language="de">
+		<p>Euer Verdienst ist das nicht! Er ist vor mir davongelaufen.</p>
+	</t>
+	<gotoresponse id="20"/>
+</option>
+<option id="2">
+	<t language="de">
+		<p>"Wir" schlie?t mich hoffentlich ein. W?re ich nicht von dieser Seite hinter ihm her gewesen, w?re dieser Strolch l?ngst sonstwo.</p>
+	</t>
+	<gotoresponse id="30"/>
+</option>
+<option id="3">
+	<t language="de">
+		<p>K?nntet Ihr rasch seine Taschen durchsuchen? Ich will wissen, ob er die bei meiner Schwester gestohlenen Dinge noch bei sich tr?gt!</p>
+	</t>
+	<gotoresponse id="40"/>
+</option>
+</response>
\ No newline at end of file



From timm at mail.berlios.de  Mon Aug 18 22:50:47 2008
From: timm at mail.berlios.de (timm at mail.berlios.de)
Date: Mon, 18 Aug 2008 22:50:47 +0200
Subject: [Dsa-hl-svn] r4474 - in modules/regressiontest: maps materials
Message-ID: <200808182050.m7IKoltG001966@sheep.berlios.de>

Author: timm
Date: 2008-08-18 22:50:36 +0200 (Mon, 18 Aug 2008)
New Revision: 4474

Added:
   modules/regressiontest/materials/basic_reflection.material
Modified:
   modules/regressiontest/maps/regressiontest.scene
Log:
Plane testing files with basic reflection material

Modified: modules/regressiontest/maps/regressiontest.scene
===================================================================
--- modules/regressiontest/maps/regressiontest.scene	2008-08-18 20:41:01 UTC (rev 4473)
+++ modules/regressiontest/maps/regressiontest.scene	2008-08-18 20:50:36 UTC (rev 4474)
@@ -1,11 +1,18 @@
-<scene formatVersion="0.4.0">
-    <nodes>
-        <entity meshfile="regressiontest_floorplane.mesh">
-            <position x="0.0" y="0.0" z="0.0" />
-            <scale x="1.0" y="1.0" z="1.0" />
-        </entity>
-        <gameobject class="mckhero" id="10" state="IN_SCENE">
-            <position x="2" y="0.0" z="0"/>
-        </gameobject>
-    </nodes>
-</scene>
+<scene formatVersion="0.4.0">
+    <nodes>
+	  <plane name="test">
+		<position x="1" y="0.45" z="1"/>
+		<scale x="10" y="2"/>
+		<physicsproxy collision="true" />
+		<renderToTexture reflection="true"/>
+		<material name="basic_reflection"/>
+	  </plane>  
+	  <entity meshfile="regressiontest_floorplane.mesh">
+            <position x="0.0" y="0.0" z="0.0" />
+            <scale x="1.0" y="1.0" z="1.0" />
+        </entity>
+        <gameobject class="mckhero" id="10" state="IN_SCENE">
+            <position x="2" y="0.0" z="0"/>
+        </gameobject>
+    </nodes>
+</scene>

Added: modules/regressiontest/materials/basic_reflection.material
===================================================================
--- modules/regressiontest/materials/basic_reflection.material	2008-08-18 20:41:01 UTC (rev 4473)
+++ modules/regressiontest/materials/basic_reflection.material	2008-08-18 20:50:36 UTC (rev 4474)
@@ -0,0 +1,17 @@
+material basic_reflection
+{
+	technique
+	{
+		pass
+		{
+			ambient 1.000000 0.8 0.200000
+			diffuse 1.000000 0.769854 0.000000
+			specular 0.500000 0.246996 0.000000 30.500000
+			texture_unit
+			{
+				texture_alias reflection
+				texture nx.zone.orange.png
+			}
+		}
+	}
+}



From timm at mail.berlios.de  Tue Aug 19 00:26:35 2008
From: timm at mail.berlios.de (timm at mail.berlios.de)
Date: Tue, 19 Aug 2008 00:26:35 +0200
Subject: [Dsa-hl-svn] r4475 - in rl/trunk/engine/script: include src
Message-ID: <200808182226.m7IMQYta011112@sheep.berlios.de>

Author: timm
Date: 2008-08-19 00:26:26 +0200 (Tue, 19 Aug 2008)
New Revision: 4475

Modified:
   rl/trunk/engine/script/include/PlaneNodeProcessor.h
   rl/trunk/engine/script/src/PlaneNodeProcessor.cpp
Log:
Render to textures working on plane. Need to fix aspect ratio.

Modified: rl/trunk/engine/script/include/PlaneNodeProcessor.h
===================================================================
--- rl/trunk/engine/script/include/PlaneNodeProcessor.h	2008-08-18 20:50:36 UTC (rev 4474)
+++ rl/trunk/engine/script/include/PlaneNodeProcessor.h	2008-08-18 22:26:26 UTC (rev 4475)
@@ -43,7 +43,7 @@
     private:
 
         void createCollision(Ogre::Entity* entity, XERCES_CPP_NAMESPACE::DOMElement* physicsProxyElem);
-		void createRenderToTextures(Ogre::Entity* entity, Ogre::Plane* plane, XERCES_CPP_NAMESPACE::DOMElement* rttElem);
+		void createRenderToTextures(Ogre::Entity* entity, Ogre::Plane* plane, Ogre::MaterialPtr mat, XERCES_CPP_NAMESPACE::DOMElement* rttElem);
 	};
 
 	class PlaneReflectionTextureListener : public Ogre::RenderTargetListener

Modified: rl/trunk/engine/script/src/PlaneNodeProcessor.cpp
===================================================================
--- rl/trunk/engine/script/src/PlaneNodeProcessor.cpp	2008-08-18 20:50:36 UTC (rev 4474)
+++ rl/trunk/engine/script/src/PlaneNodeProcessor.cpp	2008-08-18 22:26:26 UTC (rev 4475)
@@ -110,8 +110,15 @@
 		DOMElement* materialElem = getChildNamed(nodeElem, "material");
 		if(materialElem)
 		{	
-			createRenderToTextures(ent, plane, getChildNamed(nodeElem, "renderToTexture"));
-			ent->setMaterialName(getAttributeValueAsStdString(materialElem, "name"));
+			if(getChildNamed(nodeElem, "renderToTexture"))
+			{
+				Ogre::String matName = getAttributeValueAsStdString(materialElem, "name");
+				MaterialPtr material = static_cast<MaterialPtr>(MaterialManager::getSingleton().getByName(matName))->clone(matName + entName);
+				createRenderToTextures(ent, plane, material, getChildNamed(nodeElem, "renderToTexture"));
+				ent->setMaterialName(matName + entName);
+			}
+			else
+				ent->setMaterialName(getAttributeValueAsStdString(materialElem, "name"));
 		}
 		else
         {
@@ -156,12 +163,13 @@
 		}
 	}
 
-	void PlaneNodeProcessor::createRenderToTextures(Ogre::Entity* entity, Plane* plane, XERCES_CPP_NAMESPACE::DOMElement* rttElem)
+	void PlaneNodeProcessor::createRenderToTextures(Ogre::Entity* entity, Plane* plane, MaterialPtr material, XERCES_CPP_NAMESPACE::DOMElement* rttElem)
 	{
 		if(rttElem == NULL)
 			return;
 
-		MeshPtr mesh = entity->getMesh();
+		//MeshPtr mesh = entity->getMesh();
+		AliasTextureNamePairList aliases;
 
 		if(getAttributeValueAsBool(rttElem, "reflection"))
 		{
@@ -175,13 +183,14 @@
 			v->setOverlaysEnabled(false);
 			rttTex->addListener(new PlaneReflectionTextureListener(entity, CoreSubsystem::getSingleton().getWorld()->getActiveCamera(), plane));
 			
-			int num = mesh->getNumSubMeshes();
+			aliases["reflection"] = "Reflection" + entity->getName();
+			/*int num = mesh->getNumSubMeshes();
 			for(int i = 0; i < mesh->getNumSubMeshes(); i++)
 			{
 				SubMesh* sub = mesh->getSubMesh(i);
 				sub->addTextureAlias("reflection", "Reflection" + entity->getName());
 			}
-			mesh->updateMaterialForAllSubMeshes();
+			mesh->updateMaterialForAllSubMeshes();*/
 		}
 		if(getAttributeValueAsBool(rttElem, "refraction"))
 		{
@@ -194,12 +203,15 @@
 			v->setOverlaysEnabled(false);
 			rttTex->addListener(new PlaneRefractionTextureListener(entity));
 
-			for(int i = 0; i < mesh->getNumSubMeshes(); i++)
+			aliases["refraction"] = "Refraction" + entity->getName();
+			/*for(int i = 0; i < mesh->getNumSubMeshes(); i++)
 			{
 				SubMesh* sub = mesh->getSubMesh(i);
 				sub->addTextureAlias("refraction", "Refraction" + entity->getName());
-			}
+			}*/
 		}
+		if(!material->applyTextureAliases(aliases))
+			LOG_ERROR("PLANE", "Texture Aliase konnten nicht angewandt werden");
 	}
 
 	PlaneReflectionTextureListener::PlaneReflectionTextureListener(Ogre::Entity *ent, Ogre::Camera* cam, Plane* plane)



From timm at mail.berlios.de  Tue Aug 19 01:08:40 2008
From: timm at mail.berlios.de (timm at mail.berlios.de)
Date: Tue, 19 Aug 2008 01:08:40 +0200
Subject: [Dsa-hl-svn] r4476 - in rl/trunk/engine/script: include src
Message-ID: <200808182308.m7IN8ekf024166@sheep.berlios.de>

Author: timm
Date: 2008-08-19 01:08:31 +0200 (Tue, 19 Aug 2008)
New Revision: 4476

Modified:
   rl/trunk/engine/script/include/PlaneNodeProcessor.h
   rl/trunk/engine/script/src/PlaneNodeProcessor.cpp
Log:
give reflections own cameras

Modified: rl/trunk/engine/script/include/PlaneNodeProcessor.h
===================================================================
--- rl/trunk/engine/script/include/PlaneNodeProcessor.h	2008-08-18 22:26:26 UTC (rev 4475)
+++ rl/trunk/engine/script/include/PlaneNodeProcessor.h	2008-08-18 23:08:31 UTC (rev 4476)
@@ -62,8 +62,9 @@
 	{
 	protected:
 		Ogre::Entity* mEntity;
+		Ogre::Camera* mCamera;
 	public:
-		PlaneRefractionTextureListener(Ogre::Entity* ent);
+		PlaneRefractionTextureListener(Ogre::Entity* ent, Ogre::Camera* cam);
 		void preRenderTargetUpdate(const Ogre::RenderTargetEvent& evt);
 		void postRenderTargetUpdate(const Ogre::RenderTargetEvent& evt);
 	};

Modified: rl/trunk/engine/script/src/PlaneNodeProcessor.cpp
===================================================================
--- rl/trunk/engine/script/src/PlaneNodeProcessor.cpp	2008-08-18 22:26:26 UTC (rev 4475)
+++ rl/trunk/engine/script/src/PlaneNodeProcessor.cpp	2008-08-18 23:08:31 UTC (rev 4476)
@@ -96,7 +96,7 @@
 		plane->d = 0;
 		plane->normal = Vector3::UNIT_Y;
 
-		MeshManager::getSingleton().createPlane(entName, "custom", *plane, scale.x, scale.y, 1, 1, true, 1, 1, 1, Vector3::UNIT_Z);
+		MeshManager::getSingleton().createPlane(entName, "custom", *plane, scale.x, scale.y, 10, 10, true, 1, 1, 1, Vector3::UNIT_Z);
 
 		Entity* ent = CoreSubsystem::getSingleton().getWorld()->getSceneManager()->createEntity(entName, entName);
 
@@ -168,6 +168,9 @@
 		if(rttElem == NULL)
 			return;
 
+		Camera* cam = CoreSubsystem::getSingleton().getWorld()->getSceneManager()->createCamera("Cam" + entity->getName());
+		cam->setFOVy(CoreSubsystem::getSingleton().getWorld()->getActiveCamera()->getFOVy());
+		cam->enableCustomNearClipPlane((MovablePlane*)plane);
 		//MeshPtr mesh = entity->getMesh();
 		AliasTextureNamePairList aliases;
 
@@ -178,10 +181,9 @@
 				512, 512, 0, PF_R8G8B8, TU_RENDERTARGET );
 			RenderTexture* rttTex = texture->getBuffer()->getRenderTarget();
 
-			CoreSubsystem::getSingleton().getWorld()->getActiveCamera()->setAutoAspectRatio(true);
-			Viewport *v = rttTex->addViewport( CoreSubsystem::getSingleton().getWorld()->getActiveCamera() ); //Bleibt die Kamera immer die gleiche?
+			Viewport *v = rttTex->addViewport( cam ); //Bleibt die Kamera immer die gleiche?
 			v->setOverlaysEnabled(false);
-			rttTex->addListener(new PlaneReflectionTextureListener(entity, CoreSubsystem::getSingleton().getWorld()->getActiveCamera(), plane));
+			rttTex->addListener(new PlaneReflectionTextureListener(entity, cam, plane));
 			
 			aliases["reflection"] = "Reflection" + entity->getName();
 			/*int num = mesh->getNumSubMeshes();
@@ -199,9 +201,9 @@
 				512, 512, 0, PF_R8G8B8, TU_RENDERTARGET );
 			RenderTexture* rttTex = texture->getBuffer()->getRenderTarget();
 			
-			Viewport *v = rttTex->addViewport( CoreSubsystem::getSingleton().getWorld()->getActiveCamera());
+			Viewport *v = rttTex->addViewport( cam);
 			v->setOverlaysEnabled(false);
-			rttTex->addListener(new PlaneRefractionTextureListener(entity));
+			rttTex->addListener(new PlaneRefractionTextureListener(entity, cam));
 
 			aliases["refraction"] = "Refraction" + entity->getName();
 			/*for(int i = 0; i < mesh->getNumSubMeshes(); i++)
@@ -223,6 +225,8 @@
 
 	void PlaneReflectionTextureListener::preRenderTargetUpdate(const RenderTargetEvent &evt)
 	{
+		mCamera->setPosition(CoreSubsystem::getSingleton().getWorld()->getActiveCamera()->getPosition());
+		mCamera->setOrientation(CoreSubsystem::getSingleton().getWorld()->getActiveCamera()->getOrientation());
 		mEntity->setVisible(false);
 		mCamera->enableReflection(*mPlane);
 	}
@@ -233,13 +237,16 @@
 		mCamera->disableReflection();
 	}
 
-	PlaneRefractionTextureListener::PlaneRefractionTextureListener(Entity* ent)
+	PlaneRefractionTextureListener::PlaneRefractionTextureListener(Entity* ent, Camera* cam)
 	{
 		mEntity = ent;
+		mCamera = cam;
 	}
 
 	void PlaneRefractionTextureListener::preRenderTargetUpdate(const Ogre::RenderTargetEvent& evt)
 	{
+		mCamera->setPosition(CoreSubsystem::getSingleton().getWorld()->getActiveCamera()->getPosition());
+		mCamera->setOrientation(CoreSubsystem::getSingleton().getWorld()->getActiveCamera()->getOrientation());
 		mEntity->setVisible(false);
 	}
 



From timm at mail.berlios.de  Tue Aug 19 12:03:45 2008
From: timm at mail.berlios.de (timm at mail.berlios.de)
Date: Tue, 19 Aug 2008 12:03:45 +0200
Subject: [Dsa-hl-svn] r4477 - rl/trunk/engine/script/src
Message-ID: <200808191003.m7JA3jSo018391@sheep.berlios.de>

Author: timm
Date: 2008-08-19 12:03:38 +0200 (Tue, 19 Aug 2008)
New Revision: 4477

Modified:
   rl/trunk/engine/script/src/PlaneNodeProcessor.cpp
Log:
using world position of camera

Modified: rl/trunk/engine/script/src/PlaneNodeProcessor.cpp
===================================================================
--- rl/trunk/engine/script/src/PlaneNodeProcessor.cpp	2008-08-18 23:08:31 UTC (rev 4476)
+++ rl/trunk/engine/script/src/PlaneNodeProcessor.cpp	2008-08-19 10:03:38 UTC (rev 4477)
@@ -225,8 +225,8 @@
 
 	void PlaneReflectionTextureListener::preRenderTargetUpdate(const RenderTargetEvent &evt)
 	{
-		mCamera->setPosition(CoreSubsystem::getSingleton().getWorld()->getActiveCamera()->getPosition());
-		mCamera->setOrientation(CoreSubsystem::getSingleton().getWorld()->getActiveCamera()->getOrientation());
+		mCamera->setPosition(CoreSubsystem::getSingleton().getWorld()->getActiveCamera()->getWorldPosition());
+		mCamera->setOrientation(CoreSubsystem::getSingleton().getWorld()->getActiveCamera()->getWorldOrientation());
 		mEntity->setVisible(false);
 		mCamera->enableReflection(*mPlane);
 	}
@@ -245,8 +245,8 @@
 
 	void PlaneRefractionTextureListener::preRenderTargetUpdate(const Ogre::RenderTargetEvent& evt)
 	{
-		mCamera->setPosition(CoreSubsystem::getSingleton().getWorld()->getActiveCamera()->getPosition());
-		mCamera->setOrientation(CoreSubsystem::getSingleton().getWorld()->getActiveCamera()->getOrientation());
+		mCamera->setPosition(CoreSubsystem::getSingleton().getWorld()->getActiveCamera()->getWorldPosition());
+		mCamera->setOrientation(CoreSubsystem::getSingleton().getWorld()->getActiveCamera()->getWorldOrientation());
 		mEntity->setVisible(false);
 	}
 



From melven at mail.berlios.de  Sat Aug 23 14:39:23 2008
From: melven at mail.berlios.de (melven at mail.berlios.de)
Date: Sat, 23 Aug 2008 14:39:23 +0200
Subject: [Dsa-hl-svn] r4478 - in rl/branches/newton20/engine: core/include
	core/src rules/include rules/src ui/src
Message-ID: <200808231239.m7NCdNEp027324@sheep.berlios.de>

Author: melven
Date: 2008-08-23 14:39:18 +0200 (Sat, 23 Aug 2008)
New Revision: 4478

Modified:
   rl/branches/newton20/engine/core/include/Actor.h
   rl/branches/newton20/engine/core/include/SoundManager.h
   rl/branches/newton20/engine/core/src/Actor.cpp
   rl/branches/newton20/engine/core/src/ListenerObject.cpp
   rl/branches/newton20/engine/core/src/PhysicalThing.cpp
   rl/branches/newton20/engine/core/src/SoundObject.cpp
   rl/branches/newton20/engine/rules/include/CreatureController.h
   rl/branches/newton20/engine/rules/src/CreatureController.cpp
   rl/branches/newton20/engine/rules/src/GoToJob.cpp
   rl/branches/newton20/engine/rules/src/RotateMovement.cpp
   rl/branches/newton20/engine/ui/src/InputManager.cpp
Log:
-fixed GoToJob
-set Position of SoundObject correctly when using the default-slot (still? problem with actor and slot with the torch in regressiontest)
-some small changes to the movement-system



Modified: rl/branches/newton20/engine/core/include/Actor.h
===================================================================
--- rl/branches/newton20/engine/core/include/Actor.h	2008-08-19 10:03:38 UTC (rev 4477)
+++ rl/branches/newton20/engine/core/include/Actor.h	2008-08-23 12:39:18 UTC (rev 4478)
@@ -144,6 +144,9 @@
         /// Gibt die aktuelle Position des Aktors relativ zur Welt zur?ck
         const Ogre::Vector3& getWorldPosition(void) const;
 
+        /// Ermittelt die aktuelle Geschwindigkeit des Actors, falls moeglich
+        const Ogre::Vector3 getVelocity() const;
+
         /// Setzt die Position des Aktors relativ zu seinem Parent
         void setPosition(const Ogre::Vector3& vec);
         /// Setzt die Position des Aktors relativ zu seinem Parent

Modified: rl/branches/newton20/engine/core/include/SoundManager.h
===================================================================
--- rl/branches/newton20/engine/core/include/SoundManager.h	2008-08-19 10:03:38 UTC (rev 4477)
+++ rl/branches/newton20/engine/core/include/SoundManager.h	2008-08-23 12:39:18 UTC (rev 4478)
@@ -83,7 +83,7 @@
         Ogre::NameValuePairList getSettings() const;
 
         /// 3D-Sound aktualisieren.
-        void update();
+        //void update(); // there is no implementation of this function and it is never used!
         /// Den aktiven Treiber zurckgeben.
         SoundDriver* getActiveDriver() const;
         /// Den aktiven Treiber setzen.

Modified: rl/branches/newton20/engine/core/src/Actor.cpp
===================================================================
--- rl/branches/newton20/engine/core/src/Actor.cpp	2008-08-19 10:03:38 UTC (rev 4477)
+++ rl/branches/newton20/engine/core/src/Actor.cpp	2008-08-23 12:39:18 UTC (rev 4478)
@@ -317,6 +317,10 @@
         {
             return mBone->getPosition();
         }
+        else if (mParent)
+        {
+            return mParent->getPosition();
+        }
         else
         {
             return Vector3::ZERO;
@@ -326,6 +330,22 @@
         }
     }
 
+    const Vector3 Actor::getVelocity() const
+    {
+        if (mPhysicalThing)
+        {
+            return mPhysicalThing->getVelocity();
+        }
+        else if ( mParent )
+        {
+            return mParent->getVelocity();
+        }
+        else
+        {
+            return Vector3::ZERO;
+        }
+    }
+
     const Quaternion& Actor::getOrientation(void) const
     {
         if (mSceneNode)
@@ -336,6 +356,10 @@
         {
             return mBone->getOrientation();
         }
+        else if (mParent)
+        {
+            return mParent->getOrientation();
+        }
         else
         {
             return Quaternion::IDENTITY;
@@ -355,6 +379,10 @@
         {
             return mBone->_getDerivedPosition();
         }
+        else if (mParent)
+        {
+            return mParent->getWorldPosition();
+        }
         else
         {
             return Vector3::ZERO;
@@ -417,6 +445,10 @@
         {
             return mBone->_getDerivedOrientation();
         }
+        else if (mParent)
+        {
+            return mParent->getWorldOrientation();
+        }
         else
         {
             Throw(IllegalStateException,
@@ -533,6 +565,7 @@
         // Erst danach Parent/Child wirklich zuweisen, falls es eine Exception gibt.
         actor->mParent = this;
         mChildren.insert(actor);
+        actor->_update();
     }
 
     void Actor::attachToSlotAxisRot(

Modified: rl/branches/newton20/engine/core/src/ListenerObject.cpp
===================================================================
--- rl/branches/newton20/engine/core/src/ListenerObject.cpp	2008-08-19 10:03:38 UTC (rev 4477)
+++ rl/branches/newton20/engine/core/src/ListenerObject.cpp	2008-08-23 12:39:18 UTC (rev 4478)
@@ -71,7 +71,8 @@
         return;
     }
     listener->setPosition(actor->getWorldPosition());
-	listener->setOrientation(actor->getWorldOrientation());
+    listener->setOrientation(actor->getWorldOrientation());
+    listener->setVelocity(actor->getVelocity());
     LOG_DEBUG(Logger::CORE, "Pos Listener: "
         + StringConverter::toString(actor->getWorldPosition().x) + " "
         + StringConverter::toString(actor->getWorldPosition().y) + " "
@@ -81,8 +82,6 @@
         + StringConverter::toString(actor->getWorldOrientation().x) + " "
         + StringConverter::toString(actor->getWorldOrientation().y) + ", "
         + StringConverter::toString(actor->getWorldOrientation().z));
-//    listener->setOrientation(*temp1, *temp1);
-    // TODO Orientation korrigieren
 }
 
 /**

Modified: rl/branches/newton20/engine/core/src/PhysicalThing.cpp
===================================================================
--- rl/branches/newton20/engine/core/src/PhysicalThing.cpp	2008-08-19 10:03:38 UTC (rev 4477)
+++ rl/branches/newton20/engine/core/src/PhysicalThing.cpp	2008-08-23 12:39:18 UTC (rev 4478)
@@ -199,7 +199,7 @@
 
     void PhysicalThing::addForce(const Ogre::Vector3& force)
     {
-        //mBody->unFreeze();
+        mBody->unFreeze();
         mPendingForce += force;
     }
 
@@ -308,12 +308,12 @@
 
     void PhysicalThing::freeze()
     {
-        //mBody->freeze();
+        mBody->freeze();
     }
 
     void PhysicalThing::unfreeze()
     {
-        //mBody->unFreeze();
+        mBody->unFreeze();
     }
 
     void PhysicalThing::setContactListener(PhysicsContactListener* listener)
@@ -485,9 +485,9 @@
             // prepare for control
             mPhysicsController = controller;
             //mBody->setAutoFreeze(0);
-            //mBody->unFreeze();
-            //mBody->setLinearDamping(0.0f);
-            //mBody->setAngularDamping(Vector3::ZERO);
+            mBody->unFreeze();
+            mBody->setLinearDamping(0.0f);
+            mBody->setAngularDamping(Vector3::ZERO);
 
             mBody->setCustomForceAndTorqueCallback( PhysicsManager::controlledForceCallback );
 

Modified: rl/branches/newton20/engine/core/src/SoundObject.cpp
===================================================================
--- rl/branches/newton20/engine/core/src/SoundObject.cpp	2008-08-19 10:03:38 UTC (rev 4477)
+++ rl/branches/newton20/engine/core/src/SoundObject.cpp	2008-08-23 12:39:18 UTC (rev 4478)
@@ -144,6 +144,7 @@
 void SoundObject::set3d( bool is3d )
 {
 	getSound()->set3d(is3d);
+        _update(); // do we need this here?
 }
 
 void SoundObject::load()

Modified: rl/branches/newton20/engine/rules/include/CreatureController.h
===================================================================
--- rl/branches/newton20/engine/rules/include/CreatureController.h	2008-08-19 10:03:38 UTC (rev 4477)
+++ rl/branches/newton20/engine/rules/include/CreatureController.h	2008-08-23 12:39:18 UTC (rev 4478)
@@ -114,7 +114,7 @@
          * @param direction This is the movement direction in local space.
 		 *                  If the direction isn't possible (see AbstractMovement::isDirectionPossible),
 		 *                  only a "part" of the direction is applied.
-         * @param rotation like above
+         * @param rotation like above (in radians)
          * @retval false signifies that the change to this movement was not possible (possibly because the present movement forbade it)
          */
         bool setMovement(MovementType type, Ogre::Vector3 direction, Ogre::Vector3 rotation);

Modified: rl/branches/newton20/engine/rules/src/CreatureController.cpp
===================================================================
--- rl/branches/newton20/engine/rules/src/CreatureController.cpp	2008-08-19 10:03:38 UTC (rev 4477)
+++ rl/branches/newton20/engine/rules/src/CreatureController.cpp	2008-08-23 12:39:18 UTC (rev 4478)
@@ -445,7 +445,7 @@
 //getContactTangentDirections(vec1, vec2);
 //oss << "  \t Tangent-Directions: " << vec1 << " " << vec2;
 //LOG_MESSAGE(Logger::RULES, oss.str());
-/*
+
         setContactFrictionState(0,0);
         setContactFrictionState(0,1);
 
@@ -483,7 +483,6 @@
                 setContactFrictionState(0,1);
             }
         }
-*/
 
         if(mMovement != NULL)
         {

Modified: rl/branches/newton20/engine/rules/src/GoToJob.cpp
===================================================================
--- rl/branches/newton20/engine/rules/src/GoToJob.cpp	2008-08-19 10:03:38 UTC (rev 4477)
+++ rl/branches/newton20/engine/rules/src/GoToJob.cpp	2008-08-23 12:39:18 UTC (rev 4478)
@@ -34,6 +34,8 @@
 		  mTimeLeft(duration)
 	{
 		mActor = CreatureControllerManager::getSingleton().getCreatureController(actor);
+                if( mActor == NULL )
+                    Throw(NullPointerException, "Couldn't get a CreatureController!");
 	}
 
 	GoToJob::GoToJob(Creature* actor, GameObject* target, Real maxDistance, Real duration)
@@ -45,6 +47,10 @@
 		  mTimeLeft(duration)
 	{
 		mActor = CreatureControllerManager::getSingleton().getCreatureController(actor);
+                if( mActor == NULL )
+                    Throw(NullPointerException, "Couldn't get a CreatureController!");
+                if( mTarget == NULL )
+                    Throw(NullPointerException, "Argument GameObject* target cannot be NULL!");
 	}
 
     GoToJob::~GoToJob()
@@ -60,15 +66,25 @@
 			mActor->setMovement(CreatureController::MT_STEHEN, Vector3::ZERO, Vector3::ZERO);
 			return true;
 		}
+
+                Ogre::Real distance = 0;
+
 		// update target position
 		if (mTarget)
 		{
 			mTargetPos = mTarget->getPosition();
+		        // Are we there now?
+		        distance = MathUtil::distance(mTarget->getWorldBoundingBox(),
+			    mActor->getCreature()->getWorldBoundingBox());
 		}
+                else
+                {
+                    if( mActor->getCreature()->getWorldBoundingBox().intersects(mTargetPos) )
+                        distance = 0;
+                    else
+                        distance = (mTargetPos - mActor->getCreature()->getPosition()).length();
+                }
 
-		// Are we there now?
-		Ogre::Real distance = MathUtil::distance(mTarget->getWorldBoundingBox(),
-			mActor->getCreature()->getWorldBoundingBox());
 		if (distance < mMaxDistance)
 		{
 			// Stay put where ever we are.
@@ -76,6 +92,8 @@
 			return true;
 		}
 
+
+                /*
 		// Hard set orientation.
 		/// @todo Use CreatureController properly to turn smoothly
 		Vector3 pos = mActor->getCreature()->getPosition();
@@ -84,8 +102,13 @@
 		targetPos.y = 0;
 		mActor->getCreature()->setOrientation(Vector3::NEGATIVE_UNIT_Z.getRotationTo(targetPos - pos));
 		mActor->setMovement(CreatureController::MT_LAUFEN, Vector3::NEGATIVE_UNIT_Z, Vector3::ZERO);
+                */
+		Vector3 pos = mActor->getCreature()->getPosition();
+                Radian yawDiff = Vector3::NEGATIVE_UNIT_Z.getRotationTo(mTargetPos-pos, Vector3::UNIT_Y).getYaw() - mActor->getYaw();
+                Vector3 rotation = Vector3::UNIT_Y*yawDiff.valueRadians();
+		mActor->setMovement(CreatureController::MT_LAUFEN, Vector3::NEGATIVE_UNIT_Z, rotation);
 
-		mTimeLeft  -= time;
+                mTimeLeft  -= time;
 		return false;
 	}
 }

Modified: rl/branches/newton20/engine/rules/src/RotateMovement.cpp
===================================================================
--- rl/branches/newton20/engine/rules/src/RotateMovement.cpp	2008-08-19 10:03:38 UTC (rev 4477)
+++ rl/branches/newton20/engine/rules/src/RotateMovement.cpp	2008-08-23 12:39:18 UTC (rev 4478)
@@ -28,7 +28,7 @@
     RotateMovement::RotateMovement(CreatureController *creature) : AbstractMovement(creature), mYaw(0)
     {
         mRotLinearSpringK = 600.0f;
-        Real relationCoefficient = 1.1f;
+        Real relationCoefficient = 1.0f;
         mRotLinearDampingK = relationCoefficient * 2.0f * Math::Sqrt(mRotLinearSpringK);
     }
 

Modified: rl/branches/newton20/engine/ui/src/InputManager.cpp
===================================================================
--- rl/branches/newton20/engine/ui/src/InputManager.cpp	2008-08-19 10:03:38 UTC (rev 4477)
+++ rl/branches/newton20/engine/ui/src/InputManager.cpp	2008-08-23 12:39:18 UTC (rev 4478)
@@ -121,8 +121,8 @@
             pl.insert(std::make_pair(std::string("w32_keyboard"), std::string("DISCL_EXCLUSIVE")));
             pl.insert(std::make_pair(std::string("w32_keyboard"), std::string("DISCL_FOREGROUND")));
         #elif OGRE_PLATFORM == OGRE_PLATFORM_LINUX & defined DEBUG
-//            pl.insert(std::make_pair(std::string("x11_mouse_grab"), std::string("false")));
-//            pl.insert(std::make_pair(std::string("x11_keyboard_grab"), std::string("false")));
+            pl.insert(std::make_pair(std::string("x11_mouse_grab"), std::string("false")));
+            pl.insert(std::make_pair(std::string("x11_keyboard_grab"), std::string("false")));
         #endif
 
         std::ostringstream windowHndStr;



From melven at mail.berlios.de  Sat Aug 23 14:41:06 2008
From: melven at mail.berlios.de (melven at mail.berlios.de)
Date: Sat, 23 Aug 2008 14:41:06 +0200
Subject: [Dsa-hl-svn] r4479 - in modules/common/scripts: . jobs
Message-ID: <200808231241.m7NCf6Q0027523@sheep.berlios.de>

Author: melven
Date: 2008-08-23 14:41:05 +0200 (Sat, 23 Aug 2008)
New Revision: 4479

Modified:
   modules/common/scripts/jobs/gotojobs.rb
   modules/common/scripts/torch.rb
Log:
-fixed GoToJob
-attach sound of torch directly (works fine with engine changes in branch newton20, without these changes, there should be no difference)


Modified: modules/common/scripts/jobs/gotojobs.rb
===================================================================
--- modules/common/scripts/jobs/gotojobs.rb	2008-08-23 12:39:18 UTC (rev 4478)
+++ modules/common/scripts/jobs/gotojobs.rb	2008-08-23 12:41:05 UTC (rev 4479)
@@ -1,10 +1,10 @@
 require 'globals.rb'
 
 def GoTo(acting_creature, targetpos)
-    job = GoToJob.new(acting_creature, targetpos, 1000000, 1000000)
+    job = GoToJob.new(acting_creature, targetpos, 0.5, 1000000)
     $JS.addJob(job)
 end
 
 def _GoTo(acting_creature, targetpos)
-    GoToJob.new(acting_creature, targetpos, 1000000, 1000000)
+    GoToJob.new(acting_creature, targetpos, 0.5, 1000000)
 end

Modified: modules/common/scripts/torch.rb
===================================================================
--- modules/common/scripts/torch.rb	2008-08-23 12:39:18 UTC (rev 4478)
+++ modules/common/scripts/torch.rb	2008-08-23 12:41:05 UTC (rev 4479)
@@ -127,7 +127,8 @@
 				@sound.getControlledObject().setVolume(0.5);
 				@sound.getControlledObject().setLooping(true)
 				@sound.getControlledObject().set3d(true)
-				getActor().attachToSlot(@sound, "SLOT_FAR_END")
+				#getActor().attachToSlot(@sound, "SLOT_FAR_END")
+                                getActor().attach(@sound) # here the position is set correctly!
 			end
 
 			if @light == nil



From melven at mail.berlios.de  Sat Aug 23 14:51:21 2008
From: melven at mail.berlios.de (melven at mail.berlios.de)
Date: Sat, 23 Aug 2008 14:51:21 +0200
Subject: [Dsa-hl-svn] r4480 - in rl/branches/newton20/engine/script: include
	src
Message-ID: <200808231251.m7NCpLfY028358@sheep.berlios.de>

Author: melven
Date: 2008-08-23 14:51:20 +0200 (Sat, 23 Aug 2008)
New Revision: 4480

Modified:
   rl/branches/newton20/engine/script/include/PlaneNodeProcessor.h
   rl/branches/newton20/engine/script/src/PlaneNodeProcessor.cpp
Log:
merged changes from trunk


Modified: rl/branches/newton20/engine/script/include/PlaneNodeProcessor.h
===================================================================
--- rl/branches/newton20/engine/script/include/PlaneNodeProcessor.h	2008-08-23 12:41:05 UTC (rev 4479)
+++ rl/branches/newton20/engine/script/include/PlaneNodeProcessor.h	2008-08-23 12:51:20 UTC (rev 4480)
@@ -43,7 +43,7 @@
     private:
 
         void createCollision(Ogre::Entity* entity, XERCES_CPP_NAMESPACE::DOMElement* physicsProxyElem);
-		void createRenderToTextures(Ogre::Entity* entity, Ogre::Plane* plane, XERCES_CPP_NAMESPACE::DOMElement* rttElem);
+		void createRenderToTextures(Ogre::Entity* entity, Ogre::Plane* plane, Ogre::MaterialPtr mat, XERCES_CPP_NAMESPACE::DOMElement* rttElem);
 	};
 
 	class PlaneReflectionTextureListener : public Ogre::RenderTargetListener
@@ -58,12 +58,13 @@
 		void postRenderTargetUpdate(const Ogre::RenderTargetEvent& evt);
 	};
 
-	class PlaneRefactionTextureListener : public Ogre::RenderTargetListener
+	class PlaneRefractionTextureListener : public Ogre::RenderTargetListener
 	{
 	protected:
 		Ogre::Entity* mEntity;
+		Ogre::Camera* mCamera;
 	public:
-		PlaneRefactionTextureListener(Ogre::Entity* ent);
+		PlaneRefractionTextureListener(Ogre::Entity* ent, Ogre::Camera* cam);
 		void preRenderTargetUpdate(const Ogre::RenderTargetEvent& evt);
 		void postRenderTargetUpdate(const Ogre::RenderTargetEvent& evt);
 	};

Modified: rl/branches/newton20/engine/script/src/PlaneNodeProcessor.cpp
===================================================================
--- rl/branches/newton20/engine/script/src/PlaneNodeProcessor.cpp	2008-08-23 12:41:05 UTC (rev 4479)
+++ rl/branches/newton20/engine/script/src/PlaneNodeProcessor.cpp	2008-08-23 12:51:20 UTC (rev 4480)
@@ -96,22 +96,29 @@
 		plane->d = 0;
 		plane->normal = Vector3::UNIT_Y;
 
-		MeshManager::getSingleton().createPlane(entName, "custom", *plane, 1, 1, 1, 1, true, 1, 1, 1, Vector3::UNIT_Z);
+		MeshManager::getSingleton().createPlane(entName, "custom", *plane, scale.x, scale.y, 10, 10, true, 1, 1, 1, Vector3::UNIT_Z);
 
 		Entity* ent = CoreSubsystem::getSingleton().getWorld()->getSceneManager()->createEntity(entName, entName);
 
 		LOG_DEBUG(Logger::RULES, " Loaded plane "+entName);
 
 		node->attachObject(ent);
-		node->scale(scale.x,1,scale.y);
+		//node->scale(scale.x,1,scale.y);
 
 		createCollision(ent, getChildNamed(nodeElem, "physicsproxy"));
 		
 		DOMElement* materialElem = getChildNamed(nodeElem, "material");
 		if(materialElem)
-		{
-			ent->setMaterialName(getAttributeValueAsStdString(materialElem, "name"));
-			createRenderToTextures(ent, plane, getChildNamed(nodeElem, "renderToTexture"));
+		{	
+			if(getChildNamed(nodeElem, "renderToTexture"))
+			{
+				Ogre::String matName = getAttributeValueAsStdString(materialElem, "name");
+				MaterialPtr material = static_cast<MaterialPtr>(MaterialManager::getSingleton().getByName(matName))->clone(matName + entName);
+				createRenderToTextures(ent, plane, material, getChildNamed(nodeElem, "renderToTexture"));
+				ent->setMaterialName(matName + entName);
+			}
+			else
+				ent->setMaterialName(getAttributeValueAsStdString(materialElem, "name"));
 		}
 		else
         {
@@ -156,47 +163,57 @@
 		}
 	}
 
-	void PlaneNodeProcessor::createRenderToTextures(Ogre::Entity* entity, Plane* plane, XERCES_CPP_NAMESPACE::DOMElement* rttElem)
+	void PlaneNodeProcessor::createRenderToTextures(Ogre::Entity* entity, Plane* plane, MaterialPtr material, XERCES_CPP_NAMESPACE::DOMElement* rttElem)
 	{
 		if(rttElem == NULL)
 			return;
 
-		MeshPtr mesh = entity->getMesh();
+		Camera* cam = CoreSubsystem::getSingleton().getWorld()->getSceneManager()->createCamera("Cam" + entity->getName());
+		cam->setFOVy(CoreSubsystem::getSingleton().getWorld()->getActiveCamera()->getFOVy());
+		cam->enableCustomNearClipPlane((MovablePlane*)plane);
+		//MeshPtr mesh = entity->getMesh();
+		AliasTextureNamePairList aliases;
 
 		if(getAttributeValueAsBool(rttElem, "reflection"))
-			{
+		{
 			TexturePtr texture = Ogre::TextureManager::getSingleton().createManual( "Reflection" + entity->getName(), 
 				ResourceGroupManager::DEFAULT_RESOURCE_GROUP_NAME, TEX_TYPE_2D, 
 				512, 512, 0, PF_R8G8B8, TU_RENDERTARGET );
 			RenderTexture* rttTex = texture->getBuffer()->getRenderTarget();
-			
-			Viewport *v = rttTex->addViewport( CoreSubsystem::getSingleton().getWorld()->getActiveCamera() ); //Bleibt die Kamera immer die gleiche?
+
+			Viewport *v = rttTex->addViewport( cam ); //Bleibt die Kamera immer die gleiche?
 			v->setOverlaysEnabled(false);
-			rttTex->addListener(new PlaneReflectionTextureListener(entity, CoreSubsystem::getSingleton().getWorld()->getActiveCamera(), plane));
+			rttTex->addListener(new PlaneReflectionTextureListener(entity, cam, plane));
 			
+			aliases["reflection"] = "Reflection" + entity->getName();
+			/*int num = mesh->getNumSubMeshes();
 			for(int i = 0; i < mesh->getNumSubMeshes(); i++)
 			{
 				SubMesh* sub = mesh->getSubMesh(i);
 				sub->addTextureAlias("reflection", "Reflection" + entity->getName());
 			}
+			mesh->updateMaterialForAllSubMeshes();*/
 		}
-		if(getAttributeValueAsBool(rttElem, "refaction"))
+		if(getAttributeValueAsBool(rttElem, "refraction"))
 		{
-			TexturePtr texture = Ogre::TextureManager::getSingleton().createManual( "Refaction" + entity->getName(), 
+			TexturePtr texture = Ogre::TextureManager::getSingleton().createManual( "Refraction" + entity->getName(), 
 				ResourceGroupManager::DEFAULT_RESOURCE_GROUP_NAME, TEX_TYPE_2D, 
 				512, 512, 0, PF_R8G8B8, TU_RENDERTARGET );
 			RenderTexture* rttTex = texture->getBuffer()->getRenderTarget();
 			
-			Viewport *v = rttTex->addViewport( CoreSubsystem::getSingleton().getWorld()->getActiveCamera());
+			Viewport *v = rttTex->addViewport( cam);
 			v->setOverlaysEnabled(false);
-			rttTex->addListener(new PlaneRefactionTextureListener(entity));
+			rttTex->addListener(new PlaneRefractionTextureListener(entity, cam));
 
-			for(int i = 0; i < mesh->getNumSubMeshes(); i++)
+			aliases["refraction"] = "Refraction" + entity->getName();
+			/*for(int i = 0; i < mesh->getNumSubMeshes(); i++)
 			{
 				SubMesh* sub = mesh->getSubMesh(i);
-				sub->addTextureAlias("refaction", "Refaction" + entity->getName());
-			}
+				sub->addTextureAlias("refraction", "Refraction" + entity->getName());
+			}*/
 		}
+		if(!material->applyTextureAliases(aliases))
+			LOG_ERROR("PLANE", "Texture Aliase konnten nicht angewandt werden");
 	}
 
 	PlaneReflectionTextureListener::PlaneReflectionTextureListener(Ogre::Entity *ent, Ogre::Camera* cam, Plane* plane)
@@ -208,6 +225,8 @@
 
 	void PlaneReflectionTextureListener::preRenderTargetUpdate(const RenderTargetEvent &evt)
 	{
+		mCamera->setPosition(CoreSubsystem::getSingleton().getWorld()->getActiveCamera()->getWorldPosition());
+		mCamera->setOrientation(CoreSubsystem::getSingleton().getWorld()->getActiveCamera()->getWorldOrientation());
 		mEntity->setVisible(false);
 		mCamera->enableReflection(*mPlane);
 	}
@@ -218,17 +237,20 @@
 		mCamera->disableReflection();
 	}
 
-	PlaneRefactionTextureListener::PlaneRefactionTextureListener(Entity* ent)
+	PlaneRefractionTextureListener::PlaneRefractionTextureListener(Entity* ent, Camera* cam)
 	{
 		mEntity = ent;
+		mCamera = cam;
 	}
 
-	void PlaneRefactionTextureListener::preRenderTargetUpdate(const Ogre::RenderTargetEvent& evt)
+	void PlaneRefractionTextureListener::preRenderTargetUpdate(const Ogre::RenderTargetEvent& evt)
 	{
+		mCamera->setPosition(CoreSubsystem::getSingleton().getWorld()->getActiveCamera()->getWorldPosition());
+		mCamera->setOrientation(CoreSubsystem::getSingleton().getWorld()->getActiveCamera()->getWorldOrientation());
 		mEntity->setVisible(false);
 	}
 
-	void PlaneRefactionTextureListener::postRenderTargetUpdate(const Ogre::RenderTargetEvent& evt)
+	void PlaneRefractionTextureListener::postRenderTargetUpdate(const Ogre::RenderTargetEvent& evt)
 	{
 		mEntity->setVisible(true);
 	}



From melven at mail.berlios.de  Sat Aug 23 17:19:33 2008
From: melven at mail.berlios.de (melven at mail.berlios.de)
Date: Sat, 23 Aug 2008 17:19:33 +0200
Subject: [Dsa-hl-svn] r4481 - rl/branches/newton20/engine/rules/src
Message-ID: <200808231519.m7NFJX7Y014036@sheep.berlios.de>

Author: melven
Date: 2008-08-23 17:19:32 +0200 (Sat, 23 Aug 2008)
New Revision: 4481

Modified:
   rl/branches/newton20/engine/rules/src/CreatureController.cpp
   rl/branches/newton20/engine/rules/src/JumpHighMovement.cpp
   rl/branches/newton20/engine/rules/src/JumpLongMovement.cpp
Log:
-fixed some minor movement bug
-TODO: use NewtonInverseDynamics functions!


Modified: rl/branches/newton20/engine/rules/src/CreatureController.cpp
===================================================================
--- rl/branches/newton20/engine/rules/src/CreatureController.cpp	2008-08-23 12:51:20 UTC (rev 4480)
+++ rl/branches/newton20/engine/rules/src/CreatureController.cpp	2008-08-23 15:19:32 UTC (rev 4481)
@@ -175,7 +175,7 @@
     {
         int act_gs = mCreature->getWert(Creature::WERT_GS);
         ///@todo wy does this not work
-        //act_gs -= mCreature->getWert(Creature::WERT_BE);
+        act_gs -= mCreature->getWert(Creature::WERT_BE);
         return max(act_gs,1);
     }
 
@@ -302,7 +302,7 @@
         {
             // find a reason why we now are AL_FLOOR
             if( timeSinceLastFloorContact < Time(Date::ONE_SECOND)*0.19 &&
-                -speed.y < 0.6 )
+                abs(speed.y) < 0.6 )
             {
                 setAbstractLocation(AL_FLOOR);
             }
@@ -311,7 +311,7 @@
         {
             // find a reason why we now are AL_AIRBORNE
             if( timeSinceLastFloorContact >= Time(Date::ONE_SECOND)*0.2 && // 2 seconds?
-                -speed.y > 0.6 )
+                abs(speed.y) > 0.6 )
             {
                 //std::ostringstream oss;
                 //oss << "Raycast for floor: speed.y: " << speed.y << "      timeSinceLastFloorContact: " << timeSinceLastFloorContact;

Modified: rl/branches/newton20/engine/rules/src/JumpHighMovement.cpp
===================================================================
--- rl/branches/newton20/engine/rules/src/JumpHighMovement.cpp	2008-08-23 12:51:20 UTC (rev 4480)
+++ rl/branches/newton20/engine/rules/src/JumpHighMovement.cpp	2008-08-23 15:19:32 UTC (rev 4481)
@@ -147,7 +147,7 @@
         }
 
         Vector3 omega = mMovingCreature->getCreature()->getActor()->getPhysicalThing()->_getBody()->getOmega();
-        torque = -omega / PhysicsManager::getSingleton().getMaxTimestep() * 2 * mass;
+        torque = -omega / PhysicsManager::getSingleton().getMaxTimestep() * 2 * inertia;
     }
 
     bool JumpHighMovement::run(Ogre::Real elapsedTime,  Ogre::Vector3 direction, Ogre::Vector3 rotation)

Modified: rl/branches/newton20/engine/rules/src/JumpLongMovement.cpp
===================================================================
--- rl/branches/newton20/engine/rules/src/JumpLongMovement.cpp	2008-08-23 12:51:20 UTC (rev 4480)
+++ rl/branches/newton20/engine/rules/src/JumpLongMovement.cpp	2008-08-23 15:19:32 UTC (rev 4481)
@@ -186,7 +186,7 @@
         }
 
         Vector3 omega = mMovingCreature->getCreature()->getActor()->getPhysicalThing()->_getBody()->getOmega();
-        torque = -omega / PhysicsManager::getSingleton().getMaxTimestep() * 2 * mass;
+        torque = -omega / PhysicsManager::getSingleton().getMaxTimestep() * 2 * inertia;
     }
 
     bool JumpLongMovement::run(Ogre::Real elapsedTime,  Ogre::Vector3 direction, Ogre::Vector3 rotation)



From timm at mail.berlios.de  Mon Aug 25 21:52:33 2008
From: timm at mail.berlios.de (timm at mail.berlios.de)
Date: Mon, 25 Aug 2008 21:52:33 +0200
Subject: [Dsa-hl-svn] r4482 - rl/trunk/engine/core/src
Message-ID: <200808251952.m7PJqX1n015177@sheep.berlios.de>

Author: timm
Date: 2008-08-25 21:52:21 +0200 (Mon, 25 Aug 2008)
New Revision: 4482

Modified:
   rl/trunk/engine/core/src/ConfigurationManager.cpp
Log:
add cg shader plugin

Modified: rl/trunk/engine/core/src/ConfigurationManager.cpp
===================================================================
--- rl/trunk/engine/core/src/ConfigurationManager.cpp	2008-08-23 15:19:32 UTC (rev 4481)
+++ rl/trunk/engine/core/src/ConfigurationManager.cpp	2008-08-25 19:52:21 UTC (rev 4482)
@@ -286,6 +286,7 @@
         addPlugin("RenderSystem_GL", mOgrePluginDirectory);
         addPlugin("Plugin_ParticleFX", mOgrePluginDirectory);
         addPlugin("Plugin_OctreeSceneManager", mOgrePluginDirectory);
+		addPlugin("Plugin_CgProgramManager", mOgrePluginDirectory);
 
         // Load the module list
         ConfigFile* configfile = new ConfigFile();



From timm at mail.berlios.de  Mon Aug 25 21:53:36 2008
From: timm at mail.berlios.de (timm at mail.berlios.de)
Date: Mon, 25 Aug 2008 21:53:36 +0200
Subject: [Dsa-hl-svn] r4483 - rl/trunk/engine/script/src
Message-ID: <200808251953.m7PJraJA015227@sheep.berlios.de>

Author: timm
Date: 2008-08-25 21:53:29 +0200 (Mon, 25 Aug 2008)
New Revision: 4483

Modified:
   rl/trunk/engine/script/src/PlaneNodeProcessor.cpp
Log:
fixed render to texture

Modified: rl/trunk/engine/script/src/PlaneNodeProcessor.cpp
===================================================================
--- rl/trunk/engine/script/src/PlaneNodeProcessor.cpp	2008-08-25 19:52:21 UTC (rev 4482)
+++ rl/trunk/engine/script/src/PlaneNodeProcessor.cpp	2008-08-25 19:53:29 UTC (rev 4483)
@@ -90,19 +90,20 @@
 			entName = getRandomName("Plane");
 		}
 
-		SceneNode* node = getRootSceneNode()->createChildSceneNode(entName, position, orientation);
+		SceneNode* node = getRootSceneNode()->createChildSceneNode(entName + "Node", position, orientation);
 
-		Plane* plane = new MovablePlane(entName);
+		MovablePlane* plane = new MovablePlane(entName + "Plane");
 		plane->d = 0;
 		plane->normal = Vector3::UNIT_Y;
 
-		MeshManager::getSingleton().createPlane(entName, "custom", *plane, scale.x, scale.y, 10, 10, true, 1, 1, 1, Vector3::UNIT_Z);
+		MeshManager::getSingleton().createPlane(entName + "Mesh", "custom", *plane, scale.x, scale.y, 10, 10, true, 1, 1, 1, Vector3::UNIT_Z);
 
-		Entity* ent = CoreSubsystem::getSingleton().getWorld()->getSceneManager()->createEntity(entName, entName);
+		Entity* ent = CoreSubsystem::getSingleton().getWorld()->getSceneManager()->createEntity(entName, entName + "Mesh");
 
 		LOG_DEBUG(Logger::RULES, " Loaded plane "+entName);
 
 		node->attachObject(ent);
+		node->attachObject(plane);
 		//node->scale(scale.x,1,scale.y);
 
 		createCollision(ent, getChildNamed(nodeElem, "physicsproxy"));
@@ -169,9 +170,12 @@
 			return;
 
 		Camera* cam = CoreSubsystem::getSingleton().getWorld()->getSceneManager()->createCamera("Cam" + entity->getName());
+		cam->setNearClipDistance(CoreSubsystem::getSingleton().getWorld()->getActiveCamera()->getNearClipDistance());
+        cam->setFarClipDistance(CoreSubsystem::getSingleton().getWorld()->getActiveCamera()->getFarClipDistance());
+		cam->setAutoAspectRatio(true);
 		cam->setFOVy(CoreSubsystem::getSingleton().getWorld()->getActiveCamera()->getFOVy());
 		cam->enableCustomNearClipPlane((MovablePlane*)plane);
-		//MeshPtr mesh = entity->getMesh();
+
 		AliasTextureNamePairList aliases;
 
 		if(getAttributeValueAsBool(rttElem, "reflection"))
@@ -181,18 +185,11 @@
 				512, 512, 0, PF_R8G8B8, TU_RENDERTARGET );
 			RenderTexture* rttTex = texture->getBuffer()->getRenderTarget();
 
-			Viewport *v = rttTex->addViewport( cam ); //Bleibt die Kamera immer die gleiche?
+			Viewport *v = rttTex->addViewport( cam );
 			v->setOverlaysEnabled(false);
 			rttTex->addListener(new PlaneReflectionTextureListener(entity, cam, plane));
 			
 			aliases["reflection"] = "Reflection" + entity->getName();
-			/*int num = mesh->getNumSubMeshes();
-			for(int i = 0; i < mesh->getNumSubMeshes(); i++)
-			{
-				SubMesh* sub = mesh->getSubMesh(i);
-				sub->addTextureAlias("reflection", "Reflection" + entity->getName());
-			}
-			mesh->updateMaterialForAllSubMeshes();*/
 		}
 		if(getAttributeValueAsBool(rttElem, "refraction"))
 		{
@@ -206,11 +203,6 @@
 			rttTex->addListener(new PlaneRefractionTextureListener(entity, cam));
 
 			aliases["refraction"] = "Refraction" + entity->getName();
-			/*for(int i = 0; i < mesh->getNumSubMeshes(); i++)
-			{
-				SubMesh* sub = mesh->getSubMesh(i);
-				sub->addTextureAlias("refraction", "Refraction" + entity->getName());
-			}*/
 		}
 		if(!material->applyTextureAliases(aliases))
 			LOG_ERROR("PLANE", "Texture Aliase konnten nicht angewandt werden");



From timm at mail.berlios.de  Mon Aug 25 21:59:55 2008
From: timm at mail.berlios.de (timm at mail.berlios.de)
Date: Mon, 25 Aug 2008 21:59:55 +0200
Subject: [Dsa-hl-svn] r4484 - in modules/regressiontest: maps materials
Message-ID: <200808251959.m7PJxtPl015424@sheep.berlios.de>

Author: timm
Date: 2008-08-25 21:59:49 +0200 (Mon, 25 Aug 2008)
New Revision: 4484

Added:
   modules/regressiontest/materials/Fresnel.program
   modules/regressiontest/materials/FresnelPS_ASM.program
   modules/regressiontest/materials/disorton.material
Modified:
   modules/regressiontest/maps/regressiontest.scene
Log:
water plane rendering test

Modified: modules/regressiontest/maps/regressiontest.scene
===================================================================
--- modules/regressiontest/maps/regressiontest.scene	2008-08-25 19:53:29 UTC (rev 4483)
+++ modules/regressiontest/maps/regressiontest.scene	2008-08-25 19:59:49 UTC (rev 4484)
@@ -4,8 +4,8 @@
 		<position x="1" y="0.45" z="1"/>
 		<scale x="10" y="2"/>
 		<physicsproxy collision="true" />
-		<renderToTexture reflection="true"/>
-		<material name="basic_reflection"/>
+		<renderToTexture reflection="true" refraction="true"/>
+		<material name="FresnelReflectionRefraction"/>
 	  </plane>  
 	  <entity meshfile="regressiontest_floorplane.mesh">
             <position x="0.0" y="0.0" z="0.0" />

Added: modules/regressiontest/materials/Fresnel.program
===================================================================
--- modules/regressiontest/materials/Fresnel.program	2008-08-25 19:53:29 UTC (rev 4483)
+++ modules/regressiontest/materials/Fresnel.program	2008-08-25 19:59:49 UTC (rev 4484)
@@ -0,0 +1,115 @@
+// Vertex program for fresnel reflections / refractions
+void main_vp(
+		float4 pos			: POSITION,
+		float4 normal		: NORMAL,
+		float2 tex			: TEXCOORD0,
+		
+		out float4 oPos		: POSITION,
+		out float3 noiseCoord : TEXCOORD0,
+		out float4 projectionCoord : TEXCOORD1,
+		out float3 oEyeDir : TEXCOORD2, 
+		out float3 oNormal : TEXCOORD3, 
+
+		uniform float4x4 worldViewProjMatrix,
+		uniform float3 eyePosition, // object space
+		uniform float timeVal,
+		uniform float scale,  // the amount to scale the noise texture by
+		uniform float scroll, // the amount by which to scroll the noise
+		uniform float noise  // the noise perturb as a factor of the  time
+		)
+{
+	oPos = mul(worldViewProjMatrix, pos);
+	// Projective texture coordinates, adjust for mapping
+	float4x4 scalemat = float4x4(0.5,   0,   0, 0.5, 
+	                               0,-0.5,   0, 0.5,
+								   0,   0, 0.5, 0.5,
+								   0,   0,   0,   1);
+	projectionCoord = mul(scalemat, oPos);
+	// Noise map coords
+	noiseCoord.xy = (tex + (timeVal * scroll)) * scale;
+	noiseCoord.z = noise * timeVal;
+
+	oEyeDir = normalize(pos.xyz - eyePosition); 
+	oNormal = normal.rgb; 
+	
+}
+
+// Fragment program for distorting a texture using a 3D noise texture
+void main_fp(
+		float3 noiseCoord			: TEXCOORD0,
+		float4 projectionCoord		: TEXCOORD1,
+		float3 eyeDir				: TEXCOORD2,
+		float3 normal				: TEXCOORD3,
+		
+		out float4 col		: COLOR,
+		
+		uniform float4 tintColour,
+		uniform float noiseScale, 
+		uniform float fresnelBias,
+		uniform float fresnelScale,
+		uniform float fresnelPower,
+		uniform sampler2D noiseMap : register(s0),
+		uniform sampler2D reflectMap : register(s1),
+		uniform sampler2D refractMap : register(s2)
+		)
+{
+	// Do the tex projection manually so we can distort _after_
+	float2 final = projectionCoord.xy / projectionCoord.w;
+
+	// Noise
+	float3 noiseNormal = (tex2D(noiseMap, (noiseCoord.xy / 5)).rgb - 0.5).rbg * noiseScale;
+	final += noiseNormal.xz;
+
+	// Fresnel
+	//normal = normalize(normal + noiseNormal.xz);
+	float fresnel = fresnelBias + fresnelScale * pow(1 + dot(eyeDir, normal), fresnelPower);
+
+	// Reflection / refraction
+	float4 reflectionColour = tex2D(reflectMap, final);
+	float4 refractionColour = tex2D(refractMap, final) + tintColour;
+
+	// Final colour
+	col = lerp(refractionColour, reflectionColour, fresnel);
+
+
+}
+
+
+// Old version to match ATI PS 1.3 implementation
+void main_vp_old(
+		float4 pos			: POSITION,
+		float4 normal		: NORMAL,
+		float2 tex			: TEXCOORD0,
+		
+		out float4 oPos		: POSITION,
+		out float fresnel   : COLOR,
+		out float3 noiseCoord : TEXCOORD0,
+		out float4 projectionCoord : TEXCOORD1,
+
+		uniform float4x4 worldViewProjMatrix,
+		uniform float3 eyePosition, // object space
+		uniform float fresnelBias,
+		uniform float fresnelScale,
+		uniform float fresnelPower,
+		uniform float timeVal,
+		uniform float scale,  // the amount to scale the noise texture by
+		uniform float scroll, // the amount by which to scroll the noise
+		uniform float noise  // the noise perturb as a factor of the  time
+		)
+{
+	oPos = mul(worldViewProjMatrix, pos);
+	// Projective texture coordinates, adjust for mapping
+	float4x4 scalemat = float4x4(0.5,   0,   0, 0.5, 
+	                               0,-0.5,   0, 0.5,
+								   0,   0, 0.5, 0.5,
+								   0,   0,   0,   1);
+	projectionCoord = mul(scalemat, oPos);
+	// Noise map coords
+	noiseCoord.xy = (tex + (timeVal * scroll)) * scale;
+	noiseCoord.z = noise * timeVal;
+
+	// calc fresnel factor (reflection coefficient)
+	float3 eyeDir = normalize(pos.xyz - eyePosition);
+	fresnel = fresnelBias + fresnelScale * pow(1 + dot(eyeDir, normal), fresnelPower);
+	
+}

Added: modules/regressiontest/materials/FresnelPS_ASM.program
===================================================================
--- modules/regressiontest/materials/FresnelPS_ASM.program	2008-08-25 19:53:29 UTC (rev 4483)
+++ modules/regressiontest/materials/FresnelPS_ASM.program	2008-08-25 19:59:49 UTC (rev 4484)
@@ -0,0 +1,72 @@
+ps.1.4
+  // conversion from Cg generated ARB_fragment_program to ps.1.4 by NFZ
+  // command line args: -profile arbfp1 -entry main_fp
+  // program main_fp
+  // c0 : distortionRange
+  // c1 : tintColour
+  // testure 0 : noiseMap
+  // texture 1 : reflectMap
+  // texture 2 : refractMap
+  // v0.x : fresnel 
+  // t0.xyz : noiseCoord
+  // t1.xyw : projectionCoord 
+
+def c2, 2, 1, 0, 0
+
+  // Cg:	distort.x = tex3D(noiseMap, noiseCoord).x;
+  // arbfp1:	TEX R0.x, fragment.texcoord[0], texture[0], 3D;
+  // sample noise map using noiseCoord in TEX unit 0 
+
+texld r0, t0.xyz
+
+  // get projected texture coordinates from TEX coord 1
+  // will be used in phase 2
+
+texcrd r1.xy, t1_dw.xyw
+mov r1.z, c2.y
+
+  // Cg:	distort.y = tex3D(noiseMap, noiseCoord + yoffset).x;
+  // arbfp1:	ADD R1.xyz, fragment.texcoord[0], c1;
+  // arbfp1:	TEX R1.x, R1, texture[0], 3D;
+  // arbfp1:	MOV R0.y, R1.x;
+
+  // Cg:	distort = (distort * 2 - 1) * distortionRange;
+  // arbfp1:	MAD R0.xy, R0, c0.x, -c0.y;
+  // arbfp1:	MUL R0.xy, R0, u0.x;
+  // (distort * 2 - 1) same as 2*(distort -.5) so use _bx2
+
+
+  // Cg:	final = projectionCoord.xy / projectionCoord.w;
+  // Cg:	final += distort;
+  // arbfp1:	RCP R0.w, fragment.texcoord[1].w;
+  // arbfp1:	MAD R0.xy, fragment.texcoord[1], R0.w, R0;
+  // 	final = (distort *  projectionCoord.w) + projectionCoord.xy
+  // for ps.1.4 have to re-arrange things a bit to perturb projected texture coordinates
+
+mad r0.xyz, r0_bx2, c0.x, r1
+
+phase
+
+  // do dependant texture reads
+  // Cg:	reflectionColour = tex2D(reflectMap, final);
+  // arbfp1:	TEX R0, R0, texture[1], 2D;
+  // sampe reflectMap using dependant read : texunit 1 
+
+texld r1, r0.xyz
+
+  // Cg:	refractionColour = tex2D(refractMap, final) + tintColour;
+  // arbfp1:	TEX R1, R0, texture[2], 2D;
+  // sample refractMap : texunit 2 
+
+texld r2, r0.xyz
+
+  // adding tintColour that is in global c1
+  // arbfp1:	ADD R1, R1, u1;
+
+add r2, r2, c1
+
+  // Cg:	col = lerp(refractionColour, reflectionColour, fresnel);
+  // arbfp1:	ADD R0, R0, -R1;
+  // arbfp1:	MAD result.color, fragment.color.primary.x, R0, R1;
+
+lrp r0, v0.x, r1, r2

Added: modules/regressiontest/materials/disorton.material
===================================================================
--- modules/regressiontest/materials/disorton.material	2008-08-25 19:53:29 UTC (rev 4483)
+++ modules/regressiontest/materials/disorton.material	2008-08-25 19:59:49 UTC (rev 4484)
@@ -0,0 +1,151 @@
+//----------------------------
+// Distortion effects
+//----------------------------
+
+vertex_program FresnelRefractReflectVP cg
+{
+	source Fresnel.program
+	entry_point main_vp
+	profiles vs_1_1 arbvp1
+}
+vertex_program FresnelRefractReflectVPold cg
+{
+	source Fresnel.program
+	entry_point main_vp_old
+	profiles vs_1_1 arbvp1
+}
+
+fragment_program FresnelRefractReflectFP cg
+{
+	source Fresnel.program
+	entry_point main_fp
+	// sorry, ps_1_1 and fp20 can't do this
+	profiles ps_2_0 arbfp1
+}
+
+fragment_program FresnelRefractReflectPS asm
+{
+	source FresnelPS_ASM.program
+	// sorry, only for ps_1_4 :)
+	syntax ps_1_4
+
+}
+
+material FresnelReflectionRefraction
+{
+	// ps_2_0 / arbfp1
+	technique
+	{
+		pass 
+		{
+			
+			vertex_program_ref FresnelRefractReflectVP
+			{
+				param_named_auto worldViewProjMatrix worldviewproj_matrix
+				param_named_auto eyePosition camera_position_object_space
+				param_named_auto timeVal time 0.05
+				param_named scroll float 1  
+				param_named scale float 1 
+				param_named noise float 1 
+				// scroll and noisePos will need updating per frame
+			}
+			fragment_program_ref FresnelRefractReflectFP
+			{
+				param_named fresnelBias float -0.1 
+				param_named fresnelScale float 1.8 
+				param_named fresnelPower float 8  
+				param_named tintColour float4 0 0.05 0.05 1
+				param_named noiseScale float 0.05 
+			}
+			// Noise
+			texture_unit
+			{
+				// Perlin noise volume
+				texture waves2.dds
+				// min / mag filtering, no mip
+				filtering linear linear none
+			}
+			// Reflection
+			texture_unit
+			{
+				// Will be filled in at runtime
+				texture_alias reflection
+				texture nx.zone.orange.png
+				tex_address_mode clamp
+				// needed by ps.1.4
+				tex_coord_set 1
+			}
+			// Refraction
+			texture_unit
+			{
+				// Will be filled in at runtime
+				texture_alias refraction
+				texture nx.zone.orange.png
+				tex_address_mode clamp
+				// needed by ps.1.4
+				tex_coord_set 2
+			}
+		}
+		
+			
+	}
+
+	// ATI 8500 +
+	technique
+	{
+		pass
+		{
+			vertex_program_ref FresnelRefractReflectVPold
+			{
+				param_named_auto worldViewProjMatrix worldviewproj_matrix
+				param_named_auto eyePosition camera_position_object_space
+				param_named fresnelBias float -0.3
+				param_named fresnelScale float 1.4
+				param_named fresnelPower float 8
+				param_named_auto timeVal time_0_1 20
+				param_named scroll float 1 
+				param_named scale float 4 
+				param_named noise float 1
+				// scroll and noisePos will need updating per frame
+			}
+
+			// for ATI RADEON 8500 - 9200
+			fragment_program_ref FresnelRefractReflectPS
+			{
+				// distortionRange
+				param_indexed 0  float 0.025  
+				// tintColour
+				param_indexed 1  float4 0.05 0.12 0.15 1
+			}
+
+			// Noise
+			texture_unit
+			{
+				// Perlin noise volume
+				texture perlinvolume.dds 3d
+				// min / mag filtering, no mip
+				filtering linear linear none
+			}
+			// Reflection
+			texture_unit
+			{
+				// Will be filled in at runtime
+				texture reflection
+				texture nx.zone.orange.png
+				tex_address_mode clamp
+				// needed by ps.1.4
+				tex_coord_set 1
+			}
+			// Refraction
+			texture_unit
+			{
+				// Will be filled in at runtime
+				texture refraction
+				texture nx.zone.orange.png
+				tex_address_mode clamp
+				// needed by ps.1.4
+				tex_coord_set 2
+			}
+		}
+	}    
+}



From timm at mail.berlios.de  Tue Aug 26 20:01:30 2008
From: timm at mail.berlios.de (timm at mail.berlios.de)
Date: Tue, 26 Aug 2008 20:01:30 +0200
Subject: [Dsa-hl-svn] r4485 - modules/regressiontest/materials/textures
Message-ID: <200808261801.m7QI1UOQ008392@sheep.berlios.de>

Author: timm
Date: 2008-08-26 20:01:12 +0200 (Tue, 26 Aug 2008)
New Revision: 4485

Added:
   modules/regressiontest/materials/textures/perlinvolume.dds
   modules/regressiontest/materials/textures/waves2.dds
Log:
added missing files for water waves

Added: modules/regressiontest/materials/textures/perlinvolume.dds
===================================================================
(Binary files differ)


Property changes on: modules/regressiontest/materials/textures/perlinvolume.dds
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: modules/regressiontest/materials/textures/waves2.dds
===================================================================
(Binary files differ)


Property changes on: modules/regressiontest/materials/textures/waves2.dds
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream



From timm at mail.berlios.de  Tue Aug 26 20:12:58 2008
From: timm at mail.berlios.de (timm at mail.berlios.de)
Date: Tue, 26 Aug 2008 20:12:58 +0200
Subject: [Dsa-hl-svn] r4486 - modules/regressiontest/materials
Message-ID: <200808261812.m7QICwii009302@sheep.berlios.de>

Author: timm
Date: 2008-08-26 20:12:49 +0200 (Tue, 26 Aug 2008)
New Revision: 4486

Added:
   modules/regressiontest/materials/Fresnel.source
   modules/regressiontest/materials/FresnelPS_ASM.source
Removed:
   modules/regressiontest/materials/Fresnel.program
   modules/regressiontest/materials/FresnelPS_ASM.program
Modified:
   modules/regressiontest/materials/disorton.material
Log:
renamed files


Deleted: modules/regressiontest/materials/Fresnel.program
===================================================================
--- modules/regressiontest/materials/Fresnel.program	2008-08-26 18:01:12 UTC (rev 4485)
+++ modules/regressiontest/materials/Fresnel.program	2008-08-26 18:12:49 UTC (rev 4486)
@@ -1,115 +0,0 @@
-// Vertex program for fresnel reflections / refractions
-void main_vp(
-		float4 pos			: POSITION,
-		float4 normal		: NORMAL,
-		float2 tex			: TEXCOORD0,
-		
-		out float4 oPos		: POSITION,
-		out float3 noiseCoord : TEXCOORD0,
-		out float4 projectionCoord : TEXCOORD1,
-		out float3 oEyeDir : TEXCOORD2, 
-		out float3 oNormal : TEXCOORD3, 
-
-		uniform float4x4 worldViewProjMatrix,
-		uniform float3 eyePosition, // object space
-		uniform float timeVal,
-		uniform float scale,  // the amount to scale the noise texture by
-		uniform float scroll, // the amount by which to scroll the noise
-		uniform float noise  // the noise perturb as a factor of the  time
-		)
-{
-	oPos = mul(worldViewProjMatrix, pos);
-	// Projective texture coordinates, adjust for mapping
-	float4x4 scalemat = float4x4(0.5,   0,   0, 0.5, 
-	                               0,-0.5,   0, 0.5,
-								   0,   0, 0.5, 0.5,
-								   0,   0,   0,   1);
-	projectionCoord = mul(scalemat, oPos);
-	// Noise map coords
-	noiseCoord.xy = (tex + (timeVal * scroll)) * scale;
-	noiseCoord.z = noise * timeVal;
-
-	oEyeDir = normalize(pos.xyz - eyePosition); 
-	oNormal = normal.rgb; 
-	
-}
-
-// Fragment program for distorting a texture using a 3D noise texture
-void main_fp(
-		float3 noiseCoord			: TEXCOORD0,
-		float4 projectionCoord		: TEXCOORD1,
-		float3 eyeDir				: TEXCOORD2,
-		float3 normal				: TEXCOORD3,
-		
-		out float4 col		: COLOR,
-		
-		uniform float4 tintColour,
-		uniform float noiseScale, 
-		uniform float fresnelBias,
-		uniform float fresnelScale,
-		uniform float fresnelPower,
-		uniform sampler2D noiseMap : register(s0),
-		uniform sampler2D reflectMap : register(s1),
-		uniform sampler2D refractMap : register(s2)
-		)
-{
-	// Do the tex projection manually so we can distort _after_
-	float2 final = projectionCoord.xy / projectionCoord.w;
-
-	// Noise
-	float3 noiseNormal = (tex2D(noiseMap, (noiseCoord.xy / 5)).rgb - 0.5).rbg * noiseScale;
-	final += noiseNormal.xz;
-
-	// Fresnel
-	//normal = normalize(normal + noiseNormal.xz);
-	float fresnel = fresnelBias + fresnelScale * pow(1 + dot(eyeDir, normal), fresnelPower);
-
-	// Reflection / refraction
-	float4 reflectionColour = tex2D(reflectMap, final);
-	float4 refractionColour = tex2D(refractMap, final) + tintColour;
-
-	// Final colour
-	col = lerp(refractionColour, reflectionColour, fresnel);
-
-
-}
-
-
-// Old version to match ATI PS 1.3 implementation
-void main_vp_old(
-		float4 pos			: POSITION,
-		float4 normal		: NORMAL,
-		float2 tex			: TEXCOORD0,
-		
-		out float4 oPos		: POSITION,
-		out float fresnel   : COLOR,
-		out float3 noiseCoord : TEXCOORD0,
-		out float4 projectionCoord : TEXCOORD1,
-
-		uniform float4x4 worldViewProjMatrix,
-		uniform float3 eyePosition, // object space
-		uniform float fresnelBias,
-		uniform float fresnelScale,
-		uniform float fresnelPower,
-		uniform float timeVal,
-		uniform float scale,  // the amount to scale the noise texture by
-		uniform float scroll, // the amount by which to scroll the noise
-		uniform float noise  // the noise perturb as a factor of the  time
-		)
-{
-	oPos = mul(worldViewProjMatrix, pos);
-	// Projective texture coordinates, adjust for mapping
-	float4x4 scalemat = float4x4(0.5,   0,   0, 0.5, 
-	                               0,-0.5,   0, 0.5,
-								   0,   0, 0.5, 0.5,
-								   0,   0,   0,   1);
-	projectionCoord = mul(scalemat, oPos);
-	// Noise map coords
-	noiseCoord.xy = (tex + (timeVal * scroll)) * scale;
-	noiseCoord.z = noise * timeVal;
-
-	// calc fresnel factor (reflection coefficient)
-	float3 eyeDir = normalize(pos.xyz - eyePosition);
-	fresnel = fresnelBias + fresnelScale * pow(1 + dot(eyeDir, normal), fresnelPower);
-	
-}

Copied: modules/regressiontest/materials/Fresnel.source (from rev 4484, modules/regressiontest/materials/Fresnel.program)


Property changes on: modules/regressiontest/materials/Fresnel.source
___________________________________________________________________
Name: svn:mergeinfo
   + 

Deleted: modules/regressiontest/materials/FresnelPS_ASM.program
===================================================================
--- modules/regressiontest/materials/FresnelPS_ASM.program	2008-08-26 18:01:12 UTC (rev 4485)
+++ modules/regressiontest/materials/FresnelPS_ASM.program	2008-08-26 18:12:49 UTC (rev 4486)
@@ -1,72 +0,0 @@
-ps.1.4
-  // conversion from Cg generated ARB_fragment_program to ps.1.4 by NFZ
-  // command line args: -profile arbfp1 -entry main_fp
-  // program main_fp
-  // c0 : distortionRange
-  // c1 : tintColour
-  // testure 0 : noiseMap
-  // texture 1 : reflectMap
-  // texture 2 : refractMap
-  // v0.x : fresnel 
-  // t0.xyz : noiseCoord
-  // t1.xyw : projectionCoord 
-
-def c2, 2, 1, 0, 0
-
-  // Cg:	distort.x = tex3D(noiseMap, noiseCoord).x;
-  // arbfp1:	TEX R0.x, fragment.texcoord[0], texture[0], 3D;
-  // sample noise map using noiseCoord in TEX unit 0 
-
-texld r0, t0.xyz
-
-  // get projected texture coordinates from TEX coord 1
-  // will be used in phase 2
-
-texcrd r1.xy, t1_dw.xyw
-mov r1.z, c2.y
-
-  // Cg:	distort.y = tex3D(noiseMap, noiseCoord + yoffset).x;
-  // arbfp1:	ADD R1.xyz, fragment.texcoord[0], c1;
-  // arbfp1:	TEX R1.x, R1, texture[0], 3D;
-  // arbfp1:	MOV R0.y, R1.x;
-
-  // Cg:	distort = (distort * 2 - 1) * distortionRange;
-  // arbfp1:	MAD R0.xy, R0, c0.x, -c0.y;
-  // arbfp1:	MUL R0.xy, R0, u0.x;
-  // (distort * 2 - 1) same as 2*(distort -.5) so use _bx2
-
-
-  // Cg:	final = projectionCoord.xy / projectionCoord.w;
-  // Cg:	final += distort;
-  // arbfp1:	RCP R0.w, fragment.texcoord[1].w;
-  // arbfp1:	MAD R0.xy, fragment.texcoord[1], R0.w, R0;
-  // 	final = (distort *  projectionCoord.w) + projectionCoord.xy
-  // for ps.1.4 have to re-arrange things a bit to perturb projected texture coordinates
-
-mad r0.xyz, r0_bx2, c0.x, r1
-
-phase
-
-  // do dependant texture reads
-  // Cg:	reflectionColour = tex2D(reflectMap, final);
-  // arbfp1:	TEX R0, R0, texture[1], 2D;
-  // sampe reflectMap using dependant read : texunit 1 
-
-texld r1, r0.xyz
-
-  // Cg:	refractionColour = tex2D(refractMap, final) + tintColour;
-  // arbfp1:	TEX R1, R0, texture[2], 2D;
-  // sample refractMap : texunit 2 
-
-texld r2, r0.xyz
-
-  // adding tintColour that is in global c1
-  // arbfp1:	ADD R1, R1, u1;
-
-add r2, r2, c1
-
-  // Cg:	col = lerp(refractionColour, reflectionColour, fresnel);
-  // arbfp1:	ADD R0, R0, -R1;
-  // arbfp1:	MAD result.color, fragment.color.primary.x, R0, R1;
-
-lrp r0, v0.x, r1, r2

Copied: modules/regressiontest/materials/FresnelPS_ASM.source (from rev 4484, modules/regressiontest/materials/FresnelPS_ASM.program)


Property changes on: modules/regressiontest/materials/FresnelPS_ASM.source
___________________________________________________________________
Name: svn:mergeinfo
   + 

Modified: modules/regressiontest/materials/disorton.material
===================================================================
--- modules/regressiontest/materials/disorton.material	2008-08-26 18:01:12 UTC (rev 4485)
+++ modules/regressiontest/materials/disorton.material	2008-08-26 18:12:49 UTC (rev 4486)
@@ -4,20 +4,20 @@
 
 vertex_program FresnelRefractReflectVP cg
 {
-	source Fresnel.program
+	source Fresnel.source
 	entry_point main_vp
 	profiles vs_1_1 arbvp1
 }
 vertex_program FresnelRefractReflectVPold cg
 {
-	source Fresnel.program
+	source Fresnel.source
 	entry_point main_vp_old
 	profiles vs_1_1 arbvp1
 }
 
 fragment_program FresnelRefractReflectFP cg
 {
-	source Fresnel.program
+	source Fresnel.source
 	entry_point main_fp
 	// sorry, ps_1_1 and fp20 can't do this
 	profiles ps_2_0 arbfp1
@@ -25,7 +25,7 @@
 
 fragment_program FresnelRefractReflectPS asm
 {
-	source FresnelPS_ASM.program
+	source FresnelPS_ASM.source
 	// sorry, only for ps_1_4 :)
 	syntax ps_1_4
 



From blakharaz at mail.berlios.de  Thu Aug 28 00:11:09 2008
From: blakharaz at mail.berlios.de (blakharaz at mail.berlios.de)
Date: Thu, 28 Aug 2008 00:11:09 +0200
Subject: [Dsa-hl-svn] r4487 - in rl/trunk/engine: ai/src ui/src
Message-ID: <200808272211.m7RMB9wC014208@sheep.berlios.de>

Author: blakharaz
Date: 2008-08-28 00:11:07 +0200 (Thu, 28 Aug 2008)
New Revision: 4487

Modified:
   rl/trunk/engine/ai/src/DialogImplication.cpp
   rl/trunk/engine/ui/src/UiSubsystem.cpp
Log:


Modified: rl/trunk/engine/ai/src/DialogImplication.cpp
===================================================================
--- rl/trunk/engine/ai/src/DialogImplication.cpp	2008-08-26 18:12:49 UTC (rev 4486)
+++ rl/trunk/engine/ai/src/DialogImplication.cpp	2008-08-27 22:11:07 UTC (rev 4487)
@@ -48,7 +48,7 @@
         dialog->setProperty(mVariableName, prop);
     }
 
-        DialogVariableIncrease::DialogVariableIncrease(const Ogre::String& variableName, 
+	DialogVariableIncrease::DialogVariableIncrease(const Ogre::String& variableName, 
                                                    const CeGuiString& value)
         : DialogVariableAssignment(variableName, value)
     {

Modified: rl/trunk/engine/ui/src/UiSubsystem.cpp
===================================================================
--- rl/trunk/engine/ui/src/UiSubsystem.cpp	2008-08-26 18:12:49 UTC (rev 4486)
+++ rl/trunk/engine/ui/src/UiSubsystem.cpp	2008-08-27 22:11:07 UTC (rev 4487)
@@ -75,11 +75,12 @@
 
     UiSubsystem::~UiSubsystem()
     {
+		delete mInputManager;
+	
         delete mWindowFactory;
         delete mWindowManager;
+        
 
-        delete mInputManager;
-
         delete mGuiSystem;
         delete mGuiRenderer;
     }



From blakharaz at mail.berlios.de  Thu Aug 28 00:11:59 2008
From: blakharaz at mail.berlios.de (blakharaz at mail.berlios.de)
Date: Thu, 28 Aug 2008 00:11:59 +0200
Subject: [Dsa-hl-svn] r4488 - in rl/trunk/engine/script: include src
Message-ID: <200808272211.m7RMBxYL014255@sheep.berlios.de>

Author: blakharaz
Date: 2008-08-28 00:11:57 +0200 (Thu, 28 Aug 2008)
New Revision: 4488

Modified:
   rl/trunk/engine/script/include/PlaneNodeProcessor.h
   rl/trunk/engine/script/src/PlaneNodeProcessor.cpp
Log:
Fix Mac OS build, more library renamings

Modified: rl/trunk/engine/script/include/PlaneNodeProcessor.h
===================================================================
--- rl/trunk/engine/script/include/PlaneNodeProcessor.h	2008-08-27 22:11:07 UTC (rev 4487)
+++ rl/trunk/engine/script/include/PlaneNodeProcessor.h	2008-08-27 22:11:57 UTC (rev 4488)
@@ -28,8 +28,8 @@
 
 #include "AbstractMapNodeProcessor.h"
 
-#include <OgreMaterial.h>
-#include <OgreRenderTargetListener.h>
+//#include <OgreMaterial.h>
+//#include <OgreRenderTargetListener.h>
 
 namespace rl
 {

Modified: rl/trunk/engine/script/src/PlaneNodeProcessor.cpp
===================================================================
--- rl/trunk/engine/script/src/PlaneNodeProcessor.cpp	2008-08-27 22:11:07 UTC (rev 4487)
+++ rl/trunk/engine/script/src/PlaneNodeProcessor.cpp	2008-08-27 22:11:57 UTC (rev 4488)
@@ -23,7 +23,7 @@
 #include "PhysicsManager.h"
 #include "World.h"
 
-#include <OgreMaterialManager.h>
+//#include <OgreMaterialManager.h>
 
 using namespace Ogre;
 using namespace XERCES_CPP_NAMESPACE;



From blakharaz at mail.berlios.de  Thu Aug 28 00:12:14 2008
From: blakharaz at mail.berlios.de (blakharaz at mail.berlios.de)
Date: Thu, 28 Aug 2008 00:12:14 +0200
Subject: [Dsa-hl-svn] r4489 - rl/trunk/Mac/tools
Message-ID: <200808272212.m7RMCEx8014273@sheep.berlios.de>

Author: blakharaz
Date: 2008-08-28 00:12:13 +0200 (Thu, 28 Aug 2008)
New Revision: 4489

Modified:
   rl/trunk/Mac/tools/renameinstalldirs.sh
Log:
Fix Mac OS build, more library renamings

Modified: rl/trunk/Mac/tools/renameinstalldirs.sh
===================================================================
--- rl/trunk/Mac/tools/renameinstalldirs.sh	2008-08-27 22:11:57 UTC (rev 4488)
+++ rl/trunk/Mac/tools/renameinstalldirs.sh	2008-08-27 22:12:13 UTC (rev 4489)
@@ -1,23 +1,29 @@
-#!/bin/sh
+#!/bin/bash
 RASTULLAH_APP_DIR=$1
 RASTULLAH_APP_NAME=$2
 RASTULLAH_APP_BIN=${RASTULLAH_APP_DIR}/${RASTULLAH_APP_NAME}
 CEGUI_BIN=${RASTULLAH_APP_DIR}/../Frameworks/CEGUI.framework/CEGUI
+RASTULLAH_RES_DIR=$1/../Resources
 
 #TODO: Replace the absolute source paths to something with olist -L $RASTULLAH_APP_NAME and grep
 
 echo Changing library installation directories for $RASTULLAH_APP_NAME
 
+RL_BINARIES="$RASTULLAH_APP_BIN $RASTULLAH_RES_DIR/libRlAi.dylib $RASTULLAH_RES_DIR/libRlCommon.dylib $RASTULLAH_RES_DIR/libRlCore.dylib $RASTULLAH_RES_DIR/libRlRules.dylib $RASTULLAH_RES_DIR/libRlScript.dylib $RASTULLAH_RES_DIR/libRlUi.dylib $RASTULLAH_RES_DIR/libRlFmod4Driver.dylib"
 # RL Application binary
-install_name_tool -change /Library/Frameworks/CEGUI.framework/Versions/A/CEGUI @executable_path/../Frameworks/CEGUI.framework/Versions/A/CEGUI $RASTULLAH_APP_BIN
-install_name_tool -change libboost_system-mt-1_35.dylib @executable_path/../Frameworks/libboost_system-mt-1_35.dylib $RASTULLAH_APP_BIN
-install_name_tool -change /System/Library/Frameworks/Ruby.framework/Versions/1.8/usr/lib/libruby.1.dylib @executable_path/../Frameworks/libruby.1.dylib $RASTULLAH_APP_BIN
-install_name_tool -change /Users/blakharaz/Library/Frameworks/OgreNewt.framework/Versions/A/OgreNewt @executable_path/../Frameworks/OgreNewt.framework/Versions/A/OgreNewt $RASTULLAH_APP_BIN
-install_name_tool -change /Users/blakharaz/Library/Frameworks/OpenSteer.framework/Versions/0.8/OpenSteer @executable_path/../Frameworks/OpenSteer.framework/Versions/0.8/OpenSteer $RASTULLAH_APP_BIN
+for cur in $RL_BINARIES 
+do
+    echo Processing $cur
+    install_name_tool -change /Library/Frameworks/CEGUI.framework/Versions/A/CEGUI @executable_path/../Frameworks/CEGUI.framework/Versions/A/CEGUI $cur
+    install_name_tool -change libboost_system-mt-1_35.dylib @executable_path/../Frameworks/libboost_system.dylib $cur
+    install_name_tool -change /System/Library/Frameworks/Ruby.framework/Versions/1.8/usr/lib/libruby.1.dylib @executable_path/../Frameworks/libruby.1.dylib $cur
+    install_name_tool -change /Users/blakharaz/Library/Frameworks/OgreNewt.framework/Versions/A/OgreNewt @executable_path/../Frameworks/OgreNewt.framework/Versions/A/OgreNewt $cur
+    install_name_tool -change /Users/blakharaz/Library/Frameworks/OpenSteer.framework/Versions/0.8/OpenSteer @executable_path/../Frameworks/OpenSteer.framework/Versions/0.8/OpenSteer $cur
+    install_name_tool -change /usr/local/bin/libmeshmagick.dylib @executable_path/../Resources/libmeshmagick.dylib $cur
+done
 
 # CEGUI
 install_name_tool -change /Library/Frameworks/CEGUI.framework/Versions/A/CEGUI @executable_path/../Frameworks/CEGUI.framework/Versions/A/CEGUI ${CEGUI_BIN}
 install_name_tool -change /Library/Frameworks/FreeType.framework/Versions/2.3/FreeType @executable_path/../Frameworks/FreeType.framework/Versions/2.3/FreeType ${CEGUI_BIN}
 
-
 echo done.
\ No newline at end of file



From blakharaz at mail.berlios.de  Thu Aug 28 00:12:21 2008
From: blakharaz at mail.berlios.de (blakharaz at mail.berlios.de)
Date: Thu, 28 Aug 2008 00:12:21 +0200
Subject: [Dsa-hl-svn] r4490 - rl/trunk/Mac/Rastullah.xcodeproj
Message-ID: <200808272212.m7RMCL1j014291@sheep.berlios.de>

Author: blakharaz
Date: 2008-08-28 00:12:19 +0200 (Thu, 28 Aug 2008)
New Revision: 4490

Modified:
   rl/trunk/Mac/Rastullah.xcodeproj/project.pbxproj
Log:
Fix Mac OS build, more library renamings

Modified: rl/trunk/Mac/Rastullah.xcodeproj/project.pbxproj
===================================================================
--- rl/trunk/Mac/Rastullah.xcodeproj/project.pbxproj	2008-08-27 22:12:13 UTC (rev 4489)
+++ rl/trunk/Mac/Rastullah.xcodeproj/project.pbxproj	2008-08-27 22:12:19 UTC (rev 4490)
@@ -429,6 +429,7 @@
 		44D8147A0BF7B62F00534175 /* Trigger.h in Headers */ = {isa = PBXBuildFile; fileRef = 44D814750BF7B62F00534175 /* Trigger.h */; };
 		44D8147B0BF7B62F00534175 /* Zone.h in Headers */ = {isa = PBXBuildFile; fileRef = 44D814760BF7B62F00534175 /* Zone.h */; };
 		44D8147C0BF7B62F00534175 /* ZoneManager.h in Headers */ = {isa = PBXBuildFile; fileRef = 44D814770BF7B62F00534175 /* ZoneManager.h */; };
+		48003B550E3211660056D073 /* libboost_system.dylib in Copy Frameworks */ = {isa = PBXBuildFile; fileRef = 48A52CAF0E0EF55C008DBDD8 /* libboost_system.dylib */; };
 		483646990D83D13700912FEC /* ContentLoader.h in Headers */ = {isa = PBXBuildFile; fileRef = 483646960D83D13700912FEC /* ContentLoader.h */; };
 		4836469A0D83D13700912FEC /* SoundStitching.h in Headers */ = {isa = PBXBuildFile; fileRef = 483646970D83D13700912FEC /* SoundStitching.h */; };
 		4836469B0D83D13700912FEC /* StartAnimationJob.h in Headers */ = {isa = PBXBuildFile; fileRef = 483646980D83D13700912FEC /* StartAnimationJob.h */; };
@@ -645,18 +646,23 @@
 		4890C0E30E18062B00BE5850 /* StrafeMovement.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 4890C0D50E18062B00BE5850 /* StrafeMovement.cpp */; };
 		4890C0E40E18062B00BE5850 /* WalkMovement.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 4890C0D60E18062B00BE5850 /* WalkMovement.cpp */; };
 		48A52B220E0EDA0E008DBDD8 /* libboost_filesystem.dylib in Frameworks */ = {isa = PBXBuildFile; fileRef = 48A52B210E0EDA0E008DBDD8 /* libboost_filesystem.dylib */; };
-		48A52CB00E0EF55C008DBDD8 /* libboost_system.lib in Frameworks */ = {isa = PBXBuildFile; fileRef = 48A52CAF0E0EF55C008DBDD8 /* libboost_system.lib */; };
-		48A52CB10E0EF55C008DBDD8 /* libboost_system.lib in Frameworks */ = {isa = PBXBuildFile; fileRef = 48A52CAF0E0EF55C008DBDD8 /* libboost_system.lib */; };
+		48A52CB00E0EF55C008DBDD8 /* libboost_system.dylib in Frameworks */ = {isa = PBXBuildFile; fileRef = 48A52CAF0E0EF55C008DBDD8 /* libboost_system.dylib */; };
+		48A52CB10E0EF55C008DBDD8 /* libboost_system.dylib in Frameworks */ = {isa = PBXBuildFile; fileRef = 48A52CAF0E0EF55C008DBDD8 /* libboost_system.dylib */; };
 		48A52CB30E0EF577008DBDD8 /* libboost_filesystem.dylib in Frameworks */ = {isa = PBXBuildFile; fileRef = 48A52B210E0EDA0E008DBDD8 /* libboost_filesystem.dylib */; };
 		48A52CB60E0EF5BD008DBDD8 /* ApplyDamageJob.h in Headers */ = {isa = PBXBuildFile; fileRef = 48A52CB50E0EF5BD008DBDD8 /* ApplyDamageJob.h */; };
 		48A52CB80E0EF5D0008DBDD8 /* ApplyDamageJob.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 48A52CB70E0EF5D0008DBDD8 /* ApplyDamageJob.cpp */; };
-		48A52CBC0E0EF77B008DBDD8 /* libboost_system.lib in Frameworks */ = {isa = PBXBuildFile; fileRef = 48A52CAF0E0EF55C008DBDD8 /* libboost_system.lib */; };
-		48A52CBD0E0EF77B008DBDD8 /* libboost_system.lib in Frameworks */ = {isa = PBXBuildFile; fileRef = 48A52CAF0E0EF55C008DBDD8 /* libboost_system.lib */; };
-		48A52CBE0E0EF77C008DBDD8 /* libboost_system.lib in Frameworks */ = {isa = PBXBuildFile; fileRef = 48A52CAF0E0EF55C008DBDD8 /* libboost_system.lib */; };
-		48A52CBF0E0EF77C008DBDD8 /* libboost_system.lib in Frameworks */ = {isa = PBXBuildFile; fileRef = 48A52CAF0E0EF55C008DBDD8 /* libboost_system.lib */; };
-		48A52CC00E0EF77D008DBDD8 /* libboost_system.lib in Frameworks */ = {isa = PBXBuildFile; fileRef = 48A52CAF0E0EF55C008DBDD8 /* libboost_system.lib */; };
-		48A52CC20E0EF77E008DBDD8 /* libboost_system.lib in Frameworks */ = {isa = PBXBuildFile; fileRef = 48A52CAF0E0EF55C008DBDD8 /* libboost_system.lib */; };
-		48A52CC30E0EF785008DBDD8 /* libboost_system.lib in Frameworks */ = {isa = PBXBuildFile; fileRef = 48A52CAF0E0EF55C008DBDD8 /* libboost_system.lib */; };
+		48A52CBC0E0EF77B008DBDD8 /* libboost_system.dylib in Frameworks */ = {isa = PBXBuildFile; fileRef = 48A52CAF0E0EF55C008DBDD8 /* libboost_system.dylib */; };
+		48A52CBD0E0EF77B008DBDD8 /* libboost_system.dylib in Frameworks */ = {isa = PBXBuildFile; fileRef = 48A52CAF0E0EF55C008DBDD8 /* libboost_system.dylib */; };
+		48A52CBE0E0EF77C008DBDD8 /* libboost_system.dylib in Frameworks */ = {isa = PBXBuildFile; fileRef = 48A52CAF0E0EF55C008DBDD8 /* libboost_system.dylib */; };
+		48A52CBF0E0EF77C008DBDD8 /* libboost_system.dylib in Frameworks */ = {isa = PBXBuildFile; fileRef = 48A52CAF0E0EF55C008DBDD8 /* libboost_system.dylib */; };
+		48A52CC00E0EF77D008DBDD8 /* libboost_system.dylib in Frameworks */ = {isa = PBXBuildFile; fileRef = 48A52CAF0E0EF55C008DBDD8 /* libboost_system.dylib */; };
+		48A52CC20E0EF77E008DBDD8 /* libboost_system.dylib in Frameworks */ = {isa = PBXBuildFile; fileRef = 48A52CAF0E0EF55C008DBDD8 /* libboost_system.dylib */; };
+		48A52CC30E0EF785008DBDD8 /* libboost_system.dylib in Frameworks */ = {isa = PBXBuildFile; fileRef = 48A52CAF0E0EF55C008DBDD8 /* libboost_system.dylib */; };
+		48B0B0350E6534690023B198 /* PlaneNodeProcessor.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 48B0B0340E6534690023B198 /* PlaneNodeProcessor.cpp */; };
+		48B0B0370E6534810023B198 /* PlaneNodeProcessor.h in Headers */ = {isa = PBXBuildFile; fileRef = 48B0B0360E6534810023B198 /* PlaneNodeProcessor.h */; };
+		48B0B03C0E6535AB0023B198 /* libmeshmagick.dylib in Resources */ = {isa = PBXBuildFile; fileRef = 440785DD0C09D231006E496D /* libmeshmagick.dylib */; };
+		48B0B0490E65BBB30023B198 /* libfmodex.dylib in Frameworks */ = {isa = PBXBuildFile; fileRef = 48B0B0480E65BBB30023B198 /* libfmodex.dylib */; };
+		48B0B04A0E65BBC10023B198 /* libfmodex.dylib in Resources */ = {isa = PBXBuildFile; fileRef = 48B0B0480E65BBB30023B198 /* libfmodex.dylib */; };
 		48B5F63A0DAF48AF00D05C95 /* Info.plist in Resources */ = {isa = PBXBuildFile; fileRef = 8D0C4E960486CD37000505A6 /* Info.plist */; };
 		48B772DD0D58350B000A3B97 /* XmlProcessor.h in Headers */ = {isa = PBXBuildFile; fileRef = 48B772DA0D58350B000A3B97 /* XmlProcessor.h */; };
 		48B772DE0D58350B000A3B97 /* XmlPropertyReader.h in Headers */ = {isa = PBXBuildFile; fileRef = 48B772DB0D58350B000A3B97 /* XmlPropertyReader.h */; };
@@ -845,8 +851,9 @@
 			dstPath = "";
 			dstSubfolderSpec = 10;
 			files = (
+				48003B550E3211660056D073 /* libboost_system.dylib in Copy Frameworks */,
+				48D0BDE60E23378700863824 /* libboost_filesystem.dylib in Copy Frameworks */,
 				48CFBF8F0E2E869000CD0C51 /* FreeType.framework in Copy Frameworks */,
-				48D0BDE60E23378700863824 /* libboost_filesystem.dylib in Copy Frameworks */,
 				48D0BDC70E23375E00863824 /* libruby.dylib in Copy Frameworks */,
 				484D92140E1E060200BCFC2B /* Xerces.framework in Copy Frameworks */,
 				484D92150E1E060200BCFC2B /* OIS.framework in Copy Frameworks */,
@@ -1466,9 +1473,12 @@
 		4890C0D50E18062B00BE5850 /* StrafeMovement.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = StrafeMovement.cpp; path = ../engine/rules/src/StrafeMovement.cpp; sourceTree = SOURCE_ROOT; };
 		4890C0D60E18062B00BE5850 /* WalkMovement.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = WalkMovement.cpp; path = ../engine/rules/src/WalkMovement.cpp; sourceTree = SOURCE_ROOT; };
 		48A52B210E0EDA0E008DBDD8 /* libboost_filesystem.dylib */ = {isa = PBXFileReference; lastKnownFileType = "compiled.mach-o.dylib"; name = libboost_filesystem.dylib; path = /usr/local/lib/libboost_filesystem.dylib; sourceTree = "<absolute>"; };
-		48A52CAF0E0EF55C008DBDD8 /* libboost_system.lib */ = {isa = PBXFileReference; lastKnownFileType = "compiled.mach-o.dylib"; name = libboost_system.lib; path = /usr/local/lib/libboost_system.lib; sourceTree = "<absolute>"; };
+		48A52CAF0E0EF55C008DBDD8 /* libboost_system.dylib */ = {isa = PBXFileReference; lastKnownFileType = "compiled.mach-o.dylib"; name = libboost_system.dylib; path = /usr/local/lib/libboost_system.dylib; sourceTree = "<absolute>"; };
 		48A52CB50E0EF5BD008DBDD8 /* ApplyDamageJob.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = ApplyDamageJob.h; path = ../engine/rules/include/ApplyDamageJob.h; sourceTree = SOURCE_ROOT; };
 		48A52CB70E0EF5D0008DBDD8 /* ApplyDamageJob.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = ApplyDamageJob.cpp; path = ../engine/rules/src/ApplyDamageJob.cpp; sourceTree = SOURCE_ROOT; };
+		48B0B0340E6534690023B198 /* PlaneNodeProcessor.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = PlaneNodeProcessor.cpp; path = ../engine/script/src/PlaneNodeProcessor.cpp; sourceTree = SOURCE_ROOT; };
+		48B0B0360E6534810023B198 /* PlaneNodeProcessor.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = PlaneNodeProcessor.h; path = ../engine/script/include/PlaneNodeProcessor.h; sourceTree = SOURCE_ROOT; };
+		48B0B0480E65BBB30023B198 /* libfmodex.dylib */ = {isa = PBXFileReference; lastKnownFileType = "compiled.mach-o.dylib"; name = libfmodex.dylib; path = "FMOD Programmers API/api/lib/libfmodex.dylib"; sourceTree = SYSTEM_DEVELOPER_DIR; };
 		48B772DA0D58350B000A3B97 /* XmlProcessor.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = XmlProcessor.h; path = ../engine/common/include/XmlProcessor.h; sourceTree = SOURCE_ROOT; };
 		48B772DB0D58350B000A3B97 /* XmlPropertyReader.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = XmlPropertyReader.h; path = ../engine/common/include/XmlPropertyReader.h; sourceTree = SOURCE_ROOT; };
 		48B772DC0D58350B000A3B97 /* XmlPropertyWriter.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = XmlPropertyWriter.h; path = ../engine/common/include/XmlPropertyWriter.h; sourceTree = SOURCE_ROOT; };
@@ -1509,7 +1519,7 @@
 				444EAEBF0BD0F09900C6D4A0 /* CEGUI.framework in Frameworks */,
 				444EAEC00BD0F09900C6D4A0 /* Ogre.framework in Frameworks */,
 				4836CBCE0D8FB0BE002FE5D7 /* Xerces.framework in Frameworks */,
-				48A52CB00E0EF55C008DBDD8 /* libboost_system.lib in Frameworks */,
+				48A52CB00E0EF55C008DBDD8 /* libboost_system.dylib in Frameworks */,
 				484FE6BA0E17BC8800FA880F /* Carbon.framework in Frameworks */,
 			);
 			runOnlyForDeploymentPostprocessing = 0;
@@ -1526,7 +1536,7 @@
 				444EB0890BD1153500C6D4A0 /* OgreNewt.framework in Frameworks */,
 				440785DE0C09D231006E496D /* libmeshmagick.dylib in Frameworks */,
 				4836CBCD0D8FB0BE002FE5D7 /* Xerces.framework in Frameworks */,
-				48A52CB10E0EF55C008DBDD8 /* libboost_system.lib in Frameworks */,
+				48A52CB10E0EF55C008DBDD8 /* libboost_system.dylib in Frameworks */,
 				484FE6BC0E17BC8800FA880F /* Carbon.framework in Frameworks */,
 			);
 			runOnlyForDeploymentPostprocessing = 0;
@@ -1544,7 +1554,7 @@
 				444EB0D80BD1198B00C6D4A0 /* OgreNewt.framework in Frameworks */,
 				444EB0DB0BD119BB00C6D4A0 /* OpenSteer.framework in Frameworks */,
 				4836CBCC0D8FB0BE002FE5D7 /* Xerces.framework in Frameworks */,
-				48A52CBC0E0EF77B008DBDD8 /* libboost_system.lib in Frameworks */,
+				48A52CBC0E0EF77B008DBDD8 /* libboost_system.dylib in Frameworks */,
 				484FE6BD0E17BC8800FA880F /* Carbon.framework in Frameworks */,
 			);
 			runOnlyForDeploymentPostprocessing = 0;
@@ -1560,7 +1570,7 @@
 				444EB3410BD172BA00C6D4A0 /* CEGUI.framework in Frameworks */,
 				444EB3420BD172BA00C6D4A0 /* Ogre.framework in Frameworks */,
 				4836CBCB0D8FB0BE002FE5D7 /* Xerces.framework in Frameworks */,
-				48A52CBD0E0EF77B008DBDD8 /* libboost_system.lib in Frameworks */,
+				48A52CBD0E0EF77B008DBDD8 /* libboost_system.dylib in Frameworks */,
 				484FE6BE0E17BC8800FA880F /* Carbon.framework in Frameworks */,
 			);
 			runOnlyForDeploymentPostprocessing = 0;
@@ -1579,7 +1589,7 @@
 				444EB3730BD1784A00C6D4A0 /* OgreCEGUIRenderer.framework in Frameworks */,
 				4857E4E50D46A664009D376D /* OIS.framework in Frameworks */,
 				4836CBCA0D8FB0BE002FE5D7 /* Xerces.framework in Frameworks */,
-				48A52CBE0E0EF77C008DBDD8 /* libboost_system.lib in Frameworks */,
+				48A52CBE0E0EF77C008DBDD8 /* libboost_system.dylib in Frameworks */,
 				484FE6BF0E17BC8800FA880F /* Carbon.framework in Frameworks */,
 			);
 			runOnlyForDeploymentPostprocessing = 0;
@@ -1594,8 +1604,9 @@
 				48365BEC0D8D56DC00BF3313 /* libRlCommon.dylib in Frameworks */,
 				48365C950D8D56EA00BF3313 /* CEGUI.framework in Frameworks */,
 				4836CBCF0D8FB0BE002FE5D7 /* Xerces.framework in Frameworks */,
-				48A52CC30E0EF785008DBDD8 /* libboost_system.lib in Frameworks */,
+				48A52CC30E0EF785008DBDD8 /* libboost_system.dylib in Frameworks */,
 				484FE6C10E17BC8800FA880F /* Carbon.framework in Frameworks */,
+				48B0B0490E65BBB30023B198 /* libfmodex.dylib in Frameworks */,
 			);
 			runOnlyForDeploymentPostprocessing = 0;
 		};
@@ -1604,7 +1615,7 @@
 			buildActionMask = 2147483647;
 			files = (
 				483D87CE0D8C564400F3629E /* libRlScript.dylib in Frameworks */,
-				48A52CC00E0EF77D008DBDD8 /* libboost_system.lib in Frameworks */,
+				48A52CC00E0EF77D008DBDD8 /* libboost_system.dylib in Frameworks */,
 				484FE6C20E17BC8800FA880F /* Carbon.framework in Frameworks */,
 			);
 			runOnlyForDeploymentPostprocessing = 0;
@@ -1623,7 +1634,7 @@
 				48570C480D8A6E9900096E35 /* libRlRules.dylib in Frameworks */,
 				48570C490D8A6E9900096E35 /* libRlUi.dylib in Frameworks */,
 				4836CBC90D8FB0BE002FE5D7 /* Xerces.framework in Frameworks */,
-				48A52CBF0E0EF77C008DBDD8 /* libboost_system.lib in Frameworks */,
+				48A52CBF0E0EF77C008DBDD8 /* libboost_system.dylib in Frameworks */,
 				484FE6C00E17BC8800FA880F /* Carbon.framework in Frameworks */,
 			);
 			runOnlyForDeploymentPostprocessing = 0;
@@ -1644,7 +1655,7 @@
 				444EB7A00BD195E800C6D4A0 /* libRlUi.dylib in Frameworks */,
 				4836F8BC0D885AAA00E3632F /* libruby.dylib in Frameworks */,
 				48570E020D8A6F8300096E35 /* libRlScript.dylib in Frameworks */,
-				48A52CC20E0EF77E008DBDD8 /* libboost_system.lib in Frameworks */,
+				48A52CC20E0EF77E008DBDD8 /* libboost_system.dylib in Frameworks */,
 				484FE6BB0E17BC8800FA880F /* Carbon.framework in Frameworks */,
 			);
 			runOnlyForDeploymentPostprocessing = 0;
@@ -1671,6 +1682,7 @@
 		20286C29FDCF999611CA2CEA /* Rastullah */ = {
 			isa = PBXGroup;
 			children = (
+				48B0B0480E65BBB30023B198 /* libfmodex.dylib */,
 				20286C2AFDCF999611CA2CEA /* Sources */,
 				20286C2CFDCF999611CA2CEA /* Resources */,
 				20286C32FDCF999611CA2CEA /* External Frameworks and Libraries */,
@@ -1712,7 +1724,7 @@
 			children = (
 				48CFBF8E0E2E869000CD0C51 /* FreeType.framework */,
 				484FE6B90E17BC8800FA880F /* Carbon.framework */,
-				48A52CAF0E0EF55C008DBDD8 /* libboost_system.lib */,
+				48A52CAF0E0EF55C008DBDD8 /* libboost_system.dylib */,
 				48A52B210E0EDA0E008DBDD8 /* libboost_filesystem.dylib */,
 				4836CBC80D8FB0BE002FE5D7 /* Xerces.framework */,
 				4857E4E40D46A664009D376D /* OIS.framework */,
@@ -2294,42 +2306,9 @@
 		444EAE600BD0E66500C6D4A0 /* RlScript */ = {
 			isa = PBXGroup;
 			children = (
-				485B89570E15796500D5B19C /* Scene.cpp */,
-				485B89580E15796500D5B19C /* SceneLoader.cpp */,
-				485B89590E15796500D5B19C /* SceneManager.cpp */,
-				485B89510E15794A00D5B19C /* Scene.h */,
-				485B89520E15794A00D5B19C /* SceneLoader.h */,
-				485B89530E15794A00D5B19C /* SceneManager.h */,
-				48760AA90D92E4B700BEB57C /* RlExports_wrap.cxx */,
-				48760AAA0D92E4B700BEB57C /* RlExports_wrap.h */,
+				48B0B0230E6533940023B198 /* Headers */,
+				48B0B0240E6533A50023B198 /* Source */,
 				48389C010D86783200AFAB66 /* swig */,
-				48389C190D867AA900AFAB66 /* stdinc.cpp */,
-				4404DA840C48D01E007B4657 /* stdinc.h */,
-				446BF4810C4532B50013C214 /* UnifiedFactory.h */,
-				444825ED0BF7B32100C5A94F /* AbstractMapNodeProcessor.h */,
-				444825EE0BF7B32100C5A94F /* EntityNodeProcessor.h */,
-				444825EF0BF7B32100C5A94F /* EnvironmentProcessor.h */,
-				444825F00BF7B32100C5A94F /* GameObjectNodeProcessor.h */,
-				444825F10BF7B32100C5A94F /* LightNodeProcessor.h */,
-				444825F20BF7B32100C5A94F /* MapLoader.h */,
-				444825F30BF7B32100C5A94F /* ParticleSystemNodeProcessor.h */,
-				48389C1A0D867AA900AFAB66 /* TriggerFactory.cpp */,
-				444825F40BF7B32100C5A94F /* SoundNodeProcessor.h */,
-				444825F50BF7B32100C5A94F /* TriggerFactory.h */,
-				444825F60BF7B32100C5A94F /* WaypointProcessor.h */,
-				444825F70BF7B32100C5A94F /* ZoneProcessor.h */,
-				444825D90BF7B2B200C5A94F /* AbstractMapNodeProcessor.cpp */,
-				444825DA0BF7B2B200C5A94F /* EntityNodeProcessor.cpp */,
-				444825DB0BF7B2B200C5A94F /* EnvironmentProcessor.cpp */,
-				444825DC0BF7B2B200C5A94F /* GameObjectNodeProcessor.cpp */,
-				444825DD0BF7B2B200C5A94F /* LightNodeProcessor.cpp */,
-				444825DE0BF7B2B200C5A94F /* MapLoader.cpp */,
-				444825DF0BF7B2B200C5A94F /* ParticleSystemNodeProcessor.cpp */,
-				444825E00BF7B2B200C5A94F /* SoundNodeProcessor.cpp */,
-				444825E10BF7B2B200C5A94F /* WaypointProcessor.cpp */,
-				444825E20BF7B2B200C5A94F /* ZoneProcessor.cpp */,
-				444EAE670BD0E6D400C6D4A0 /* ScriptObjectMarker.cpp */,
-				444EAE680BD0E6D400C6D4A0 /* ScriptSubsystem.cpp */,
 				444EAE610BD0E6C000C6D4A0 /* ScriptObjectMarker.h */,
 				444EAE620BD0E6C000C6D4A0 /* ScriptPrerequisites.h */,
 				444EAE630BD0E6C000C6D4A0 /* ScriptSubsystem.h */,
@@ -2340,6 +2319,8 @@
 		48389C010D86783200AFAB66 /* swig */ = {
 			isa = PBXGroup;
 			children = (
+				48760AA90D92E4B700BEB57C /* RlExports_wrap.cxx */,
+				48760AAA0D92E4B700BEB57C /* RlExports_wrap.h */,
 				48500B780D906A1000EAD8DB /* RlScriptExportsMac.cpp */,
 				48389C020D86787900AFAB66 /* RlExports.i */,
 				48389BE80D8677EE00AFAB66 /* RlAi.head.swig */,
@@ -2408,6 +2389,55 @@
 			path = src;
 			sourceTree = "<group>";
 		};
+		48B0B0230E6533940023B198 /* Headers */ = {
+			isa = PBXGroup;
+			children = (
+				444825ED0BF7B32100C5A94F /* AbstractMapNodeProcessor.h */,
+				444825EE0BF7B32100C5A94F /* EntityNodeProcessor.h */,
+				444825EF0BF7B32100C5A94F /* EnvironmentProcessor.h */,
+				444825F00BF7B32100C5A94F /* GameObjectNodeProcessor.h */,
+				444825F10BF7B32100C5A94F /* LightNodeProcessor.h */,
+				444825F20BF7B32100C5A94F /* MapLoader.h */,
+				444825F30BF7B32100C5A94F /* ParticleSystemNodeProcessor.h */,
+				48B0B0360E6534810023B198 /* PlaneNodeProcessor.h */,
+				485B89510E15794A00D5B19C /* Scene.h */,
+				485B89520E15794A00D5B19C /* SceneLoader.h */,
+				485B89530E15794A00D5B19C /* SceneManager.h */,
+				444825F40BF7B32100C5A94F /* SoundNodeProcessor.h */,
+				4404DA840C48D01E007B4657 /* stdinc.h */,
+				444825F50BF7B32100C5A94F /* TriggerFactory.h */,
+				446BF4810C4532B50013C214 /* UnifiedFactory.h */,
+				444825F60BF7B32100C5A94F /* WaypointProcessor.h */,
+				444825F70BF7B32100C5A94F /* ZoneProcessor.h */,
+			);
+			name = Headers;
+			sourceTree = "<group>";
+		};
+		48B0B0240E6533A50023B198 /* Source */ = {
+			isa = PBXGroup;
+			children = (
+				444825D90BF7B2B200C5A94F /* AbstractMapNodeProcessor.cpp */,
+				444825DA0BF7B2B200C5A94F /* EntityNodeProcessor.cpp */,
+				444825DB0BF7B2B200C5A94F /* EnvironmentProcessor.cpp */,
+				444825DC0BF7B2B200C5A94F /* GameObjectNodeProcessor.cpp */,
+				444825DD0BF7B2B200C5A94F /* LightNodeProcessor.cpp */,
+				444825DE0BF7B2B200C5A94F /* MapLoader.cpp */,
+				444825DF0BF7B2B200C5A94F /* ParticleSystemNodeProcessor.cpp */,
+				48B0B0340E6534690023B198 /* PlaneNodeProcessor.cpp */,
+				485B89570E15796500D5B19C /* Scene.cpp */,
+				485B89580E15796500D5B19C /* SceneLoader.cpp */,
+				485B89590E15796500D5B19C /* SceneManager.cpp */,
+				444EAE670BD0E6D400C6D4A0 /* ScriptObjectMarker.cpp */,
+				444EAE680BD0E6D400C6D4A0 /* ScriptSubsystem.cpp */,
+				444825E00BF7B2B200C5A94F /* SoundNodeProcessor.cpp */,
+				48389C190D867AA900AFAB66 /* stdinc.cpp */,
+				48389C1A0D867AA900AFAB66 /* TriggerFactory.cpp */,
+				444825E10BF7B2B200C5A94F /* WaypointProcessor.cpp */,
+				444825E20BF7B2B200C5A94F /* ZoneProcessor.cpp */,
+			);
+			name = Source;
+			sourceTree = "<group>";
+		};
 		48CFBFD60E2E87A800CD0C51 /* Scripts */ = {
 			isa = PBXGroup;
 			children = (
@@ -2779,6 +2809,7 @@
 				485B89540E15794A00D5B19C /* Scene.h in Headers */,
 				485B89550E15794A00D5B19C /* SceneLoader.h in Headers */,
 				485B89560E15794A00D5B19C /* SceneManager.h in Headers */,
+				48B0B0370E6534810023B198 /* PlaneNodeProcessor.h in Headers */,
 			);
 			runOnlyForDeploymentPostprocessing = 0;
 		};
@@ -2995,11 +3026,13 @@
 			isa = PBXResourcesBuildPhase;
 			buildActionMask = 2147483647;
 			files = (
+				48B0B03C0E6535AB0023B198 /* libmeshmagick.dylib in Resources */,
 				484D921E0E1E078100BCFC2B /* libRlCommon.dylib in Resources */,
 				484D921F0E1E078100BCFC2B /* libRlCore.dylib in Resources */,
 				484D92200E1E078100BCFC2B /* libRlAi.dylib in Resources */,
 				484D92210E1E078100BCFC2B /* libRlRules.dylib in Resources */,
 				484D92220E1E078100BCFC2B /* libRlUi.dylib in Resources */,
+				48B0B04A0E65BBC10023B198 /* libfmodex.dylib in Resources */,
 				484D92230E1E078100BCFC2B /* libRlScript.dylib in Resources */,
 				484D92240E1E078100BCFC2B /* libRlFmod4Driver.dylib in Resources */,
 				484D92250E1E078100BCFC2B /* RlScript.bundle in Resources */,
@@ -3366,6 +3399,7 @@
 				485B895A0E15796500D5B19C /* Scene.cpp in Sources */,
 				485B895B0E15796500D5B19C /* SceneLoader.cpp in Sources */,
 				485B895C0E15796500D5B19C /* SceneManager.cpp in Sources */,
+				48B0B0350E6534690023B198 /* PlaneNodeProcessor.cpp in Sources */,
 			);
 			runOnlyForDeploymentPostprocessing = 0;
 		};
@@ -3538,7 +3572,7 @@
 				OTHER_LDFLAGS = "-pthread";
 				PREBINDING = NO;
 				PRODUCT_NAME = libRlCommon;
-				ZERO_LINK = YES;
+				ZERO_LINK = NO;
 			};
 			name = Debug;
 		};
@@ -3609,7 +3643,7 @@
 				OTHER_LDFLAGS = "";
 				PREBINDING = NO;
 				PRODUCT_NAME = libRlCore;
-				ZERO_LINK = YES;
+				ZERO_LINK = NO;
 			};
 			name = Debug;
 		};
@@ -3688,7 +3722,7 @@
 				OTHER_LDFLAGS = "";
 				PREBINDING = NO;
 				PRODUCT_NAME = libRlAi;
-				ZERO_LINK = YES;
+				ZERO_LINK = NO;
 			};
 			name = Debug;
 		};
@@ -3761,7 +3795,7 @@
 				PREBINDING = NO;
 				PRODUCT_NAME = libRlRules;
 				SHARED_PRECOMPS_DIR = "";
-				ZERO_LINK = YES;
+				ZERO_LINK = NO;
 			};
 			name = Debug;
 		};
@@ -3835,7 +3869,7 @@
 				);
 				PREBINDING = NO;
 				PRODUCT_NAME = libRlUi;
-				ZERO_LINK = YES;
+				ZERO_LINK = NO;
 			};
 			name = Debug;
 		};
@@ -3898,12 +3932,16 @@
 				);
 				HEADER_SEARCH_PATHS_QUOTED_FOR_TARGET_1 = "\"/Developer/FMOD Programmers API/api/inc\"";
 				INSTALL_PATH = "@executable_path/../Resources";
-				LIBRARY_SEARCH_PATHS = "$(LIBRARY_SEARCH_PATHS_QUOTED_FOR_TARGET_1)";
+				LIBRARY_SEARCH_PATHS = (
+					"$(LIBRARY_SEARCH_PATHS_QUOTED_FOR_TARGET_1)",
+					"$(LIBRARY_SEARCH_PATHS_QUOTED_FOR_TARGET_2)",
+				);
 				LIBRARY_SEARCH_PATHS_QUOTED_FOR_TARGET_1 = "\"/Developer/FMOD Programmers API/api/lib\"";
+				LIBRARY_SEARCH_PATHS_QUOTED_FOR_TARGET_2 = "\"$(DEVELOPER_DIR)/FMOD Programmers API/api/lib\"";
 				OTHER_LDFLAGS = "-lfmodex";
 				PREBINDING = NO;
 				PRODUCT_NAME = RlFmod4Driver;
-				ZERO_LINK = YES;
+				ZERO_LINK = NO;
 			};
 			name = Debug;
 		};
@@ -3926,8 +3964,12 @@
 				);
 				HEADER_SEARCH_PATHS_QUOTED_FOR_TARGET_1 = "\"/Developer/FMOD Programmers API/api/inc\"";
 				INSTALL_PATH = "@executable_path/../Resources";
-				LIBRARY_SEARCH_PATHS = "$(LIBRARY_SEARCH_PATHS_QUOTED_FOR_TARGET_1)";
+				LIBRARY_SEARCH_PATHS = (
+					"$(LIBRARY_SEARCH_PATHS_QUOTED_FOR_TARGET_1)",
+					"$(LIBRARY_SEARCH_PATHS_QUOTED_FOR_TARGET_2)",
+				);
 				LIBRARY_SEARCH_PATHS_QUOTED_FOR_TARGET_1 = "\"/Developer/FMOD Programmers API/api/lib\"";
+				LIBRARY_SEARCH_PATHS_QUOTED_FOR_TARGET_2 = "\"$(DEVELOPER_DIR)/FMOD Programmers API/api/lib\"";
 				OTHER_LDFLAGS = "-lfmodex";
 				PREBINDING = NO;
 				PRODUCT_NAME = RlFmod4Driver;
@@ -3961,7 +4003,7 @@
 				MACH_O_TYPE = mh_bundle;
 				PREBINDING = NO;
 				PRODUCT_NAME = RlScript;
-				ZERO_LINK = YES;
+				ZERO_LINK = NO;
 			};
 			name = Debug;
 		};
@@ -4026,7 +4068,7 @@
 				MACH_O_TYPE = mh_dylib;
 				PREBINDING = NO;
 				PRODUCT_NAME = RlScript;
-				ZERO_LINK = YES;
+				ZERO_LINK = NO;
 			};
 			name = Debug;
 		};
@@ -4088,10 +4130,12 @@
 					"$(LIBRARY_SEARCH_PATHS_QUOTED_FOR_TARGET_1)",
 					"$(LIBRARY_SEARCH_PATHS_QUOTED_FOR_TARGET_2)",
 					"$(LIBRARY_SEARCH_PATHS_QUOTED_FOR_TARGET_3)",
+					"$(LIBRARY_SEARCH_PATHS_QUOTED_FOR_TARGET_4)",
 				);
 				LIBRARY_SEARCH_PATHS_QUOTED_FOR_TARGET_1 = "\"$(SRCROOT)/build/Debug\"";
 				LIBRARY_SEARCH_PATHS_QUOTED_FOR_TARGET_2 = "\"$(SYSTEM_LIBRARY_DIR)/Frameworks/Ruby.framework/Versions/1.8/usr/lib\"";
 				LIBRARY_SEARCH_PATHS_QUOTED_FOR_TARGET_3 = "\"$(SRCROOT)/build/Debug\"";
+				LIBRARY_SEARCH_PATHS_QUOTED_FOR_TARGET_4 = "\"$(DEVELOPER_DIR)/FMOD Programmers API/api/lib\"";
 				PRODUCT_NAME = Rastullah;
 				WRAPPER_EXTENSION = app;
 				ZERO_LINK = YES;
@@ -4119,10 +4163,12 @@
 					"$(LIBRARY_SEARCH_PATHS_QUOTED_1)",
 					"$(LIBRARY_SEARCH_PATHS_QUOTED_2)",
 					"$(LIBRARY_SEARCH_PATHS_QUOTED_3)",
+					"$(LIBRARY_SEARCH_PATHS_QUOTED_FOR_TARGET_1)",
 				);
 				LIBRARY_SEARCH_PATHS_QUOTED_1 = "\"$(SRCROOT)/build/Debug\"";
 				LIBRARY_SEARCH_PATHS_QUOTED_2 = "\"$(SYSTEM_LIBRARY_DIR)/Frameworks/Ruby.framework/Versions/1.8/usr/lib\"";
 				LIBRARY_SEARCH_PATHS_QUOTED_3 = "\"$(SRCROOT)/build/Debug\"";
+				LIBRARY_SEARCH_PATHS_QUOTED_FOR_TARGET_1 = "\"$(DEVELOPER_DIR)/FMOD Programmers API/api/lib\"";
 				PRODUCT_NAME = Rastullah;
 				WRAPPER_EXTENSION = app;
 			};
@@ -4154,6 +4200,7 @@
 				);
 				PREBINDING = NO;
 				SDKROOT = /Developer/SDKs/MacOSX10.4u.sdk;
+				ZERO_LINK = NO;
 			};
 			name = Debug;
 		};



From melven at mail.berlios.de  Thu Aug 28 20:41:53 2008
From: melven at mail.berlios.de (melven at mail.berlios.de)
Date: Thu, 28 Aug 2008 20:41:53 +0200
Subject: [Dsa-hl-svn] r4491 - in rl/branches/newton20:
	Mac/Rastullah.xcodeproj Mac/tools engine/ai/src
	engine/core/src engine/rules/src engine/script/include
	engine/script/src engine/ui/include engine/ui/src
Message-ID: <200808281841.m7SIfrac031248@sheep.berlios.de>

Author: melven
Date: 2008-08-28 20:41:29 +0200 (Thu, 28 Aug 2008)
New Revision: 4491

Modified:
   rl/branches/newton20/Mac/Rastullah.xcodeproj/project.pbxproj
   rl/branches/newton20/Mac/tools/renameinstalldirs.sh
   rl/branches/newton20/engine/ai/src/DialogImplication.cpp
   rl/branches/newton20/engine/core/src/ConfigurationManager.cpp
   rl/branches/newton20/engine/rules/src/CreatureController.cpp
   rl/branches/newton20/engine/rules/src/StandAroundMovement.cpp
   rl/branches/newton20/engine/rules/src/StepRecognitionMovement.cpp
   rl/branches/newton20/engine/script/include/PlaneNodeProcessor.h
   rl/branches/newton20/engine/script/src/PlaneNodeProcessor.cpp
   rl/branches/newton20/engine/ui/include/CombatControlState.h
   rl/branches/newton20/engine/ui/include/ItemDescriptionDragContainer.h
   rl/branches/newton20/engine/ui/include/ItemDragContainer.h
   rl/branches/newton20/engine/ui/include/ItemIconDragContainer.h
   rl/branches/newton20/engine/ui/include/WindowFadeJob.h
   rl/branches/newton20/engine/ui/src/CombatControlState.cpp
   rl/branches/newton20/engine/ui/src/ContainerContentWindow.cpp
   rl/branches/newton20/engine/ui/src/InventoryWindow.cpp
   rl/branches/newton20/engine/ui/src/ItemDescriptionDragContainer.cpp
   rl/branches/newton20/engine/ui/src/ItemDragContainer.cpp
   rl/branches/newton20/engine/ui/src/ItemIconDragContainer.cpp
   rl/branches/newton20/engine/ui/src/UiSubsystem.cpp
   rl/branches/newton20/engine/ui/src/WindowFadeJob.cpp
Log:
- merged changes from trunk
- fixed CEGUI-errors with the inventory-window and drag'n drop items
  Item*DragContainer now created with CEGUI::WindowManager and a CEGUI-
  window-factory (needs changes in modules/common/gui/windows/item*dragcontainer.xml
  ( -    <Window Type="DefaultWindow" Name="ItemDescriptionDragContainer">
    +    <Window Type="ItemDescriptionDragContainer" Name="ItemDescriptionDragContainer">
    and same with itemicondragcontainer.xml)
- fixed some errors in CreatureController and movements (StepRecognition now activated)
  TODO: use TriggerCollisions for StepRecognition
- implemented camera-movement in CombatControlState 
  TODO: camera-collision



Modified: rl/branches/newton20/Mac/Rastullah.xcodeproj/project.pbxproj
===================================================================
--- rl/branches/newton20/Mac/Rastullah.xcodeproj/project.pbxproj	2008-08-27 22:12:19 UTC (rev 4490)
+++ rl/branches/newton20/Mac/Rastullah.xcodeproj/project.pbxproj	2008-08-28 18:41:29 UTC (rev 4491)
@@ -429,6 +429,7 @@
 		44D8147A0BF7B62F00534175 /* Trigger.h in Headers */ = {isa = PBXBuildFile; fileRef = 44D814750BF7B62F00534175 /* Trigger.h */; };
 		44D8147B0BF7B62F00534175 /* Zone.h in Headers */ = {isa = PBXBuildFile; fileRef = 44D814760BF7B62F00534175 /* Zone.h */; };
 		44D8147C0BF7B62F00534175 /* ZoneManager.h in Headers */ = {isa = PBXBuildFile; fileRef = 44D814770BF7B62F00534175 /* ZoneManager.h */; };
+		48003B550E3211660056D073 /* libboost_system.dylib in Copy Frameworks */ = {isa = PBXBuildFile; fileRef = 48A52CAF0E0EF55C008DBDD8 /* libboost_system.dylib */; };
 		483646990D83D13700912FEC /* ContentLoader.h in Headers */ = {isa = PBXBuildFile; fileRef = 483646960D83D13700912FEC /* ContentLoader.h */; };
 		4836469A0D83D13700912FEC /* SoundStitching.h in Headers */ = {isa = PBXBuildFile; fileRef = 483646970D83D13700912FEC /* SoundStitching.h */; };
 		4836469B0D83D13700912FEC /* StartAnimationJob.h in Headers */ = {isa = PBXBuildFile; fileRef = 483646980D83D13700912FEC /* StartAnimationJob.h */; };
@@ -645,18 +646,23 @@
 		4890C0E30E18062B00BE5850 /* StrafeMovement.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 4890C0D50E18062B00BE5850 /* StrafeMovement.cpp */; };
 		4890C0E40E18062B00BE5850 /* WalkMovement.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 4890C0D60E18062B00BE5850 /* WalkMovement.cpp */; };
 		48A52B220E0EDA0E008DBDD8 /* libboost_filesystem.dylib in Frameworks */ = {isa = PBXBuildFile; fileRef = 48A52B210E0EDA0E008DBDD8 /* libboost_filesystem.dylib */; };
-		48A52CB00E0EF55C008DBDD8 /* libboost_system.lib in Frameworks */ = {isa = PBXBuildFile; fileRef = 48A52CAF0E0EF55C008DBDD8 /* libboost_system.lib */; };
-		48A52CB10E0EF55C008DBDD8 /* libboost_system.lib in Frameworks */ = {isa = PBXBuildFile; fileRef = 48A52CAF0E0EF55C008DBDD8 /* libboost_system.lib */; };
+		48A52CB00E0EF55C008DBDD8 /* libboost_system.dylib in Frameworks */ = {isa = PBXBuildFile; fileRef = 48A52CAF0E0EF55C008DBDD8 /* libboost_system.dylib */; };
+		48A52CB10E0EF55C008DBDD8 /* libboost_system.dylib in Frameworks */ = {isa = PBXBuildFile; fileRef = 48A52CAF0E0EF55C008DBDD8 /* libboost_system.dylib */; };
 		48A52CB30E0EF577008DBDD8 /* libboost_filesystem.dylib in Frameworks */ = {isa = PBXBuildFile; fileRef = 48A52B210E0EDA0E008DBDD8 /* libboost_filesystem.dylib */; };
 		48A52CB60E0EF5BD008DBDD8 /* ApplyDamageJob.h in Headers */ = {isa = PBXBuildFile; fileRef = 48A52CB50E0EF5BD008DBDD8 /* ApplyDamageJob.h */; };
 		48A52CB80E0EF5D0008DBDD8 /* ApplyDamageJob.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 48A52CB70E0EF5D0008DBDD8 /* ApplyDamageJob.cpp */; };
-		48A52CBC0E0EF77B008DBDD8 /* libboost_system.lib in Frameworks */ = {isa = PBXBuildFile; fileRef = 48A52CAF0E0EF55C008DBDD8 /* libboost_system.lib */; };
-		48A52CBD0E0EF77B008DBDD8 /* libboost_system.lib in Frameworks */ = {isa = PBXBuildFile; fileRef = 48A52CAF0E0EF55C008DBDD8 /* libboost_system.lib */; };
-		48A52CBE0E0EF77C008DBDD8 /* libboost_system.lib in Frameworks */ = {isa = PBXBuildFile; fileRef = 48A52CAF0E0EF55C008DBDD8 /* libboost_system.lib */; };
-		48A52CBF0E0EF77C008DBDD8 /* libboost_system.lib in Frameworks */ = {isa = PBXBuildFile; fileRef = 48A52CAF0E0EF55C008DBDD8 /* libboost_system.lib */; };
-		48A52CC00E0EF77D008DBDD8 /* libboost_system.lib in Frameworks */ = {isa = PBXBuildFile; fileRef = 48A52CAF0E0EF55C008DBDD8 /* libboost_system.lib */; };
-		48A52CC20E0EF77E008DBDD8 /* libboost_system.lib in Frameworks */ = {isa = PBXBuildFile; fileRef = 48A52CAF0E0EF55C008DBDD8 /* libboost_system.lib */; };
-		48A52CC30E0EF785008DBDD8 /* libboost_system.lib in Frameworks */ = {isa = PBXBuildFile; fileRef = 48A52CAF0E0EF55C008DBDD8 /* libboost_system.lib */; };
+		48A52CBC0E0EF77B008DBDD8 /* libboost_system.dylib in Frameworks */ = {isa = PBXBuildFile; fileRef = 48A52CAF0E0EF55C008DBDD8 /* libboost_system.dylib */; };
+		48A52CBD0E0EF77B008DBDD8 /* libboost_system.dylib in Frameworks */ = {isa = PBXBuildFile; fileRef = 48A52CAF0E0EF55C008DBDD8 /* libboost_system.dylib */; };
+		48A52CBE0E0EF77C008DBDD8 /* libboost_system.dylib in Frameworks */ = {isa = PBXBuildFile; fileRef = 48A52CAF0E0EF55C008DBDD8 /* libboost_system.dylib */; };
+		48A52CBF0E0EF77C008DBDD8 /* libboost_system.dylib in Frameworks */ = {isa = PBXBuildFile; fileRef = 48A52CAF0E0EF55C008DBDD8 /* libboost_system.dylib */; };
+		48A52CC00E0EF77D008DBDD8 /* libboost_system.dylib in Frameworks */ = {isa = PBXBuildFile; fileRef = 48A52CAF0E0EF55C008DBDD8 /* libboost_system.dylib */; };
+		48A52CC20E0EF77E008DBDD8 /* libboost_system.dylib in Frameworks */ = {isa = PBXBuildFile; fileRef = 48A52CAF0E0EF55C008DBDD8 /* libboost_system.dylib */; };
+		48A52CC30E0EF785008DBDD8 /* libboost_system.dylib in Frameworks */ = {isa = PBXBuildFile; fileRef = 48A52CAF0E0EF55C008DBDD8 /* libboost_system.dylib */; };
+		48B0B0350E6534690023B198 /* PlaneNodeProcessor.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 48B0B0340E6534690023B198 /* PlaneNodeProcessor.cpp */; };
+		48B0B0370E6534810023B198 /* PlaneNodeProcessor.h in Headers */ = {isa = PBXBuildFile; fileRef = 48B0B0360E6534810023B198 /* PlaneNodeProcessor.h */; };
+		48B0B03C0E6535AB0023B198 /* libmeshmagick.dylib in Resources */ = {isa = PBXBuildFile; fileRef = 440785DD0C09D231006E496D /* libmeshmagick.dylib */; };
+		48B0B0490E65BBB30023B198 /* libfmodex.dylib in Frameworks */ = {isa = PBXBuildFile; fileRef = 48B0B0480E65BBB30023B198 /* libfmodex.dylib */; };
+		48B0B04A0E65BBC10023B198 /* libfmodex.dylib in Resources */ = {isa = PBXBuildFile; fileRef = 48B0B0480E65BBB30023B198 /* libfmodex.dylib */; };
 		48B5F63A0DAF48AF00D05C95 /* Info.plist in Resources */ = {isa = PBXBuildFile; fileRef = 8D0C4E960486CD37000505A6 /* Info.plist */; };
 		48B772DD0D58350B000A3B97 /* XmlProcessor.h in Headers */ = {isa = PBXBuildFile; fileRef = 48B772DA0D58350B000A3B97 /* XmlProcessor.h */; };
 		48B772DE0D58350B000A3B97 /* XmlPropertyReader.h in Headers */ = {isa = PBXBuildFile; fileRef = 48B772DB0D58350B000A3B97 /* XmlPropertyReader.h */; };
@@ -845,8 +851,9 @@
 			dstPath = "";
 			dstSubfolderSpec = 10;
 			files = (
+				48003B550E3211660056D073 /* libboost_system.dylib in Copy Frameworks */,
+				48D0BDE60E23378700863824 /* libboost_filesystem.dylib in Copy Frameworks */,
 				48CFBF8F0E2E869000CD0C51 /* FreeType.framework in Copy Frameworks */,
-				48D0BDE60E23378700863824 /* libboost_filesystem.dylib in Copy Frameworks */,
 				48D0BDC70E23375E00863824 /* libruby.dylib in Copy Frameworks */,
 				484D92140E1E060200BCFC2B /* Xerces.framework in Copy Frameworks */,
 				484D92150E1E060200BCFC2B /* OIS.framework in Copy Frameworks */,
@@ -1466,9 +1473,12 @@
 		4890C0D50E18062B00BE5850 /* StrafeMovement.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = StrafeMovement.cpp; path = ../engine/rules/src/StrafeMovement.cpp; sourceTree = SOURCE_ROOT; };
 		4890C0D60E18062B00BE5850 /* WalkMovement.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = WalkMovement.cpp; path = ../engine/rules/src/WalkMovement.cpp; sourceTree = SOURCE_ROOT; };
 		48A52B210E0EDA0E008DBDD8 /* libboost_filesystem.dylib */ = {isa = PBXFileReference; lastKnownFileType = "compiled.mach-o.dylib"; name = libboost_filesystem.dylib; path = /usr/local/lib/libboost_filesystem.dylib; sourceTree = "<absolute>"; };
-		48A52CAF0E0EF55C008DBDD8 /* libboost_system.lib */ = {isa = PBXFileReference; lastKnownFileType = "compiled.mach-o.dylib"; name = libboost_system.lib; path = /usr/local/lib/libboost_system.lib; sourceTree = "<absolute>"; };
+		48A52CAF0E0EF55C008DBDD8 /* libboost_system.dylib */ = {isa = PBXFileReference; lastKnownFileType = "compiled.mach-o.dylib"; name = libboost_system.dylib; path = /usr/local/lib/libboost_system.dylib; sourceTree = "<absolute>"; };
 		48A52CB50E0EF5BD008DBDD8 /* ApplyDamageJob.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = ApplyDamageJob.h; path = ../engine/rules/include/ApplyDamageJob.h; sourceTree = SOURCE_ROOT; };
 		48A52CB70E0EF5D0008DBDD8 /* ApplyDamageJob.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = ApplyDamageJob.cpp; path = ../engine/rules/src/ApplyDamageJob.cpp; sourceTree = SOURCE_ROOT; };
+		48B0B0340E6534690023B198 /* PlaneNodeProcessor.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = PlaneNodeProcessor.cpp; path = ../engine/script/src/PlaneNodeProcessor.cpp; sourceTree = SOURCE_ROOT; };
+		48B0B0360E6534810023B198 /* PlaneNodeProcessor.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = PlaneNodeProcessor.h; path = ../engine/script/include/PlaneNodeProcessor.h; sourceTree = SOURCE_ROOT; };
+		48B0B0480E65BBB30023B198 /* libfmodex.dylib */ = {isa = PBXFileReference; lastKnownFileType = "compiled.mach-o.dylib"; name = libfmodex.dylib; path = "FMOD Programmers API/api/lib/libfmodex.dylib"; sourceTree = SYSTEM_DEVELOPER_DIR; };
 		48B772DA0D58350B000A3B97 /* XmlProcessor.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = XmlProcessor.h; path = ../engine/common/include/XmlProcessor.h; sourceTree = SOURCE_ROOT; };
 		48B772DB0D58350B000A3B97 /* XmlPropertyReader.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = XmlPropertyReader.h; path = ../engine/common/include/XmlPropertyReader.h; sourceTree = SOURCE_ROOT; };
 		48B772DC0D58350B000A3B97 /* XmlPropertyWriter.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = XmlPropertyWriter.h; path = ../engine/common/include/XmlPropertyWriter.h; sourceTree = SOURCE_ROOT; };
@@ -1509,7 +1519,7 @@
 				444EAEBF0BD0F09900C6D4A0 /* CEGUI.framework in Frameworks */,
 				444EAEC00BD0F09900C6D4A0 /* Ogre.framework in Frameworks */,
 				4836CBCE0D8FB0BE002FE5D7 /* Xerces.framework in Frameworks */,
-				48A52CB00E0EF55C008DBDD8 /* libboost_system.lib in Frameworks */,
+				48A52CB00E0EF55C008DBDD8 /* libboost_system.dylib in Frameworks */,
 				484FE6BA0E17BC8800FA880F /* Carbon.framework in Frameworks */,
 			);
 			runOnlyForDeploymentPostprocessing = 0;
@@ -1526,7 +1536,7 @@
 				444EB0890BD1153500C6D4A0 /* OgreNewt.framework in Frameworks */,
 				440785DE0C09D231006E496D /* libmeshmagick.dylib in Frameworks */,
 				4836CBCD0D8FB0BE002FE5D7 /* Xerces.framework in Frameworks */,
-				48A52CB10E0EF55C008DBDD8 /* libboost_system.lib in Frameworks */,
+				48A52CB10E0EF55C008DBDD8 /* libboost_system.dylib in Frameworks */,
 				484FE6BC0E17BC8800FA880F /* Carbon.framework in Frameworks */,
 			);
 			runOnlyForDeploymentPostprocessing = 0;
@@ -1544,7 +1554,7 @@
 				444EB0D80BD1198B00C6D4A0 /* OgreNewt.framework in Frameworks */,
 				444EB0DB0BD119BB00C6D4A0 /* OpenSteer.framework in Frameworks */,
 				4836CBCC0D8FB0BE002FE5D7 /* Xerces.framework in Frameworks */,
-				48A52CBC0E0EF77B008DBDD8 /* libboost_system.lib in Frameworks */,
+				48A52CBC0E0EF77B008DBDD8 /* libboost_system.dylib in Frameworks */,
 				484FE6BD0E17BC8800FA880F /* Carbon.framework in Frameworks */,
 			);
 			runOnlyForDeploymentPostprocessing = 0;
@@ -1560,7 +1570,7 @@
 				444EB3410BD172BA00C6D4A0 /* CEGUI.framework in Frameworks */,
 				444EB3420BD172BA00C6D4A0 /* Ogre.framework in Frameworks */,
 				4836CBCB0D8FB0BE002FE5D7 /* Xerces.framework in Frameworks */,
-				48A52CBD0E0EF77B008DBDD8 /* libboost_system.lib in Frameworks */,
+				48A52CBD0E0EF77B008DBDD8 /* libboost_system.dylib in Frameworks */,
 				484FE6BE0E17BC8800FA880F /* Carbon.framework in Frameworks */,
 			);
 			runOnlyForDeploymentPostprocessing = 0;
@@ -1579,7 +1589,7 @@
 				444EB3730BD1784A00C6D4A0 /* OgreCEGUIRenderer.framework in Frameworks */,
 				4857E4E50D46A664009D376D /* OIS.framework in Frameworks */,
 				4836CBCA0D8FB0BE002FE5D7 /* Xerces.framework in Frameworks */,
-				48A52CBE0E0EF77C008DBDD8 /* libboost_system.lib in Frameworks */,
+				48A52CBE0E0EF77C008DBDD8 /* libboost_system.dylib in Frameworks */,
 				484FE6BF0E17BC8800FA880F /* Carbon.framework in Frameworks */,
 			);
 			runOnlyForDeploymentPostprocessing = 0;
@@ -1594,8 +1604,9 @@
 				48365BEC0D8D56DC00BF3313 /* libRlCommon.dylib in Frameworks */,
 				48365C950D8D56EA00BF3313 /* CEGUI.framework in Frameworks */,
 				4836CBCF0D8FB0BE002FE5D7 /* Xerces.framework in Frameworks */,
-				48A52CC30E0EF785008DBDD8 /* libboost_system.lib in Frameworks */,
+				48A52CC30E0EF785008DBDD8 /* libboost_system.dylib in Frameworks */,
 				484FE6C10E17BC8800FA880F /* Carbon.framework in Frameworks */,
+				48B0B0490E65BBB30023B198 /* libfmodex.dylib in Frameworks */,
 			);
 			runOnlyForDeploymentPostprocessing = 0;
 		};
@@ -1604,7 +1615,7 @@
 			buildActionMask = 2147483647;
 			files = (
 				483D87CE0D8C564400F3629E /* libRlScript.dylib in Frameworks */,
-				48A52CC00E0EF77D008DBDD8 /* libboost_system.lib in Frameworks */,
+				48A52CC00E0EF77D008DBDD8 /* libboost_system.dylib in Frameworks */,
 				484FE6C20E17BC8800FA880F /* Carbon.framework in Frameworks */,
 			);
 			runOnlyForDeploymentPostprocessing = 0;
@@ -1623,7 +1634,7 @@
 				48570C480D8A6E9900096E35 /* libRlRules.dylib in Frameworks */,
 				48570C490D8A6E9900096E35 /* libRlUi.dylib in Frameworks */,
 				4836CBC90D8FB0BE002FE5D7 /* Xerces.framework in Frameworks */,
-				48A52CBF0E0EF77C008DBDD8 /* libboost_system.lib in Frameworks */,
+				48A52CBF0E0EF77C008DBDD8 /* libboost_system.dylib in Frameworks */,
 				484FE6C00E17BC8800FA880F /* Carbon.framework in Frameworks */,
 			);
 			runOnlyForDeploymentPostprocessing = 0;
@@ -1644,7 +1655,7 @@
 				444EB7A00BD195E800C6D4A0 /* libRlUi.dylib in Frameworks */,
 				4836F8BC0D885AAA00E3632F /* libruby.dylib in Frameworks */,
 				48570E020D8A6F8300096E35 /* libRlScript.dylib in Frameworks */,
-				48A52CC20E0EF77E008DBDD8 /* libboost_system.lib in Frameworks */,
+				48A52CC20E0EF77E008DBDD8 /* libboost_system.dylib in Frameworks */,
 				484FE6BB0E17BC8800FA880F /* Carbon.framework in Frameworks */,
 			);
 			runOnlyForDeploymentPostprocessing = 0;
@@ -1671,6 +1682,7 @@
 		20286C29FDCF999611CA2CEA /* Rastullah */ = {
 			isa = PBXGroup;
 			children = (
+				48B0B0480E65BBB30023B198 /* libfmodex.dylib */,
 				20286C2AFDCF999611CA2CEA /* Sources */,
 				20286C2CFDCF999611CA2CEA /* Resources */,
 				20286C32FDCF999611CA2CEA /* External Frameworks and Libraries */,
@@ -1712,7 +1724,7 @@
 			children = (
 				48CFBF8E0E2E869000CD0C51 /* FreeType.framework */,
 				484FE6B90E17BC8800FA880F /* Carbon.framework */,
-				48A52CAF0E0EF55C008DBDD8 /* libboost_system.lib */,
+				48A52CAF0E0EF55C008DBDD8 /* libboost_system.dylib */,
 				48A52B210E0EDA0E008DBDD8 /* libboost_filesystem.dylib */,
 				4836CBC80D8FB0BE002FE5D7 /* Xerces.framework */,
 				4857E4E40D46A664009D376D /* OIS.framework */,
@@ -2294,42 +2306,9 @@
 		444EAE600BD0E66500C6D4A0 /* RlScript */ = {
 			isa = PBXGroup;
 			children = (
-				485B89570E15796500D5B19C /* Scene.cpp */,
-				485B89580E15796500D5B19C /* SceneLoader.cpp */,
-				485B89590E15796500D5B19C /* SceneManager.cpp */,
-				485B89510E15794A00D5B19C /* Scene.h */,
-				485B89520E15794A00D5B19C /* SceneLoader.h */,
-				485B89530E15794A00D5B19C /* SceneManager.h */,
-				48760AA90D92E4B700BEB57C /* RlExports_wrap.cxx */,
-				48760AAA0D92E4B700BEB57C /* RlExports_wrap.h */,
+				48B0B0230E6533940023B198 /* Headers */,
+				48B0B0240E6533A50023B198 /* Source */,
 				48389C010D86783200AFAB66 /* swig */,
-				48389C190D867AA900AFAB66 /* stdinc.cpp */,
-				4404DA840C48D01E007B4657 /* stdinc.h */,
-				446BF4810C4532B50013C214 /* UnifiedFactory.h */,
-				444825ED0BF7B32100C5A94F /* AbstractMapNodeProcessor.h */,
-				444825EE0BF7B32100C5A94F /* EntityNodeProcessor.h */,
-				444825EF0BF7B32100C5A94F /* EnvironmentProcessor.h */,
-				444825F00BF7B32100C5A94F /* GameObjectNodeProcessor.h */,
-				444825F10BF7B32100C5A94F /* LightNodeProcessor.h */,
-				444825F20BF7B32100C5A94F /* MapLoader.h */,
-				444825F30BF7B32100C5A94F /* ParticleSystemNodeProcessor.h */,
-				48389C1A0D867AA900AFAB66 /* TriggerFactory.cpp */,
-				444825F40BF7B32100C5A94F /* SoundNodeProcessor.h */,
-				444825F50BF7B32100C5A94F /* TriggerFactory.h */,
-				444825F60BF7B32100C5A94F /* WaypointProcessor.h */,
-				444825F70BF7B32100C5A94F /* ZoneProcessor.h */,
-				444825D90BF7B2B200C5A94F /* AbstractMapNodeProcessor.cpp */,
-				444825DA0BF7B2B200C5A94F /* EntityNodeProcessor.cpp */,
-				444825DB0BF7B2B200C5A94F /* EnvironmentProcessor.cpp */,
-				444825DC0BF7B2B200C5A94F /* GameObjectNodeProcessor.cpp */,
-				444825DD0BF7B2B200C5A94F /* LightNodeProcessor.cpp */,
-				444825DE0BF7B2B200C5A94F /* MapLoader.cpp */,
-				444825DF0BF7B2B200C5A94F /* ParticleSystemNodeProcessor.cpp */,
-				444825E00BF7B2B200C5A94F /* SoundNodeProcessor.cpp */,
-				444825E10BF7B2B200C5A94F /* WaypointProcessor.cpp */,
-				444825E20BF7B2B200C5A94F /* ZoneProcessor.cpp */,
-				444EAE670BD0E6D400C6D4A0 /* ScriptObjectMarker.cpp */,
-				444EAE680BD0E6D400C6D4A0 /* ScriptSubsystem.cpp */,
 				444EAE610BD0E6C000C6D4A0 /* ScriptObjectMarker.h */,
 				444EAE620BD0E6C000C6D4A0 /* ScriptPrerequisites.h */,
 				444EAE630BD0E6C000C6D4A0 /* ScriptSubsystem.h */,
@@ -2340,6 +2319,8 @@
 		48389C010D86783200AFAB66 /* swig */ = {
 			isa = PBXGroup;
 			children = (
+				48760AA90D92E4B700BEB57C /* RlExports_wrap.cxx */,
+				48760AAA0D92E4B700BEB57C /* RlExports_wrap.h */,
 				48500B780D906A1000EAD8DB /* RlScriptExportsMac.cpp */,
 				48389C020D86787900AFAB66 /* RlExports.i */,
 				48389BE80D8677EE00AFAB66 /* RlAi.head.swig */,
@@ -2408,6 +2389,55 @@
 			path = src;
 			sourceTree = "<group>";
 		};
+		48B0B0230E6533940023B198 /* Headers */ = {
+			isa = PBXGroup;
+			children = (
+				444825ED0BF7B32100C5A94F /* AbstractMapNodeProcessor.h */,
+				444825EE0BF7B32100C5A94F /* EntityNodeProcessor.h */,
+				444825EF0BF7B32100C5A94F /* EnvironmentProcessor.h */,
+				444825F00BF7B32100C5A94F /* GameObjectNodeProcessor.h */,
+				444825F10BF7B32100C5A94F /* LightNodeProcessor.h */,
+				444825F20BF7B32100C5A94F /* MapLoader.h */,
+				444825F30BF7B32100C5A94F /* ParticleSystemNodeProcessor.h */,
+				48B0B0360E6534810023B198 /* PlaneNodeProcessor.h */,
+				485B89510E15794A00D5B19C /* Scene.h */,
+				485B89520E15794A00D5B19C /* SceneLoader.h */,
+				485B89530E15794A00D5B19C /* SceneManager.h */,
+				444825F40BF7B32100C5A94F /* SoundNodeProcessor.h */,
+				4404DA840C48D01E007B4657 /* stdinc.h */,
+				444825F50BF7B32100C5A94F /* TriggerFactory.h */,
+				446BF4810C4532B50013C214 /* UnifiedFactory.h */,
+				444825F60BF7B32100C5A94F /* WaypointProcessor.h */,
+				444825F70BF7B32100C5A94F /* ZoneProcessor.h */,
+			);
+			name = Headers;
+			sourceTree = "<group>";
+		};
+		48B0B0240E6533A50023B198 /* Source */ = {
+			isa = PBXGroup;
+			children = (
+				444825D90BF7B2B200C5A94F /* AbstractMapNodeProcessor.cpp */,
+				444825DA0BF7B2B200C5A94F /* EntityNodeProcessor.cpp */,
+				444825DB0BF7B2B200C5A94F /* EnvironmentProcessor.cpp */,
+				444825DC0BF7B2B200C5A94F /* GameObjectNodeProcessor.cpp */,
+				444825DD0BF7B2B200C5A94F /* LightNodeProcessor.cpp */,
+				444825DE0BF7B2B200C5A94F /* MapLoader.cpp */,
+				444825DF0BF7B2B200C5A94F /* ParticleSystemNodeProcessor.cpp */,
+				48B0B0340E6534690023B198 /* PlaneNodeProcessor.cpp */,
+				485B89570E15796500D5B19C /* Scene.cpp */,
+				485B89580E15796500D5B19C /* SceneLoader.cpp */,
+				485B89590E15796500D5B19C /* SceneManager.cpp */,
+				444EAE670BD0E6D400C6D4A0 /* ScriptObjectMarker.cpp */,
+				444EAE680BD0E6D400C6D4A0 /* ScriptSubsystem.cpp */,
+				444825E00BF7B2B200C5A94F /* SoundNodeProcessor.cpp */,
+				48389C190D867AA900AFAB66 /* stdinc.cpp */,
+				48389C1A0D867AA900AFAB66 /* TriggerFactory.cpp */,
+				444825E10BF7B2B200C5A94F /* WaypointProcessor.cpp */,
+				444825E20BF7B2B200C5A94F /* ZoneProcessor.cpp */,
+			);
+			name = Source;
+			sourceTree = "<group>";
+		};
 		48CFBFD60E2E87A800CD0C51 /* Scripts */ = {
 			isa = PBXGroup;
 			children = (
@@ -2779,6 +2809,7 @@
 				485B89540E15794A00D5B19C /* Scene.h in Headers */,
 				485B89550E15794A00D5B19C /* SceneLoader.h in Headers */,
 				485B89560E15794A00D5B19C /* SceneManager.h in Headers */,
+				48B0B0370E6534810023B198 /* PlaneNodeProcessor.h in Headers */,
 			);
 			runOnlyForDeploymentPostprocessing = 0;
 		};
@@ -2995,11 +3026,13 @@
 			isa = PBXResourcesBuildPhase;
 			buildActionMask = 2147483647;
 			files = (
+				48B0B03C0E6535AB0023B198 /* libmeshmagick.dylib in Resources */,
 				484D921E0E1E078100BCFC2B /* libRlCommon.dylib in Resources */,
 				484D921F0E1E078100BCFC2B /* libRlCore.dylib in Resources */,
 				484D92200E1E078100BCFC2B /* libRlAi.dylib in Resources */,
 				484D92210E1E078100BCFC2B /* libRlRules.dylib in Resources */,
 				484D92220E1E078100BCFC2B /* libRlUi.dylib in Resources */,
+				48B0B04A0E65BBC10023B198 /* libfmodex.dylib in Resources */,
 				484D92230E1E078100BCFC2B /* libRlScript.dylib in Resources */,
 				484D92240E1E078100BCFC2B /* libRlFmod4Driver.dylib in Resources */,
 				484D92250E1E078100BCFC2B /* RlScript.bundle in Resources */,
@@ -3366,6 +3399,7 @@
 				485B895A0E15796500D5B19C /* Scene.cpp in Sources */,
 				485B895B0E15796500D5B19C /* SceneLoader.cpp in Sources */,
 				485B895C0E15796500D5B19C /* SceneManager.cpp in Sources */,
+				48B0B0350E6534690023B198 /* PlaneNodeProcessor.cpp in Sources */,
 			);
 			runOnlyForDeploymentPostprocessing = 0;
 		};
@@ -3538,7 +3572,7 @@
 				OTHER_LDFLAGS = "-pthread";
 				PREBINDING = NO;
 				PRODUCT_NAME = libRlCommon;
-				ZERO_LINK = YES;
+				ZERO_LINK = NO;
 			};
 			name = Debug;
 		};
@@ -3609,7 +3643,7 @@
 				OTHER_LDFLAGS = "";
 				PREBINDING = NO;
 				PRODUCT_NAME = libRlCore;
-				ZERO_LINK = YES;
+				ZERO_LINK = NO;
 			};
 			name = Debug;
 		};
@@ -3688,7 +3722,7 @@
 				OTHER_LDFLAGS = "";
 				PREBINDING = NO;
 				PRODUCT_NAME = libRlAi;
-				ZERO_LINK = YES;
+				ZERO_LINK = NO;
 			};
 			name = Debug;
 		};
@@ -3761,7 +3795,7 @@
 				PREBINDING = NO;
 				PRODUCT_NAME = libRlRules;
 				SHARED_PRECOMPS_DIR = "";
-				ZERO_LINK = YES;
+				ZERO_LINK = NO;
 			};
 			name = Debug;
 		};
@@ -3835,7 +3869,7 @@
 				);
 				PREBINDING = NO;
 				PRODUCT_NAME = libRlUi;
-				ZERO_LINK = YES;
+				ZERO_LINK = NO;
 			};
 			name = Debug;
 		};
@@ -3898,12 +3932,16 @@
 				);
 				HEADER_SEARCH_PATHS_QUOTED_FOR_TARGET_1 = "\"/Developer/FMOD Programmers API/api/inc\"";
 				INSTALL_PATH = "@executable_path/../Resources";
-				LIBRARY_SEARCH_PATHS = "$(LIBRARY_SEARCH_PATHS_QUOTED_FOR_TARGET_1)";
+				LIBRARY_SEARCH_PATHS = (
+					"$(LIBRARY_SEARCH_PATHS_QUOTED_FOR_TARGET_1)",
+					"$(LIBRARY_SEARCH_PATHS_QUOTED_FOR_TARGET_2)",
+				);
 				LIBRARY_SEARCH_PATHS_QUOTED_FOR_TARGET_1 = "\"/Developer/FMOD Programmers API/api/lib\"";
+				LIBRARY_SEARCH_PATHS_QUOTED_FOR_TARGET_2 = "\"$(DEVELOPER_DIR)/FMOD Programmers API/api/lib\"";
 				OTHER_LDFLAGS = "-lfmodex";
 				PREBINDING = NO;
 				PRODUCT_NAME = RlFmod4Driver;
-				ZERO_LINK = YES;
+				ZERO_LINK = NO;
 			};
 			name = Debug;
 		};
@@ -3926,8 +3964,12 @@
 				);
 				HEADER_SEARCH_PATHS_QUOTED_FOR_TARGET_1 = "\"/Developer/FMOD Programmers API/api/inc\"";
 				INSTALL_PATH = "@executable_path/../Resources";
-				LIBRARY_SEARCH_PATHS = "$(LIBRARY_SEARCH_PATHS_QUOTED_FOR_TARGET_1)";
+				LIBRARY_SEARCH_PATHS = (
+					"$(LIBRARY_SEARCH_PATHS_QUOTED_FOR_TARGET_1)",
+					"$(LIBRARY_SEARCH_PATHS_QUOTED_FOR_TARGET_2)",
+				);
 				LIBRARY_SEARCH_PATHS_QUOTED_FOR_TARGET_1 = "\"/Developer/FMOD Programmers API/api/lib\"";
+				LIBRARY_SEARCH_PATHS_QUOTED_FOR_TARGET_2 = "\"$(DEVELOPER_DIR)/FMOD Programmers API/api/lib\"";
 				OTHER_LDFLAGS = "-lfmodex";
 				PREBINDING = NO;
 				PRODUCT_NAME = RlFmod4Driver;
@@ -3961,7 +4003,7 @@
 				MACH_O_TYPE = mh_bundle;
 				PREBINDING = NO;
 				PRODUCT_NAME = RlScript;
-				ZERO_LINK = YES;
+				ZERO_LINK = NO;
 			};
 			name = Debug;
 		};
@@ -4026,7 +4068,7 @@
 				MACH_O_TYPE = mh_dylib;
 				PREBINDING = NO;
 				PRODUCT_NAME = RlScript;
-				ZERO_LINK = YES;
+				ZERO_LINK = NO;
 			};
 			name = Debug;
 		};
@@ -4088,10 +4130,12 @@
 					"$(LIBRARY_SEARCH_PATHS_QUOTED_FOR_TARGET_1)",
 					"$(LIBRARY_SEARCH_PATHS_QUOTED_FOR_TARGET_2)",
 					"$(LIBRARY_SEARCH_PATHS_QUOTED_FOR_TARGET_3)",
+					"$(LIBRARY_SEARCH_PATHS_QUOTED_FOR_TARGET_4)",
 				);
 				LIBRARY_SEARCH_PATHS_QUOTED_FOR_TARGET_1 = "\"$(SRCROOT)/build/Debug\"";
 				LIBRARY_SEARCH_PATHS_QUOTED_FOR_TARGET_2 = "\"$(SYSTEM_LIBRARY_DIR)/Frameworks/Ruby.framework/Versions/1.8/usr/lib\"";
 				LIBRARY_SEARCH_PATHS_QUOTED_FOR_TARGET_3 = "\"$(SRCROOT)/build/Debug\"";
+				LIBRARY_SEARCH_PATHS_QUOTED_FOR_TARGET_4 = "\"$(DEVELOPER_DIR)/FMOD Programmers API/api/lib\"";
 				PRODUCT_NAME = Rastullah;
 				WRAPPER_EXTENSION = app;
 				ZERO_LINK = YES;
@@ -4119,10 +4163,12 @@
 					"$(LIBRARY_SEARCH_PATHS_QUOTED_1)",
 					"$(LIBRARY_SEARCH_PATHS_QUOTED_2)",
 					"$(LIBRARY_SEARCH_PATHS_QUOTED_3)",
+					"$(LIBRARY_SEARCH_PATHS_QUOTED_FOR_TARGET_1)",
 				);
 				LIBRARY_SEARCH_PATHS_QUOTED_1 = "\"$(SRCROOT)/build/Debug\"";
 				LIBRARY_SEARCH_PATHS_QUOTED_2 = "\"$(SYSTEM_LIBRARY_DIR)/Frameworks/Ruby.framework/Versions/1.8/usr/lib\"";
 				LIBRARY_SEARCH_PATHS_QUOTED_3 = "\"$(SRCROOT)/build/Debug\"";
+				LIBRARY_SEARCH_PATHS_QUOTED_FOR_TARGET_1 = "\"$(DEVELOPER_DIR)/FMOD Programmers API/api/lib\"";
 				PRODUCT_NAME = Rastullah;
 				WRAPPER_EXTENSION = app;
 			};
@@ -4154,6 +4200,7 @@
 				);
 				PREBINDING = NO;
 				SDKROOT = /Developer/SDKs/MacOSX10.4u.sdk;
+				ZERO_LINK = NO;
 			};
 			name = Debug;
 		};

Modified: rl/branches/newton20/Mac/tools/renameinstalldirs.sh
===================================================================
--- rl/branches/newton20/Mac/tools/renameinstalldirs.sh	2008-08-27 22:12:19 UTC (rev 4490)
+++ rl/branches/newton20/Mac/tools/renameinstalldirs.sh	2008-08-28 18:41:29 UTC (rev 4491)
@@ -1,23 +1,29 @@
-#!/bin/sh
+#!/bin/bash
 RASTULLAH_APP_DIR=$1
 RASTULLAH_APP_NAME=$2
 RASTULLAH_APP_BIN=${RASTULLAH_APP_DIR}/${RASTULLAH_APP_NAME}
 CEGUI_BIN=${RASTULLAH_APP_DIR}/../Frameworks/CEGUI.framework/CEGUI
+RASTULLAH_RES_DIR=$1/../Resources
 
 #TODO: Replace the absolute source paths to something with olist -L $RASTULLAH_APP_NAME and grep
 
 echo Changing library installation directories for $RASTULLAH_APP_NAME
 
+RL_BINARIES="$RASTULLAH_APP_BIN $RASTULLAH_RES_DIR/libRlAi.dylib $RASTULLAH_RES_DIR/libRlCommon.dylib $RASTULLAH_RES_DIR/libRlCore.dylib $RASTULLAH_RES_DIR/libRlRules.dylib $RASTULLAH_RES_DIR/libRlScript.dylib $RASTULLAH_RES_DIR/libRlUi.dylib $RASTULLAH_RES_DIR/libRlFmod4Driver.dylib"
 # RL Application binary
-install_name_tool -change /Library/Frameworks/CEGUI.framework/Versions/A/CEGUI @executable_path/../Frameworks/CEGUI.framework/Versions/A/CEGUI $RASTULLAH_APP_BIN
-install_name_tool -change libboost_system-mt-1_35.dylib @executable_path/../Frameworks/libboost_system-mt-1_35.dylib $RASTULLAH_APP_BIN
-install_name_tool -change /System/Library/Frameworks/Ruby.framework/Versions/1.8/usr/lib/libruby.1.dylib @executable_path/../Frameworks/libruby.1.dylib $RASTULLAH_APP_BIN
-install_name_tool -change /Users/blakharaz/Library/Frameworks/OgreNewt.framework/Versions/A/OgreNewt @executable_path/../Frameworks/OgreNewt.framework/Versions/A/OgreNewt $RASTULLAH_APP_BIN
-install_name_tool -change /Users/blakharaz/Library/Frameworks/OpenSteer.framework/Versions/0.8/OpenSteer @executable_path/../Frameworks/OpenSteer.framework/Versions/0.8/OpenSteer $RASTULLAH_APP_BIN
+for cur in $RL_BINARIES 
+do
+    echo Processing $cur
+    install_name_tool -change /Library/Frameworks/CEGUI.framework/Versions/A/CEGUI @executable_path/../Frameworks/CEGUI.framework/Versions/A/CEGUI $cur
+    install_name_tool -change libboost_system-mt-1_35.dylib @executable_path/../Frameworks/libboost_system.dylib $cur
+    install_name_tool -change /System/Library/Frameworks/Ruby.framework/Versions/1.8/usr/lib/libruby.1.dylib @executable_path/../Frameworks/libruby.1.dylib $cur
+    install_name_tool -change /Users/blakharaz/Library/Frameworks/OgreNewt.framework/Versions/A/OgreNewt @executable_path/../Frameworks/OgreNewt.framework/Versions/A/OgreNewt $cur
+    install_name_tool -change /Users/blakharaz/Library/Frameworks/OpenSteer.framework/Versions/0.8/OpenSteer @executable_path/../Frameworks/OpenSteer.framework/Versions/0.8/OpenSteer $cur
+    install_name_tool -change /usr/local/bin/libmeshmagick.dylib @executable_path/../Resources/libmeshmagick.dylib $cur
+done
 
 # CEGUI
 install_name_tool -change /Library/Frameworks/CEGUI.framework/Versions/A/CEGUI @executable_path/../Frameworks/CEGUI.framework/Versions/A/CEGUI ${CEGUI_BIN}
 install_name_tool -change /Library/Frameworks/FreeType.framework/Versions/2.3/FreeType @executable_path/../Frameworks/FreeType.framework/Versions/2.3/FreeType ${CEGUI_BIN}
 
-
 echo done.
\ No newline at end of file

Modified: rl/branches/newton20/engine/ai/src/DialogImplication.cpp
===================================================================
--- rl/branches/newton20/engine/ai/src/DialogImplication.cpp	2008-08-27 22:12:19 UTC (rev 4490)
+++ rl/branches/newton20/engine/ai/src/DialogImplication.cpp	2008-08-28 18:41:29 UTC (rev 4491)
@@ -48,7 +48,7 @@
         dialog->setProperty(mVariableName, prop);
     }
 
-        DialogVariableIncrease::DialogVariableIncrease(const Ogre::String& variableName, 
+	DialogVariableIncrease::DialogVariableIncrease(const Ogre::String& variableName, 
                                                    const CeGuiString& value)
         : DialogVariableAssignment(variableName, value)
     {

Modified: rl/branches/newton20/engine/core/src/ConfigurationManager.cpp
===================================================================
--- rl/branches/newton20/engine/core/src/ConfigurationManager.cpp	2008-08-27 22:12:19 UTC (rev 4490)
+++ rl/branches/newton20/engine/core/src/ConfigurationManager.cpp	2008-08-28 18:41:29 UTC (rev 4491)
@@ -286,6 +286,7 @@
         addPlugin("RenderSystem_GL", mOgrePluginDirectory);
         addPlugin("Plugin_ParticleFX", mOgrePluginDirectory);
         addPlugin("Plugin_OctreeSceneManager", mOgrePluginDirectory);
+		addPlugin("Plugin_CgProgramManager", mOgrePluginDirectory);
 
         // Load the module list
         ConfigFile* configfile = new ConfigFile();

Modified: rl/branches/newton20/engine/rules/src/CreatureController.cpp
===================================================================
--- rl/branches/newton20/engine/rules/src/CreatureController.cpp	2008-08-27 22:12:19 UTC (rev 4490)
+++ rl/branches/newton20/engine/rules/src/CreatureController.cpp	2008-08-28 18:41:29 UTC (rev 4491)
@@ -446,7 +446,8 @@
 //oss << "  \t Tangent-Directions: " << vec1 << " " << vec2;
 //LOG_MESSAGE(Logger::RULES, oss.str());
 
-        setContactFrictionState(0,0);
+        rotateTangentDirections(/*charOri*mDirection + */Vector3::UNIT_Y);
+        setContactFrictionState(1,0);
         setContactFrictionState(0,1);
 
         if( stepHeight < 0.4 )
@@ -456,15 +457,14 @@
                                    // too high means the creature stops if moving slowly onto a step because of the friction
             {
                 //setContactNormalAcceleration(5);
-                rotateTangentDirections(charOri*mDirection + Vector3::UNIT_Y);
                 setContactTangentAcceleration(5,0);
-                setContactFrictionState(1,0);
-                setContactFrictionState(1,1);
+                //setContactFrictionState(1,0);
+                //setContactFrictionState(1,1);
             }
             else
             {
-                setContactFrictionState(1,0);
-                setContactFrictionState(1,1);
+                //setContactFrictionState(1,0);
+                //setContactFrictionState(1,1);
             }
             //setContactElasticity(0.0f);
         }
@@ -474,13 +474,13 @@
             vel = mCreature->getActor()->getPhysicalThing()->getVelocity();
             if( vel.y >= 0 )
             {
-                setContactFrictionState(1,0);
-                setContactFrictionState(1,1);    
+                //setContactFrictionState(1,0);
+                //setContactFrictionState(1,1);    
             }
             else
             {
-                setContactFrictionState(0,0);
-                setContactFrictionState(0,1);
+                //setContactFrictionState(0,0);
+                //setContactFrictionState(0,1);
             }
         }
 

Modified: rl/branches/newton20/engine/rules/src/StandAroundMovement.cpp
===================================================================
--- rl/branches/newton20/engine/rules/src/StandAroundMovement.cpp	2008-08-27 22:12:19 UTC (rev 4490)
+++ rl/branches/newton20/engine/rules/src/StandAroundMovement.cpp	2008-08-28 18:41:29 UTC (rev 4491)
@@ -44,14 +44,14 @@
     {
         AbstractMovement::activate();
         getRotationMovement()->activate();
-        //getStepRecognitionMovement()->activate();
+        getStepRecognitionMovement()->activate();
     }
 
     void StandAroundMovement::deactivate()
     {
         AbstractMovement::deactivate();
         getRotationMovement()->deactivate();
-        //getStepRecognitionMovement()->deactivate();
+        getStepRecognitionMovement()->deactivate();
     }
 
     bool StandAroundMovement::calculateBaseVelocity(Real &velocity)
@@ -89,7 +89,7 @@
         // (changing direction during slow movement makes char slide sideways)
         force.y = 0;
 
-        //getStepRecognitionMovement()->calculateForceAndTorque(force, torque, timestep);
+        getStepRecognitionMovement()->calculateForceAndTorque(force, torque, timestep);
     }
 
     bool StandAroundMovement::run(Ogre::Real elapsedTime,  Ogre::Vector3 direction, Ogre::Vector3 rotation)
@@ -104,9 +104,9 @@
         if( getRotationMovement()->isPossible() )
             if( getRotationMovement()->run(elapsedTime, direction, rotation) )
                 ret = true;
-        //if( getStepRecognitionMovement()->isPossible() )
-        //    if (getStepRecognitionMovement()->run(elapsedTime, direction, rotation) )
-        //        ret = true;
+        if( getStepRecognitionMovement()->isPossible() )
+            if (getStepRecognitionMovement()->run(elapsedTime, direction, rotation) )
+                ret = true;
         return ret;
     }
 

Modified: rl/branches/newton20/engine/rules/src/StepRecognitionMovement.cpp
===================================================================
--- rl/branches/newton20/engine/rules/src/StepRecognitionMovement.cpp	2008-08-27 22:12:19 UTC (rev 4490)
+++ rl/branches/newton20/engine/rules/src/StepRecognitionMovement.cpp	2008-08-28 18:41:29 UTC (rev 4491)
@@ -21,6 +21,8 @@
 using namespace Ogre;
 
 
+/// @todo: use TriggerVolumes
+// void NewtonCollisionSetAsTriggerVolume(const NewtonCollision* convexCollision, int trigger);
 
 
 namespace rl

Modified: rl/branches/newton20/engine/script/include/PlaneNodeProcessor.h
===================================================================
--- rl/branches/newton20/engine/script/include/PlaneNodeProcessor.h	2008-08-27 22:12:19 UTC (rev 4490)
+++ rl/branches/newton20/engine/script/include/PlaneNodeProcessor.h	2008-08-28 18:41:29 UTC (rev 4491)
@@ -28,8 +28,8 @@
 
 #include "AbstractMapNodeProcessor.h"
 
-#include <OgreMaterial.h>
-#include <OgreRenderTargetListener.h>
+//#include <OgreMaterial.h>
+//#include <OgreRenderTargetListener.h>
 
 namespace rl
 {

Modified: rl/branches/newton20/engine/script/src/PlaneNodeProcessor.cpp
===================================================================
--- rl/branches/newton20/engine/script/src/PlaneNodeProcessor.cpp	2008-08-27 22:12:19 UTC (rev 4490)
+++ rl/branches/newton20/engine/script/src/PlaneNodeProcessor.cpp	2008-08-28 18:41:29 UTC (rev 4491)
@@ -23,7 +23,7 @@
 #include "PhysicsManager.h"
 #include "World.h"
 
-#include <OgreMaterialManager.h>
+//#include <OgreMaterialManager.h>
 
 using namespace Ogre;
 using namespace XERCES_CPP_NAMESPACE;
@@ -90,19 +90,20 @@
 			entName = getRandomName("Plane");
 		}
 
-		SceneNode* node = getRootSceneNode()->createChildSceneNode(entName, position, orientation);
+		SceneNode* node = getRootSceneNode()->createChildSceneNode(entName + "Node", position, orientation);
 
-		Plane* plane = new MovablePlane(entName);
+		MovablePlane* plane = new MovablePlane(entName + "Plane");
 		plane->d = 0;
 		plane->normal = Vector3::UNIT_Y;
 
-		MeshManager::getSingleton().createPlane(entName, "custom", *plane, scale.x, scale.y, 10, 10, true, 1, 1, 1, Vector3::UNIT_Z);
+		MeshManager::getSingleton().createPlane(entName + "Mesh", "custom", *plane, scale.x, scale.y, 10, 10, true, 1, 1, 1, Vector3::UNIT_Z);
 
-		Entity* ent = CoreSubsystem::getSingleton().getWorld()->getSceneManager()->createEntity(entName, entName);
+		Entity* ent = CoreSubsystem::getSingleton().getWorld()->getSceneManager()->createEntity(entName, entName + "Mesh");
 
 		LOG_DEBUG(Logger::RULES, " Loaded plane "+entName);
 
 		node->attachObject(ent);
+		node->attachObject(plane);
 		//node->scale(scale.x,1,scale.y);
 
 		createCollision(ent, getChildNamed(nodeElem, "physicsproxy"));
@@ -169,9 +170,12 @@
 			return;
 
 		Camera* cam = CoreSubsystem::getSingleton().getWorld()->getSceneManager()->createCamera("Cam" + entity->getName());
+		cam->setNearClipDistance(CoreSubsystem::getSingleton().getWorld()->getActiveCamera()->getNearClipDistance());
+        cam->setFarClipDistance(CoreSubsystem::getSingleton().getWorld()->getActiveCamera()->getFarClipDistance());
+		cam->setAutoAspectRatio(true);
 		cam->setFOVy(CoreSubsystem::getSingleton().getWorld()->getActiveCamera()->getFOVy());
 		cam->enableCustomNearClipPlane((MovablePlane*)plane);
-		//MeshPtr mesh = entity->getMesh();
+
 		AliasTextureNamePairList aliases;
 
 		if(getAttributeValueAsBool(rttElem, "reflection"))
@@ -181,18 +185,11 @@
 				512, 512, 0, PF_R8G8B8, TU_RENDERTARGET );
 			RenderTexture* rttTex = texture->getBuffer()->getRenderTarget();
 
-			Viewport *v = rttTex->addViewport( cam ); //Bleibt die Kamera immer die gleiche?
+			Viewport *v = rttTex->addViewport( cam );
 			v->setOverlaysEnabled(false);
 			rttTex->addListener(new PlaneReflectionTextureListener(entity, cam, plane));
 			
 			aliases["reflection"] = "Reflection" + entity->getName();
-			/*int num = mesh->getNumSubMeshes();
-			for(int i = 0; i < mesh->getNumSubMeshes(); i++)
-			{
-				SubMesh* sub = mesh->getSubMesh(i);
-				sub->addTextureAlias("reflection", "Reflection" + entity->getName());
-			}
-			mesh->updateMaterialForAllSubMeshes();*/
 		}
 		if(getAttributeValueAsBool(rttElem, "refraction"))
 		{
@@ -206,11 +203,6 @@
 			rttTex->addListener(new PlaneRefractionTextureListener(entity, cam));
 
 			aliases["refraction"] = "Refraction" + entity->getName();
-			/*for(int i = 0; i < mesh->getNumSubMeshes(); i++)
-			{
-				SubMesh* sub = mesh->getSubMesh(i);
-				sub->addTextureAlias("refraction", "Refraction" + entity->getName());
-			}*/
 		}
 		if(!material->applyTextureAliases(aliases))
 			LOG_ERROR("PLANE", "Texture Aliase konnten nicht angewandt werden");

Modified: rl/branches/newton20/engine/ui/include/CombatControlState.h
===================================================================
--- rl/branches/newton20/engine/ui/include/CombatControlState.h	2008-08-27 22:12:19 UTC (rev 4490)
+++ rl/branches/newton20/engine/ui/include/CombatControlState.h	2008-08-28 18:41:29 UTC (rev 4491)
@@ -22,6 +22,8 @@
 #include "ControlState.h"
 #include "Combatant.h"
 #include "MessagePump.h"
+#include "PhysicsController.h"
+#include "PhysicsGenericContactCallback.h"
 #include "Selector.h"
 
 
@@ -32,7 +34,11 @@
     class CombatGui;
     class CombatManager;
 
-	class _RlUiExport CombatControlState : public ControlState, public Combatant
+	class _RlUiExport CombatControlState :
+            public ControlState,
+            public Combatant,
+            public PhysicsController,
+            public PhysicsGenericContactCallback
 	{
 	public:
 		/**
@@ -46,6 +52,8 @@
 
         virtual void pause();
         virtual void resume();
+        virtual bool keyPressed(const OIS::KeyEvent& evt, bool handled);
+        virtual bool keyReleased(const OIS::KeyEvent& evt, bool handled);
 
 		void run(Ogre::Real elapsedTime);
 
@@ -54,6 +62,14 @@
         virtual Ogre::String getCombatantTypeName() const;
         virtual void requestCombatantAction();
 
+
+        // camera collision: OgreNewt::ContactCallback overides
+        int OnAABBOverlap(int threadIndex);
+        int userProcess(Ogre::Real timestep, int threadIndex);
+
+        // camera movement: Newton force and torque callback
+        void OnApplyForceAndTorque(PhysicalThing *pt, float timstep);
+
     private:
 		enum State {REQUEST_USER_INPUT, ROUND_EXECUTION};
 
@@ -74,6 +90,17 @@
         CameraObject* mCamera;
 
 		State mState;
+        // Camera:
+        Ogre::Degree mCameraYaw, mCameraPitch;
+        Ogre::Real mMaxCameraDistance, mMinCameraDistance;
+        int mMovementState;
+        Ogre::Real mCameraLinearDampingK, mCameraLinearSpringK;
+
+        // Camera helper functions
+        void resetCamera();
+        void updateCameraLookAt(Ogre::Real timestep);
+        Ogre::Vector3 getCombatCenterPosition();
+        Ogre::Vector3 calculateOptimalCameraPosition();
         
         // Event handlers
 		bool userRequestAttackOpponent(Combatant*);

Modified: rl/branches/newton20/engine/ui/include/ItemDescriptionDragContainer.h
===================================================================
--- rl/branches/newton20/engine/ui/include/ItemDescriptionDragContainer.h	2008-08-27 22:12:19 UTC (rev 4490)
+++ rl/branches/newton20/engine/ui/include/ItemDescriptionDragContainer.h	2008-08-28 18:41:29 UTC (rev 4491)
@@ -25,9 +25,17 @@
 	class ItemDescriptionDragContainer : public ItemDragContainer
 	{
 	public:
-		ItemDescriptionDragContainer(Item* item, const CeGuiString& name);
+		ItemDescriptionDragContainer(const CeGuiString &type, const CeGuiString& name);
+                void setItem(Item*);
+                static const CeGuiString WidgetTypeName; // for CEGUI
 	};
 
 } // namespace rl
+namespace CEGUI{
 
+    using rl::ItemDescriptionDragContainer;
+
+    CEGUI_DECLARE_WINDOW_FACTORY(ItemDescriptionDragContainer)
+}
+
 #endif //__ItemDescriptionDragContainer_H__

Modified: rl/branches/newton20/engine/ui/include/ItemDragContainer.h
===================================================================
--- rl/branches/newton20/engine/ui/include/ItemDragContainer.h	2008-08-27 22:12:19 UTC (rev 4490)
+++ rl/branches/newton20/engine/ui/include/ItemDragContainer.h	2008-08-28 18:41:29 UTC (rev 4491)
@@ -18,6 +18,7 @@
 
 #include "UiPrerequisites.h"
 
+#include <CEGUI.h>
 #include <elements/CEGUIDragContainer.h>
 
 namespace rl 
@@ -41,6 +42,7 @@
 		const CeGuiString& getItemParentSlot() const;
 		Inventory* getItemParentInventory() const;
 		Item* getItem() const;
+                virtual void setItem(Item*); // can only be used once to initialize the Container
 		CEGUI::Window* getContentWindow() const;
 	
 		bool _handleItemMouseClick(const CEGUI::EventArgs& evt, Item* item);
@@ -49,13 +51,15 @@
         bool fadeOutAndHide(Ogre::Real delay);
         bool stopFadeOut();
 
-        void destroyWindow(); // this is internally done with a windowfadejob to prevent problems
+        virtual void destroy(void); // inherited from CEGUI::WINDOW
 
-        void setDestroyListener(ItemDragContainerDestroyListener *listener) {mDestroyListener = listener;}
+        //void destroyWindow(); // this is internally done with a windowfadejob to prevent problems
+
+        void setDestroyListener(ItemDragContainerDestroyListener *listener);
 	protected:
 		CEGUI::Window* mContentWindow;
 		
-		ItemDragContainer(Item* item, const CeGuiString& name);
+		ItemDragContainer(const CeGuiString &type, const CeGuiString& name);
 		virtual bool testClassName_impl(const CEGUI::String& class_name) const;
 
 	private:
@@ -71,7 +75,17 @@
     class ItemDragContainerDestroyListener
     {
     public:
+        ItemDragContainerDestroyListener();
+        virtual ~ItemDragContainerDestroyListener();
         virtual void notifyItemDragContainerDestroyed(ItemDragContainer* cont) = 0;
+    protected:
+        void addDragContainer(ItemDragContainer* dragcont);
+        void removeDragContainer(ItemDragContainer* dragcont);
+        friend class ItemDragContainer;
+    private:
+        typedef std::map<CeGuiString, ItemDragContainer*> DndContainerMap;
+        DndContainerMap mContainers;
+        bool mIsDestroying;
     };
 
 } // namespace rl

Modified: rl/branches/newton20/engine/ui/include/ItemIconDragContainer.h
===================================================================
--- rl/branches/newton20/engine/ui/include/ItemIconDragContainer.h	2008-08-27 22:12:19 UTC (rev 4490)
+++ rl/branches/newton20/engine/ui/include/ItemIconDragContainer.h	2008-08-28 18:41:29 UTC (rev 4491)
@@ -27,9 +27,19 @@
 	class ItemIconDragContainer : public ItemDragContainer
 	{
 	public:
-		ItemIconDragContainer(Item* item, const CeGuiString& name);
+		ItemIconDragContainer(const CeGuiString &type, const CeGuiString& name);
+                void setItem(Item* item);
+                static const CeGuiString WidgetTypeName; // for CEGUI
 	};
 
 } // namespace rl
 
+namespace CEGUI{
+
+    using rl::ItemIconDragContainer;
+
+    CEGUI_DECLARE_WINDOW_FACTORY(ItemIconDragContainer)
+
+}
+
 #endif //__ItemIconDragContainer_H__

Modified: rl/branches/newton20/engine/ui/include/WindowFadeJob.h
===================================================================
--- rl/branches/newton20/engine/ui/include/WindowFadeJob.h	2008-08-27 22:12:19 UTC (rev 4490)
+++ rl/branches/newton20/engine/ui/include/WindowFadeJob.h	2008-08-28 18:41:29 UTC (rev 4491)
@@ -40,8 +40,8 @@
             Ogre::Real targetAlpha = 1.0f, Ogre::Real changeRate = 4.0f);
         WindowFadeJob(CEGUI::Window* window, Mode mode, 
             Ogre::Real targetAlpha = 1.0f, Ogre::Real changeRate = 4.0f);
-        WindowFadeJob(ItemDragContainer* window, Mode mode, 
-            Ogre::Real targetAlpha = 1.0f, Ogre::Real changeRate = 4.0f);
+        //WindowFadeJob(ItemDragContainer* window, Mode mode, 
+        //    Ogre::Real targetAlpha = 1.0f, Ogre::Real changeRate = 4.0f);
 
         virtual bool execute(Ogre::Real time);
         virtual void discard();
@@ -49,7 +49,7 @@
     protected:
         AbstractWindow* mAbstractWindow;
         CEGUI::Window* mCEGUIWindow;
-        ItemDragContainer* mItemDragContainer;
+        //ItemDragContainer* mItemDragContainer;
         Mode mMode;
         Ogre::Real mChangeRate;
         Ogre::Real mCurrentAlpha;

Modified: rl/branches/newton20/engine/ui/src/CombatControlState.cpp
===================================================================
--- rl/branches/newton20/engine/ui/src/CombatControlState.cpp	2008-08-27 22:12:19 UTC (rev 4490)
+++ rl/branches/newton20/engine/ui/src/CombatControlState.cpp	2008-08-28 18:41:29 UTC (rev 4491)
@@ -22,6 +22,7 @@
 #include "Combat.h"
 #include "CombatGui.h"
 #include "CombatManager.h"
+#include "CommandMapper.h"
 #include "CoreSubsystem.h"
 #include "Creature.h"
 #include "CreatureController.h"
@@ -49,7 +50,14 @@
           mEnemySelector(CoreSubsystem::getSingleton().getWorld()->getSceneManager(),
             QUERYFLAG_CREATURE),
           mCamera(NULL),
-		  mState(ROUND_EXECUTION)
+		  mState(ROUND_EXECUTION),
+          mCameraYaw(0),
+          mCameraPitch(60), // the same value as in resetCamera
+          mMovementState(0),
+          mCameraLinearSpringK(100.0f),
+          mCameraLinearDampingK(Math::NEG_INFINITY),
+          mMaxCameraDistance(30.0f),
+          mMinCameraDistance(5.0f)
     {
         CreatureSelectionFilter* filter = new CreatureSelectionFilter();
         filter->setAlignmentMask(Creature::ALIGNMENT_ENEMY);
@@ -74,6 +82,11 @@
 
         mCamera = static_cast<CameraObject*>(mCameraActor->getControlledObject());
 		mCombatGui = new CombatGui(mCombat, mCamera);
+
+
+        // calculate camera spring-damping system coefficients
+        Real relationCoefficient = 0.8f;
+        mCameraLinearDampingK = relationCoefficient * 2.0 * Math::Sqrt(mCameraLinearSpringK);
     }
 
 	CombatControlState::~CombatControlState()
@@ -85,9 +98,43 @@
 
     void CombatControlState::resume()
     {
-        mCameraActor->getPhysicalThing()->freeze();
-        mCharacterActor->getPhysicalThing()->freeze();
+        // control camera
+        mCameraActor->getPhysicalThing()->setMaterialID(
+        PhysicsManager::getSingleton().getMaterialID("camera"));
+        mCameraActor->getPhysicalThing()->unfreeze();
+        mCameraActor->getPhysicalThing()->setPhysicsController(this);
+        mCameraActor->getPhysicalThing()->setUpConstraint(Vector3::ZERO);
+        
+        // We also handle cam<->level, cam<->default cam<->char collision from now on
+        OgreNewt::MaterialPair* mat_pair = NULL;
+        mat_pair = PhysicsManager::getSingleton().createMaterialPair(
+            PhysicsManager::getSingleton().getMaterialID("camera"),
+            PhysicsManager::getSingleton().getMaterialID("default"));
+        mat_pair->setContactCallback(this);
+        mat_pair->setDefaultCollidable(1);
+        mat_pair->setDefaultFriction(0,0);
+        mat_pair->setDefaultFriction(0,1);
+        mat_pair = PhysicsManager::getSingleton().createMaterialPair(
+            PhysicsManager::getSingleton().getMaterialID("camera"),
+            PhysicsManager::getSingleton().getMaterialID("level"));
+        mat_pair->setContactCallback(this);
+        mat_pair->setDefaultCollidable(1);
+        mat_pair->setDefaultFriction(0,0);
+        mat_pair->setDefaultFriction(0,1);
+        mat_pair = PhysicsManager::getSingleton().createMaterialPair(
+            PhysicsManager::getSingleton().getMaterialID("camera"),
+            PhysicsManager::getSingleton().getMaterialID("character"));
+        mat_pair->setContactCallback(this);
+        mat_pair->setDefaultCollidable(1);
+        mat_pair->setDefaultFriction(0,0);
+        mat_pair->setDefaultFriction(0,1);
 
+        // reset camera
+        //resetCamera(); // if you don't call this here, the camera should smoothly move to the new position -> looks nicer
+        // perhaps this should be handled differently!
+        mMovementState = 0;
+
+
         ///\todo Richtig machen, nur tempor?r Ani hier setzen.
         static_cast<MeshObject*>(mCharacterActor->getControlledObject())
             ->startAnimation("kampf_schwerter_idle");
@@ -123,20 +170,202 @@
 
     void CombatControlState::pause()
     {
-		mCombatGui->hide();
+        mCombatGui->hide();
 
-        mCameraActor->getPhysicalThing()->unfreeze();
-        mCharacterActor->getPhysicalThing()->unfreeze();
+
+        // stop controlling camera actor
+        mCameraActor->getPhysicalThing()->setPhysicsController(NULL);
+        mCameraActor->getPhysicalThing()->freeze();
+        // cam<->Level collision back to default
+        PhysicsManager::getSingleton().resetMaterialPair(
+            PhysicsManager::getSingleton().getMaterialID("camera"),
+            PhysicsManager::getSingleton().getMaterialID("default"));
+        // cam<->Default collision back to default
+        PhysicsManager::getSingleton().resetMaterialPair(
+            PhysicsManager::getSingleton().getMaterialID("camera"),
+            PhysicsManager::getSingleton().getMaterialID("level"));
+        PhysicsManager::getSingleton().resetMaterialPair(
+            PhysicsManager::getSingleton().getMaterialID("camera"),
+            PhysicsManager::getSingleton().getMaterialID("character"));
+
         static_cast<MeshObject*>(mCharacterActor->getControlledObject())->stopAllAnimations();
 
         mCombat->pause();
     }
 
-	void CombatControlState::run(Ogre::Real elapsedTime)
+    bool CombatControlState::keyPressed(const OIS::KeyEvent& evt, bool handled)
     {
-		mCombatGui->update();
+        bool retval = false;
+        if( !handled )
+        {
+            int movement = mCommandMapper->getMovement(evt.key);
+            mMovementState |= movement;
+            
+            if( movement != MOVE_NONE )
+                retval = true;
+        }
+
+        if( ControlState::keyPressed(evt, handled || retval) )
+            retval = true;
+
+        return retval;
     }
+     
+    bool CombatControlState::keyReleased(const OIS::KeyEvent& evt, bool handled)
+    {
+        bool retval = false;
+        int movement = mCommandMapper->getMovement(evt.key);
+        if( movement != MOVE_NONE )
+        {
+            mMovementState &= (~movement);
+            retval = true;
+        }
 
+        if( ControlState::keyReleased(evt, handled || retval) )
+            retval = true;
+        return retval;
+    }
+
+    void CombatControlState::run(Ogre::Real elapsedTime)
+    {
+        // update CombatGui
+        mCombatGui->update();
+
+
+
+        // update camera look-at position
+        updateCameraLookAt(elapsedTime);
+
+        if( mMovementState & MOVE_RIGHT )
+            mCameraYaw += Degree( 360.0/10.0 * elapsedTime );
+        if( mMovementState & MOVE_LEFT )
+            mCameraYaw -= Degree( 360.0/10.0 * elapsedTime );
+
+    }
+
+    void CombatControlState::resetCamera(void)
+    {
+        mCameraYaw = Degree(0);
+        mCameraPitch = Degree(50);
+        mCameraActor->setPosition(calculateOptimalCameraPosition());
+    }
+
+    void CombatControlState::updateCameraLookAt(Real elapsedTime)
+    {
+        Vector3 combatCenter = getCombatCenterPosition();
+        SceneNode* cameraNode = mCameraActor->_getSceneNode();
+
+        cameraNode->lookAt(combatCenter + 2*Vector3::UNIT_Y, Node::TS_WORLD);
+    }
+
+    Vector3 CombatControlState::getCombatCenterPosition()
+    {
+        // get the center of all persons (allies and opponents)
+        int n = 0;
+        Vector3 pos = Vector3::ZERO;
+
+        const Combat::CombatantSet &allies (mCombat->getAllAllies() );
+        for(Combat::CombatantSet::iterator it = allies.begin(); it != allies.end(); it++)
+        {
+            pos += (*it)->getCreature()->getPosition();
+            n++;
+        }
+
+        const Combat::CombatantSet &opponents (mCombat->getAllOpponents());
+        for(Combat::CombatantSet::iterator it = opponents.begin(); it != opponents.end(); it++)
+        {
+            pos += (*it)->getCreature()->getPosition();
+            n++;
+        }
+
+        if( n > 0 )
+            pos /= n;
+        else
+        {
+            pos = mCharacter->getPosition();
+        }
+
+        return pos;
+    }
+    
+    Vector3 CombatControlState::calculateOptimalCameraPosition()
+    {
+        Vector3 center = getCombatCenterPosition();
+
+        // get the greatest distance from center from all persons
+        Real distance = 0;
+        const Combat::CombatantSet &allies (mCombat->getAllAllies() );
+        for(Combat::CombatantSet::iterator it = allies.begin(); it != allies.end(); it++)
+        {
+            distance = std::max( ( (*it)->getCreature()->getPosition() - center ).length(), distance );
+        }
+        const Combat::CombatantSet &opponents = mCombat->getAllOpponents();
+        for(Combat::CombatantSet::iterator it = opponents.begin(); it != opponents.end(); it++)
+        {
+            distance = std::max( ( (*it)->getCreature()->getPosition() - center ).length(), distance );
+        }
+        distance+=2;
+
+
+        // put camera on the line player-center far enough to see all persons
+        // if player is "exactly" in the center, use player orientation as fallback orientation
+        // + rotation from mCameraYaw
+        Vector3 playerPos = mCharacter->getPosition();
+        Vector3 diff = playerPos - center;
+        diff.y = 0;
+        Quaternion camYaw;
+        camYaw.FromAngleAxis(mCameraYaw, Vector3::UNIT_Y);
+        if( diff.squaredLength() < 0.01 )
+        {
+            diff = mCharacterActor->getOrientation()*Vector3::UNIT_Z;
+        }
+        diff.y = 0;
+        diff.normalise();
+        diff = camYaw*diff;
+        diff.y = Math::Tan(mCameraPitch.valueRadians());
+
+        distance = std::max( distance,  mMinCameraDistance*Math::Cos(mCameraPitch.valueRadians()) );
+        distance = std::min( distance,  mMaxCameraDistance*Math::Cos(mCameraPitch.valueRadians()) );
+            
+        Vector3 camPos = center + distance*diff;
+        return camPos;
+    }
+
+    void CombatControlState::OnApplyForceAndTorque(PhysicalThing* thing, float timestep)
+    {
+        Vector3 camPos;
+        Quaternion camOri;
+        mCamBody->getPositionOrientation(camPos, camOri);
+
+        Vector3 optimalCamPos = calculateOptimalCameraPosition();
+
+
+        Vector3 diff = camPos - optimalCamPos;
+        Vector3 cameraVelocity;
+        cameraVelocity = mCamBody->getVelocity();
+        // spring velocity
+        Vector3 springAcc = -mCameraLinearSpringK*diff - mCameraLinearDampingK * cameraVelocity;
+                                            
+        // get the camera mass
+        Real mass;
+        Vector3 inertia;
+        mCamBody->getMassMatrix(mass, inertia);
+                                                
+        mCamBody->setForce(springAcc * mass);
+    }
+
+    int CombatControlState::OnAABBOverlap(int threadIndex)
+    {
+        // TODO handle camera collisions here
+        return 0;
+    }
+   
+    int CombatControlState::userProcess(Ogre::Real timestep, int threadIndex)
+    {
+        // TODO handle camera collisions here
+        return 0;
+    }
+
     Ogre::String CombatControlState::getCombatantTypeName() const
     {
         return "CombatControlState";

Modified: rl/branches/newton20/engine/ui/src/ContainerContentWindow.cpp
===================================================================
--- rl/branches/newton20/engine/ui/src/ContainerContentWindow.cpp	2008-08-27 22:12:19 UTC (rev 4490)
+++ rl/branches/newton20/engine/ui/src/ContainerContentWindow.cpp	2008-08-28 18:41:29 UTC (rev 4491)
@@ -72,7 +72,7 @@
 
 		if (evtArgs.dragDropItem->testClassName("ItemDragContainer"))
 		{
-			ItemDragContainer* dragcont = static_cast<ItemDragContainer*>(
+			ItemDragContainer* dragcont = dynamic_cast<ItemDragContainer*>(
 				evtArgs.dragDropItem);
 			Item* item = dragcont->getItem();
 
@@ -158,7 +158,7 @@
 
 		if (evtArgs.dragDropItem->testClassName("ItemDragContainer"))
 		{
-			ItemDragContainer* dragcont = static_cast<ItemDragContainer*>(
+			ItemDragContainer* dragcont = dynamic_cast<ItemDragContainer*>(
 				evtArgs.dragDropItem);
 			Item* item = dragcont->getItem();
 
@@ -179,7 +179,8 @@
             {
                 if( dragcont != getItemWindow(item) )
                 {
-                    dragcont->destroyWindow();
+                    CEGUI::WindowManager::getSingleton().destroyWindow(dragcont);
+                    //dragcont->destroyWindow();
                     dragcont = createItemWindow(item);
                     mContentWindow->addChildWindow(dragcont);
                 }
@@ -211,8 +212,11 @@
 			mWindow->getName() +  "/item/"
 			+ Ogre::StringConverter::toString(item->getId())+"_DragContainer";
 
-		itemhandler = new ItemIconDragContainer(item,
-			dragContainerName);
+                itemhandler = dynamic_cast<ItemIconDragContainer*>(
+                    AbstractWindow::loadWindow("itemicondragcontainer.xml", dragContainerName));
+                    //CEGUI::WindowManager::getSingleton().createWindow("ItemIconDragContainer", dragContainerName));
+                itemhandler->setItem(item);
+		//itemhandler = new ItemIconDragContainer(item, dragContainerName);
         itemhandler->setDestroyListener(this);
         mItemDragContainerMap.insert(std::make_pair(item, itemhandler));
 		itemhandler->setItemParent(mContainer);

Modified: rl/branches/newton20/engine/ui/src/InventoryWindow.cpp
===================================================================
--- rl/branches/newton20/engine/ui/src/InventoryWindow.cpp	2008-08-27 22:12:19 UTC (rev 4490)
+++ rl/branches/newton20/engine/ui/src/InventoryWindow.cpp	2008-08-28 18:41:29 UTC (rev 4491)
@@ -23,6 +23,7 @@
 #include <CEGUIWindowManager.h>
 #include <elements/CEGUIFrameWindow.h>
 
+#include "AbstractWindow.h"
 #include "Actor.h"
 #include "ActorManager.h"
 #include "CameraObject.h"
@@ -214,10 +215,19 @@
 		else
 		{
 			if (showdescription)
-				itemhandler = new ItemDescriptionDragContainer(item, dragContainerName);
+                        {
+				itemhandler = dynamic_cast<ItemDescriptionDragContainer*> (
+                                        AbstractWindow::loadWindow("itemdescriptiondragcontainer.xml", dragContainerName));
+                                //new ItemDescriptionDragContainer(item, dragContainerName);
+                                itemhandler->setItem(item);
+                        }
 			else
             {
-				itemhandler = new ItemIconDragContainer(item, dragContainerName);
+				itemhandler = dynamic_cast<ItemIconDragContainer*> (
+                                        AbstractWindow::loadWindow("itemicondragcontainer.xml", dragContainerName));
+                                    //CEGUI::WindowManager::getSingleton().createWindow("ItemIconDragContainer", dragContainerName));
+                                itemhandler->setItem(item);
+				//itemhandler = new ItemIconDragContainer(item, dragContainerName);
                 itemhandler->setTooltipText(item->getName());
             }
 
@@ -287,20 +297,14 @@
 
 			if (mInventory->canHold(item, targetSlot))
 			{
-				if (dragcont->getItemParentContainer() != NULL)
-				{
-					dragcont->getParent()->removeChildWindow(dragcont);
-				}
-				else if (dragcont->getItemParentSlot() != "")
-				{
-					dragcont->getParent()->removeChildWindow(dragcont);
-				}
+				dragcont->getParent()->removeChildWindow(dragcont);
 
 				ItemDragContainer* newCont = createItemDragContainer(item, false, targetSlot);
 
 				if (newCont)
 				{
-                    dragcont->destroyWindow();
+                                    CEGUI::WindowManager::getSingleton().destroyWindow(dragcont);
+//                    dragcont->destroyWindow();
 				}
 				else
 				{
@@ -413,7 +417,8 @@
 				-1);
 
 
-            dragcont->destroyWindow();
+                        CEGUI::WindowManager::getSingleton().destroyWindow(dragcont);
+//            dragcont->destroyWindow();
 
 			Ogre::Vector3 targetPosWorldSpace =
 				mInventory->getOwner()->getPosition()

Modified: rl/branches/newton20/engine/ui/src/ItemDescriptionDragContainer.cpp
===================================================================
--- rl/branches/newton20/engine/ui/src/ItemDescriptionDragContainer.cpp	2008-08-27 22:12:19 UTC (rev 4490)
+++ rl/branches/newton20/engine/ui/src/ItemDescriptionDragContainer.cpp	2008-08-28 18:41:29 UTC (rev 4491)
@@ -22,10 +22,34 @@
 #include "AbstractWindow.h"
 #include "Item.h"
 
+
+
+namespace CEGUI
+{
+    CEGUI_DEFINE_WINDOW_FACTORY(ItemDescriptionDragContainer)
+}
+
 namespace rl {
-	ItemDescriptionDragContainer::ItemDescriptionDragContainer(Item* item, const CeGuiString& name)
-		: ItemDragContainer(item, name)
+
+    const CeGuiString ItemDescriptionDragContainer::WidgetTypeName("ItemDescriptionDragContainer");
+
+
+
+
+	ItemDescriptionDragContainer::ItemDescriptionDragContainer(const CeGuiString &type, const CeGuiString& name)
+		: ItemDragContainer(type, name)
 	{
+		CeGuiString prefix = name;
+
+		mContentWindow = this; //AbstractWindow::loadWindow("itemdescriptiondragcontainer.xml", prefix);
+		addChildWindow(mContentWindow);
+                mContentWindow->setDestroyedByParent(true);
+	}
+
+        void ItemDescriptionDragContainer::setItem(Item* item)
+        {
+            ItemDragContainer::setItem(item);
+
 		CeGuiString icon = item->getImageName();
 
 		if (icon == "")
@@ -33,19 +57,20 @@
 			icon = ICON_UNKNOWN_ITEM;
 		}
 
-		CeGuiString prefix = name;
-		mContentWindow = AbstractWindow::loadWindow("itemdescriptiondragcontainer.xml", prefix);
+                const CeGuiString &name = getName();
 
+
 		mContentWindow->getChild(
-			name+"ItemDescriptionDragContainer/Icon")
+			name+"/Icon")
 			->setProperty("Image", icon);
 		mContentWindow->getChild(
-			name+"ItemDescriptionDragContainer/Name")
+			name+"/Name")
 			->setText(item->getName());
 		mContentWindow->getChild(
-			name+"ItemDescriptionDragContainer/Description")
+			name+"/Description")
 			->setText(item->getDescription());
 
+
 		mContentWindow->subscribeEvent(
 			Window::EventMouseClick,
 			boost::bind(&ItemDragContainer::_handleItemMouseClick, this, _1, item));
@@ -54,7 +79,8 @@
 			Window::EventMouseDoubleClick,
 			boost::bind(&ItemDragContainer::_handleItemDoubleClick, this, _1, item));
 
-		setSize(mContentWindow->getSize());
-		addChildWindow(mContentWindow);
-	}
+
+
+	    setSize(mContentWindow->getSize());
+        }
 }

Modified: rl/branches/newton20/engine/ui/src/ItemDragContainer.cpp
===================================================================
--- rl/branches/newton20/engine/ui/src/ItemDragContainer.cpp	2008-08-27 22:12:19 UTC (rev 4490)
+++ rl/branches/newton20/engine/ui/src/ItemDragContainer.cpp	2008-08-28 18:41:29 UTC (rev 4491)
@@ -31,9 +31,9 @@
 namespace rl {
 	const Ogre::String ItemDragContainer::ICON_UNKNOWN_ITEM = "set:ModelThumbnails image:item_unknown";
 
-	ItemDragContainer::ItemDragContainer(Item* item, const CeGuiString& name)
-		: CEGUI::DragContainer("DragContainer", name),
-		mItem(item),
+	ItemDragContainer::ItemDragContainer(const CeGuiString &type, const CeGuiString& name)
+		: CEGUI::DragContainer(type, name),
+		mItem(NULL),
 		mParentContainer(NULL),
 		mParentSlot(""),
 		mContentWindow(NULL),
@@ -43,10 +43,28 @@
 	{
 	}
 
-	ItemDragContainer::~ItemDragContainer()
+        void ItemDragContainer::setItem(Item* item)
+        {
+            if( mItem != NULL )
+                Throw(IllegalArgumentException,"The item of an ItemDragContainer can only be set once!");
+            mItem = item;
+        }
+
+        ItemDragContainer::~ItemDragContainer()
+        {
+            if(mDestroyListener)
+                mDestroyListener->notifyItemDragContainerDestroyed(this);
+            setDestroyListener(NULL);
+        }
+
+	void ItemDragContainer::destroy()
 	{
-        if(mDestroyListener)
-            mDestroyListener->notifyItemDragContainerDestroyed(this);
+            if(mDestroyListener)
+                mDestroyListener->notifyItemDragContainerDestroyed(this);
+            setDestroyListener(NULL);
+
+            CEGUI::DragContainer::destroy();
+/*        
         stopFadeOut();
 
         hide();
@@ -59,8 +77,9 @@
 		removeChildWindow(mContentWindow);
 		CEGUI::WindowManager::getSingleton().destroyWindow(mContentWindow);
         CEGUI::WindowManager::getSingleton().destroyWindow(this);
+*/
 	}
-
+/*
     void ItemDragContainer::destroyWindow()
     {
         if(mDestroyListener)
@@ -80,7 +99,7 @@
             JobScheduler::JP_NORMAL,
             0.0f);
     }
-
+*/
 	void ItemDragContainer::setItemParent(Container* container)
 	{
 		mParentContainer = container;
@@ -179,4 +198,65 @@
 
         return true;
     }
+
+    void ItemDragContainer::setDestroyListener(ItemDragContainerDestroyListener *listener)
+    {
+        if( listener == mDestroyListener )
+            return ;
+
+        if( mDestroyListener )
+            mDestroyListener->removeDragContainer(this);
+
+        mDestroyListener = listener;
+
+        if( listener )
+            mDestroyListener->addDragContainer(this);
+    }
+
+
+    ItemDragContainerDestroyListener::ItemDragContainerDestroyListener() : mIsDestroying(false)
+    {
+    }
+
+    ItemDragContainerDestroyListener::~ItemDragContainerDestroyListener()
+    {
+        // remove all dragContainers from list
+        mIsDestroying = true;
+        for( DndContainerMap::iterator it = mContainers.begin(); it != mContainers.end(); it++ )
+            it->second->setDestroyListener(NULL);
+    }
+
+    void ItemDragContainerDestroyListener::addDragContainer(ItemDragContainer *dragcont)
+    {
+        if( dragcont == NULL )
+            Throw(NullPointerException, "Parameter dragcont in ItemDragContainerDestroyListener::addDragContainer should not be NULL!");
+
+        DndContainerMap::iterator it = mContainers.find(dragcont->getName());
+        if( it != mContainers.end() )
+        {
+            Throw(IllegalArgumentException, "ItemDragContainerDestroyListener::addDragContainer: ItemDragContainer with name '"+
+                    dragcont->getName()+"' already added!");
+        }
+
+        mContainers.insert(std::make_pair(dragcont->getName(), dragcont));
+    }
+
+    void ItemDragContainerDestroyListener::removeDragContainer(ItemDragContainer *dragcont)
+    {
+        if( mIsDestroying )  // if this Listener is destroyed, we don't need to care about the list
+            return ;
+
+        if( dragcont == NULL )
+            Throw(NullPointerException, "Parameter dragcont in ItemDragContainerDestroyListener::removeDragContainer should not be NULL!");
+
+        DndContainerMap::iterator it = mContainers.find(dragcont->getName());
+        if( it == mContainers.end() )
+        {
+            Throw(IllegalArgumentException, "ItemDragContainerDestroyListener::removeDragContainer: ItemDragContainer with name '"+
+                    dragcont->getName()+"' was not added before!");
+        }
+
+        mContainers.erase(it);
+   }
+
 }

Modified: rl/branches/newton20/engine/ui/src/ItemIconDragContainer.cpp
===================================================================
--- rl/branches/newton20/engine/ui/src/ItemIconDragContainer.cpp	2008-08-27 22:12:19 UTC (rev 4490)
+++ rl/branches/newton20/engine/ui/src/ItemIconDragContainer.cpp	2008-08-28 18:41:29 UTC (rev 4491)
@@ -22,26 +22,49 @@
 #include "AbstractWindow.h"
 #include "Item.h"
 
+namespace CEGUI{
+    CEGUI_DEFINE_WINDOW_FACTORY(ItemIconDragContainer)
+}
 namespace rl {
-	ItemIconDragContainer::ItemIconDragContainer(Item* item, const CeGuiString& name)
-		: ItemDragContainer(item, name)
+
+    const CeGuiString ItemIconDragContainer::WidgetTypeName("ItemIconDragContainer");
+
+
+
+	ItemIconDragContainer::ItemIconDragContainer(const CeGuiString &type, const CeGuiString& name)
+		: ItemDragContainer(type, name)
 	{
+		CeGuiString prefix = name;
+		mContentWindow = this; //AbstractWindow::loadWindow("itemicondragcontainer.xml", prefix);
+
+
+		for (size_t idx = 0; idx < mContentWindow->getChildCount(); ++idx)
+		{
+			LOG_MESSAGE(Logger::UI, mContentWindow->getChildAtIdx(idx)->getName());
+		}
+
+		addChildWindow(mContentWindow);
+                mContentWindow->setDestroyedByParent(true);
+	}
+
+        void ItemIconDragContainer::setItem(Item* item)
+        {
+            ItemDragContainer::setItem(item);
+
+
+
+
 		CeGuiString icon = item->getImageName();
 
 		if (icon == "")
 		{
 			icon = ICON_UNKNOWN_ITEM;
 		}
+                const CeGuiString &name = getName();
 
-		CeGuiString prefix = name;
-		mContentWindow = AbstractWindow::loadWindow("itemicondragcontainer.xml", prefix);
 
-		for (size_t idx = 0; idx < mContentWindow->getChildCount(); ++idx)
-		{
-			LOG_MESSAGE(Logger::UI, mContentWindow->getChildAtIdx(idx)->getName());
-		}
 
-		mContentWindow->getChild(name+"ItemIconDragContainer/Icon")
+		mContentWindow->getChild(name+"/Icon")
 			->setProperty("Image", icon);
 
 		mContentWindow->subscribeEvent(
@@ -59,6 +82,6 @@
 			cegui_absdim(item->getSize().first*30),
 			cegui_absdim(item->getSize().second*30)));
 
-		addChildWindow(mContentWindow);
-	}
+
+        }
 }

Modified: rl/branches/newton20/engine/ui/src/UiSubsystem.cpp
===================================================================
--- rl/branches/newton20/engine/ui/src/UiSubsystem.cpp	2008-08-27 22:12:19 UTC (rev 4490)
+++ rl/branches/newton20/engine/ui/src/UiSubsystem.cpp	2008-08-28 18:41:29 UTC (rev 4491)
@@ -17,9 +17,7 @@
 
 #include "UiSubsystem.h"
 
-#include <CEGUISystem.h>
-#include <CEGUIWindow.h>
-#include <CEGUIWindowManager.h>
+#include <CEGUI.h>
 
 #ifdef __APPLE__
 #   include <OgreCEGUIRenderer/OgreCEGUIRenderer.h>
@@ -39,6 +37,8 @@
 #include "GameLoop.h"
 #include "GameObjectManager.h"
 #include "InputManager.h"
+#include "ItemDescriptionDragContainer.h"
+#include "ItemIconDragContainer.h"
 #include "Logger.h"
 #include "ScriptWrapper.h"
 #include "SoundManager.h"
@@ -49,6 +49,18 @@
 using namespace Ogre;
 template<> rl::UiSubsystem* Singleton<rl::UiSubsystem>::ms_Singleton = 0;
 
+// this function needs to be in the CEGUI-namespace
+namespace CEGUI{
+    void initializeOwnCeguiWindowFactories()
+    {
+            CEGUI::WindowFactoryManager& wfMgr = CEGUI::WindowFactoryManager::getSingleton();
+            wfMgr.addFactory(&CEGUI_WINDOW_FACTORY(ItemDescriptionDragContainer)); // ohne rl:: davor hier!
+            //wfMgr.addFalagardWindowMapping("ItemDescriptionDragContainer", "CEGUI/ItemDescriptionDragContainer", "", "Falagard/Default");
+            wfMgr.addFactory(&CEGUI_WINDOW_FACTORY(ItemIconDragContainer)); // ohne rl:: davor hier!
+            //wfMgr.addFalagardWindowMapping("ItemIconDragContainer", "CEGUI/ItemIconDragContainer", "", "Falagard/Default");
+    }
+}
+
 namespace rl {
     const char* UiSubsystem::CEGUI_ROOT = "RootWindow";
 
@@ -75,11 +87,12 @@
 
     UiSubsystem::~UiSubsystem()
     {
+		delete mInputManager;
+	
         delete mWindowFactory;
         delete mWindowManager;
+        
 
-        delete mInputManager;
-
         delete mGuiSystem;
         delete mGuiRenderer;
     }
@@ -130,9 +143,14 @@
         sheet->setZOrderingEnabled(true);
         sheet->moveToBack();
         System::getSingleton().setDefaultTooltip("RastullahLook/Tooltip");
+
+        CEGUI::initializeOwnCeguiWindowFactories();
+
         LOG_MESSAGE2(Logger::UI, "CEGUI initialized.",
             "UiSubsystem::initializeUiSubsystem");
 
+
+
         mWindowManager = new WindowManager();
 
         //Initializing InputManager

Modified: rl/branches/newton20/engine/ui/src/WindowFadeJob.cpp
===================================================================
--- rl/branches/newton20/engine/ui/src/WindowFadeJob.cpp	2008-08-27 22:12:19 UTC (rev 4490)
+++ rl/branches/newton20/engine/ui/src/WindowFadeJob.cpp	2008-08-28 18:41:29 UTC (rev 4491)
@@ -32,7 +32,7 @@
         : Job(true, true),
         mAbstractWindow(window),
         mCEGUIWindow(window->getWindow()),
-        mItemDragContainer(NULL),
+//        mItemDragContainer(NULL),
         mMode(mode),
         mChangeRate(changeRate),
         mCurrentAlpha(mode == FADE_IN ? 0.0f : 1.0f),
@@ -47,7 +47,7 @@
         : Job(true, true),
         mAbstractWindow(NULL),
         mCEGUIWindow(window),
-        mItemDragContainer(NULL),
+//        mItemDragContainer(NULL),
         mMode(mode),
         mChangeRate(changeRate),
         mCurrentAlpha(mode == FADE_IN ? 0.0f : 1.0f),
@@ -57,7 +57,7 @@
         mCEGUIWindow->setVisible(true);
         mCEGUIWindow->setAlpha(mCurrentAlpha);
     }
-
+/*
     WindowFadeJob::WindowFadeJob(ItemDragContainer* window, Mode mode, Real targetAlpha, Real changeRate)
         : Job(true, true),
         mAbstractWindow(NULL),
@@ -72,7 +72,7 @@
         mCEGUIWindow->setVisible(true);
         mCEGUIWindow->setAlpha(mCurrentAlpha);
     }
-
+*/
     bool WindowFadeJob::execute(Real time)
     {
         mCurrentAlpha += time * mChangeRate * Math::Sign(mTargetAlpha - mCurrentAlpha);
@@ -97,8 +97,8 @@
         {
             if( mAbstractWindow )
                 WindowManager::getSingleton().destroyWindow(mAbstractWindow);
-            else if(mItemDragContainer)
-                delete mItemDragContainer;
+//            else if(mItemDragContainer)
+//                delete mItemDragContainer;
             else
                 CEGUI::WindowManager::getSingleton().destroyWindow(mCEGUIWindow);
         }



