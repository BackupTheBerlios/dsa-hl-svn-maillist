From timm at mail.berlios.de  Sun Jun 14 14:34:04 2009
From: timm at mail.berlios.de (timm at mail.berlios.de)
Date: Sun, 14 Jun 2009 14:34:04 +0200
Subject: [Dsa-hl-svn] r4944 - in rl/branches/persistence2/engine: common
	common/include common/src core/include core/src
Message-ID: <200906141234.n5ECY4Nb030731@sheep.berlios.de>

Author: timm
Date: 2009-06-14 14:33:54 +0200 (Sun, 14 Jun 2009)
New Revision: 4944

Removed:
   rl/branches/persistence2/engine/common/include/WriteableDataStream.h
   rl/branches/persistence2/engine/common/include/WriteableDataStreamFormatTarget.h
   rl/branches/persistence2/engine/common/include/WriteableFileSystemArchiv.h
   rl/branches/persistence2/engine/common/src/WriteableDataStream.cpp
   rl/branches/persistence2/engine/common/src/WriteableDataStreamFormatTarget.cpp
   rl/branches/persistence2/engine/common/src/WriteableFileSystemArchiv.cpp
Modified:
   rl/branches/persistence2/engine/common/RlCommon2005.vcproj
   rl/branches/persistence2/engine/core/include/SaveGameFile.h
   rl/branches/persistence2/engine/core/include/SaveGameManager.h
   rl/branches/persistence2/engine/core/src/CoreSubsystem.cpp
   rl/branches/persistence2/engine/core/src/SaveGameFile.cpp
   rl/branches/persistence2/engine/core/src/SaveGameManager.cpp
Log:
work on saving/loading save games from file system

Modified: rl/branches/persistence2/engine/common/RlCommon2005.vcproj
===================================================================
--- rl/branches/persistence2/engine/common/RlCommon2005.vcproj	2009-05-31 11:24:48 UTC (rev 4943)
+++ rl/branches/persistence2/engine/common/RlCommon2005.vcproj	2009-06-14 12:33:54 UTC (rev 4944)
@@ -371,18 +371,6 @@
 				</FileConfiguration>
 			</File>
 			<File
-				RelativePath=".\src\WriteableDataStream.cpp"
-				>
-			</File>
-			<File
-				RelativePath=".\src\WriteableDataStreamFormatTarget.cpp"
-				>
-			</File>
-			<File
-				RelativePath=".\src\WriteableFileSystemArchiv.cpp"
-				>
-			</File>
-			<File
 				RelativePath=".\src\XmlProcessor.cpp"
 				>
 			</File>
@@ -495,18 +483,6 @@
 				>
 			</File>
 			<File
-				RelativePath=".\include\WriteableDataStream.h"
-				>
-			</File>
-			<File
-				RelativePath=".\include\WriteableDataStreamFormatTarget.h"
-				>
-			</File>
-			<File
-				RelativePath=".\include\WriteableFileSystemArchiv.h"
-				>
-			</File>
-			<File
 				RelativePath=".\include\XmlProcessor.h"
 				>
 			</File>

Deleted: rl/branches/persistence2/engine/common/include/WriteableDataStream.h
===================================================================
--- rl/branches/persistence2/engine/common/include/WriteableDataStream.h	2009-05-31 11:24:48 UTC (rev 4943)
+++ rl/branches/persistence2/engine/common/include/WriteableDataStream.h	2009-06-14 12:33:54 UTC (rev 4944)
@@ -1,85 +0,0 @@
-/* This source file is part of Rastullahs Lockenpracht.
-* Copyright (C) 2003-2008 Team Pantheon. http://www.team-pantheon.de
-* 
-*  This program is free software; you can redistribute it and/or modify
-*  it under the terms of the Clarified Artistic License.
-*
-*  This program is distributed in the hope that it will be useful,
-*  but WITHOUT ANY WARRANTY; without even the implied warranty of
-*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-*  Clarified Artistic License for more details.
-*
-*  You should have received a copy of the Clarified Artistic License
-*  along with this program; if not you can get it here
-*  http://www.jpaulmorrison.com/fbp/artistic2.htm.
-*/
-
-#ifndef _H_WriteableDataStream
-#define _H_WriteableDataStream
-
-#include "CommonPrerequisites.h"
-
-#include <iostream>
-
-namespace rl
-{
-    class _RlCommonExport WriteableDataStream : public Ogre::DataStream
-    {
-    public:
-		WriteableDataStream() : Ogre::DataStream() {}
-		WriteableDataStream(const Ogre::String &name) : Ogre::DataStream(name) {}
-        virtual void write(void* buf, size_t count) = 0;
-        virtual void flush() = 0;
-        virtual void beginWrite() = 0;
-    };
-
-    typedef Ogre::SharedPtr<WriteableDataStream> WriteableDataStreamPtr;
-
-    class _RlCommonExport WriteableFileStreamDataStream : public WriteableDataStream
-    {
-    protected:
-		std::fstream* mpStream;
-        bool mFreeOnClose;	
-    public:
-        WriteableFileStreamDataStream(std::fstream* s, 
-            bool freeOnClose = true);
-
-        WriteableFileStreamDataStream(const Ogre::String& name, 
-            std::fstream* s, 
-            bool freeOnClose = true);
-
-        WriteableFileStreamDataStream(const Ogre::String& name, 
-            std::fstream* s, 
-            size_t size, 
-            bool freeOnClose = true);
-
-        ~WriteableFileStreamDataStream();
-
-		virtual size_t read(void* buf, size_t count);
-
-        virtual size_t readLine(char* buf, size_t maxCount, const Ogre::String& delim = "\n");
-		
-		virtual void skip(long count);
-	
-	    virtual void seek( size_t pos );
-
-		virtual size_t tell(void) const;
-
-	    virtual bool eof(void) const;
-
-        virtual void close(void);
-
-        virtual std::fstream* getFStream();
-
-        virtual void write(void* buf, size_t count);
-
-        virtual void flush();
-
-        virtual void beginWrite();
-    };
-
-    typedef Ogre::SharedPtr<WriteableFileStreamDataStream> WriteableFileStreamDataStreamPtr;
-}
-
-#endif
-

Deleted: rl/branches/persistence2/engine/common/include/WriteableDataStreamFormatTarget.h
===================================================================
--- rl/branches/persistence2/engine/common/include/WriteableDataStreamFormatTarget.h	2009-05-31 11:24:48 UTC (rev 4943)
+++ rl/branches/persistence2/engine/common/include/WriteableDataStreamFormatTarget.h	2009-06-14 12:33:54 UTC (rev 4944)
@@ -1,36 +0,0 @@
-/* This source file is part of Rastullahs Lockenpracht.
-* Copyright (C) 2003-2008 Team Pantheon. http://www.team-pantheon.de
-* 
-*  This program is free software; you can redistribute it and/or modify
-*  it under the terms of the Clarified Artistic License.
-*
-*  This program is distributed in the hope that it will be useful,
-*  but WITHOUT ANY WARRANTY; without even the implied warranty of
-*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-*  Clarified Artistic License for more details.
-*
-*  You should have received a copy of the Clarified Artistic License
-*  along with this program; if not you can get it here
-*  http://www.jpaulmorrison.com/fbp/artistic2.htm.
-*/
-
-#ifndef __RlWriteableDataStreamFormatTarget_H_
-#define __RlWriteableDataStreamFormatTarget_H_
-
-#include <xercesc/framework/XMLFormatter.hpp>
-#include "WriteableDataStream.h"
-
-namespace rl
-{
-    class _RlCommonExport WriteableDataStreamFormatTarget : public XERCES_CPP_NAMESPACE::XMLFormatTarget
-    {
-    public:
-        WriteableDataStreamFormatTarget(WriteableDataStream* stream);
-        virtual void writeChars (const XMLByte *const toWrite, const unsigned int count, XERCES_CPP_NAMESPACE::XMLFormatter *const formatter);
-        virtual void flush ();
-    protected:
-        WriteableDataStream* mStream;
-    };
-}
-
-#endif

Deleted: rl/branches/persistence2/engine/common/include/WriteableFileSystemArchiv.h
===================================================================
--- rl/branches/persistence2/engine/common/include/WriteableFileSystemArchiv.h	2009-05-31 11:24:48 UTC (rev 4943)
+++ rl/branches/persistence2/engine/common/include/WriteableFileSystemArchiv.h	2009-06-14 12:33:54 UTC (rev 4944)
@@ -1,64 +0,0 @@
-/* This source file is part of Rastullahs Lockenpracht.
-* Copyright (C) 2003-2008 Team Pantheon. http://www.team-pantheon.de
-*
-*  This program is free software; you can redistribute it and/or modify
-*  it under the terms of the Clarified Artistic License.
-*
-*  This program is distributed in the hope that it will be useful,
-*  but WITHOUT ANY WARRANTY; without even the implied warranty of
-*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-*  Clarified Artistic License for more details.
-*
-*  You should have received a copy of the Clarified Artistic License
-*  along with this program; if not you can get it here
-*  http://www.jpaulmorrison.com/fbp/artistic2.htm.
-*/
-
-#ifndef __WriteableFileSystemArchive_H__
-#define __WriteableFileSystemArchive_H__
-
-#include "CommonPrerequisites.h"
-
-#ifdef __APPLE__
-#include <Ogre/OgreFileSystem.h>
-#else
-#include <OgreFileSystem.h>
-#endif
-
-namespace rl {
-
-    /** Specialisation of the Archive class to allow reading of files from 
-        filesystem folders / directories.
-    */
-    class _RlCommonExport WriteableFileSystemArchive : public Ogre::FileSystemArchive 
-    {
-    protected:
-    public:
-        WriteableFileSystemArchive(const Ogre::String& name, const Ogre::String& archType );
-        virtual ~WriteableFileSystemArchive();
-
-        /// @copydoc Archive::open
-        Ogre::DataStreamPtr open(const Ogre::String& filename) const;
-    };
-
-    /** Specialisation of ArchiveFactory for FileSystem files. */
-    //class _OgrePrivate WriteableFileSystemArchiveFactory : public ArchiveFactory
-    class _RlCommonExport WriteableFileSystemArchiveFactory : public Ogre::ArchiveFactory
-    {
-    public:
-        virtual ~WriteableFileSystemArchiveFactory() {}
-        /// @copydoc FactoryObj::getType
-        const Ogre::String& getType(void) const;
-        /// @copydoc FactoryObj::createInstance
-        Ogre::Archive *createInstance( const Ogre::String& name ) 
-        {
-            return new WriteableFileSystemArchive(name, "WriteableFileSystem");
-        }
-        /// @copydoc FactoryObj::destroyInstance
-        void destroyInstance( Ogre::Archive* arch) { delete arch; }
-    };
-
-
-}
-
-#endif

Deleted: rl/branches/persistence2/engine/common/src/WriteableDataStream.cpp
===================================================================
--- rl/branches/persistence2/engine/common/src/WriteableDataStream.cpp	2009-05-31 11:24:48 UTC (rev 4943)
+++ rl/branches/persistence2/engine/common/src/WriteableDataStream.cpp	2009-06-14 12:33:54 UTC (rev 4944)
@@ -1,201 +0,0 @@
-/* This source file is part of Rastullahs Lockenpracht.
-* Copyright (C) 2003-2008 Team Pantheon. http://www.team-pantheon.de
-* 
-*  This program is free software; you can redistribute it and/or modify
-*  it under the terms of the Clarified Artistic License.
-*
-*  This program is distributed in the hope that it will be useful,
-*  but WITHOUT ANY WARRANTY; without even the implied warranty of
-*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-*  Clarified Artistic License for more details.
-*
-*  You should have received a copy of the Clarified Artistic License
-*  along with this program; if not you can get it here
-*  http://www.jpaulmorrison.com/fbp/artistic2.htm.
-*/
-
-
-#include "stdinc.h"
-
-#include "WriteableDataStream.h"
-
-using namespace Ogre;
-
-namespace rl
-{
-    WriteableFileStreamDataStream::WriteableFileStreamDataStream(std::fstream* s, 
-		bool freeOnClose) : WriteableDataStream(), mpStream(s), mFreeOnClose(freeOnClose)
-    {
-        mpStream->seekg(0, std::ios_base::end);
-        mSize = mpStream->tellg();
-        mpStream->seekg(0, std::ios_base::beg);
-    }
-
-    WriteableFileStreamDataStream::WriteableFileStreamDataStream(const Ogre::String& name, 
-            std::fstream* s, 
-			bool freeOnClose) : WriteableDataStream(name), mpStream(s), mFreeOnClose(freeOnClose)
-    {
-        mpStream->seekg(0, std::ios_base::end);
-        mSize = mpStream->tellg();
-        mpStream->seekg(0, std::ios_base::beg);
-    }
-
-    WriteableFileStreamDataStream::WriteableFileStreamDataStream(const Ogre::String& name, 
-            std::fstream* s, 
-            size_t size, 
-			bool freeOnClose) : WriteableDataStream(name), mpStream(s), mFreeOnClose(freeOnClose)
-    {
-        mSize = size;
-    }
-
-    WriteableFileStreamDataStream::~WriteableFileStreamDataStream()
-    {
-        close();
-    }
-
-	size_t WriteableFileStreamDataStream::read(void* buf, size_t count)
-    {
-        mpStream->read(static_cast<char*>(buf), static_cast<std::streamsize>(count));
-        return mpStream->gcount();
-    }
-
-    size_t WriteableFileStreamDataStream::readLine(char* buf, size_t maxCount, const Ogre::String& delim)
-    {
-        if (delim.empty())
-		{
-			OGRE_EXCEPT(Exception::ERR_INVALIDPARAMS, "No delimiter provided",
-				"FileStreamDataStream::readLine");
-		}
-		if (delim.size() > 1)
-		{
-			LogManager::getSingleton().logMessage(
-				"WARNING: FileStreamDataStream::readLine - using only first delimeter");
-		}
-		// Deal with both Unix & Windows LFs
-		bool trimCR = false;
-		if (delim.at(0) == '\n') 
-		{
-			trimCR = true;
-		}
-		// maxCount + 1 since count excludes terminator in getline
-		mpStream->getline(buf, static_cast<std::streamsize>(maxCount+1), delim.at(0));
-		size_t ret = mpStream->gcount();
-		// three options
-		// 1) we had an eof before we read a whole line
-		// 2) we ran out of buffer space
-		// 3) we read a whole line - in this case the delim character is taken from the stream but not written in the buffer so the read data is of length ret-1 and thus ends at index ret-2
-		// in all cases the buffer will be null terminated for us
-
-		if (mpStream->eof()) 
-		{
-			// no problem
-		}
-		else if (mpStream->fail())
-		{
-			// Did we fail because of maxCount hit? No - no terminating character
-			// in included in the count in this case
-			if (ret == maxCount)
-			{
-				// clear failbit for next time 
-				mpStream->clear();
-			}
-			else
-			{
-				OGRE_EXCEPT(Exception::ERR_INTERNAL_ERROR, 
-					"Streaming error occurred", 
-					"FileStreamDataStream::readLine");
-			}
-		}
-		else 
-		{
-			// we need to adjust ret because we want to use it as a
-			// pointer to the terminating null character and it is
-			// currently the length of the data read from the stream
-			// i.e. 1 more than the length of the data in the buffer and
-			// hence 1 more than the _index_ of the NULL character
-			--ret;
-		}
-
-		// trim off CR if we found CR/LF
-		if (trimCR && buf[ret-1] == '\r')
-		{
-			--ret;
-			buf[ret] = '\0';
-		}
-		return ret;
-    }
-		
-	void WriteableFileStreamDataStream::skip(long count)
-    {
-        #if defined(STLPORT)
-		// Workaround for STLport issues: After reached eof of file stream,
-		// it's seems the stream was putted in intermediate state, and will be
-		// fail if try to repositioning relative to current position.
-		// Note: tellg() fail in this case too.
-		if (mpStream->eof())
-		{
-			mpStream->clear();
-			// Use seek relative to either begin or end to bring the stream
-			// back to normal state.
-			mpStream->seekg(0, std::ios::end);
-		}
-#endif 		
-		mpStream->clear(); //Clear fail status in case eof was set
-		mpStream->seekg(static_cast<std::ifstream::pos_type>(count), std::ios::cur);
-    }
-	
-	void WriteableFileStreamDataStream::seek( size_t pos )
-    {
-        mpStream->clear(); //Clear fail status in case eof was set
-        mpStream->seekg(static_cast<std::streamoff>(pos), std::ios::beg);
-    }
-
-	size_t WriteableFileStreamDataStream::tell(void) const
-    {
-        mpStream->clear(); //Clear fail status in case eof was set
-		return mpStream->tellg();
-    }
-
-	bool WriteableFileStreamDataStream::eof(void) const
-    {
-        return mpStream->eof();
-    }
-
-    void WriteableFileStreamDataStream::close(void)
-    {
-        if (mpStream)
-        {
-            mpStream->close();
-            if (mFreeOnClose)
-            {
-                // delete the stream too
-                delete mpStream;
-                mpStream = 0;
-            }
-        }
-    }
-
-    std::fstream* WriteableFileStreamDataStream::getFStream()
-    {
-        return mpStream;
-    }
-
-    void WriteableFileStreamDataStream::write(void* buf, size_t count)
-    {
-        mpStream->clear();
-        mpStream->write(static_cast<char*>(buf), static_cast<std::streamsize>(count));   
-    }
-
-    void WriteableFileStreamDataStream::flush()
-    {
-        mpStream->clear();
-        mpStream->put('\0');
-        mpStream->flush();
-    }
-
-    void WriteableFileStreamDataStream::beginWrite()
-    {
-        mpStream->clear();
-        mpStream->seekp(std::ios_base::beg);
-    }
-}

Deleted: rl/branches/persistence2/engine/common/src/WriteableDataStreamFormatTarget.cpp
===================================================================
--- rl/branches/persistence2/engine/common/src/WriteableDataStreamFormatTarget.cpp	2009-05-31 11:24:48 UTC (rev 4943)
+++ rl/branches/persistence2/engine/common/src/WriteableDataStreamFormatTarget.cpp	2009-06-14 12:33:54 UTC (rev 4944)
@@ -1,43 +0,0 @@
-/* This source file is part of Rastullahs Lockenpracht.
- * Copyright (C) 2003-2008 Team Pantheon. http://www.team-pantheon.de
- * 
- *  This program is free software; you can redistribute it and/or modify
- *  it under the terms of the Clarified Artistic License.
- *
- *  This program is distributed in the hope that it will be useful,
- *  but WITHOUT ANY WARRANTY; without even the implied warranty of
- *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- *  Clarified Artistic License for more details.
- *
- *  You should have received a copy of the Clarified Artistic License
- *  along with this program; if not you can get it here
- *  http://www.jpaulmorrison.com/fbp/artistic2.htm.
- */
-
-#include "stdinc.h" //precompiled header
-
-#include "WriteableDataStreamFormatTarget.h"
-
-namespace rl
-{
-    WriteableDataStreamFormatTarget::WriteableDataStreamFormatTarget(WriteableDataStream* stream)
-    {
-        mStream = stream;
-        mStream->beginWrite();
-    }
-
-    void WriteableDataStreamFormatTarget::writeChars (const XMLByte *const toWrite, const unsigned int count, XERCES_CPP_NAMESPACE::XMLFormatter *const formatter)
-    {
-        mStream->write((char*)toWrite, count);
-        /*else
-            LOG_ERROR(Logger::COMMON, "WriteableDataStreamFormatTarget: Stream " + mStream->getName() + " is not writeable");*/
-    }
-
-    void WriteableDataStreamFormatTarget::flush ()
-    {
-        mStream->flush();
-        /*else
-            LOG_ERROR(Logger::COMMON, "WriteableDataStreamFormatTarget: Stream " + mStream->getName() + " is not writeable");*/
-    }
-}
-

Deleted: rl/branches/persistence2/engine/common/src/WriteableFileSystemArchiv.cpp
===================================================================
--- rl/branches/persistence2/engine/common/src/WriteableFileSystemArchiv.cpp	2009-05-31 11:24:48 UTC (rev 4943)
+++ rl/branches/persistence2/engine/common/src/WriteableFileSystemArchiv.cpp	2009-06-14 12:33:54 UTC (rev 4944)
@@ -1,103 +0,0 @@
-/* This source file is part of Rastullahs Lockenpracht.
-* Copyright (C) 2003-2008 Team Pantheon. http://www.team-pantheon.de
-*
-*  This program is free software; you can redistribute it and/or modify
-*  it under the terms of the Clarified Artistic License.
-*
-*  This program is distributed in the hope that it will be useful,
-*  but WITHOUT ANY WARRANTY; without even the implied warranty of
-*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-*  Clarified Artistic License for more details.
-*
-*  You should have received a copy of the Clarified Artistic License
-*  along with this program; if not you can get it here
-*  http://www.jpaulmorrison.com/fbp/artistic2.htm.
-*/
-
-#include "stdinc.h"
-
-#include <sys/types.h>
-#include <sys/stat.h>
-
-#include "WriteableFileSystemArchiv.h"
-
-#if OGRE_PLATFORM == OGRE_PLATFORM_LINUX || OGRE_PLATFORM == OGRE_PLATFORM_APPLE
-#   include <sys/param.h>
-#   define MAX_PATH MAXPATHLEN
-#endif
-
-#if OGRE_PLATFORM == OGRE_PLATFORM_WIN32
-#   include <windows.h>
-#   include <direct.h>
-#   include <io.h>
-#endif
-
-#include "WriteableDataStream.h"
-
-using namespace Ogre;
-
-namespace rl 
-{
-    static bool is_reserved_dir (const char *fn)
-    {
-        return (fn [0] == '.' && (fn [1] == 0 || (fn [1] == '.' && fn [2] == 0)));
-    }
-
-    static bool is_absolute_path(const char* path)
-    {
-#if OGRE_PLATFORM == OGRE_PLATFORM_WIN32
-        if (isalpha(uchar(path[0])) && path[1] == ':')
-            return true;
-#endif
-        return path[0] == '/' || path[0] == '\\';
-    }
-
-    static String concatenate_path(const String& base, const String& name)
-    {
-        if (base.empty() || is_absolute_path(name.c_str()))
-            return name;
-        else
-            return base + '/' + name;
-    }
-
-
-
-    WriteableFileSystemArchive::WriteableFileSystemArchive(const Ogre::String& name, const Ogre::String& archType ) : Ogre::FileSystemArchive(name, archType)
-    {
-    }
-
-    WriteableFileSystemArchive::~WriteableFileSystemArchive()
-    {
-    }
-
-    DataStreamPtr WriteableFileSystemArchive::open(const String& filename) const
-    {
-        LOG_MESSAGE(Logger::COMMON, "Opening WriteableFileStreamDataStream: " + filename);
-        String full_path = concatenate_path(mName, filename);
-
-        // Always open in binary mode
-        std::fstream *origStream = new std::fstream();
-        origStream->open(full_path.c_str(), std::ios::in | std::ios::out | std::ios::binary);
-
-        // Should check ensure open succeeded, in case fail for some reason.
-        if (origStream->fail())
-        {
-            delete origStream;
-            OGRE_EXCEPT(Exception::ERR_FILE_NOT_FOUND,
-                "Cannot open or create file: " + filename,
-                "WriteableFileSystemArchive::open");
-        }
-
-        /// Construct return stream, tell it to delete on destroy
-        WriteableFileStreamDataStream* stream = OGRE_NEW WriteableFileStreamDataStream(filename,
-            origStream, true);
-        return DataStreamPtr(stream);
-    }
-    
-    const String& WriteableFileSystemArchiveFactory::getType(void) const
-    {
-        static String name = "WriteableFileSystem";
-        return name;
-    }
-
-}

Modified: rl/branches/persistence2/engine/core/include/SaveGameFile.h
===================================================================
--- rl/branches/persistence2/engine/core/include/SaveGameFile.h	2009-05-31 11:24:48 UTC (rev 4943)
+++ rl/branches/persistence2/engine/core/include/SaveGameFile.h	2009-06-14 12:33:54 UTC (rev 4944)
@@ -17,18 +17,14 @@
 #ifndef __SaveGameFile_H__
 #define __SaveGameFile_H__
 
-
-
 #include "CorePrerequisites.h"
 #include <xercesc/framework/XMLFormatter.hpp>
 #include <ctime>
 
 #include "Property.h"
 #include "Properties.h"
-#include "WriteableDataStream.h"
 #include "ScriptSerializer.h"
 
-
 namespace rl
 {
     class _RlCoreExport SaveGameFile : public PropertyHolder

Modified: rl/branches/persistence2/engine/core/include/SaveGameManager.h
===================================================================
--- rl/branches/persistence2/engine/core/include/SaveGameManager.h	2009-05-31 11:24:48 UTC (rev 4943)
+++ rl/branches/persistence2/engine/core/include/SaveGameManager.h	2009-06-14 12:33:54 UTC (rev 4944)
@@ -69,6 +69,8 @@
         Ogre::StringVector mScriptPatterns;
         //SaveGameEntryMap mSaveGames;
 
+        SaveGameEntryMap mSaveGames;
+
         SaveGameDataOrderMap mSaveGameDataOrderMap;
 
         int mHighestSaveGameNumber;

Modified: rl/branches/persistence2/engine/core/src/CoreSubsystem.cpp
===================================================================
--- rl/branches/persistence2/engine/core/src/CoreSubsystem.cpp	2009-05-31 11:24:48 UTC (rev 4943)
+++ rl/branches/persistence2/engine/core/src/CoreSubsystem.cpp	2009-06-14 12:33:54 UTC (rev 4944)
@@ -26,7 +26,7 @@
 #include "ContentModule.h"
 #include "ConfigurationManager.h"
 #include "DebugVisualsManager.h"
-#include "GenericWorld.h"
+#include "GenericWorld.h"
 #include "Exception.h"
 #include "GameEventManager.h"
 #include "GameLoop.h"
@@ -40,7 +40,6 @@
 #include "ScriptWrapper.h"
 #include "SoundManager.h"
 #include "TimeSource.h"
-#include "WriteableFileSystemArchiv.h"
 #include "ZoneManager.h"
 
 #include <ctime>
@@ -186,9 +185,6 @@
         // to load plugins.cfg and ogre.cfg
         mOgreRoot = new Root("", "", ConfigurationManager::getSingleton().getOgreLogFile());
 
-        WriteableFileSystemArchiveFactory* factory = new WriteableFileSystemArchiveFactory();
-        ArchiveManager::getSingleton().addArchiveFactory(factory);
-
         // Load Ogre plugins
         Ogre::StringVector pluginList = ConfigurationManager::getSingleton().getPluginList();
         for (Ogre::StringVector::const_iterator it = pluginList.begin(); it < pluginList.end(); it++)
@@ -288,7 +284,7 @@
                 "Video", "Max Anisotropy"));
 
 
-        mWorld = new GenericWorld();
+        mWorld = new GenericWorld();
         mActorManager->setWorld(mWorld);
 
         mPhysicsManager = new PhysicsManager();  // the World needs to be initialized before!
@@ -579,7 +575,7 @@
         return mModules;
     }
 
-    void CoreSubsystem::loadPlugin(const Ogre::String& plugin)
+    void CoreSubsystem::loadPlugin(const Ogre::String& plugin)
     {
         Ogre::String pluginFile;
         

Modified: rl/branches/persistence2/engine/core/src/SaveGameFile.cpp
===================================================================
--- rl/branches/persistence2/engine/core/src/SaveGameFile.cpp	2009-05-31 11:24:48 UTC (rev 4943)
+++ rl/branches/persistence2/engine/core/src/SaveGameFile.cpp	2009-06-14 12:33:54 UTC (rev 4944)
@@ -19,11 +19,11 @@
 #include "SaveGameFile.h"
 #include "SaveGameManager.h"
 #include <xercesc/framework/LocalFileFormatTarget.hpp>
-#include "WriteableDataStreamFormatTarget.h"
 
 #include <ConfigurationManager.h>
 #include <CoreSubsystem.h>
 #include <ContentModule.h>
+#include <OgreDataStream.h>
 
 namespace rl
 {
@@ -64,8 +64,9 @@
 
     XERCES_CPP_NAMESPACE::XMLFormatTarget* SaveGameFile::getFormatTarget()
     {
+        Ogre::String path = "./modules/saves/" + mStream->getName();
         ///@todo: encryption
-        return new WriteableDataStreamFormatTarget(static_cast<WriteableDataStream*>(mStream.get()));
+        return new XERCES_CPP_NAMESPACE::LocalFileFormatTarget(path.c_str());
     }
 
     void SaveGameFile::deleteFileFromStorage()

Modified: rl/branches/persistence2/engine/core/src/SaveGameManager.cpp
===================================================================
--- rl/branches/persistence2/engine/core/src/SaveGameManager.cpp	2009-05-31 11:24:48 UTC (rev 4943)
+++ rl/branches/persistence2/engine/core/src/SaveGameManager.cpp	2009-06-14 12:33:54 UTC (rev 4944)
@@ -237,6 +237,16 @@
 
     void SaveGameManager::parseScript(Ogre::DataStreamPtr &stream, const Ogre::String &groupName)
     {
+        Ogre::String name = stream->getName();
+        name = name.substr(0, name.length()-5); //delete ".save" at the and of the name
+        if(Ogre::StringConverter::isNumber(name))
+        {
+            int saveGameNumber = Ogre::StringConverter::parseInt(name);
+            mHighestSaveGameNumber = std::max(mHighestSaveGameNumber, saveGameNumber);
+
+            LOG_MESSAGE(Logger::CORE, "Parsing header of save game: " + name + ".save");
+        }
+
         //Ogre::String name = stream->getName();
         //name = name.substr(0, name.length()-5); //delete ".save" at the and of the name
         //int pointpos = name.find_last_of(".");
@@ -283,11 +293,11 @@
 
     void SaveGameManager::freeSaveGameMap()
     {
-       /* for(SaveGameEntryMap::const_iterator iter = mSaveGames.begin(); iter != mSaveGames.end(); iter++)
+        for(SaveGameEntryMap::const_iterator iter = mSaveGames.begin(); iter != mSaveGames.end(); iter++)
         {
             delete iter->second;
         }
-        mSaveGames.clear();*/
+        mSaveGames.clear();
     }
 
     int SaveGameManager::getHighestSaveGameNumber()



From timm at mail.berlios.de  Mon Jun 15 20:20:54 2009
From: timm at mail.berlios.de (timm at mail.berlios.de)
Date: Mon, 15 Jun 2009 20:20:54 +0200
Subject: [Dsa-hl-svn] r4945 - in rl/branches/persistence2:
	Mac/Rastullah.xcodeproj editors/Lockenwickler
	editors/Lockenwickler/src editors/Lockenwickler/src/media/terrain
	editors/Lockenwickler/ui files engine/core/include
	engine/core/src engine/ui/src
Message-ID: <200906151820.n5FIKsYI017032@sheep.berlios.de>

Author: timm
Date: 2009-06-15 20:20:42 +0200 (Mon, 15 Jun 2009)
New Revision: 4945

Added:
   rl/branches/persistence2/editors/Lockenwickler/src/TerrainDecalCursor.py
   rl/branches/persistence2/editors/Lockenwickler/src/media/terrain/cursorTex.png
   rl/branches/persistence2/editors/Lockenwickler/src/media/terrain/decalBase.png
Modified:
   rl/branches/persistence2/Mac/Rastullah.xcodeproj/project.pbxproj
   rl/branches/persistence2/editors/Lockenwickler/Lockenwickler.e4p
   rl/branches/persistence2/editors/Lockenwickler/src/Lockenwickler.py
   rl/branches/persistence2/editors/Lockenwickler/src/ModuleManager.py
   rl/branches/persistence2/editors/Lockenwickler/src/MyTerrainManager.py
   rl/branches/persistence2/editors/Lockenwickler/src/PythonOgreConfig.py
   rl/branches/persistence2/editors/Lockenwickler/src/Ui_MyTerrainManagerDock.py
   rl/branches/persistence2/editors/Lockenwickler/ui files/MyTerrainManagerDock.ui
   rl/branches/persistence2/engine/core/include/stdinc.h
   rl/branches/persistence2/engine/core/src/GameAreaTypes.cpp
   rl/branches/persistence2/engine/core/src/PhysicsCollisionFactory.cpp
   rl/branches/persistence2/engine/ui/src/CutsceneControlState.cpp
Log:
merged from trunk

Modified: rl/branches/persistence2/Mac/Rastullah.xcodeproj/project.pbxproj
===================================================================
--- rl/branches/persistence2/Mac/Rastullah.xcodeproj/project.pbxproj	2009-06-14 12:33:54 UTC (rev 4944)
+++ rl/branches/persistence2/Mac/Rastullah.xcodeproj/project.pbxproj	2009-06-15 18:20:42 UTC (rev 4945)
@@ -67,8 +67,6 @@
 		444EAB6D0BD0E2F300C6D4A0 /* CoreSubsystem.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 444EAB2C0BD0E2B600C6D4A0 /* CoreSubsystem.cpp */; };
 		444EAB6E0BD0E2F300C6D4A0 /* DebugVisualisable.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 444EAB2D0BD0E2B600C6D4A0 /* DebugVisualisable.cpp */; };
 		444EAB6F0BD0E2F300C6D4A0 /* DebugVisualsManager.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 444EAB2E0BD0E2B600C6D4A0 /* DebugVisualsManager.cpp */; };
-		444EAB700BD0E2F300C6D4A0 /* DotSceneLoader.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 444EAB2F0BD0E2B600C6D4A0 /* DotSceneLoader.cpp */; };
-		444EAB710BD0E2F300C6D4A0 /* DotSceneOctreeWorld.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 444EAB300BD0E2B600C6D4A0 /* DotSceneOctreeWorld.cpp */; };
 		444EAB720BD0E2F300C6D4A0 /* FadeAnimation.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 444EAB310BD0E2B600C6D4A0 /* FadeAnimation.cpp */; };
 		444EAB730BD0E2F300C6D4A0 /* GameAreaEvent.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 444EAB320BD0E2B600C6D4A0 /* GameAreaEvent.cpp */; };
 		444EAB740BD0E2F300C6D4A0 /* GameAreaEventSource.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 444EAB330BD0E2B600C6D4A0 /* GameAreaEventSource.cpp */; };
@@ -120,8 +118,6 @@
 		444EABEA0BD0E33300C6D4A0 /* CoreSubsystem.h in Headers */ = {isa = PBXBuildFile; fileRef = 444EABA90BD0E33300C6D4A0 /* CoreSubsystem.h */; };
 		444EABEB0BD0E33300C6D4A0 /* DebugVisualisable.h in Headers */ = {isa = PBXBuildFile; fileRef = 444EABAA0BD0E33300C6D4A0 /* DebugVisualisable.h */; };
 		444EABEC0BD0E33300C6D4A0 /* DebugVisualsManager.h in Headers */ = {isa = PBXBuildFile; fileRef = 444EABAB0BD0E33300C6D4A0 /* DebugVisualsManager.h */; };
-		444EABED0BD0E33300C6D4A0 /* DotSceneLoader.h in Headers */ = {isa = PBXBuildFile; fileRef = 444EABAC0BD0E33300C6D4A0 /* DotSceneLoader.h */; };
-		444EABEE0BD0E33300C6D4A0 /* DotSceneOctreeWorld.h in Headers */ = {isa = PBXBuildFile; fileRef = 444EABAD0BD0E33300C6D4A0 /* DotSceneOctreeWorld.h */; };
 		444EABEF0BD0E33300C6D4A0 /* FadeAnimation.h in Headers */ = {isa = PBXBuildFile; fileRef = 444EABAE0BD0E33300C6D4A0 /* FadeAnimation.h */; };
 		444EABF00BD0E33300C6D4A0 /* GameAreaEvent.h in Headers */ = {isa = PBXBuildFile; fileRef = 444EABAF0BD0E33300C6D4A0 /* GameAreaEvent.h */; };
 		444EABF10BD0E33300C6D4A0 /* GameAreaEventSource.h in Headers */ = {isa = PBXBuildFile; fileRef = 444EABB00BD0E33300C6D4A0 /* GameAreaEventSource.h */; };
@@ -593,8 +589,6 @@
 		485B895A0E15796500D5B19C /* Scene.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 485B89570E15796500D5B19C /* Scene.cpp */; };
 		485B895B0E15796500D5B19C /* SceneLoader.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 485B89580E15796500D5B19C /* SceneLoader.cpp */; };
 		485B895C0E15796500D5B19C /* SceneManager.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 485B89590E15796500D5B19C /* SceneManager.cpp */; };
-		4869D5300EF055F500619D4D /* libboost_system.dylib in Resources */ = {isa = PBXBuildFile; fileRef = 48A52CAF0E0EF55C008DBDD8 /* libboost_system.dylib */; };
-		4869D5310EF055F600619D4D /* libboost_filesystem.dylib in Resources */ = {isa = PBXBuildFile; fileRef = 48A52B210E0EDA0E008DBDD8 /* libboost_filesystem.dylib */; };
 		487029C70E80DCEA00B66388 /* GameOverWindow.h in Headers */ = {isa = PBXBuildFile; fileRef = 487029C60E80DCEA00B66388 /* GameOverWindow.h */; };
 		487029C90E80DCF900B66388 /* GameOverWindow.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 487029C80E80DCF900B66388 /* GameOverWindow.cpp */; };
 		487029E80E80E12200B66388 /* PartyManager.h in Headers */ = {isa = PBXBuildFile; fileRef = 487029E70E80E12200B66388 /* PartyManager.h */; };
@@ -635,18 +629,14 @@
 		4890C0E20E18062B00BE5850 /* StepRecognitionMovement.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 4890C0D40E18062B00BE5850 /* StepRecognitionMovement.cpp */; };
 		4890C0E30E18062B00BE5850 /* StrafeMovement.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 4890C0D50E18062B00BE5850 /* StrafeMovement.cpp */; };
 		4890C0E40E18062B00BE5850 /* WalkMovement.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 4890C0D60E18062B00BE5850 /* WalkMovement.cpp */; };
-		48A52B220E0EDA0E008DBDD8 /* libboost_filesystem.dylib in Frameworks */ = {isa = PBXBuildFile; fileRef = 48A52B210E0EDA0E008DBDD8 /* libboost_filesystem.dylib */; };
-		48A52CB00E0EF55C008DBDD8 /* libboost_system.dylib in Frameworks */ = {isa = PBXBuildFile; fileRef = 48A52CAF0E0EF55C008DBDD8 /* libboost_system.dylib */; };
-		48A52CB10E0EF55C008DBDD8 /* libboost_system.dylib in Frameworks */ = {isa = PBXBuildFile; fileRef = 48A52CAF0E0EF55C008DBDD8 /* libboost_system.dylib */; };
-		48A52CB30E0EF577008DBDD8 /* libboost_filesystem.dylib in Frameworks */ = {isa = PBXBuildFile; fileRef = 48A52B210E0EDA0E008DBDD8 /* libboost_filesystem.dylib */; };
+		489864DA0FC4927300736047 /* GenericWorld.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 489864D70FC4927300736047 /* GenericWorld.cpp */; };
+		489864DB0FC4927300736047 /* PhysicsCollisionFactory.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 489864D80FC4927300736047 /* PhysicsCollisionFactory.cpp */; };
+		489864DC0FC4927300736047 /* PhysicsRagDoll.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 489864D90FC4927300736047 /* PhysicsRagDoll.cpp */; };
+		489864E00FC4928B00736047 /* GenericWorld.h in Headers */ = {isa = PBXBuildFile; fileRef = 489864DD0FC4928A00736047 /* GenericWorld.h */; };
+		489864E10FC4928B00736047 /* PhysicsCollisionFactory.h in Headers */ = {isa = PBXBuildFile; fileRef = 489864DE0FC4928B00736047 /* PhysicsCollisionFactory.h */; };
+		489864E20FC4928B00736047 /* PhysicsRagDoll.h in Headers */ = {isa = PBXBuildFile; fileRef = 489864DF0FC4928B00736047 /* PhysicsRagDoll.h */; };
 		48A52CB60E0EF5BD008DBDD8 /* ApplyDamageJob.h in Headers */ = {isa = PBXBuildFile; fileRef = 48A52CB50E0EF5BD008DBDD8 /* ApplyDamageJob.h */; };
 		48A52CB80E0EF5D0008DBDD8 /* ApplyDamageJob.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 48A52CB70E0EF5D0008DBDD8 /* ApplyDamageJob.cpp */; };
-		48A52CBC0E0EF77B008DBDD8 /* libboost_system.dylib in Frameworks */ = {isa = PBXBuildFile; fileRef = 48A52CAF0E0EF55C008DBDD8 /* libboost_system.dylib */; };
-		48A52CBD0E0EF77B008DBDD8 /* libboost_system.dylib in Frameworks */ = {isa = PBXBuildFile; fileRef = 48A52CAF0E0EF55C008DBDD8 /* libboost_system.dylib */; };
-		48A52CBE0E0EF77C008DBDD8 /* libboost_system.dylib in Frameworks */ = {isa = PBXBuildFile; fileRef = 48A52CAF0E0EF55C008DBDD8 /* libboost_system.dylib */; };
-		48A52CBF0E0EF77C008DBDD8 /* libboost_system.dylib in Frameworks */ = {isa = PBXBuildFile; fileRef = 48A52CAF0E0EF55C008DBDD8 /* libboost_system.dylib */; };
-		48A52CC00E0EF77D008DBDD8 /* libboost_system.dylib in Frameworks */ = {isa = PBXBuildFile; fileRef = 48A52CAF0E0EF55C008DBDD8 /* libboost_system.dylib */; };
-		48A52CC20E0EF77E008DBDD8 /* libboost_system.dylib in Frameworks */ = {isa = PBXBuildFile; fileRef = 48A52CAF0E0EF55C008DBDD8 /* libboost_system.dylib */; };
 		48B006C50ECAC05F008141C2 /* CharacterSelectionWindow.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 48B006C40ECAC05F008141C2 /* CharacterSelectionWindow.cpp */; };
 		48B006C80ECAC11D008141C2 /* CharacterSelectionWindow.h in Headers */ = {isa = PBXBuildFile; fileRef = 48B006C70ECAC11D008141C2 /* CharacterSelectionWindow.h */; };
 		48B0B0350E6534690023B198 /* PlaneNodeProcessor.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 48B0B0340E6534690023B198 /* PlaneNodeProcessor.cpp */; };
@@ -668,7 +658,6 @@
 		48CA78D40F2A513100F8E471 /* Fmod4Listener.h in Headers */ = {isa = PBXBuildFile; fileRef = 48CA78D00F2A513100F8E471 /* Fmod4Listener.h */; };
 		48CA78D50F2A513100F8E471 /* Fmod4Sound.h in Headers */ = {isa = PBXBuildFile; fileRef = 48CA78D10F2A513100F8E471 /* Fmod4Sound.h */; };
 		48CA78D60F2A513100F8E471 /* Fmod4SoundStitching.h in Headers */ = {isa = PBXBuildFile; fileRef = 48CA78D20F2A513100F8E471 /* Fmod4SoundStitching.h */; };
-		48CA78D80F2A51A400F8E471 /* libfmodex.dylib in Frameworks */ = {isa = PBXBuildFile; fileRef = 48CA78D70F2A51A400F8E471 /* libfmodex.dylib */; };
 		48CFBF8F0E2E869000CD0C51 /* FreeType.framework in Copy Frameworks */ = {isa = PBXBuildFile; fileRef = 48CFBF8E0E2E869000CD0C51 /* FreeType.framework */; };
 		48D0BDC70E23375E00863824 /* libruby.dylib in Copy Frameworks */ = {isa = PBXBuildFile; fileRef = 483646A10D83D57800912FEC /* libruby.dylib */; };
 		48D0BE2C0E273C5E00863824 /* SaveAble.h in Headers */ = {isa = PBXBuildFile; fileRef = 48D0BE280E273C5E00863824 /* SaveAble.h */; };
@@ -696,6 +685,15 @@
 		48D34A810D91C7D800C89477 /* SaveGameManager.h in Headers */ = {isa = PBXBuildFile; fileRef = 485A05710D71EDC40024198D /* SaveGameManager.h */; };
 		48EFE0A40E8B6AF6007EB7F8 /* FetchItemJob.h in Headers */ = {isa = PBXBuildFile; fileRef = 48EFE0A30E8B6AF6007EB7F8 /* FetchItemJob.h */; };
 		48EFE0A60E8B6C39007EB7F8 /* FetchItemJob.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 48EFE0A50E8B6C39007EB7F8 /* FetchItemJob.cpp */; };
+		48FF23FD0FC99D3D00E71D4D /* libboost_system-mt.dylib in Frameworks */ = {isa = PBXBuildFile; fileRef = 48FF23FC0FC99D3D00E71D4D /* libboost_system-mt.dylib */; };
+		48FF24000FC99D8700E71D4D /* libboost_filesystem-mt.dylib in Frameworks */ = {isa = PBXBuildFile; fileRef = 48FF23FF0FC99D8700E71D4D /* libboost_filesystem-mt.dylib */; };
+		48FF240A0FC99F2900E71D4D /* libfmodex.dylib in Frameworks */ = {isa = PBXBuildFile; fileRef = 48B0B0480E65BBB30023B198 /* libfmodex.dylib */; };
+		48FF240C0FC99F4800E71D4D /* libboost_filesystem-mt.dylib in Frameworks */ = {isa = PBXBuildFile; fileRef = 48FF23FF0FC99D8700E71D4D /* libboost_filesystem-mt.dylib */; };
+		48FF24160FC9A19600E71D4D /* libboost_system-mt.dylib in Frameworks */ = {isa = PBXBuildFile; fileRef = 48FF23FC0FC99D3D00E71D4D /* libboost_system-mt.dylib */; };
+		48FF24560FC9A4F600E71D4D /* libboost_system-mt.dylib in Frameworks */ = {isa = PBXBuildFile; fileRef = 48FF23FC0FC99D3D00E71D4D /* libboost_system-mt.dylib */; };
+		48FF245A0FC9A53A00E71D4D /* libboost_system-mt.dylib in Frameworks */ = {isa = PBXBuildFile; fileRef = 48FF23FC0FC99D3D00E71D4D /* libboost_system-mt.dylib */; };
+		48FF245C0FC9A58000E71D4D /* libboost_system-mt.dylib in Frameworks */ = {isa = PBXBuildFile; fileRef = 48FF23FC0FC99D3D00E71D4D /* libboost_system-mt.dylib */; };
+		48FF245E0FC9A59D00E71D4D /* libboost_system-mt.dylib in Frameworks */ = {isa = PBXBuildFile; fileRef = 48FF23FC0FC99D3D00E71D4D /* libboost_system-mt.dylib */; };
 		8D0C4E8D0486CD37000505A6 /* InfoPlist.strings in Resources */ = {isa = PBXBuildFile; fileRef = 0867D6AAFE840B52C02AAC07 /* InfoPlist.strings */; };
 		8D0C4E8E0486CD37000505A6 /* main.nib in Resources */ = {isa = PBXBuildFile; fileRef = 02345980000FD03B11CA0E72 /* main.nib */; };
 /* End PBXBuildFile section */
@@ -945,8 +943,6 @@
 		444EAB2C0BD0E2B600C6D4A0 /* CoreSubsystem.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = CoreSubsystem.cpp; sourceTree = "<group>"; };
 		444EAB2D0BD0E2B600C6D4A0 /* DebugVisualisable.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = DebugVisualisable.cpp; sourceTree = "<group>"; };
 		444EAB2E0BD0E2B600C6D4A0 /* DebugVisualsManager.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = DebugVisualsManager.cpp; sourceTree = "<group>"; };
-		444EAB2F0BD0E2B600C6D4A0 /* DotSceneLoader.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = DotSceneLoader.cpp; sourceTree = "<group>"; };
-		444EAB300BD0E2B600C6D4A0 /* DotSceneOctreeWorld.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = DotSceneOctreeWorld.cpp; sourceTree = "<group>"; };
 		444EAB310BD0E2B600C6D4A0 /* FadeAnimation.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = FadeAnimation.cpp; sourceTree = "<group>"; };
 		444EAB320BD0E2B600C6D4A0 /* GameAreaEvent.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = GameAreaEvent.cpp; sourceTree = "<group>"; };
 		444EAB330BD0E2B600C6D4A0 /* GameAreaEventSource.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = GameAreaEventSource.cpp; sourceTree = "<group>"; };
@@ -999,8 +995,6 @@
 		444EABA90BD0E33300C6D4A0 /* CoreSubsystem.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = CoreSubsystem.h; sourceTree = "<group>"; };
 		444EABAA0BD0E33300C6D4A0 /* DebugVisualisable.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = DebugVisualisable.h; sourceTree = "<group>"; };
 		444EABAB0BD0E33300C6D4A0 /* DebugVisualsManager.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = DebugVisualsManager.h; sourceTree = "<group>"; };
-		444EABAC0BD0E33300C6D4A0 /* DotSceneLoader.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = DotSceneLoader.h; sourceTree = "<group>"; };
-		444EABAD0BD0E33300C6D4A0 /* DotSceneOctreeWorld.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = DotSceneOctreeWorld.h; sourceTree = "<group>"; };
 		444EABAE0BD0E33300C6D4A0 /* FadeAnimation.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = FadeAnimation.h; sourceTree = "<group>"; };
 		444EABAF0BD0E33300C6D4A0 /* GameAreaEvent.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = GameAreaEvent.h; sourceTree = "<group>"; };
 		444EABB00BD0E33300C6D4A0 /* GameAreaEventSource.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = GameAreaEventSource.h; sourceTree = "<group>"; };
@@ -1460,8 +1454,12 @@
 		4890C0D40E18062B00BE5850 /* StepRecognitionMovement.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = StepRecognitionMovement.cpp; sourceTree = "<group>"; };
 		4890C0D50E18062B00BE5850 /* StrafeMovement.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = StrafeMovement.cpp; sourceTree = "<group>"; };
 		4890C0D60E18062B00BE5850 /* WalkMovement.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = WalkMovement.cpp; sourceTree = "<group>"; };
-		48A52B210E0EDA0E008DBDD8 /* libboost_filesystem.dylib */ = {isa = PBXFileReference; lastKnownFileType = "compiled.mach-o.dylib"; name = libboost_filesystem.dylib; path = /usr/local/lib/libboost_filesystem.dylib; sourceTree = "<absolute>"; };
-		48A52CAF0E0EF55C008DBDD8 /* libboost_system.dylib */ = {isa = PBXFileReference; lastKnownFileType = "compiled.mach-o.dylib"; name = libboost_system.dylib; path = /usr/local/lib/libboost_system.dylib; sourceTree = "<absolute>"; };
+		489864D70FC4927300736047 /* GenericWorld.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = GenericWorld.cpp; sourceTree = "<group>"; };
+		489864D80FC4927300736047 /* PhysicsCollisionFactory.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = PhysicsCollisionFactory.cpp; sourceTree = "<group>"; };
+		489864D90FC4927300736047 /* PhysicsRagDoll.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = PhysicsRagDoll.cpp; sourceTree = "<group>"; };
+		489864DD0FC4928A00736047 /* GenericWorld.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = GenericWorld.h; sourceTree = "<group>"; };
+		489864DE0FC4928B00736047 /* PhysicsCollisionFactory.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = PhysicsCollisionFactory.h; sourceTree = "<group>"; };
+		489864DF0FC4928B00736047 /* PhysicsRagDoll.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = PhysicsRagDoll.h; sourceTree = "<group>"; };
 		48A52CB50E0EF5BD008DBDD8 /* ApplyDamageJob.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = ApplyDamageJob.h; sourceTree = "<group>"; };
 		48A52CB70E0EF5D0008DBDD8 /* ApplyDamageJob.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = ApplyDamageJob.cpp; sourceTree = "<group>"; };
 		48B006C40ECAC05F008141C2 /* CharacterSelectionWindow.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = CharacterSelectionWindow.cpp; sourceTree = "<group>"; };
@@ -1486,7 +1484,6 @@
 		48CA78D00F2A513100F8E471 /* Fmod4Listener.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = Fmod4Listener.h; path = fmod4driver/Fmod4Listener.h; sourceTree = "<group>"; };
 		48CA78D10F2A513100F8E471 /* Fmod4Sound.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = Fmod4Sound.h; path = fmod4driver/Fmod4Sound.h; sourceTree = "<group>"; };
 		48CA78D20F2A513100F8E471 /* Fmod4SoundStitching.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = Fmod4SoundStitching.h; path = fmod4driver/Fmod4SoundStitching.h; sourceTree = "<group>"; };
-		48CA78D70F2A51A400F8E471 /* libfmodex.dylib */ = {isa = PBXFileReference; lastKnownFileType = "compiled.mach-o.dylib"; name = libfmodex.dylib; path = "FMOD Programmers API/api/lib/libfmodex.dylib"; sourceTree = SYSTEM_DEVELOPER_DIR; };
 		48CFBF8E0E2E869000CD0C51 /* FreeType.framework */ = {isa = PBXFileReference; lastKnownFileType = wrapper.framework; name = FreeType.framework; path = /Library/Frameworks/FreeType.framework; sourceTree = "<absolute>"; };
 		48D0BE280E273C5E00863824 /* SaveAble.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = SaveAble.h; sourceTree = "<group>"; };
 		48D0BE290E273C5E00863824 /* SaveAbleCollection.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = SaveAbleCollection.h; sourceTree = "<group>"; };
@@ -1511,6 +1508,8 @@
 		48EFE0A50E8B6C39007EB7F8 /* FetchItemJob.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = FetchItemJob.cpp; sourceTree = "<group>"; };
 		48EFE0D70E8B6EB1007EB7F8 /* mkdmg.sh */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.script.sh; path = mkdmg.sh; sourceTree = "<group>"; };
 		48EFE0D80E8B6EB1007EB7F8 /* renameinstalldirs.sh */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.script.sh; path = renameinstalldirs.sh; sourceTree = "<group>"; };
+		48FF23FC0FC99D3D00E71D4D /* libboost_system-mt.dylib */ = {isa = PBXFileReference; lastKnownFileType = "compiled.mach-o.dylib"; name = "libboost_system-mt.dylib"; path = "/opt/local/lib/libboost_system-mt.dylib"; sourceTree = "<absolute>"; };
+		48FF23FF0FC99D8700E71D4D /* libboost_filesystem-mt.dylib */ = {isa = PBXFileReference; lastKnownFileType = "compiled.mach-o.dylib"; name = "libboost_filesystem-mt.dylib"; path = "/opt/local/lib/libboost_filesystem-mt.dylib"; sourceTree = "<absolute>"; };
 		8D0C4E960486CD37000505A6 /* Info.plist */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.plist; path = Info.plist; sourceTree = "<group>"; };
 		8D0C4E970486CD37000505A6 /* Rastullah.app */ = {isa = PBXFileReference; explicitFileType = wrapper.application; includeInIndex = 0; path = Rastullah.app; sourceTree = BUILT_PRODUCTS_DIR; };
 /* End PBXFileReference section */
@@ -1520,12 +1519,12 @@
 			isa = PBXFrameworksBuildPhase;
 			buildActionMask = 2147483647;
 			files = (
-				48A52B220E0EDA0E008DBDD8 /* libboost_filesystem.dylib in Frameworks */,
 				444EAEBF0BD0F09900C6D4A0 /* CEGUI.framework in Frameworks */,
 				444EAEC00BD0F09900C6D4A0 /* Ogre.framework in Frameworks */,
 				4836CBCE0D8FB0BE002FE5D7 /* Xerces.framework in Frameworks */,
-				48A52CB00E0EF55C008DBDD8 /* libboost_system.dylib in Frameworks */,
 				484FE6BA0E17BC8800FA880F /* Carbon.framework in Frameworks */,
+				48FF23FD0FC99D3D00E71D4D /* libboost_system-mt.dylib in Frameworks */,
+				48FF24000FC99D8700E71D4D /* libboost_filesystem-mt.dylib in Frameworks */,
 			);
 			runOnlyForDeploymentPostprocessing = 0;
 		};
@@ -1533,17 +1532,17 @@
 			isa = PBXFrameworksBuildPhase;
 			buildActionMask = 2147483647;
 			files = (
-				48A52CB30E0EF577008DBDD8 /* libboost_filesystem.dylib in Frameworks */,
+				48FF24160FC9A19600E71D4D /* libboost_system-mt.dylib in Frameworks */,
 				444EB0AB0BD115CB00C6D4A0 /* libRlCommon.dylib in Frameworks */,
+				48FF240C0FC99F4800E71D4D /* libboost_filesystem-mt.dylib in Frameworks */,
+				48FF240A0FC99F2900E71D4D /* libfmodex.dylib in Frameworks */,
 				483646A20D83D57800912FEC /* libruby.dylib in Frameworks */,
 				444EAEF30BD1150500C6D4A0 /* CEGUI.framework in Frameworks */,
 				444EAEF60BD1150500C6D4A0 /* Ogre.framework in Frameworks */,
 				444EB0890BD1153500C6D4A0 /* OgreNewt.framework in Frameworks */,
 				440785DE0C09D231006E496D /* libmeshmagick.dylib in Frameworks */,
 				4836CBCD0D8FB0BE002FE5D7 /* Xerces.framework in Frameworks */,
-				48A52CB10E0EF55C008DBDD8 /* libboost_system.dylib in Frameworks */,
 				484FE6BC0E17BC8800FA880F /* Carbon.framework in Frameworks */,
-				48CA78D80F2A51A400F8E471 /* libfmodex.dylib in Frameworks */,
 			);
 			runOnlyForDeploymentPostprocessing = 0;
 		};
@@ -1555,12 +1554,12 @@
 				444EB34A0BD173A900C6D4A0 /* libRlRules.dylib in Frameworks */,
 				444EB12D0BD11A0C00C6D4A0 /* libRlCore.dylib in Frameworks */,
 				444EB1290BD119FB00C6D4A0 /* libRlCommon.dylib in Frameworks */,
+				48FF245A0FC9A53A00E71D4D /* libboost_system-mt.dylib in Frameworks */,
 				444EB0D40BD1198B00C6D4A0 /* CEGUI.framework in Frameworks */,
 				444EB0D60BD1198B00C6D4A0 /* Ogre.framework in Frameworks */,
 				444EB0D80BD1198B00C6D4A0 /* OgreNewt.framework in Frameworks */,
 				444EB0DB0BD119BB00C6D4A0 /* OpenSteer.framework in Frameworks */,
 				4836CBCC0D8FB0BE002FE5D7 /* Xerces.framework in Frameworks */,
-				48A52CBC0E0EF77B008DBDD8 /* libboost_system.dylib in Frameworks */,
 				484FE6BD0E17BC8800FA880F /* Carbon.framework in Frameworks */,
 			);
 			runOnlyForDeploymentPostprocessing = 0;
@@ -1569,6 +1568,7 @@
 			isa = PBXFrameworksBuildPhase;
 			buildActionMask = 2147483647;
 			files = (
+				48FF24560FC9A4F600E71D4D /* libboost_system-mt.dylib in Frameworks */,
 				440785EB0C09D377006E496D /* libmeshmagick.dylib in Frameworks */,
 				444EB3480BD1733900C6D4A0 /* OgreNewt.framework in Frameworks */,
 				444EB3440BD1730C00C6D4A0 /* libRlCommon.dylib in Frameworks */,
@@ -1576,7 +1576,6 @@
 				444EB3410BD172BA00C6D4A0 /* CEGUI.framework in Frameworks */,
 				444EB3420BD172BA00C6D4A0 /* Ogre.framework in Frameworks */,
 				4836CBCB0D8FB0BE002FE5D7 /* Xerces.framework in Frameworks */,
-				48A52CBD0E0EF77B008DBDD8 /* libboost_system.dylib in Frameworks */,
 				484FE6BE0E17BC8800FA880F /* Carbon.framework in Frameworks */,
 			);
 			runOnlyForDeploymentPostprocessing = 0;
@@ -1585,6 +1584,7 @@
 			isa = PBXFrameworksBuildPhase;
 			buildActionMask = 2147483647;
 			files = (
+				48FF245C0FC9A58000E71D4D /* libboost_system-mt.dylib in Frameworks */,
 				48389BC70D86764600AFAB66 /* libRlAi.dylib in Frameworks */,
 				444EB3610BD1756B00C6D4A0 /* libRlRules.dylib in Frameworks */,
 				444EB1CE0BD1595100C6D4A0 /* OgreNewt.framework in Frameworks */,
@@ -1595,7 +1595,6 @@
 				444EB3730BD1784A00C6D4A0 /* OgreCEGUIRenderer.framework in Frameworks */,
 				4857E4E50D46A664009D376D /* OIS.framework in Frameworks */,
 				4836CBCA0D8FB0BE002FE5D7 /* Xerces.framework in Frameworks */,
-				48A52CBE0E0EF77C008DBDD8 /* libboost_system.dylib in Frameworks */,
 				484FE6BF0E17BC8800FA880F /* Carbon.framework in Frameworks */,
 			);
 			runOnlyForDeploymentPostprocessing = 0;
@@ -1605,7 +1604,6 @@
 			buildActionMask = 2147483647;
 			files = (
 				483D87CE0D8C564400F3629E /* libRlScript.dylib in Frameworks */,
-				48A52CC00E0EF77D008DBDD8 /* libboost_system.dylib in Frameworks */,
 				484FE6C20E17BC8800FA880F /* Carbon.framework in Frameworks */,
 			);
 			runOnlyForDeploymentPostprocessing = 0;
@@ -1624,7 +1622,6 @@
 				48570C480D8A6E9900096E35 /* libRlRules.dylib in Frameworks */,
 				48570C490D8A6E9900096E35 /* libRlUi.dylib in Frameworks */,
 				4836CBC90D8FB0BE002FE5D7 /* Xerces.framework in Frameworks */,
-				48A52CBF0E0EF77C008DBDD8 /* libboost_system.dylib in Frameworks */,
 				484FE6C00E17BC8800FA880F /* Carbon.framework in Frameworks */,
 			);
 			runOnlyForDeploymentPostprocessing = 0;
@@ -1640,6 +1637,7 @@
 			isa = PBXFrameworksBuildPhase;
 			buildActionMask = 2147483647;
 			files = (
+				48FF245E0FC9A59D00E71D4D /* libboost_system-mt.dylib in Frameworks */,
 				444EB7A20BD1963A00C6D4A0 /* CEGUI.framework in Frameworks */,
 				444EB7A80BD1963A00C6D4A0 /* Ogre.framework in Frameworks */,
 				444EB7A90BD1963A00C6D4A0 /* OgreCEGUIRenderer.framework in Frameworks */,
@@ -1652,7 +1650,6 @@
 				444EB7A00BD195E800C6D4A0 /* libRlUi.dylib in Frameworks */,
 				4836F8BC0D885AAA00E3632F /* libruby.dylib in Frameworks */,
 				48570E020D8A6F8300096E35 /* libRlScript.dylib in Frameworks */,
-				48A52CC20E0EF77E008DBDD8 /* libboost_system.dylib in Frameworks */,
 				484FE6BB0E17BC8800FA880F /* Carbon.framework in Frameworks */,
 			);
 			runOnlyForDeploymentPostprocessing = 0;
@@ -1679,7 +1676,6 @@
 		20286C29FDCF999611CA2CEA /* Rastullah */ = {
 			isa = PBXGroup;
 			children = (
-				48CA78D70F2A51A400F8E471 /* libfmodex.dylib */,
 				20286C2AFDCF999611CA2CEA /* Engine */,
 				48D401810D9E483200AE5340 /* modules */,
 				20286C2CFDCF999611CA2CEA /* Resources */,
@@ -1719,13 +1715,13 @@
 		20286C32FDCF999611CA2CEA /* External Frameworks and Libraries */ = {
 			isa = PBXGroup;
 			children = (
+				48FF23FC0FC99D3D00E71D4D /* libboost_system-mt.dylib */,
+				48FF23FF0FC99D8700E71D4D /* libboost_filesystem-mt.dylib */,
 				487750AF0E7E3C9C0018216B /* Cg.framework */,
 				48C04B890E67DF0300CD3A7D /* PCRE.framework */,
 				48B0B0480E65BBB30023B198 /* libfmodex.dylib */,
 				48CFBF8E0E2E869000CD0C51 /* FreeType.framework */,
 				484FE6B90E17BC8800FA880F /* Carbon.framework */,
-				48A52CAF0E0EF55C008DBDD8 /* libboost_system.dylib */,
-				48A52B210E0EDA0E008DBDD8 /* libboost_filesystem.dylib */,
 				4836CBC80D8FB0BE002FE5D7 /* Xerces.framework */,
 				4857E4E40D46A664009D376D /* OIS.framework */,
 				440785DD0C09D231006E496D /* libmeshmagick.dylib */,
@@ -1959,6 +1955,9 @@
 		4851EA4C0EDDC82400AB79E9 /* Source */ = {
 			isa = PBXGroup;
 			children = (
+				489864D70FC4927300736047 /* GenericWorld.cpp */,
+				489864D80FC4927300736047 /* PhysicsCollisionFactory.cpp */,
+				489864D90FC4927300736047 /* PhysicsRagDoll.cpp */,
 				48CA78C70F2A511E00F8E471 /* Fmod4Driver.cpp */,
 				48CA78C80F2A511E00F8E471 /* Fmod4Listener.cpp */,
 				48CA78C90F2A511E00F8E471 /* Fmod4Sound.cpp */,
@@ -2000,8 +1999,6 @@
 				444EAB2C0BD0E2B600C6D4A0 /* CoreSubsystem.cpp */,
 				444EAB2D0BD0E2B600C6D4A0 /* DebugVisualisable.cpp */,
 				444EAB2E0BD0E2B600C6D4A0 /* DebugVisualsManager.cpp */,
-				444EAB2F0BD0E2B600C6D4A0 /* DotSceneLoader.cpp */,
-				444EAB300BD0E2B600C6D4A0 /* DotSceneOctreeWorld.cpp */,
 				444EAB310BD0E2B600C6D4A0 /* FadeAnimation.cpp */,
 				444EAB320BD0E2B600C6D4A0 /* GameAreaEvent.cpp */,
 				444EAB330BD0E2B600C6D4A0 /* GameAreaEventSource.cpp */,
@@ -2048,6 +2045,9 @@
 		4851EA4D0EDDC8CA00AB79E9 /* Header */ = {
 			isa = PBXGroup;
 			children = (
+				489864DD0FC4928A00736047 /* GenericWorld.h */,
+				489864DE0FC4928B00736047 /* PhysicsCollisionFactory.h */,
+				489864DF0FC4928B00736047 /* PhysicsRagDoll.h */,
 				48CA78CF0F2A513100F8E471 /* Fmod4Driver.h */,
 				48CA78D00F2A513100F8E471 /* Fmod4Listener.h */,
 				48CA78D10F2A513100F8E471 /* Fmod4Sound.h */,
@@ -2092,8 +2092,6 @@
 				444EABA90BD0E33300C6D4A0 /* CoreSubsystem.h */,
 				444EABAA0BD0E33300C6D4A0 /* DebugVisualisable.h */,
 				444EABAB0BD0E33300C6D4A0 /* DebugVisualsManager.h */,
-				444EABAC0BD0E33300C6D4A0 /* DotSceneLoader.h */,
-				444EABAD0BD0E33300C6D4A0 /* DotSceneOctreeWorld.h */,
 				444EABAE0BD0E33300C6D4A0 /* FadeAnimation.h */,
 				444EABAF0BD0E33300C6D4A0 /* GameAreaEvent.h */,
 				444EABB00BD0E33300C6D4A0 /* GameAreaEventSource.h */,
@@ -2565,8 +2563,6 @@
 				444EABEA0BD0E33300C6D4A0 /* CoreSubsystem.h in Headers */,
 				444EABEB0BD0E33300C6D4A0 /* DebugVisualisable.h in Headers */,
 				444EABEC0BD0E33300C6D4A0 /* DebugVisualsManager.h in Headers */,
-				444EABED0BD0E33300C6D4A0 /* DotSceneLoader.h in Headers */,
-				444EABEE0BD0E33300C6D4A0 /* DotSceneOctreeWorld.h in Headers */,
 				444EABEF0BD0E33300C6D4A0 /* FadeAnimation.h in Headers */,
 				444EABF00BD0E33300C6D4A0 /* GameAreaEvent.h in Headers */,
 				444EABF10BD0E33300C6D4A0 /* GameAreaEventSource.h in Headers */,
@@ -2639,6 +2635,9 @@
 				48CA78D40F2A513100F8E471 /* Fmod4Listener.h in Headers */,
 				48CA78D50F2A513100F8E471 /* Fmod4Sound.h in Headers */,
 				48CA78D60F2A513100F8E471 /* Fmod4SoundStitching.h in Headers */,
+				489864E00FC4928B00736047 /* GenericWorld.h in Headers */,
+				489864E10FC4928B00736047 /* PhysicsCollisionFactory.h in Headers */,
+				489864E20FC4928B00736047 /* PhysicsRagDoll.h in Headers */,
 			);
 			runOnlyForDeploymentPostprocessing = 0;
 		};
@@ -3081,8 +3080,6 @@
 			isa = PBXResourcesBuildPhase;
 			buildActionMask = 2147483647;
 			files = (
-				4869D5300EF055F500619D4D /* libboost_system.dylib in Resources */,
-				4869D5310EF055F600619D4D /* libboost_filesystem.dylib in Resources */,
 				48B0B03C0E6535AB0023B198 /* libmeshmagick.dylib in Resources */,
 				484D921E0E1E078100BCFC2B /* libRlCommon.dylib in Resources */,
 				484D921F0E1E078100BCFC2B /* libRlCore.dylib in Resources */,
@@ -3190,8 +3187,6 @@
 				483646C50D83D62E00912FEC /* SaveGameManager.cpp in Sources */,
 				444EAB6E0BD0E2F300C6D4A0 /* DebugVisualisable.cpp in Sources */,
 				444EAB6F0BD0E2F300C6D4A0 /* DebugVisualsManager.cpp in Sources */,
-				444EAB700BD0E2F300C6D4A0 /* DotSceneLoader.cpp in Sources */,
-				444EAB710BD0E2F300C6D4A0 /* DotSceneOctreeWorld.cpp in Sources */,
 				444EAB720BD0E2F300C6D4A0 /* FadeAnimation.cpp in Sources */,
 				444EAB730BD0E2F300C6D4A0 /* GameAreaEvent.cpp in Sources */,
 				444EAB740BD0E2F300C6D4A0 /* GameAreaEventSource.cpp in Sources */,
@@ -3254,6 +3249,9 @@
 				48CA78CC0F2A511E00F8E471 /* Fmod4Listener.cpp in Sources */,
 				48CA78CD0F2A511E00F8E471 /* Fmod4Sound.cpp in Sources */,
 				48CA78CE0F2A511E00F8E471 /* Fmod4SoundStitching.cpp in Sources */,
+				489864DA0FC4927300736047 /* GenericWorld.cpp in Sources */,
+				489864DB0FC4927300736047 /* PhysicsCollisionFactory.cpp in Sources */,
+				489864DC0FC4927300736047 /* PhysicsRagDoll.cpp in Sources */,
 			);
 			runOnlyForDeploymentPostprocessing = 0;
 		};
@@ -3624,8 +3622,7 @@
 				);
 				INSTALL_PATH = "@executable_path/../Resources";
 				LIBRARY_SEARCH_PATHS = (
-					/sw/lib,
-					/usr/local/lib,
+					"$(inherited)",
 					/opt/local/lib,
 				);
 				MACH_O_TYPE = mh_dylib;
@@ -3700,9 +3697,11 @@
 					"$(LIBRARY_SEARCH_PATHS_QUOTED_FOR_TARGET_1)",
 					/opt/local/lib,
 					"$(LIBRARY_SEARCH_PATHS_QUOTED_FOR_TARGET_2)",
+					"$(LIBRARY_SEARCH_PATHS_QUOTED_FOR_TARGET_3)",
 				);
 				LIBRARY_SEARCH_PATHS_QUOTED_FOR_TARGET_1 = "\"$(SYSTEM_LIBRARY_DIR)/Frameworks/Ruby.framework/Versions/1.8/usr/lib\"";
 				LIBRARY_SEARCH_PATHS_QUOTED_FOR_TARGET_2 = "\"$(DEVELOPER_DIR)/FMOD Programmers API/api/lib\"";
+				LIBRARY_SEARCH_PATHS_QUOTED_FOR_TARGET_3 = "\"$(DEVELOPER_DIR)/FMOD Programmers API/api/lib\"";
 				MACH_O_TYPE = mh_dylib;
 				OTHER_LDFLAGS = "";
 				PREBINDING = NO;
@@ -3746,9 +3745,11 @@
 					"$(LIBRARY_SEARCH_PATHS_QUOTED_FOR_TARGET_1)",
 					/opt/local/lib,
 					"$(LIBRARY_SEARCH_PATHS_QUOTED_FOR_TARGET_2)",
+					"$(LIBRARY_SEARCH_PATHS_QUOTED_FOR_TARGET_3)",
 				);
 				LIBRARY_SEARCH_PATHS_QUOTED_FOR_TARGET_1 = "\"$(SYSTEM_LIBRARY_DIR)/Frameworks/Ruby.framework/Versions/1.8/usr/lib\"";
 				LIBRARY_SEARCH_PATHS_QUOTED_FOR_TARGET_2 = "\"$(DEVELOPER_DIR)/FMOD Programmers API/api/lib\"";
+				LIBRARY_SEARCH_PATHS_QUOTED_FOR_TARGET_3 = "\"$(DEVELOPER_DIR)/FMOD Programmers API/api/lib\"";
 				OTHER_LDFLAGS = "";
 				PREBINDING = NO;
 				PRODUCT_NAME = RlCore;
@@ -3783,8 +3784,7 @@
 				INSTALL_PATH = "@executable_path/../Resources";
 				LIBRARY_SEARCH_PATHS = (
 					"$(inherited)",
-					"$(LIBRARY_SEARCH_PATHS_QUOTED_1)",
-					/sw/lib,
+					/opt/local/lib,
 				);
 				LIBRARY_SEARCH_PATHS_QUOTED_1 = "\"$(SRCROOT)/build/Debug\"";
 				MACH_O_TYPE = mh_dylib;
@@ -3819,8 +3819,7 @@
 				INSTALL_PATH = "@executable_path/../Resources";
 				LIBRARY_SEARCH_PATHS = (
 					"$(inherited)",
-					"$(LIBRARY_SEARCH_PATHS_QUOTED_1)",
-					/sw/lib,
+					/opt/local/lib,
 				);
 				LIBRARY_SEARCH_PATHS_QUOTED_1 = "\"$(SRCROOT)/build/Debug\"";
 				OTHER_LDFLAGS = "";
@@ -3857,6 +3856,7 @@
 				LIBRARY_SEARCH_PATHS = (
 					"$(inherited)",
 					"$(LIBRARY_SEARCH_PATHS_QUOTED_1)",
+					/opt/local/lib,
 				);
 				LIBRARY_SEARCH_PATHS_QUOTED_1 = "\"$(SRCROOT)/build/Debug\"";
 				MACH_O_TYPE = mh_dylib;
@@ -3893,6 +3893,7 @@
 				LIBRARY_SEARCH_PATHS = (
 					"$(inherited)",
 					"$(LIBRARY_SEARCH_PATHS_QUOTED_1)",
+					/opt/local/lib,
 				);
 				LIBRARY_SEARCH_PATHS_QUOTED_1 = "\"$(SRCROOT)/build/Debug\"";
 				OTHER_LDFLAGS = "";
@@ -3929,7 +3930,10 @@
 					/Library/Frameworks/Xerces.framework/Headers,
 				);
 				INSTALL_PATH = "@executable_path/../Resources";
-				LIBRARY_SEARCH_PATHS = "$(inherited)";
+				LIBRARY_SEARCH_PATHS = (
+					"$(inherited)",
+					/opt/local/lib,
+				);
 				LIBRARY_SEARCH_PATHS_QUOTED_1 = "\"$(SRCROOT)/build/Debug\"";
 				MACH_O_TYPE = mh_dylib;
 				OTHER_LDFLAGS = (
@@ -3969,6 +3973,7 @@
 				LIBRARY_SEARCH_PATHS = (
 					"$(inherited)",
 					"$(LIBRARY_SEARCH_PATHS_QUOTED_1)",
+					/opt/local/lib,
 				);
 				LIBRARY_SEARCH_PATHS_QUOTED_1 = "\"$(SRCROOT)/build/Debug\"";
 				OTHER_LDFLAGS = (
@@ -4183,6 +4188,7 @@
 					"$(LIBRARY_SEARCH_PATHS_QUOTED_FOR_TARGET_2)",
 					"$(LIBRARY_SEARCH_PATHS_QUOTED_FOR_TARGET_3)",
 					"$(LIBRARY_SEARCH_PATHS_QUOTED_FOR_TARGET_4)",
+					/opt/local/lib,
 				);
 				LIBRARY_SEARCH_PATHS_QUOTED_FOR_TARGET_1 = "\"$(SRCROOT)/build/Debug\"";
 				LIBRARY_SEARCH_PATHS_QUOTED_FOR_TARGET_2 = "\"$(SYSTEM_LIBRARY_DIR)/Frameworks/Ruby.framework/Versions/1.8/usr/lib\"";
@@ -4217,6 +4223,7 @@
 					"$(LIBRARY_SEARCH_PATHS_QUOTED_2)",
 					"$(LIBRARY_SEARCH_PATHS_QUOTED_3)",
 					"$(LIBRARY_SEARCH_PATHS_QUOTED_FOR_TARGET_1)",
+					/opt/local/lib,
 				);
 				LIBRARY_SEARCH_PATHS_QUOTED_1 = "\"$(SRCROOT)/build/Debug\"";
 				LIBRARY_SEARCH_PATHS_QUOTED_2 = "\"$(SYSTEM_LIBRARY_DIR)/Frameworks/Ruby.framework/Versions/1.8/usr/lib\"";

Modified: rl/branches/persistence2/editors/Lockenwickler/Lockenwickler.e4p
===================================================================
--- rl/branches/persistence2/editors/Lockenwickler/Lockenwickler.e4p	2009-06-14 12:33:54 UTC (rev 4944)
+++ rl/branches/persistence2/editors/Lockenwickler/Lockenwickler.e4p	2009-06-15 18:20:42 UTC (rev 4945)
@@ -1,7 +1,7 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <!DOCTYPE Project SYSTEM "Project-4.6.dtd">
 <!-- eric4 project file for project Lockenwickler -->
-<!-- Saved: 2009-05-09, 21:08:47 -->
+<!-- Saved: 2009-05-30, 19:50:05 -->
 <!-- Copyright (C) 2009 Stefan Stammberger, sstammberger at web.de -->
 <Project version="4.6">
   <Language>en</Language>
@@ -44,16 +44,18 @@
     <Source>src/ModuleDirectoryView.py</Source>
     <Source>src/TriggerManager.py</Source>
     <Source>src/GlobDirectoryWalker.py</Source>
-    <Source>ui files/Ui_GOPropertyEditorDialogINT.py</Source>
-    <Source>ui files/Ui_GOPropertyEditorDialogSTRING.py</Source>
-    <Source>ui files/Ui_NewModuleWizard.py</Source>
     <Source>src/AddTriggerDialog.py</Source>
     <Source>src/Ui_AddTriggerDialog.py</Source>
     <Source>src/MyTerrainManager.py</Source>
     <Source>src/Ui_MyTerrainManagerDock.py</Source>
     <Source>src/media/help/help_rc.py</Source>
+    <Source>ui files/Ui_MyTerrainManagerDock.py</Source>
+    <Source>ui files/Ui_GOPropertyEditorDialogINT.py</Source>
+    <Source>ui files/Ui_GOPropertyEditorDialogSTRING.py</Source>
+    <Source>ui files/Ui_NewModuleWizard.py</Source>
+    <Source>ui files/Ui_AddTriggerDialog.py</Source>
     <Source>ui files/Ui_BrushDialog.py</Source>
-    <Source>ui files/Ui_MyTerrainManagerDock.py</Source>
+    <Source>src/TerrainDecalCursor.py</Source>
   </Sources>
   <Forms>
     <Form>ui files/GOPropertyEditorDialogINT.ui</Form>

Modified: rl/branches/persistence2/editors/Lockenwickler/src/Lockenwickler.py
===================================================================
--- rl/branches/persistence2/editors/Lockenwickler/src/Lockenwickler.py	2009-06-14 12:33:54 UTC (rev 4944)
+++ rl/branches/persistence2/editors/Lockenwickler/src/Lockenwickler.py	2009-06-15 18:20:42 UTC (rev 4945)
@@ -1,597 +1,597 @@
-#################################################
-# This source file is part of Rastullahs Lockenwickler.
-# Copyright (C) 2003-2009 Team Pantheon. http://www.team-pantheon.de
-#
-# This program is free software; you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation; either version 2 of the License, or
-# (at your option) any later version.
-#
-# This program is distributed in the hope that it will be useful,
-#  but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with this program; if not, write to the Free Software
-# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  US
-#################################################
-
-import os
-import sys
-import platform
-import subprocess
-
-sys.path.insert(0,'..')
-import PythonOgreConfig
-
-from random import randint
-
-from PyQt4 import QtGui, QtCore
-from PreferencesDialog import *
-from ObjectPropertyWin import *
-from ModelSelectionDialog import *
-from MaterialSelectionDialog import *
-from GameObjectClassView import *
-from ConsoleWindow import *
-from ModuleManager import ModuleManager
-from ModuleExplorer import *
-from NewModuleWizard import *
-from MovePivot import *
-from PivotRenderQueueListener import *
-from ModuleDirectoryView import *
-from TriggerManager import *
-from MyTerrainManager import MyTerrainManager
-
-import OgreMainWindow
-import ogre.renderer.OGRE as og
-
-class Lockenwickler(QtGui.QMainWindow):
-    def __init__(self, parent=None):
-        QtGui.QWidget.__init__(self, parent)
-
-#        pixmap = QPixmap("media/icons/lockenwickler_provisorium.png")
-#        splash = QSplashScreen(pixmap, Qt.WindowStaysOnTopHint)
-#        splash.setMask(pixmap.mask())
-#        splash.showMessage("Starting...")
-#        splash.show() 
-
-        self.setupUi()
-
-        self.consoleWindow = ConsoleWindow(False,  self)
-
-        self.setupOgre()
-
-        self.prefDialog = PreferencesDialog(self)
-        self.objectPropertyWin = ObjectPropertyWin(self.OgreMainWinSceneMgr, self.gocManager, self)
-        self.moduleExplorerWin = ModuleExplorer(self)
-        self.modelSelectionDialog = ModelSelectionDialog(self.ogreRoot, self)
-        self.materialSelectionDialog = MaterialSelectionDialog(self.ogreRoot, self)
-        self.moduleManager.modelSelectionDialog = self.modelSelectionDialog
-        self.moduleManager.materialSelectionDialog = self.materialSelectionDialog
-        self.moduleDirectoryViewWin = ModuleDirectoryView(self)
-        
-        triggerManager = TriggerManager()
-        
-        self.gameObjectClassView = GameObjectClassView(self.moduleManager.gocManager)
-
-        self.createDockWindows()
-
-        self.mainTimer = QtCore.QTimer(self)
-        self.mainTimer.connect(self.mainTimer, QtCore.SIGNAL("timeout()"), self.update)
-        self.mainTimer.start(5)
-
-        settings = QtCore.QSettings()
-        self.restoreGeometry(settings.value("MainWindow/Geometry").toByteArray())
-        self.restoreState(settings.value("MainWindow/DockWindows").toByteArray())
-        if not self.prefDialog.setCfgPath(settings.value("Preferences/moduleCfgPath").toString()):
-            self.prefDialog.show()
-            self.moduleManager.moduleCfgPath = self.prefDialog.moduleCfgPath
-
-        else:
-            self.moduleManager.moduleCfgPath = self.prefDialog.moduleCfgPath
-            
-        self.prefDialog.setExternalEditorPath(str(settings.value("Preferences/externalEditorPath").toString()))
-        
-        if self.prefDialog.moduleCfgPath is not None:
-            self.moduleDirectoryViewWin.modulesPath = self.prefDialog.moduleCfgPath.replace("modules.cfg", "")
-
-        
-        self.moduleManager.setModuleExplorer(self.moduleExplorerWin)
-        self.moduleManager.setModuleDirView(self.moduleDirectoryViewWin)
-        self.moduleManager.setPropertyWindow(self.objectPropertyWin)
-        self.moduleManager.setContextMenuCallback(self.onContextMenuCallback)
-        
-        self.setWindowIcon(QIcon("media/icons/lockenwickler_provisorium_small.png"))
-        self.setWindowTitle("Rastullahs Lockenwickler")
-        
-        self.editorSetupFinished = False
-        
-#        splash.finish(self)
-
-    def createAction(self, text, slot=None, shortcut=None, icon=None, tip=None, checkable=False, signal="triggered()"):
-        action = QtGui.QAction(text, self)
-        if icon is not None:
-            action.setIcon(QtGui.QIcon("media/icons/%s" % icon))
-        if shortcut is not None:
-            action.setShortcut(shortcut)
-        if tip is not None:
-            action.setToolTip(tip)
-            action.setStatusTip(tip)
-        if slot is not None:
-            self.connect(action, QtCore.SIGNAL(signal), slot)
-
-        action.setCheckable(checkable)
-
-        return action
-
-    def addActions(self, target, actions):
-        for act in actions:
-            if act is None:
-               target.addSeparator()
-            else:
-                target.addAction(act)
-
-    def setupUi(self):
-        self.setObjectName("MainWindow")
-
-        self.centralwidget = QtGui.QWidget(self)
-        self.centralwidget.setObjectName("centralwidget")
-
-        self.hboxlayout = QtGui.QHBoxLayout(self.centralwidget)
-        self.hboxlayout.setContentsMargins(0, 0, 0, 0)
-        self.hboxlayout.setObjectName("hboxlayout")
-
-        self.gridlayout = QtGui.QGridLayout()
-        self.gridlayout.setObjectName("gridlayout")
-        self.gridlayout.setContentsMargins(0, 0, 0, 0)
-        
-        self.menubar = QtGui.QMenuBar(self)
-        self.menubar.setObjectName("menubar")
-
-        self.menuFile = QtGui.QMenu(self.menubar)
-        self.menuFile.setObjectName("menuFile")
-
-        self.menuEdit = QtGui.QMenu(self.menubar)
-        self.menuEdit.setObjectName("menuEdit")
-
-        self.menuView = QtGui.QMenu(self.menubar)
-        self.menuView.setObjectName("menuView")
-        self.setMenuBar(self.menubar)
-
-
-        self.statusbar = QtGui.QStatusBar(self)
-        self.statusbar.setObjectName("statusbar")
-        self.setStatusBar(self.statusbar)
-
-#####################################
-        self.actionNeu =self.createAction("&New Module",  self.actionNewSlot,  QKeySequence.New,  "filenew.png",  "New Module")
-        self.actionNeu.setObjectName("actionNeu")
-
-        self.actionOpen = self.createAction("&Open Module",  self.actionOpenSlot,  QKeySequence.Open,  "fileopen.png",  "Open Module")
-        self.actionOpen.setObjectName("actionOpen")
-        
-        self.actionSave = self.createAction("&Save",  self.actionSaveSlot,  QKeySequence.Save,  "filesave.png",  "Save Module")
-        self.actionSave.setObjectName("actionSave")
-        
-        self.actionRunModule = self.createAction("&Save and Run",  self.actionRunModuleSlot,  "Alt+R",  "fileexport.png",  "Save And Run Module")
-        self.actionRunModule.setObjectName("actionRunModule")
-
-        self.actionClose = self.createAction("Quit",  self.actionQuitSlot,  "Alt+Q",  "exit.png",  "Quit")
-        self.actionClose.setObjectName("actionQuit")
-#####################################
-
-
-#####################################
-        self.actionDelete = self.createAction("Delete",  self.actionDeleteSlot,  QKeySequence.Delete,  "editdelete.png",  "Delete")
-        self.actionDelete.setObjectName("actionDelete")
-
-        self.actionCopy = self.createAction("Copy",  self.actionCopySlot,  QKeySequence.Copy,  "editcopy.png",  "Copy")
-        self.actionCopy.setObjectName("actionCopy")
-
-        self.actionCut = self.createAction("Cut",  self.actionCutSlot,  QKeySequence.Cut,  "editcut.png",  "Cut")
-        self.actionCut.setObjectName("actionCut")
-
-        self.actionPaste = self.createAction("Paste",  self.actionPasteSlot,  QKeySequence.Paste,  "editpaste.png",  "Paste")
-        self.actionPaste.setObjectName("actionPaste")
-
-        self.actionSelect = self.createAction("&Select",  self.actionSelectSlot,  "Space",  "cursor.png",  "Move selected object")
-        self.actionSelect.setObjectName("actionSelect")
-
-        self.actionMove = self.createAction("&Move",  self.actionMoveSlot,  "g",  "move.png",  "Move selected object")
-        self.actionMove.setObjectName("actionMove")
-
-        self.actionRotate = self.createAction("&Rotate",  self.actionRotateSlot,  "r",  "rotate.png",  "Rotate selected object")
-        self.actionRotate.setObjectName("actionRotate")
-
-        self.actionScale = self.createAction("&Scale",  self.actionScaleSlot,  "x",  "resizecol.png",  "Scale selected object")
-        self.actionScale.setObjectName("actionScale")
-
-        self.actionOneClickEntityPlacement = self.createAction("&OneClickEntityPlacement",  self.actionOneClickEntityPlacementSlot,  "",  "resizecol.png",  "Add an Entity just by a click")
-        self.actionOneClickEntityPlacement.setObjectName("actionOneClickEntityPlacement")
-        self.actionOneClickEntityPlacement.setCheckable(True)
-
-#####################################
-#####################################
-        self.actionSceneExplorer = self.createAction("&Scene Exlporer",  self.toggleModuleExplorer,  "Alt+E",  "view_tree.png",  "Module Explorer",  False)
-        self.actionSceneExplorer.setObjectName("actionSceneExplorer")
-        
-        self.actionModuleDirView = self.createAction("&Directory Explorer",  self.toggleModuleDirView,  "Alt+D",  "view_tree.png",  "Module Directory Explorer",  False)
-        self.actionModuleDirView.setObjectName("actionDirectoryExplorer")
-        
-        self.actionPreferences = self.createAction("&Preferences",  self.togglePreferencesWindow,  None,  "configure.png",  "Lockenwickler Preferences",  False)
-        self.actionPreferences.setObjectName("actionPreferences")
-
-        self.actionProperty_Window = self.createAction("Pr&operty Window",  self.togglePropertyWindow,  "Alt+P",  "unsortedlist1.png",  "Property Window")
-        self.actionProperty_Window.setObjectName("actionProperty_Window")
-
-        self.actionObject_Selection = self.createAction("&Model Preview Window",  self.toggleModelPreviewWindow,  "Alt+O",  "tux.png",  "Model Preview")
-        self.actionObject_Selection.setObjectName("actionObject_Selection")
-        
-        self.actionMaterial_Selection = self.createAction("Material &Preview Window",  self.toggleMaterialPreviewWindow,  "Alt+M",  "colors.png",  "Material Preview")
-        self.actionMaterial_Selection.setObjectName("actionMaterial_Selection")
-
-        self.actionGameObjectClass_Selection = self.createAction("&Game Object Class Preview Window",  self.toggleGameObjectViewWindow,  "Ctrl+G",  "multirow.png",  "GameObjectClass Preview")
-        self.actionGameObjectClass_Selection.setObjectName("actionObject_Selection")
-
-        self.actionConsole_Window = self.createAction("&Console Window",  self.toggleConsoleWindow,  "Alt+C",  "console.png",  "Console Window")
-        self.actionConsole_Window.setObjectName("actionConsole_Window")
-        
-        self.actionTerrainTools_Window = self.createAction("&Terrain Tools",  self.toggleTerrainToolsWindow,  "Alt+T",  "terrain_small.png",  "Console Window")
-        self.actionTerrainTools_Window.setObjectName("actionTerrainTools_Window")
-        
-        self.actionToggleViewportGrid = self.createAction("&Toggle Grid",  self.toggleViewportGrid,  "Alt+G",  "console.png",  "Toggle Viewport Grid")
-        self.actionToggleViewportGrid.setObjectName("actionToggleViewportGrid")
-
-#####################################
-#####################################
-
-
-        self.menuFile.addAction(self.actionNeu)
-        self.menuFile.addAction(self.actionOpen)
-        self.menuFile.addAction(self.actionSave)
-        self.menuFile.addAction(self.actionRunModule)
-        self.menuFile.addAction(self.actionClose)
-
-        self.menuEdit.addAction(self.actionSelect)
-        self.menuEdit.addAction(self.actionMove)
-        self.menuEdit.addAction(self.actionRotate)
-        self.menuEdit.addAction(self.actionScale)
-        self.menuEdit.addSeparator()
-        self.menuEdit.addAction(self.actionDelete)
-        self.menuEdit.addAction(self.actionCopy)
-        self.menuEdit.addAction(self.actionCut)
-        self.menuEdit.addAction(self.actionPaste)
-        self.menuEdit.addSeparator()
-        self.menuEdit.addAction(self.actionOneClickEntityPlacement)
-        
-
-        self.menuView.addAction(self.actionSceneExplorer)
-        self.menuView.addAction(self.actionModuleDirView)
-        self.menuView.addAction(self.actionPreferences)
-        self.menuView.addAction(self.actionProperty_Window)
-        self.menuView.addAction(self.actionObject_Selection)
-        self.menuView.addAction(self.actionMaterial_Selection)
-        self.menuView.addAction(self.actionGameObjectClass_Selection)
-        self.menuView.addAction(self.actionConsole_Window)
-        self.menuView.addAction(self.actionTerrainTools_Window)
-        self.menuView.addAction(self.actionToggleViewportGrid)
-        
-        self.menubar.addAction(self.menuFile.menuAction())
-        self.menubar.addAction(self.menuEdit.menuAction())
-        self.menubar.addAction(self.menuView.menuAction())
-
-        self.retranslateUi()
-        QtCore.QMetaObject.connectSlotsByName(self)
-
-    def retranslateUi(self):
-        self.setWindowTitle(QtGui.QApplication.translate("MainWindow", "MainWindow", None, QtGui.QApplication.UnicodeUTF8))
-        self.menuFile.setTitle(QtGui.QApplication.translate("MainWindow", "File", None, QtGui.QApplication.UnicodeUTF8))
-        self.menuEdit.setTitle(QtGui.QApplication.translate("MainWindow", "Edit", None, QtGui.QApplication.UnicodeUTF8))
-        self.menuView.setTitle(QtGui.QApplication.translate("MainWindow", "View", None, QtGui.QApplication.UnicodeUTF8))
-        self.actionNeu.setText(QtGui.QApplication.translate("MainWindow", "New Module", None, QtGui.QApplication.UnicodeUTF8))
-        self.actionMove.setText(QtGui.QApplication.translate("MainWindow", "Move", None, QtGui.QApplication.UnicodeUTF8))
-        self.actionRotate.setText(QtGui.QApplication.translate("MainWindow", "Rotate", None, QtGui.QApplication.UnicodeUTF8))
-        self.actionSceneExplorer.setText(QtGui.QApplication.translate("MainWindow", "Module Explorer", None, QtGui.QApplication.UnicodeUTF8))
-        self.actionPreferences.setText(QtGui.QApplication.translate("MainWindow", "Preferences", None, QtGui.QApplication.UnicodeUTF8))
-        self.actionProperty_Window.setText(QtGui.QApplication.translate("MainWindow", "Property Window", None, QtGui.QApplication.UnicodeUTF8))
-        self.actionObject_Selection.setText(QtGui.QApplication.translate("MainWindow", "Object Selection", None, QtGui.QApplication.UnicodeUTF8))
-        self.actionClose.setText(QtGui.QApplication.translate("MainWindow", "Quit", None, QtGui.QApplication.UnicodeUTF8))
-        self.actionConsole_Window.setText(QtGui.QApplication.translate("MainWindow", "Console Window", None, QtGui.QApplication.UnicodeUTF8))
-
-    def setupOgre(self, pluginCfgPath="./Plugins.cfg", ogreCfgPath="./ogre.cfg", logPath="./ogre.log"):
-        if platform.system() == "Windows":
-            pluginCfgPath="./Plugins-windows.cfg"
-        else:
-            pluginCfgPath="./Plugins-linux.cfg"
-
-        root = og.Root(pluginCfgPath, ogreCfgPath, logPath)
-        self.ogreRoot = root
-
-        if  not self.ogreRoot.restoreConfig() and not self.ogreRoot.showConfigDialog():
-            sys.exit('Quit from Config Dialog')
-
-        root.initialise(False)
-
-        self.pivotRenderQueueListener = PivotRenderQueueListener()
-        self.OgreMainWinSceneMgr = self.ogreRoot.createSceneManager(og.ST_GENERIC, "OgreMainWinSceneMgr")
-        self.OgreMainWinSceneMgr.ambientLight = og.ColourValue(4, 4, 4)
-        self.OgreMainWinSceneMgr.addRenderQueueListener(self.pivotRenderQueueListener)
-        
-        self.moduleName = ""
-        self.myTerrainManager = MyTerrainManager(self.OgreMainWinSceneMgr)
-        self.moduleManager = ModuleManager(self.ogreRoot,  self.OgreMainWinSceneMgr)
-        self.moduleManager.myTerrainManager = self.myTerrainManager
-        self.gocManager = self.moduleManager.gocManager
-        
-        self.ogreMainWindow = OgreMainWindow.OgreMainWindow(self.moduleManager,  root,  self.OgreMainWinSceneMgr,  self)
-        self.gridlayout.addWidget(self.ogreMainWindow,0,0,1,1)
-        self.hboxlayout.addLayout(self.gridlayout)
-        self.setCentralWidget(self.centralwidget)
-        
-        self.myTerrainManager.ogreMainWindow = self.ogreMainWindow
-        
-        oglog = og.LogManager.getSingleton().getDefaultLog()
-        oglog.addListener(self.consoleWindow.lockenLog)
-
-    def finishEditorSetup(self):
-        if not self.editorSetupFinished:
-            og.ResourceGroupManager.getSingleton().addResourceLocation("./media", "FileSystem", "General", False)
-            og.ResourceGroupManager.getSingleton().initialiseAllResourceGroups()
-
-            self.moduleManager.pivot = Pivot(self.OgreMainWinSceneMgr)
-            self.moduleManager.pivot.hide()
-            self.editorSetupFinished = True
-        
-    def update(self):
-        self.ogreRoot.renderOneFrame()
-        if platform.system() == "Linux":
-            self.ogreMainWindow.updateRenderWindow()
-            self.modelSelectionDialog.updateRenderWindow()
-            self.materialSelectionDialog.updateRenderWindow()
-
-    def actionOpenSlot(self):
-        self.finishEditorSetup()
-        self.moduleManager.openLoadModuleDialog()
-
-    def actionNewSlot(self):
-        newModuleWiz = NewModuleWizard(self.moduleManager, self)
-        newModuleWiz.exec_()
-        return
-        
-    def actionSaveSlot(self):
-        self.moduleManager.save()
-        
-    def actionRunModuleSlot(self):
-        self.moduleManager.save()
-        if platform.system() == "Windows":
-            workingDir = self.prefDialog.moduleCfgPath.replace("/modules/modules.cfg", "")
-            executable = os.path.join(workingDir, "Rastullah.exe")
-            executable = executable.replace("/",  "\\")
-            if os.path.isfile(executable):
-                subprocess.Popen([executable, "--module", self.moduleManager.mainModule.name], 0, None, None, None, None, None, False, False, workingDir)
-
-        
-    def actionQuitSlot(self):
-        self.close()
-
-    def actionDeleteSlot(self):
-        self.moduleManager.deleteObjects()
-
-    def actionCopySlot(self):
-        self.moduleManager.copyObjects()
-
-    def actionCutSlot(self):
-        self.moduleManager.cutObjects()
-
-    def actionPasteSlot(self):
-        self.moduleManager.pasteObjects(self.ogreMainWindow.getCameraToViewportRay())
-
-    def actionSelectSlot(self):
-        self.moduleManager.pivot.hide()
-
-    def actionMoveSlot(self):
-        self.moduleManager.pivot.setMoveMode()
-
-    def actionRotateSlot(self):
-        self.moduleManager.pivot.setRotateMode()
-
-    def actionScaleSlot(self):
-        self.moduleManager.pivot.setScaleMode()
-
-    def actionOneClickEntityPlacementSlot(self):
-        self.moduleManager.setOneClickEntityPlacement(self.actionOneClickEntityPlacement.isChecked())
-
-    def togglePreferencesWindow(self):
-        if self.prefDialog.isHidden():
-            self.prefDialog.show()
-        else:
-            self.prefDialog.hide()
-
-    def toggleModelPreviewWindow(self):
-        if self.modelSelectionDock.isHidden():
-            self.modelSelectionDock.show()
-        else:
-            self.modelSelectionDock.hide()
-    
-    def toggleMaterialPreviewWindow(self):
-        if self.materialSelectionDock.isHidden():
-            self.materialSelectionDock.show()
-        else:
-            self.materialSelectionDock.hide()
-
-    def toggleGameObjectViewWindow(self):
-        if self.gameObjectClassViewDock.isHidden():
-            self.gameObjectClassViewDock.show()
-        else:
-            self.gameObjectClassViewDock.hide()
-
-    def toggleModuleExplorer(self):
-        if self.moduleExplorerDock.isHidden():
-            self.moduleExplorerDock.show()
-        else:
-            self.moduleExplorerDock.hide()
-            
-    def toggleModuleDirView(self):
-        if self.moduleDirectoryViewDock.isHidden():
-            self.moduleDirectoryViewDock.show()
-        else:
-            self.moduleDirectoryViewDock.hide()
-
-    def togglePropertyWindow(self):
-        if self.propertyDock.isHidden():
-            self.propertyDock.show()
-        else:
-            self.propertyDock.hide()
-
-    def toggleConsoleWindow(self):
-        if self.consoleDock.isHidden():
-            self.consoleDock.show()
-        else:
-            self.consoleDock.hide()
-            
-    def toggleTerrainToolsWindow(self):
-        if self.myTerrainManagerDock.isHidden():
-            self.myTerrainManagerDock.show()
-        else:
-            self.myTerrainManagerDock.hide()
-
-    def toggleViewportGrid(self):
-        self.ogreMainWindow.toggleViewportGrid()
-
-    def createDockWindows(self):
-        self.modelSelectionDock = QtGui.QDockWidget(self.tr("Models"), self)
-        self.modelSelectionDock.setObjectName("ModelSelectionDockWindow")
-        self.modelSelectionDock.setAllowedAreas(QtCore.Qt.LeftDockWidgetArea | QtCore.Qt.RightDockWidgetArea)
-        self.modelSelectionDock.setWidget(self.modelSelectionDialog)
-        self.addDockWidget(QtCore.Qt.RightDockWidgetArea, self.modelSelectionDock)
-        
-        self.materialSelectionDock = QtGui.QDockWidget(self.tr("Materials"), self)
-        self.materialSelectionDock.setObjectName("MaterialSelectionDockWindow")
-        self.materialSelectionDock.setAllowedAreas(QtCore.Qt.LeftDockWidgetArea | QtCore.Qt.RightDockWidgetArea)
-        self.materialSelectionDock.setWidget(self.materialSelectionDialog)
-        self.addDockWidget(QtCore.Qt.RightDockWidgetArea, self.materialSelectionDock)
-        self.tabifyDockWidget(self.modelSelectionDock, self.materialSelectionDock)
-        
-        self.gameObjectClassViewDock = QtGui.QDockWidget(self.tr("GameObjectClasses"), self)
-        self.gameObjectClassViewDock.setObjectName("GameObjectClassView")
-        self.gameObjectClassViewDock.setAllowedAreas(QtCore.Qt.LeftDockWidgetArea | QtCore.Qt.RightDockWidgetArea)
-        self.gameObjectClassViewDock.setWidget(self.gameObjectClassView)
-        self.addDockWidget(QtCore.Qt.RightDockWidgetArea, self.gameObjectClassViewDock)        
-        self.tabifyDockWidget(self.modelSelectionDock, self.gameObjectClassViewDock)
-        
-        self.propertyDock = QtGui.QDockWidget(self.tr("Properties"), self)
-        self.propertyDock.setObjectName("PropertyDockWindow")
-        self.propertyDock.setAllowedAreas(QtCore.Qt.LeftDockWidgetArea | QtCore.Qt.RightDockWidgetArea)
-        self.propertyDock.setWidget(self.objectPropertyWin)
-        self.addDockWidget(QtCore.Qt.LeftDockWidgetArea, self.propertyDock)
-
-        self.moduleExplorerDock = QtGui.QDockWidget(self.tr("Module Explorer"), self)
-        self.moduleExplorerDock.setObjectName("ModuleExplorerDockWindow")
-        self.moduleExplorerDock.setAllowedAreas(QtCore.Qt.LeftDockWidgetArea | QtCore.Qt.RightDockWidgetArea)
-        self.moduleExplorerDock.setWidget(self.moduleExplorerWin)
-        self.addDockWidget(QtCore.Qt.LeftDockWidgetArea, self.moduleExplorerDock)
-        self.tabifyDockWidget(self.moduleExplorerDock, self.propertyDock)
-        
-        self.moduleDirectoryViewDock = QtGui.QDockWidget(self.tr("Module Directory View"), self)
-        self.moduleDirectoryViewDock.setObjectName("ModuleDirectoryViewDockWindow")
-        self.moduleDirectoryViewDock.setAllowedAreas(QtCore.Qt.LeftDockWidgetArea | QtCore.Qt.RightDockWidgetArea | QtCore.Qt.TopDockWidgetArea | QtCore.Qt.BottomDockWidgetArea)
-        self.moduleDirectoryViewDock.setWidget(self.moduleDirectoryViewWin)
-        self.addDockWidget(QtCore.Qt.LeftDockWidgetArea, self.moduleDirectoryViewDock)
-        
-        self.myTerrainManagerDock = self.myTerrainManager.getDockWidget(self)
-        
-        self.consoleDock = QtGui.QDockWidget(self.tr("Console"), self)
-        self.consoleDock.setObjectName("ConsoleDockWindow")
-        self.consoleDock.setAllowedAreas(QtCore.Qt.BottomDockWidgetArea | QtCore.Qt.TopDockWidgetArea)
-        self.consoleDock.setWidget(self.consoleWindow)
-        self.addDockWidget(QtCore.Qt.BottomDockWidgetArea, self.consoleDock)
-
-        self.fileToolBar = self.addToolBar("File Toolbar")
-        self.fileToolBar.setObjectName("FileToolBar")
-        self.fileToolBar.setAllowedAreas(QtCore.Qt.TopToolBarArea | QtCore.Qt.BottomToolBarArea)
-        self.fileToolBar.addAction(self.actionNeu)
-        self.fileToolBar.addAction(self.actionOpen)
-        self.fileToolBar.addAction(self.actionSave)
-        self.fileToolBar.addAction(self.actionRunModule)
-        self.fileToolBar.addAction(self.actionClose)
-        self.addToolBar(QtCore.Qt.TopToolBarArea, self.fileToolBar)
-
-        self.moveToolBar = self.addToolBar("Transformation Bar")
-        self.moveToolBar.setObjectName("TransformationBar")
-        self.moveToolBar.setAllowedAreas(QtCore.Qt.TopToolBarArea | QtCore.Qt.BottomToolBarArea)
-        self.moveToolBar.addAction(self.actionSelect)
-        self.moveToolBar.addAction(self.actionMove)
-        self.moveToolBar.addAction(self.actionRotate)
-        self.moveToolBar.addAction(self.actionScale)
-        self.addToolBar(QtCore.Qt.TopToolBarArea, self.moveToolBar)
-
-    def keyPressEvent(self,  event):
-        if not event.isAutoRepeat():
-            self.ogreMainWindow.keyPressEvent(event)
-
-    def keyReleaseEvent(self,  event):
-        if not event.isAutoRepeat():
-            self.ogreMainWindow.keyReleaseEvent(event)
-        pass
-
-    def onContextMenuCallback(self, actions, menus):
-        menu = QMenu("My Menu!!")
-        menu.addAction(self.actionDelete)
-        menu.addAction(self.actionCopy)
-        menu.addAction(self.actionCut)
-        menu.addAction(self.actionPaste)
-        menu.addSeparator()
-        
-        for m in menus:
-            menu.addMenu(m)
-        for a in actions:
-            menu.addAction(a)
-
-        menu.exec_(QCursor.pos())
-
-    def connectActionButtons(self):
-        pass
-
-    def saveOnClose(self):
-#        reply = QtGui.QMessageBox.question(self,  "Rastullahs Lockenwickler - Unsaved Chages",  "Save unsaved changes?",  QtGui.QMessageBox.Yes|QtGui.QMessageBox.No|QtGui.QMessageBox.Cancel)
-#        if reply == QtGui.QMessageBox.Cancel:
-#            return False
-#        if reply == QtGui.QMessageBox.Yes:
-#            print""
-#            #TODO: implement save here
-        return True
-
-    def closeEvent(self,  event):
-        if self.saveOnClose():
-            settings = QtCore.QSettings()
-            settings.setValue("Preferences/moduleCfgPath", QtCore.QVariant(self.prefDialog.lineEdit.text()))
-            settings.setValue("MainWindow/Geometry",  QtCore.QVariant(self.saveGeometry()))
-            settings.setValue("MainWIndow/DockWindows",  QtCore.QVariant(self.saveState()))
-            settings.setValue("Preferences/externalEditorPath",  QtCore.QVariant(self.prefDialog.externalTextAppLineEdit.text()))
-            #self.ogreRoot.shutdown()
-        else:
-            event.ignore()
-
-if __name__ == "__main__":
-#    # Import Psyco if available
-#    try:
-#        import psyco
-#        psyco.full(0.02)
-#        #psyco.log()
-#        #psyco.profile()
-#    except ImportError:
-#        pass
-    
-    app = QtGui.QApplication(sys.argv)
-    app.setOrganizationName("Team Pantheon")
-    app.setOrganizationDomain("rastullahs-lockenpracht.de/team")
-    app.setApplicationName("Lockenwickler")
-
-    form = Lockenwickler()
-    form.show()
-
-    app.exec_()
-    
-    sys.exit(0)
-
+#################################################
+# This source file is part of Rastullahs Lockenwickler.
+# Copyright (C) 2003-2009 Team Pantheon. http://www.team-pantheon.de
+#
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+#  but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, write to the Free Software
+# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  US
+#################################################
+
+import os
+import sys
+import platform
+import subprocess
+
+sys.path.insert(0,'..')
+import PythonOgreConfig
+
+from random import randint
+
+from PyQt4 import QtGui, QtCore
+from PreferencesDialog import *
+from ObjectPropertyWin import *
+from ModelSelectionDialog import *
+from MaterialSelectionDialog import *
+from GameObjectClassView import *
+from ConsoleWindow import *
+from ModuleManager import ModuleManager
+from ModuleExplorer import *
+from NewModuleWizard import *
+from MovePivot import *
+from PivotRenderQueueListener import *
+from ModuleDirectoryView import *
+from TriggerManager import *
+from MyTerrainManager import MyTerrainManager
+
+import OgreMainWindow
+import ogre.renderer.OGRE as og
+
+class Lockenwickler(QtGui.QMainWindow):
+    def __init__(self, parent=None):
+        QtGui.QWidget.__init__(self, parent)
+
+#        pixmap = QPixmap("media/icons/lockenwickler_provisorium.png")
+#        splash = QSplashScreen(pixmap, Qt.WindowStaysOnTopHint)
+#        splash.setMask(pixmap.mask())
+#        splash.showMessage("Starting...")
+#        splash.show() 
+
+        self.setupUi()
+
+        self.consoleWindow = ConsoleWindow(False,  self)
+
+        self.setupOgre()
+
+        self.prefDialog = PreferencesDialog(self)
+        self.objectPropertyWin = ObjectPropertyWin(self.OgreMainWinSceneMgr, self.gocManager, self)
+        self.moduleExplorerWin = ModuleExplorer(self)
+        self.modelSelectionDialog = ModelSelectionDialog(self.ogreRoot, self)
+        self.materialSelectionDialog = MaterialSelectionDialog(self.ogreRoot, self)
+        self.moduleManager.modelSelectionDialog = self.modelSelectionDialog
+        self.moduleManager.materialSelectionDialog = self.materialSelectionDialog
+        self.moduleDirectoryViewWin = ModuleDirectoryView(self)
+        
+        triggerManager = TriggerManager()
+        
+        self.gameObjectClassView = GameObjectClassView(self.moduleManager.gocManager)
+
+        self.createDockWindows()
+
+        self.mainTimer = QtCore.QTimer(self)
+        self.mainTimer.connect(self.mainTimer, QtCore.SIGNAL("timeout()"), self.update)
+        self.mainTimer.start(5)
+
+        settings = QtCore.QSettings()
+        self.restoreGeometry(settings.value("MainWindow/Geometry").toByteArray())
+        self.restoreState(settings.value("MainWindow/DockWindows").toByteArray())
+        if not self.prefDialog.setCfgPath(settings.value("Preferences/moduleCfgPath").toString()):
+            self.prefDialog.show()
+            self.moduleManager.moduleCfgPath = self.prefDialog.moduleCfgPath
+
+        else:
+            self.moduleManager.moduleCfgPath = self.prefDialog.moduleCfgPath
+            
+        self.prefDialog.setExternalEditorPath(str(settings.value("Preferences/externalEditorPath").toString()))
+        
+        if self.prefDialog.moduleCfgPath is not None:
+            self.moduleDirectoryViewWin.modulesPath = self.prefDialog.moduleCfgPath.replace("modules.cfg", "")
+
+        
+        self.moduleManager.setModuleExplorer(self.moduleExplorerWin)
+        self.moduleManager.setModuleDirView(self.moduleDirectoryViewWin)
+        self.moduleManager.setPropertyWindow(self.objectPropertyWin)
+        self.moduleManager.setContextMenuCallback(self.onContextMenuCallback)
+        
+        self.setWindowIcon(QIcon("media/icons/lockenwickler_provisorium_small.png"))
+        self.setWindowTitle("Rastullahs Lockenwickler")
+        
+        self.editorSetupFinished = False
+        
+#        splash.finish(self)
+
+    def createAction(self, text, slot=None, shortcut=None, icon=None, tip=None, checkable=False, signal="triggered()"):
+        action = QtGui.QAction(text, self)
+        if icon is not None:
+            action.setIcon(QtGui.QIcon("media/icons/%s" % icon))
+        if shortcut is not None:
+            action.setShortcut(shortcut)
+        if tip is not None:
+            action.setToolTip(tip)
+            action.setStatusTip(tip)
+        if slot is not None:
+            self.connect(action, QtCore.SIGNAL(signal), slot)
+
+        action.setCheckable(checkable)
+
+        return action
+
+    def addActions(self, target, actions):
+        for act in actions:
+            if act is None:
+               target.addSeparator()
+            else:
+                target.addAction(act)
+
+    def setupUi(self):
+        self.setObjectName("MainWindow")
+
+        self.centralwidget = QtGui.QWidget(self)
+        self.centralwidget.setObjectName("centralwidget")
+
+        self.hboxlayout = QtGui.QHBoxLayout(self.centralwidget)
+        self.hboxlayout.setContentsMargins(0, 0, 0, 0)
+        self.hboxlayout.setObjectName("hboxlayout")
+
+        self.gridlayout = QtGui.QGridLayout()
+        self.gridlayout.setObjectName("gridlayout")
+        self.gridlayout.setContentsMargins(0, 0, 0, 0)
+        
+        self.menubar = QtGui.QMenuBar(self)
+        self.menubar.setObjectName("menubar")
+
+        self.menuFile = QtGui.QMenu(self.menubar)
+        self.menuFile.setObjectName("menuFile")
+
+        self.menuEdit = QtGui.QMenu(self.menubar)
+        self.menuEdit.setObjectName("menuEdit")
+
+        self.menuView = QtGui.QMenu(self.menubar)
+        self.menuView.setObjectName("menuView")
+        self.setMenuBar(self.menubar)
+
+
+        self.statusbar = QtGui.QStatusBar(self)
+        self.statusbar.setObjectName("statusbar")
+        self.setStatusBar(self.statusbar)
+
+#####################################
+        self.actionNeu =self.createAction("&New Module",  self.actionNewSlot,  QKeySequence.New,  "filenew.png",  "New Module")
+        self.actionNeu.setObjectName("actionNeu")
+
+        self.actionOpen = self.createAction("&Open Module",  self.actionOpenSlot,  QKeySequence.Open,  "fileopen.png",  "Open Module")
+        self.actionOpen.setObjectName("actionOpen")
+        
+        self.actionSave = self.createAction("&Save",  self.actionSaveSlot,  QKeySequence.Save,  "filesave.png",  "Save Module")
+        self.actionSave.setObjectName("actionSave")
+        
+        self.actionRunModule = self.createAction("&Save and Run",  self.actionRunModuleSlot,  "Alt+R",  "fileexport.png",  "Save And Run Module")
+        self.actionRunModule.setObjectName("actionRunModule")
+
+        self.actionClose = self.createAction("Quit",  self.actionQuitSlot,  "Alt+Q",  "exit.png",  "Quit")
+        self.actionClose.setObjectName("actionQuit")
+#####################################
+
+
+#####################################
+        self.actionDelete = self.createAction("Delete",  self.actionDeleteSlot,  QKeySequence.Delete,  "editdelete.png",  "Delete")
+        self.actionDelete.setObjectName("actionDelete")
+
+        self.actionCopy = self.createAction("Copy",  self.actionCopySlot,  QKeySequence.Copy,  "editcopy.png",  "Copy")
+        self.actionCopy.setObjectName("actionCopy")
+
+        self.actionCut = self.createAction("Cut",  self.actionCutSlot,  QKeySequence.Cut,  "editcut.png",  "Cut")
+        self.actionCut.setObjectName("actionCut")
+
+        self.actionPaste = self.createAction("Paste",  self.actionPasteSlot,  QKeySequence.Paste,  "editpaste.png",  "Paste")
+        self.actionPaste.setObjectName("actionPaste")
+
+        self.actionSelect = self.createAction("&Select",  self.actionSelectSlot,  "Space",  "cursor.png",  "Move selected object")
+        self.actionSelect.setObjectName("actionSelect")
+
+        self.actionMove = self.createAction("&Move",  self.actionMoveSlot,  "g",  "move.png",  "Move selected object")
+        self.actionMove.setObjectName("actionMove")
+
+        self.actionRotate = self.createAction("&Rotate",  self.actionRotateSlot,  "r",  "rotate.png",  "Rotate selected object")
+        self.actionRotate.setObjectName("actionRotate")
+
+        self.actionScale = self.createAction("&Scale",  self.actionScaleSlot,  "x",  "resizecol.png",  "Scale selected object")
+        self.actionScale.setObjectName("actionScale")
+
+        self.actionOneClickEntityPlacement = self.createAction("&OneClickEntityPlacement",  self.actionOneClickEntityPlacementSlot,  "",  "resizecol.png",  "Add an Entity just by a click")
+        self.actionOneClickEntityPlacement.setObjectName("actionOneClickEntityPlacement")
+        self.actionOneClickEntityPlacement.setCheckable(True)
+
+#####################################
+#####################################
+        self.actionSceneExplorer = self.createAction("&Scene Exlporer",  self.toggleModuleExplorer,  "Alt+E",  "view_tree.png",  "Module Explorer",  False)
+        self.actionSceneExplorer.setObjectName("actionSceneExplorer")
+        
+        self.actionModuleDirView = self.createAction("&Directory Explorer",  self.toggleModuleDirView,  "Alt+D",  "view_tree.png",  "Module Directory Explorer",  False)
+        self.actionModuleDirView.setObjectName("actionDirectoryExplorer")
+        
+        self.actionPreferences = self.createAction("&Preferences",  self.togglePreferencesWindow,  None,  "configure.png",  "Lockenwickler Preferences",  False)
+        self.actionPreferences.setObjectName("actionPreferences")
+
+        self.actionProperty_Window = self.createAction("Pr&operty Window",  self.togglePropertyWindow,  "Alt+P",  "unsortedlist1.png",  "Property Window")
+        self.actionProperty_Window.setObjectName("actionProperty_Window")
+
+        self.actionObject_Selection = self.createAction("&Model Preview Window",  self.toggleModelPreviewWindow,  "Alt+O",  "tux.png",  "Model Preview")
+        self.actionObject_Selection.setObjectName("actionObject_Selection")
+        
+        self.actionMaterial_Selection = self.createAction("Material &Preview Window",  self.toggleMaterialPreviewWindow,  "Alt+M",  "colors.png",  "Material Preview")
+        self.actionMaterial_Selection.setObjectName("actionMaterial_Selection")
+
+        self.actionGameObjectClass_Selection = self.createAction("&Game Object Class Preview Window",  self.toggleGameObjectViewWindow,  "Ctrl+G",  "multirow.png",  "GameObjectClass Preview")
+        self.actionGameObjectClass_Selection.setObjectName("actionObject_Selection")
+
+        self.actionConsole_Window = self.createAction("&Console Window",  self.toggleConsoleWindow,  "Alt+C",  "console.png",  "Console Window")
+        self.actionConsole_Window.setObjectName("actionConsole_Window")
+        
+        self.actionTerrainTools_Window = self.createAction("&Terrain Tools",  self.toggleTerrainToolsWindow,  "Alt+T",  "terrain_small.png",  "Console Window")
+        self.actionTerrainTools_Window.setObjectName("actionTerrainTools_Window")
+        
+        self.actionToggleViewportGrid = self.createAction("&Toggle Grid",  self.toggleViewportGrid,  "Alt+G",  "console.png",  "Toggle Viewport Grid")
+        self.actionToggleViewportGrid.setObjectName("actionToggleViewportGrid")
+
+#####################################
+#####################################
+
+
+        self.menuFile.addAction(self.actionNeu)
+        self.menuFile.addAction(self.actionOpen)
+        self.menuFile.addAction(self.actionSave)
+        self.menuFile.addAction(self.actionRunModule)
+        self.menuFile.addAction(self.actionClose)
+
+        self.menuEdit.addAction(self.actionSelect)
+        self.menuEdit.addAction(self.actionMove)
+        self.menuEdit.addAction(self.actionRotate)
+        self.menuEdit.addAction(self.actionScale)
+        self.menuEdit.addSeparator()
+        self.menuEdit.addAction(self.actionDelete)
+        self.menuEdit.addAction(self.actionCopy)
+        self.menuEdit.addAction(self.actionCut)
+        self.menuEdit.addAction(self.actionPaste)
+        self.menuEdit.addSeparator()
+        self.menuEdit.addAction(self.actionOneClickEntityPlacement)
+        
+
+        self.menuView.addAction(self.actionSceneExplorer)
+        self.menuView.addAction(self.actionModuleDirView)
+        self.menuView.addAction(self.actionPreferences)
+        self.menuView.addAction(self.actionProperty_Window)
+        self.menuView.addAction(self.actionObject_Selection)
+        self.menuView.addAction(self.actionMaterial_Selection)
+        self.menuView.addAction(self.actionGameObjectClass_Selection)
+        self.menuView.addAction(self.actionConsole_Window)
+        self.menuView.addAction(self.actionTerrainTools_Window)
+        self.menuView.addAction(self.actionToggleViewportGrid)
+        
+        self.menubar.addAction(self.menuFile.menuAction())
+        self.menubar.addAction(self.menuEdit.menuAction())
+        self.menubar.addAction(self.menuView.menuAction())
+
+        self.retranslateUi()
+        QtCore.QMetaObject.connectSlotsByName(self)
+
+    def retranslateUi(self):
+        self.setWindowTitle(QtGui.QApplication.translate("MainWindow", "MainWindow", None, QtGui.QApplication.UnicodeUTF8))
+        self.menuFile.setTitle(QtGui.QApplication.translate("MainWindow", "File", None, QtGui.QApplication.UnicodeUTF8))
+        self.menuEdit.setTitle(QtGui.QApplication.translate("MainWindow", "Edit", None, QtGui.QApplication.UnicodeUTF8))
+        self.menuView.setTitle(QtGui.QApplication.translate("MainWindow", "View", None, QtGui.QApplication.UnicodeUTF8))
+        self.actionNeu.setText(QtGui.QApplication.translate("MainWindow", "New Module", None, QtGui.QApplication.UnicodeUTF8))
+        self.actionMove.setText(QtGui.QApplication.translate("MainWindow", "Move", None, QtGui.QApplication.UnicodeUTF8))
+        self.actionRotate.setText(QtGui.QApplication.translate("MainWindow", "Rotate", None, QtGui.QApplication.UnicodeUTF8))
+        self.actionSceneExplorer.setText(QtGui.QApplication.translate("MainWindow", "Module Explorer", None, QtGui.QApplication.UnicodeUTF8))
+        self.actionPreferences.setText(QtGui.QApplication.translate("MainWindow", "Preferences", None, QtGui.QApplication.UnicodeUTF8))
+        self.actionProperty_Window.setText(QtGui.QApplication.translate("MainWindow", "Property Window", None, QtGui.QApplication.UnicodeUTF8))
+        self.actionObject_Selection.setText(QtGui.QApplication.translate("MainWindow", "Object Selection", None, QtGui.QApplication.UnicodeUTF8))
+        self.actionClose.setText(QtGui.QApplication.translate("MainWindow", "Quit", None, QtGui.QApplication.UnicodeUTF8))
+        self.actionConsole_Window.setText(QtGui.QApplication.translate("MainWindow", "Console Window", None, QtGui.QApplication.UnicodeUTF8))
+
+    def setupOgre(self, pluginCfgPath="./Plugins.cfg", ogreCfgPath="./ogre.cfg", logPath="./ogre.log"):
+        if platform.system() == "Windows":
+            pluginCfgPath="./Plugins-windows.cfg"
+        else:
+            pluginCfgPath="./Plugins-linux.cfg"
+
+        root = og.Root(pluginCfgPath, ogreCfgPath, logPath)
+        self.ogreRoot = root
+
+        if  not self.ogreRoot.restoreConfig() and not self.ogreRoot.showConfigDialog():
+            sys.exit('Quit from Config Dialog')
+
+        root.initialise(False)
+
+        self.pivotRenderQueueListener = PivotRenderQueueListener()
+        self.OgreMainWinSceneMgr = self.ogreRoot.createSceneManager(og.ST_GENERIC, "OgreMainWinSceneMgr")
+        self.OgreMainWinSceneMgr.ambientLight = og.ColourValue(4, 4, 4)
+        self.OgreMainWinSceneMgr.addRenderQueueListener(self.pivotRenderQueueListener)
+        
+        self.moduleName = ""
+        self.myTerrainManager = MyTerrainManager(self.OgreMainWinSceneMgr)
+        self.moduleManager = ModuleManager(self.ogreRoot,  self.OgreMainWinSceneMgr)
+        self.moduleManager.myTerrainManager = self.myTerrainManager
+        self.gocManager = self.moduleManager.gocManager
+        
+        self.ogreMainWindow = OgreMainWindow.OgreMainWindow(self.moduleManager,  root,  self.OgreMainWinSceneMgr,  self)
+        self.gridlayout.addWidget(self.ogreMainWindow,0,0,1,1)
+        self.hboxlayout.addLayout(self.gridlayout)
+        self.setCentralWidget(self.centralwidget)
+        
+        self.myTerrainManager.ogreMainWindow = self.ogreMainWindow
+        
+        oglog = og.LogManager.getSingleton().getDefaultLog()
+        oglog.addListener(self.consoleWindow.lockenLog)
+
+    def finishEditorSetup(self):
+        if not self.editorSetupFinished:
+            og.ResourceGroupManager.getSingleton().addResourceLocation("./media", "FileSystem", "General", False)
+            og.ResourceGroupManager.getSingleton().initialiseAllResourceGroups()
+
+            self.moduleManager.pivot = Pivot(self.OgreMainWinSceneMgr)
+            self.moduleManager.pivot.hide()
+            self.editorSetupFinished = True
+        
+    def update(self):
+        self.ogreRoot.renderOneFrame()
+        if platform.system() == "Linux":
+            self.ogreMainWindow.updateRenderWindow()
+            self.modelSelectionDialog.updateRenderWindow()
+            self.materialSelectionDialog.updateRenderWindow()
+
+    def actionOpenSlot(self):
+        self.finishEditorSetup()
+        self.moduleManager.openLoadModuleDialog()
+
+    def actionNewSlot(self):
+        newModuleWiz = NewModuleWizard(self.moduleManager, self)
+        newModuleWiz.exec_()
+        return
+        
+    def actionSaveSlot(self):
+        self.moduleManager.save()
+        
+    def actionRunModuleSlot(self):
+        self.moduleManager.save()
+        if platform.system() == "Windows":
+            workingDir = self.prefDialog.moduleCfgPath.replace("/modules/modules.cfg", "")
+            executable = os.path.join(workingDir, "Rastullah.exe")
+            executable = executable.replace("/",  "\\")
+            if os.path.isfile(executable):
+                subprocess.Popen([executable, "--module", self.moduleManager.mainModule.name], 0, None, None, None, None, None, False, False, workingDir)
+
+        
+    def actionQuitSlot(self):
+        self.close()
+
+    def actionDeleteSlot(self):
+        self.moduleManager.deleteObjects()
+
+    def actionCopySlot(self):
+        self.moduleManager.copyObjects()
+
+    def actionCutSlot(self):
+        self.moduleManager.cutObjects()
+
+    def actionPasteSlot(self):
+        self.moduleManager.pasteObjects(self.ogreMainWindow.getCameraToViewportRay())
+
+    def actionSelectSlot(self):
+        self.moduleManager.pivot.hide()
+
+    def actionMoveSlot(self):
+        self.moduleManager.pivot.setMoveMode()
+
+    def actionRotateSlot(self):
+        self.moduleManager.pivot.setRotateMode()
+
+    def actionScaleSlot(self):
+        self.moduleManager.pivot.setScaleMode()
+
+    def actionOneClickEntityPlacementSlot(self):
+        self.moduleManager.setOneClickEntityPlacement(self.actionOneClickEntityPlacement.isChecked())
+
+    def togglePreferencesWindow(self):
+        if self.prefDialog.isHidden():
+            self.prefDialog.show()
+        else:
+            self.prefDialog.hide()
+
+    def toggleModelPreviewWindow(self):
+        if self.modelSelectionDock.isHidden():
+            self.modelSelectionDock.show()
+        else:
+            self.modelSelectionDock.hide()
+    
+    def toggleMaterialPreviewWindow(self):
+        if self.materialSelectionDock.isHidden():
+            self.materialSelectionDock.show()
+        else:
+            self.materialSelectionDock.hide()
+
+    def toggleGameObjectViewWindow(self):
+        if self.gameObjectClassViewDock.isHidden():
+            self.gameObjectClassViewDock.show()
+        else:
+            self.gameObjectClassViewDock.hide()
+
+    def toggleModuleExplorer(self):
+        if self.moduleExplorerDock.isHidden():
+            self.moduleExplorerDock.show()
+        else:
+            self.moduleExplorerDock.hide()
+            
+    def toggleModuleDirView(self):
+        if self.moduleDirectoryViewDock.isHidden():
+            self.moduleDirectoryViewDock.show()
+        else:
+            self.moduleDirectoryViewDock.hide()
+
+    def togglePropertyWindow(self):
+        if self.propertyDock.isHidden():
+            self.propertyDock.show()
+        else:
+            self.propertyDock.hide()
+
+    def toggleConsoleWindow(self):
+        if self.consoleDock.isHidden():
+            self.consoleDock.show()
+        else:
+            self.consoleDock.hide()
+            
+    def toggleTerrainToolsWindow(self):
+        if self.myTerrainManagerDock.isHidden():
+            self.myTerrainManagerDock.show()
+        else:
+            self.myTerrainManagerDock.hide()
+
+    def toggleViewportGrid(self):
+        self.ogreMainWindow.toggleViewportGrid()
+
+    def createDockWindows(self):
+        self.modelSelectionDock = QtGui.QDockWidget(self.tr("Models"), self)
+        self.modelSelectionDock.setObjectName("ModelSelectionDockWindow")
+        self.modelSelectionDock.setAllowedAreas(QtCore.Qt.LeftDockWidgetArea | QtCore.Qt.RightDockWidgetArea)
+        self.modelSelectionDock.setWidget(self.modelSelectionDialog)
+        self.addDockWidget(QtCore.Qt.RightDockWidgetArea, self.modelSelectionDock)
+        
+        self.materialSelectionDock = QtGui.QDockWidget(self.tr("Materials"), self)
+        self.materialSelectionDock.setObjectName("MaterialSelectionDockWindow")
+        self.materialSelectionDock.setAllowedAreas(QtCore.Qt.LeftDockWidgetArea | QtCore.Qt.RightDockWidgetArea)
+        self.materialSelectionDock.setWidget(self.materialSelectionDialog)
+        self.addDockWidget(QtCore.Qt.RightDockWidgetArea, self.materialSelectionDock)
+        self.tabifyDockWidget(self.modelSelectionDock, self.materialSelectionDock)
+        
+        self.gameObjectClassViewDock = QtGui.QDockWidget(self.tr("GameObjectClasses"), self)
+        self.gameObjectClassViewDock.setObjectName("GameObjectClassView")
+        self.gameObjectClassViewDock.setAllowedAreas(QtCore.Qt.LeftDockWidgetArea | QtCore.Qt.RightDockWidgetArea)
+        self.gameObjectClassViewDock.setWidget(self.gameObjectClassView)
+        self.addDockWidget(QtCore.Qt.RightDockWidgetArea, self.gameObjectClassViewDock)        
+        self.tabifyDockWidget(self.modelSelectionDock, self.gameObjectClassViewDock)
+        
+        self.propertyDock = QtGui.QDockWidget(self.tr("Properties"), self)
+        self.propertyDock.setObjectName("PropertyDockWindow")
+        self.propertyDock.setAllowedAreas(QtCore.Qt.LeftDockWidgetArea | QtCore.Qt.RightDockWidgetArea)
+        self.propertyDock.setWidget(self.objectPropertyWin)
+        self.addDockWidget(QtCore.Qt.LeftDockWidgetArea, self.propertyDock)
+
+        self.moduleExplorerDock = QtGui.QDockWidget(self.tr("Module Explorer"), self)
+        self.moduleExplorerDock.setObjectName("ModuleExplorerDockWindow")
+        self.moduleExplorerDock.setAllowedAreas(QtCore.Qt.LeftDockWidgetArea | QtCore.Qt.RightDockWidgetArea)
+        self.moduleExplorerDock.setWidget(self.moduleExplorerWin)
+        self.addDockWidget(QtCore.Qt.LeftDockWidgetArea, self.moduleExplorerDock)
+        self.tabifyDockWidget(self.moduleExplorerDock, self.propertyDock)
+        
+        self.moduleDirectoryViewDock = QtGui.QDockWidget(self.tr("Module Directory View"), self)
+        self.moduleDirectoryViewDock.setObjectName("ModuleDirectoryViewDockWindow")
+        self.moduleDirectoryViewDock.setAllowedAreas(QtCore.Qt.LeftDockWidgetArea | QtCore.Qt.RightDockWidgetArea | QtCore.Qt.TopDockWidgetArea | QtCore.Qt.BottomDockWidgetArea)
+        self.moduleDirectoryViewDock.setWidget(self.moduleDirectoryViewWin)
+        self.addDockWidget(QtCore.Qt.LeftDockWidgetArea, self.moduleDirectoryViewDock)
+        
+        self.myTerrainManagerDock = self.myTerrainManager.getDockWidget(self)
+        
+        self.consoleDock = QtGui.QDockWidget(self.tr("Console"), self)
+        self.consoleDock.setObjectName("ConsoleDockWindow")
+        self.consoleDock.setAllowedAreas(QtCore.Qt.BottomDockWidgetArea | QtCore.Qt.TopDockWidgetArea)
+        self.consoleDock.setWidget(self.consoleWindow)
+        self.addDockWidget(QtCore.Qt.BottomDockWidgetArea, self.consoleDock)
+
+        self.fileToolBar = self.addToolBar("File Toolbar")
+        self.fileToolBar.setObjectName("FileToolBar")
+        self.fileToolBar.setAllowedAreas(QtCore.Qt.TopToolBarArea | QtCore.Qt.BottomToolBarArea)
+        self.fileToolBar.addAction(self.actionNeu)
+        self.fileToolBar.addAction(self.actionOpen)
+        self.fileToolBar.addAction(self.actionSave)
+        self.fileToolBar.addAction(self.actionRunModule)
+        self.fileToolBar.addAction(self.actionClose)
+        self.addToolBar(QtCore.Qt.TopToolBarArea, self.fileToolBar)
+
+        self.moveToolBar = self.addToolBar("Transformation Bar")
+        self.moveToolBar.setObjectName("TransformationBar")
+        self.moveToolBar.setAllowedAreas(QtCore.Qt.TopToolBarArea | QtCore.Qt.BottomToolBarArea)
+        self.moveToolBar.addAction(self.actionSelect)
+        self.moveToolBar.addAction(self.actionMove)
+        self.moveToolBar.addAction(self.actionRotate)
+        self.moveToolBar.addAction(self.actionScale)
+        self.addToolBar(QtCore.Qt.TopToolBarArea, self.moveToolBar)
+
+    def keyPressEvent(self,  event):
+        if not event.isAutoRepeat():
+            self.ogreMainWindow.keyPressEvent(event)
+
+    def keyReleaseEvent(self,  event):
+        if not event.isAutoRepeat():
+            self.ogreMainWindow.keyReleaseEvent(event)
+        pass
+
+    def onContextMenuCallback(self, actions, menus):
+        menu = QMenu("My Menu!!")
+        menu.addAction(self.actionDelete)
+        menu.addAction(self.actionCopy)
+        menu.addAction(self.actionCut)
+        menu.addAction(self.actionPaste)
+        menu.addSeparator()
+        
+        for m in menus:
+            menu.addMenu(m)
+        for a in actions:
+            menu.addAction(a)
+
+        menu.exec_(QCursor.pos())
+
+    def connectActionButtons(self):
+        pass
+
+    def saveOnClose(self):
+#        reply = QtGui.QMessageBox.question(self,  "Rastullahs Lockenwickler - Unsaved Chages",  "Save unsaved changes?",  QtGui.QMessageBox.Yes|QtGui.QMessageBox.No|QtGui.QMessageBox.Cancel)
+#        if reply == QtGui.QMessageBox.Cancel:
+#            return False
+#        if reply == QtGui.QMessageBox.Yes:
+#            print""
+#            #TODO: implement save here
+        return True
+
+    def closeEvent(self,  event):
+        if self.saveOnClose():
+            settings = QtCore.QSettings()
+            settings.setValue("Preferences/moduleCfgPath", QtCore.QVariant(self.prefDialog.lineEdit.text()))
+            settings.setValue("MainWindow/Geometry",  QtCore.QVariant(self.saveGeometry()))
+            settings.setValue("MainWIndow/DockWindows",  QtCore.QVariant(self.saveState()))
+            settings.setValue("Preferences/externalEditorPath",  QtCore.QVariant(self.prefDialog.externalTextAppLineEdit.text()))
+            #self.ogreRoot.shutdown()
+        else:
+            event.ignore()
+
+if __name__ == "__main__":
+    # Import Psyco if available
+#    try:
+#        import psyco
+#        psyco.full()
+        #psyco.log()
+#        #psyco.profile()
+#    except ImportError:
+#        print "Warning: No Psycho found!\nPlease download and install from http://psyco.sourceforge.net/"
+    
+    app = QtGui.QApplication(sys.argv)
+    app.setOrganizationName("Team Pantheon")
+    app.setOrganizationDomain("rastullahs-lockenpracht.de/team")
+    app.setApplicationName("Lockenwickler")
+
+    form = Lockenwickler()
+    form.show()
+
+    app.exec_()
+    
+    sys.exit(0)
+

Modified: rl/branches/persistence2/editors/Lockenwickler/src/ModuleManager.py
===================================================================
--- rl/branches/persistence2/editors/Lockenwickler/src/ModuleManager.py	2009-06-14 12:33:54 UTC (rev 4944)
+++ rl/branches/persistence2/editors/Lockenwickler/src/ModuleManager.py	2009-06-15 18:20:42 UTC (rev 4945)
@@ -838,6 +838,9 @@
         return False
 
     def openLoadModuleDialog(self):
+        if self.moduleCfgPath is None:
+            return
+            
         self.moduleFolder = str(self.moduleCfgPath.replace("modules.cfg", ""))
 
         self.parseModuleConfig()

Modified: rl/branches/persistence2/editors/Lockenwickler/src/MyTerrainManager.py
===================================================================
--- rl/branches/persistence2/editors/Lockenwickler/src/MyTerrainManager.py	2009-06-14 12:33:54 UTC (rev 4944)
+++ rl/branches/persistence2/editors/Lockenwickler/src/MyTerrainManager.py	2009-06-15 18:20:42 UTC (rev 4945)
@@ -25,6 +25,8 @@
 import ogre.addons.et as ET
 
 import Ui_MyTerrainManagerDock
+import TerrainDecalCursor
+
 from GlobDirectoryWalker import GlobDirectoryWalker
 
 class BrushDialog(QDialog):
@@ -34,6 +36,7 @@
         self.brushName = ""
         
         for file in GlobDirectoryWalker("./media/terrain/brushes", "*.png"):
+            file = file.replace("\\", "/")
             btn = QListWidgetItem()
             btn.setText(file.replace("./media/terrain/brushes/", ""))
             btn.setIcon(QIcon(file))
@@ -108,12 +111,7 @@
         self.paintBrushButton.setIconSize(QSize(150, 150))
         self.paintBrushButton.setText(dlg.brushName)
         
-    def onPaintBrushSizeChanged(self, val):
-        self.paintBrushSize = val
         
-    def onEditBrushSizeChanged(self, val):
-        self.editBrushSize = val
-        
     def onCreateTerrainButtonClicked(self):
         terrainData = {}
         terrainData["name"]  = str(self.nameLineEdit.text())
@@ -126,11 +124,11 @@
         terrainData["extendsZ"]  = self.extendsSpinBoxZ.value()
         terrainData["terrainSize"] = int(self.sizeComboBox.currentText())
         terrainData["terrainHeight"]  = self.terrainHeightSpinBox.value()
-        terrainData["splattingBaseName"]  = str(self.baseNameLineEdit.text())
-        terrainData["splattingResGroup"]  = str(self.resGroupLineEdit.text())
-        terrainData["splattingTextureSize"]  = int(self.texSizeComboBox.currentText())
-        terrainData["splattingNumTextures"]  = int(self.numTexturesComboBox.currentText())
-        
+#        terrainData["splattingBaseName"]  = str(self.baseNameLineEdit.text())
+#        terrainData["splattingResGroup"]  = str(self.resGroupLineEdit.text())
+#        terrainData["splattingTextureSize"]  = int(self.texSizeComboBox.currentText())
+#        terrainData["splattingNumTextures"]  = int(self.numTexturesComboBox.currentText())
+ 
         self.emit(SIGNAL("createTerrain"), terrainData)
         
     def onDeleteTerrainButtonClicked(self):
@@ -196,24 +194,30 @@
         self.created = False
         self.terrainInfo = None
         self.visible = True
+        self.decalCursor = None
         
     def __del__(self):
-        print "deleting terrain: " + self.name
         if self.terrainManager:
+            print "deleting terrainmanager: " + self.name
             del self.terrainManager
             del self.splatMgr
-        
-    def create(self, arg):
+            del self.decalCursor
+            
+    def create(self, cursorSize, arg):
         if arg is not None:
             self.name = arg["name"]
             self.position = og.Vector3(arg["positionX"], arg["positionY"], arg["positionZ"])
             self.extends = og.Vector3(arg["extendsX"], arg["extendsY"], arg["extendsZ"])
             self.terrainHeight = arg["terrainHeight"]
             self.terrainSize = arg["terrainSize"] + 1
-            self.splattingBaseName = arg["splattingBaseName"]
-            self.splattingResGroup = arg["splattingResGroup"]
-            self.splattingTextureSize = arg["splattingTextureSize"]
-            self.splattingNumTextures = arg["splattingNumTextures"]
+            self.splattingResGroup = "ETSplatting"
+            self.splattingTextureSize = self.terrainSize = arg["terrainSize"] + 1
+            self.splattingNumTextures = 6
+            
+#            self.splattingBaseName = arg["splattingBaseName"]
+#            self.splattingResGroup = arg["splattingResGroup"]
+#            self.splattingTextureSize = arg["splattingTextureSize"]
+#            self.splattingNumTextures = arg["splattingNumTextures"]
         
         self.terrainManager =  ET.TerrainManager(self.sceneManager, self.name)
         self.terrainManager.setLODErrorMargin(2, self.camera.getViewport().getActualHeight())
@@ -221,7 +225,7 @@
         
         ## create a fresh, mid-high terrain for editing
         # Note 
-        heightMapValues = og.LodDistanceList() ## ET.stdVectorFloat()
+        heightMapValues = og.stdVectorFloat() ## ET.stdVectorFloat()
         for i in xrange(self.terrainSize):
             for j in xrange(self.terrainSize):
                 heightMapValues.append(self.terrainHeight)
@@ -247,7 +251,7 @@
 #        * @param width      width of the textures in pixels
 #        * @param height     height of the textures in pixels
 #        * @param channels   Number of channels per texture (must be in {1, 2, 3, 4})
-        self.splatMgr = ET.SplattingManager(self.splattingBaseName, self.splattingResGroup, self.splattingTextureSize, self.splattingTextureSize, 3)
+        self.splatMgr = ET.SplattingManager(self.splattingBaseName, self.splattingResGroup, self.terrainSize, self.terrainSize, 3)
         ## specify number of splatting textures we need to handle
         self.splatMgr.setNumTextures(self.splattingNumTextures)
         
@@ -272,9 +276,20 @@
         self.parentSceneNode = self.sceneNode.getParentSceneNode()
         self.created = True
         
+        self.decalCursor = TerrainDecalCursor.TerrainDecalCursor(self.sceneManager, material, og.Vector2(cursorSize, cursorSize), "cursorTex.png")
+        
+    def paint(self, choosenTexture, pos, brush, paintBrushIntensity):
+        ## translate our cursor position to vertex indexes
+        x = int( self.terrainManager.getTerrainInfo().posToVertexX(pos.x) )
+        z = int( self.terrainManager.getTerrainInfo().posToVertexZ(pos.z) )
+
+        ## choose a brush intensity, this determines
+        ## how extreme our brush works on the terrain
+        ## and tell the ETM to deform the terrain
+        self.splatMgr.paint(choosenTexture, x, z, brush, paintBrushIntensity)
+        
     def setVisible(self, visibility):
         try:
-            #if self.parentSceneNode.getChild(self.sceneNode.getName()):
             if not visibility:
                 self.parentSceneNode.removeChild(self.sceneNode)
                 self.visible = visibility
@@ -321,8 +336,8 @@
         iHeight = brush.getHeight()
 
         storageclass = ctypes.c_float * (iWidth * iHeight)
-        vecReturnBuffer =  og.LodDistanceList()
-        vecHeightBuffer = og.LodDistanceList()
+        vecReturnBuffer =  og.stdVectorFloat()
+        vecHeightBuffer = og.stdVectorFloat()
        
         ptr = ctypes.pointer(vecReturnBuffer)
        
@@ -362,10 +377,18 @@
                 
                 j += 1
             i += 1
+            
         return brushReturn
 
         
     def updateLightMap(self):
+        return
+        decalCursorWasVisible = False
+        
+        if self.decalCursor.m_bVisible:
+            self.decalCursor.hide()
+            decalCursorWasVisible = True
+            
         lightmap = og.Image()
         ET.createTerrainLightmap(
                              self.terrainManager.getTerrainInfo() ,
@@ -379,7 +402,9 @@
         l = lightmap.getPixelBox(0, 0)
         tex.getBuffer(0, 0).blitFromMemory(lightmap.getPixelBox(0, 0))
         
-        
+        if decalCursorWasVisible:
+            self.decalCursor.show()
+            
 class MyTerrainManager():
     def __init__(self, sceneManager):
         self.sceneManager = sceneManager
@@ -417,12 +442,12 @@
         self.editSmoothMode = False
         
         self.ogreMainWindow = None
-
         
+       
     def createEditingCircle(self):
         self.editingCircle = self.sceneManager.createManualObject("TerrainManagerEditingCircle")
         self.editingCircle.setDynamic(True)
-        self.editingCircleAccuracy = 20
+        self.editingCircleAccuracy = 3
         
         self.editingCircle.begin("BaseWhiteNoLighting", og.RenderOperation.OT_LINE_STRIP)
         
@@ -439,7 +464,6 @@
         self.editingCircle.end()
         
         self.pointerNode.createChildSceneNode("TerrainManagerEditingCircleNode").attachObject(self.editingCircle)
-
         
     def deleteTerrain(self, name):
         for terrain in self.terrainList:
@@ -460,7 +484,6 @@
             
             QWidget.connect(self.dockWidgetContents, SIGNAL("createTerrain"), self.onCreateTerrain)
             
-            
         return self.myTerrainManagerDock
 
     def getTerrain(self, name):
@@ -469,36 +492,42 @@
                 return terrain
 
     def leftMouseUp(self):
-        if self.currentTerrain:
+        if self.currentTerrain and self.editMode is 1:
             self.currentTerrain.updateLightMap()
 
     def onPaintBrushSizeChanged(self, val):
         self.paintBrushSize = val
         self.updatePaintBrush()
         
+        if self.currentTerrain:
+            self.currentTerrain.decalCursor.setSize(og.Vector2(val, val)/3)
+        
     def onPaintBrushIntensityChanged(self, val):
-        self.paintBrushIntensity = val
+        self.paintBrushIntensity = 1 / val
         
     def onEditBrushSizeChanged(self, val):
         self.editBrushSize = val
         self.updateEditBrush()
         
+        if self.currentTerrain:
+            self.currentTerrain.decalCursor.setSize(og.Vector2(val, val)/3)
+            
     def onEditBrushIntensityChanged(self, val):
         self.editBrushIntensity = val
         
     def onCreateTerrain(self, arg):
         if not self.setupFinished:
-            self.pointer = self.sceneManager.createEntity("TerrainManagerPointerNodeMesh", "UniCube.mesh")
+#            self.pointer = self.sceneManager.createEntity("TerrainManagerPointerNodeMesh", "UniCube.mesh")
             self.pointerNode = self.sceneManager.getRootSceneNode().createChild("TerrainManagerPointerNode")
-            self.pointerNode.attachObject(self.pointer)
+#            self.pointerNode.attachObject(self.pointer)
 
-            self.createEditingCircle()
+#            self.createEditingCircle()
             
             self.setupFinished = True
         
         
         terrain = Terrain(self.sceneManager)
-        terrain.create(arg)
+        terrain.create(self.editBrushSize, arg)
         self.terrainList.append(terrain)
         
         og.ResourceGroupManager.getSingleton().initialiseAllResourceGroups()
@@ -529,6 +558,9 @@
         self.currentEditBrush = ET.loadBrushFromImage(image)
         
     def updatePaintBrush(self):
+        if self.currentPaintBrushName is None:
+            return
+            
         if self.currentPaintBrush is not None:
             self.currentPaintBrush = None
         image = og.Image()
@@ -550,13 +582,16 @@
     def setEditMode(self, mode):
         self.editMode = mode
         
-        if self.editMode == 0:
-            self.mainTimer.disconnect(self.mainTimer, SIGNAL("timeout()"), self.update)
-                
-        elif self.editMode == 1:
-            self.mainTimer.connect(self.mainTimer, SIGNAL("timeout()"), self.update)
-        elif self.editMode == 2:
-            self.mainTimer.connect(self.mainTimer, SIGNAL("timeout()"), self.update)
+        if self.currentTerrain is not None:
+            if self.editMode == 0:
+                self.mainTimer.disconnect(self.mainTimer, SIGNAL("timeout()"), self.update)
+                self.currentTerrain.decalCursor.hide()
+            elif self.editMode == 1:
+                self.mainTimer.connect(self.mainTimer, SIGNAL("timeout()"), self.update)
+                self.currentTerrain.decalCursor.show()
+            elif self.editMode == 2:
+                self.mainTimer.connect(self.mainTimer, SIGNAL("timeout()"), self.update)
+                self.currentTerrain.decalCursor.show()
     
     def setSmoothMode(self, ison):
         self.editSmoothMode = ison
@@ -589,17 +624,25 @@
             elif self.leftMouseDown and self.editSmoothMode:
                 self.currentTerrain.smooth(self.currentEditBrush, self.pointerNode.getPosition(), self.editBrushIntensity)  
         elif self.editMode == 2 and self.isEditing:
-            if self.currentPaintBrushName is not None :
-                print self.currentPaintBrushName + " " + str(self.paintBrushSize) + " " + str(self.paintBrushIntensity)
+            if self.currentPaintBrushName is not None and self.paintBrushIntensity is not 0 and self.leftMouseDown:
+                self.currentTerrain.paint(1, self.pointerNode.getPosition(), self.currentPaintBrush, self.paintBrushIntensity)
     
     def updateEditingCircle(self):
+        radius = None
+        if self.editMode == 1:
+            radius = self.editBrushSize / 2
+        elif self.editMode == 2:
+            radius = self.paintBrushSize / 2
+        else:
+            return # if not in an edit mode, we should not be in here anyway
+            
         self.editingCircle.beginUpdate(0)
 
         point_index = 0
         theta = 0
         while theta < 2 * og.Math.PI:
-            x = (self.editBrushSize / 2) * og.Math.Cos(theta)
-            z = (self.editBrushSize / 2)* og.Math.Sin(theta)
+            x = radius * og.Math.Cos(theta)
+            z =  radius * og.Math.Sin(theta)
             
             y = self.currentTerrain.terrainManager.getTerrainInfo().getHeightAt(self.pointerNode.getPosition().x + x, self.pointerNode.getPosition().z +  z)
             
@@ -617,13 +660,20 @@
             result = self.currentTerrain.terrainManager.getTerrainInfo().rayIntersects(self.currentRay)
             intersects = result[0]
             ## update pointer's position
-            if (intersects):
+            if (intersects) and self.currentTerrain is not None:
                 self.pointerNode.setVisible(True)
                 x = result[1][0]
                 y = result[1][1]
                 z = result[1][2]
-#                print ("Intersect %f, %f, %f " % ( x, y, z) )
+                self.currentTerrain.decalCursor.setPosition(og.Vector3(x, y, z))
+                print ("Intersect %f, %f, %f " % ( x, y, z) )
                 self.pointerNode.setPosition(og.Vector3(x, y, z))
-                self.updateEditingCircle()
-            else:
-                self.pointerNode.setVisible(False)
+                
+#                self.editingCircleUpdateCounter += 1
+#                
+#                if self.editingCircleUpdateCounter == 4: # cheap trick to update the circle only every 4 frames for performance reasons
+#                    self.updateEditingCircle()
+#                    self.editingCircleUpdateCounter = 0
+#                    
+#            else:
+#                self.pointerNode.setVisible(False)

Modified: rl/branches/persistence2/editors/Lockenwickler/src/PythonOgreConfig.py
===================================================================
--- rl/branches/persistence2/editors/Lockenwickler/src/PythonOgreConfig.py	2009-06-14 12:33:54 UTC (rev 4944)
+++ rl/branches/persistence2/editors/Lockenwickler/src/PythonOgreConfig.py	2009-06-15 18:20:42 UTC (rev 4945)
@@ -47,7 +47,7 @@
                 libpath=localpath
 
     ## path to the Python-Ogre modules
-    pythonpath = os.path.abspath(os.path.join(libpath, 'python2.5/site-packages') )
+    pythonpath = os.path.abspath(os.path.join(libpath, 'python2.6/site-packages') )
     ## and insert it into the system path
     sys.path.insert(0,pythonpath)
 

Copied: rl/branches/persistence2/editors/Lockenwickler/src/TerrainDecalCursor.py (from rev 4944, rl/trunk/editors/Lockenwickler/src/TerrainDecalCursor.py)

Modified: rl/branches/persistence2/editors/Lockenwickler/src/Ui_MyTerrainManagerDock.py
===================================================================
--- rl/branches/persistence2/editors/Lockenwickler/src/Ui_MyTerrainManagerDock.py	2009-06-14 12:33:54 UTC (rev 4944)
+++ rl/branches/persistence2/editors/Lockenwickler/src/Ui_MyTerrainManagerDock.py	2009-06-15 18:20:42 UTC (rev 4945)
@@ -1,8 +1,8 @@
 # -*- coding: utf-8 -*-
 
-# Form implementation generated from reading ui file '/home/fusion/dev/ui files/MyTerrainManagerDock.ui'
+# Form implementation generated from reading ui file '/home/fusion/Rastullah/rl/editors/Lockenwickler/ui files/MyTerrainManagerDock.ui'
 #
-# Created: Sun May 10 12:51:42 2009
+# Created: Sat May 30 17:08:29 2009
 #      by: PyQt4 UI code generator 4.4.4
 #
 # WARNING! All changes made in this file will be lost!
@@ -45,10 +45,9 @@
         self.toolBox = QtGui.QToolBox(TerrainManagerUi)
         self.toolBox.setFrameShape(QtGui.QFrame.NoFrame)
         self.toolBox.setFrameShadow(QtGui.QFrame.Sunken)
-#        self.toolBox.setTabSpacing(1)
         self.toolBox.setObjectName("toolBox")
         self.page = QtGui.QWidget()
-        self.page.setGeometry(QtCore.QRect(0, 0, 378, 655))
+        self.page.setGeometry(QtCore.QRect(0, 0, 378, 654))
         self.page.setObjectName("page")
         self.gridLayout = QtGui.QGridLayout(self.page)
         self.gridLayout.setMargin(1)
@@ -170,58 +169,14 @@
         self.terrainHeightSpinBox.setProperty("value", QtCore.QVariant(0.5))
         self.terrainHeightSpinBox.setObjectName("terrainHeightSpinBox")
         self.gridLayout.addWidget(self.terrainHeightSpinBox, 9, 1, 1, 1)
-        self.label_7 = QtGui.QLabel(self.page)
-        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Preferred, QtGui.QSizePolicy.Fixed)
-        sizePolicy.setHorizontalStretch(0)
-        sizePolicy.setVerticalStretch(0)
-        sizePolicy.setHeightForWidth(self.label_7.sizePolicy().hasHeightForWidth())
-        self.label_7.setSizePolicy(sizePolicy)
-        self.label_7.setAlignment(QtCore.Qt.AlignCenter)
-        self.label_7.setObjectName("label_7")
-        self.gridLayout.addWidget(self.label_7, 10, 0, 1, 2)
-        self.label_4 = QtGui.QLabel(self.page)
-        self.label_4.setObjectName("label_4")
-        self.gridLayout.addWidget(self.label_4, 11, 0, 1, 1)
-        self.baseNameLineEdit = QtGui.QLineEdit(self.page)
-        self.baseNameLineEdit.setObjectName("baseNameLineEdit")
-        self.gridLayout.addWidget(self.baseNameLineEdit, 11, 1, 1, 1)
-        self.label_5 = QtGui.QLabel(self.page)
-        self.label_5.setObjectName("label_5")
-        self.gridLayout.addWidget(self.label_5, 12, 0, 1, 1)
-        self.resGroupLineEdit = QtGui.QLineEdit(self.page)
-        self.resGroupLineEdit.setObjectName("resGroupLineEdit")
-        self.gridLayout.addWidget(self.resGroupLineEdit, 12, 1, 1, 1)
-        self.label_8 = QtGui.QLabel(self.page)
-        self.label_8.setObjectName("label_8")
-        self.gridLayout.addWidget(self.label_8, 13, 0, 1, 1)
-        self.texSizeComboBox = QtGui.QComboBox(self.page)
-        self.texSizeComboBox.setObjectName("texSizeComboBox")
-        self.texSizeComboBox.addItem(QtCore.QString())
-        self.texSizeComboBox.addItem(QtCore.QString())
-        self.texSizeComboBox.addItem(QtCore.QString())
-        self.texSizeComboBox.addItem(QtCore.QString())
-        self.texSizeComboBox.addItem(QtCore.QString())
-        self.gridLayout.addWidget(self.texSizeComboBox, 13, 1, 1, 1)
-        self.label_9 = QtGui.QLabel(self.page)
-        self.label_9.setObjectName("label_9")
-        self.gridLayout.addWidget(self.label_9, 14, 0, 1, 1)
-        self.numTexturesComboBox = QtGui.QComboBox(self.page)
-        self.numTexturesComboBox.setObjectName("numTexturesComboBox")
-        self.numTexturesComboBox.addItem(QtCore.QString())
-        self.numTexturesComboBox.addItem(QtCore.QString())
-        self.numTexturesComboBox.addItem(QtCore.QString())
-        self.numTexturesComboBox.addItem(QtCore.QString())
-        self.numTexturesComboBox.addItem(QtCore.QString())
-        self.numTexturesComboBox.addItem(QtCore.QString())
-        self.gridLayout.addWidget(self.numTexturesComboBox, 14, 1, 1, 1)
         self.createTerrainButton = QtGui.QPushButton(self.page)
         self.createTerrainButton.setObjectName("createTerrainButton")
-        self.gridLayout.addWidget(self.createTerrainButton, 15, 0, 1, 2)
+        self.gridLayout.addWidget(self.createTerrainButton, 10, 0, 1, 2)
         spacerItem = QtGui.QSpacerItem(20, 40, QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Expanding)
-        self.gridLayout.addItem(spacerItem, 16, 0, 1, 1)
+        self.gridLayout.addItem(spacerItem, 11, 0, 1, 1)
         self.toolBox.addItem(self.page, "")
         self.page_2 = QtGui.QWidget()
-        self.page_2.setGeometry(QtCore.QRect(0, 0, 378, 655))
+        self.page_2.setGeometry(QtCore.QRect(0, 0, 378, 654))
         self.page_2.setObjectName("page_2")
         self.gridLayout_3 = QtGui.QGridLayout(self.page_2)
         self.gridLayout_3.setMargin(1)
@@ -277,7 +232,7 @@
         self.gridLayout_3.addWidget(self.editSmoothButton, 5, 0, 1, 3)
         self.toolBox.addItem(self.page_2, "")
         self.page_3 = QtGui.QWidget()
-        self.page_3.setGeometry(QtCore.QRect(0, 0, 378, 655))
+        self.page_3.setGeometry(QtCore.QRect(0, 0, 378, 654))
         self.page_3.setObjectName("page_3")
         self.gridLayout_2 = QtGui.QGridLayout(self.page_3)
         self.gridLayout_2.setMargin(1)
@@ -293,7 +248,10 @@
         self.label_20.setObjectName("label_20")
         self.gridLayout_2.addWidget(self.label_20, 1, 0, 1, 1)
         self.paintIntensitySlider = QtGui.QSlider(self.page_3)
-        self.paintIntensitySlider.setProperty("value", QtCore.QVariant(2))
+        self.paintIntensitySlider.setMinimum(1)
+        self.paintIntensitySlider.setMaximum(40)
+        self.paintIntensitySlider.setSingleStep(1)
+        self.paintIntensitySlider.setProperty("value", QtCore.QVariant(20))
         self.paintIntensitySlider.setOrientation(QtCore.Qt.Horizontal)
         self.paintIntensitySlider.setObjectName("paintIntensitySlider")
         self.gridLayout_2.addWidget(self.paintIntensitySlider, 0, 1, 1, 1)
@@ -327,11 +285,6 @@
         self.label_11.setBuddy(self.extendsSpinBoxX)
         self.label_3.setBuddy(self.extendsSpinBoxX)
         self.label_10.setBuddy(self.extendsSpinBoxX)
-        self.label_7.setBuddy(self.baseNameLineEdit)
-        self.label_4.setBuddy(self.baseNameLineEdit)
-        self.label_5.setBuddy(self.resGroupLineEdit)
-        self.label_8.setBuddy(self.texSizeComboBox)
-        self.label_9.setBuddy(self.numTexturesComboBox)
         self.label_12.setBuddy(self.editIntensitySlider)
         self.label_14.setBuddy(self.editBrushButton)
         self.label_15.setBuddy(self.editIntensitySlider)
@@ -340,7 +293,7 @@
         self.label_19.setBuddy(self.editBrushButton)
 
         self.retranslateUi(TerrainManagerUi)
-        self.toolBox.setCurrentIndex(1)
+        self.toolBox.setCurrentIndex(2)
         self.sizeComboBox.setCurrentIndex(3)
         QtCore.QObject.connect(self.editIntensitySlider, QtCore.SIGNAL("sliderMoved(int)"), self.label_13.setNum)
         QtCore.QObject.connect(self.editBrushSizeSlider, QtCore.SIGNAL("valueChanged(int)"), self.label_16.setNum)
@@ -354,11 +307,7 @@
         QtCore.QMetaObject.connectSlotsByName(TerrainManagerUi)
         TerrainManagerUi.setTabOrder(self.editIntensitySlider, self.editBrushButton)
         TerrainManagerUi.setTabOrder(self.editBrushButton, self.extendsSpinBoxZ)
-        TerrainManagerUi.setTabOrder(self.extendsSpinBoxZ, self.baseNameLineEdit)
-        TerrainManagerUi.setTabOrder(self.baseNameLineEdit, self.resGroupLineEdit)
-        TerrainManagerUi.setTabOrder(self.resGroupLineEdit, self.texSizeComboBox)
-        TerrainManagerUi.setTabOrder(self.texSizeComboBox, self.numTexturesComboBox)
-        TerrainManagerUi.setTabOrder(self.numTexturesComboBox, self.createTerrainButton)
+        TerrainManagerUi.setTabOrder(self.extendsSpinBoxZ, self.createTerrainButton)
         TerrainManagerUi.setTabOrder(self.createTerrainButton, self.terrainListComboBox)
         TerrainManagerUi.setTabOrder(self.terrainListComboBox, self.positionSpinBoxX)
         TerrainManagerUi.setTabOrder(self.positionSpinBoxX, self.positionSpinBoxY)
@@ -426,32 +375,6 @@
 "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">This means when you have a terrain extend in Y by 100 and the terrain height is 0.5</p>\n"
 "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">the vertices are placed in at height 50.</p>\n"
 "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><img src=\":/helpPref/TerrainExtends1.png\" /></p></body></html>", None, QtGui.QApplication.UnicodeUTF8))
-        self.label_7.setText(QtGui.QApplication.translate("TerrainManagerUi", "Splatting Settings", None, QtGui.QApplication.UnicodeUTF8))
-        self.label_4.setToolTip(QtGui.QApplication.translate("TerrainManagerUi", "Base name for the map textures (will be appended by their number)", None, QtGui.QApplication.UnicodeUTF8))
-        self.label_4.setText(QtGui.QApplication.translate("TerrainManagerUi", "&Base Name", None, QtGui.QApplication.UnicodeUTF8))
-        self.baseNameLineEdit.setToolTip(QtGui.QApplication.translate("TerrainManagerUi", "Base name for the map textures (will be appended by their number)", None, QtGui.QApplication.UnicodeUTF8))
-        self.baseNameLineEdit.setText(QtGui.QApplication.translate("TerrainManagerUi", "ETSplatting", None, QtGui.QApplication.UnicodeUTF8))
-        self.label_5.setToolTip(QtGui.QApplication.translate("TerrainManagerUi", "The resource group the textures will be placed in", None, QtGui.QApplication.UnicodeUTF8))
-        self.label_5.setText(QtGui.QApplication.translate("TerrainManagerUi", "&Res Group", None, QtGui.QApplication.UnicodeUTF8))
-        self.resGroupLineEdit.setToolTip(QtGui.QApplication.translate("TerrainManagerUi", "The resource group the textures will be placed in", None, QtGui.QApplication.UnicodeUTF8))
-        self.resGroupLineEdit.setText(QtGui.QApplication.translate("TerrainManagerUi", "ET", None, QtGui.QApplication.UnicodeUTF8))
-        self.label_8.setToolTip(QtGui.QApplication.translate("TerrainManagerUi", "Texture size in pixels", None, QtGui.QApplication.UnicodeUTF8))
-        self.label_8.setText(QtGui.QApplication.translate("TerrainManagerUi", "&Tex Size", None, QtGui.QApplication.UnicodeUTF8))
-        self.texSizeComboBox.setToolTip(QtGui.QApplication.translate("TerrainManagerUi", "Texture size in pixels", None, QtGui.QApplication.UnicodeUTF8))
-        self.texSizeComboBox.setItemText(0, QtGui.QApplication.translate("TerrainManagerUi", "64", None, QtGui.QApplication.UnicodeUTF8))
-        self.texSizeComboBox.setItemText(1, QtGui.QApplication.translate("TerrainManagerUi", "128", None, QtGui.QApplication.UnicodeUTF8))
-        self.texSizeComboBox.setItemText(2, QtGui.QApplication.translate("TerrainManagerUi", "256", None, QtGui.QApplication.UnicodeUTF8))
-        self.texSizeComboBox.setItemText(3, QtGui.QApplication.translate("TerrainManagerUi", "512", None, QtGui.QApplication.UnicodeUTF8))
-        self.texSizeComboBox.setItemText(4, QtGui.QApplication.translate("TerrainManagerUi", "1024", None, QtGui.QApplication.UnicodeUTF8))
-        self.label_9.setToolTip(QtGui.QApplication.translate("TerrainManagerUi", "Number of splatting textures (Layers)", None, QtGui.QApplication.UnicodeUTF8))
-        self.label_9.setText(QtGui.QApplication.translate("TerrainManagerUi", "&NumTextures", None, QtGui.QApplication.UnicodeUTF8))
-        self.numTexturesComboBox.setToolTip(QtGui.QApplication.translate("TerrainManagerUi", "Number of splatting textures (Layers)", None, QtGui.QApplication.UnicodeUTF8))
-        self.numTexturesComboBox.setItemText(0, QtGui.QApplication.translate("TerrainManagerUi", "1", None, QtGui.QApplication.UnicodeUTF8))
-        self.numTexturesComboBox.setItemText(1, QtGui.QApplication.translate("TerrainManagerUi", "2", None, QtGui.QApplication.UnicodeUTF8))
-        self.numTexturesComboBox.setItemText(2, QtGui.QApplication.translate("TerrainManagerUi", "3", None, QtGui.QApplication.UnicodeUTF8))
-        self.numTexturesComboBox.setItemText(3, QtGui.QApplication.translate("TerrainManagerUi", "4", None, QtGui.QApplication.UnicodeUTF8))
-        self.numTexturesComboBox.setItemText(4, QtGui.QApplication.translate("TerrainManagerUi", "5", None, QtGui.QApplication.UnicodeUTF8))
-        self.numTexturesComboBox.setItemText(5, QtGui.QApplication.translate("TerrainManagerUi", "6", None, QtGui.QApplication.UnicodeUTF8))
         self.createTerrainButton.setText(QtGui.QApplication.translate("TerrainManagerUi", "Create Terrain", None, QtGui.QApplication.UnicodeUTF8))
         self.toolBox.setItemText(self.toolBox.indexOf(self.page), QtGui.QApplication.translate("TerrainManagerUi", "Create Terrain", None, QtGui.QApplication.UnicodeUTF8))
         self.label_12.setToolTip(QtGui.QApplication.translate("TerrainManagerUi", "The intensity wich is applied to the tool", None, QtGui.QApplication.UnicodeUTF8))

Copied: rl/branches/persistence2/editors/Lockenwickler/src/media/terrain/cursorTex.png (from rev 4944, rl/trunk/editors/Lockenwickler/src/media/terrain/cursorTex.png)

Copied: rl/branches/persistence2/editors/Lockenwickler/src/media/terrain/decalBase.png (from rev 4944, rl/trunk/editors/Lockenwickler/src/media/terrain/decalBase.png)

Modified: rl/branches/persistence2/editors/Lockenwickler/ui files/MyTerrainManagerDock.ui
===================================================================
--- rl/branches/persistence2/editors/Lockenwickler/ui files/MyTerrainManagerDock.ui	2009-06-14 12:33:54 UTC (rev 4944)
+++ rl/branches/persistence2/editors/Lockenwickler/ui files/MyTerrainManagerDock.ui	2009-06-15 18:20:42 UTC (rev 4945)
@@ -1,7 +1,8 @@
-<ui version="4.0" >
+<?xml version="1.0" encoding="UTF-8"?>
+<ui version="4.0">
  <class>TerrainManagerUi</class>
- <widget class="QWidget" name="TerrainManagerUi" >
-  <property name="geometry" >
+ <widget class="QWidget" name="TerrainManagerUi">
+  <property name="geometry">
    <rect>
     <x>0</x>
     <y>0</y>
@@ -9,622 +10,462 @@
     <height>769</height>
    </rect>
   </property>
-  <property name="windowTitle" >
+  <property name="windowTitle">
    <string>Form</string>
   </property>
-  <layout class="QGridLayout" name="gridLayout_4" >
-   <property name="margin" >
+  <layout class="QGridLayout" name="gridLayout_4">
+   <property name="margin">
     <number>1</number>
    </property>
-   <property name="spacing" >
+   <property name="spacing">
     <number>1</number>
    </property>
-   <item row="0" column="0" >
-    <widget class="QComboBox" name="terrainListComboBox" >
+   <item row="0" column="0">
+    <widget class="QComboBox" name="terrainListComboBox">
      <item>
-      <property name="text" >
+      <property name="text">
        <string>No Terrain</string>
       </property>
      </item>
     </widget>
    </item>
-   <item row="0" column="1" >
-    <widget class="QToolButton" name="toggleTerrainVisibilityButton" >
-     <property name="toolTip" >
+   <item row="0" column="1">
+    <widget class="QToolButton" name="toggleTerrainVisibilityButton">
+     <property name="toolTip">
       <string>Delete the current terrain</string>
      </property>
-     <property name="text" >
+     <property name="text">
       <string>...</string>
      </property>
-     <property name="icon" >
-      <iconset resource="../src/media/icons/icons.qrc" >
+     <property name="icon">
+      <iconset resource="../src/media/icons/icons.qrc">
        <normaloff>:/iconsPref/14_layer_invisible.png</normaloff>
        <normalon>:/iconsPref/14_layer_visible.png</normalon>:/iconsPref/14_layer_invisible.png</iconset>
      </property>
-     <property name="checkable" >
+     <property name="checkable">
       <bool>true</bool>
      </property>
     </widget>
    </item>
-   <item row="0" column="2" >
-    <widget class="QToolButton" name="editTerrainButton" >
-     <property name="toolTip" >
+   <item row="0" column="2">
+    <widget class="QToolButton" name="editTerrainButton">
+     <property name="toolTip">
       <string>Delete the current terrain</string>
      </property>
-     <property name="text" >
+     <property name="text">
       <string>...</string>
      </property>
-     <property name="icon" >
-      <iconset resource="../src/media/icons/icons.qrc" >
+     <property name="icon">
+      <iconset resource="../src/media/icons/icons.qrc">
        <normaloff>:/iconsPref/colors.png</normaloff>:/iconsPref/colors.png</iconset>
      </property>
-     <property name="checkable" >
+     <property name="checkable">
       <bool>true</bool>
      </property>
     </widget>
    </item>
-   <item row="0" column="3" >
-    <widget class="QToolButton" name="deleteTerrainButton" >
-     <property name="toolTip" >
+   <item row="0" column="3">
+    <widget class="QToolButton" name="deleteTerrainButton">
+     <property name="toolTip">
       <string>Delete the current terrain</string>
      </property>
-     <property name="text" >
+     <property name="text">
       <string>...</string>
      </property>
-     <property name="icon" >
-      <iconset resource="../src/media/icons/icons.qrc" >
+     <property name="icon">
+      <iconset resource="../src/media/icons/icons.qrc">
        <normaloff>:/iconsPref/editdelete.png</normaloff>:/iconsPref/editdelete.png</iconset>
      </property>
     </widget>
    </item>
-   <item row="1" column="0" colspan="4" >
-    <widget class="QToolBox" name="toolBox" >
-     <property name="frameShape" >
+   <item row="1" column="0" colspan="4">
+    <widget class="QToolBox" name="toolBox">
+     <property name="frameShape">
       <enum>QFrame::NoFrame</enum>
      </property>
-     <property name="frameShadow" >
+     <property name="frameShadow">
       <enum>QFrame::Sunken</enum>
      </property>
-     <property name="currentIndex" >
-      <number>1</number>
+     <property name="currentIndex">
+      <number>2</number>
      </property>
-     <property name="tabSpacing" >
+     <property name="tabSpacing">
       <number>1</number>
      </property>
-     <widget class="QWidget" name="page" >
-      <property name="geometry" >
+     <widget class="QWidget" name="page">
+      <property name="geometry">
        <rect>
         <x>0</x>
         <y>0</y>
         <width>378</width>
-        <height>655</height>
+        <height>654</height>
        </rect>
       </property>
-      <attribute name="label" >
+      <attribute name="label">
        <string>Create Terrain</string>
       </attribute>
-      <layout class="QGridLayout" name="gridLayout" >
-       <property name="margin" >
+      <layout class="QGridLayout" name="gridLayout">
+       <property name="margin">
         <number>1</number>
        </property>
-       <property name="spacing" >
+       <property name="spacing">
         <number>1</number>
        </property>
-       <item row="0" column="0" colspan="2" >
-        <widget class="QLabel" name="label_6" >
-         <property name="sizePolicy" >
-          <sizepolicy vsizetype="Fixed" hsizetype="Preferred" >
+       <item row="0" column="0" colspan="2">
+        <widget class="QLabel" name="label_6">
+         <property name="sizePolicy">
+          <sizepolicy hsizetype="Preferred" vsizetype="Fixed">
            <horstretch>0</horstretch>
            <verstretch>0</verstretch>
           </sizepolicy>
          </property>
-         <property name="text" >
+         <property name="text">
           <string>Geometry</string>
          </property>
-         <property name="alignment" >
+         <property name="alignment">
           <set>Qt::AlignCenter</set>
          </property>
-         <property name="buddy" >
+         <property name="buddy">
           <cstring>nameLineEdit</cstring>
          </property>
         </widget>
        </item>
-       <item row="1" column="0" >
-        <widget class="QLabel" name="label" >
-         <property name="toolTip" >
+       <item row="1" column="0">
+        <widget class="QLabel" name="label">
+         <property name="toolTip">
           <string>Name of the terrain</string>
          </property>
-         <property name="text" >
+         <property name="text">
           <string>&amp;Name</string>
          </property>
-         <property name="buddy" >
+         <property name="buddy">
           <cstring>nameLineEdit</cstring>
          </property>
         </widget>
        </item>
-       <item row="1" column="1" >
-        <widget class="QLineEdit" name="nameLineEdit" >
-         <property name="toolTip" >
+       <item row="1" column="1">
+        <widget class="QLineEdit" name="nameLineEdit">
+         <property name="toolTip">
           <string>Name of the terrain</string>
          </property>
         </widget>
        </item>
-       <item row="2" column="0" >
-        <widget class="QLabel" name="label_2" >
-         <property name="toolTip" >
+       <item row="2" column="0">
+        <widget class="QLabel" name="label_2">
+         <property name="toolTip">
           <string>Vertex density</string>
          </property>
-         <property name="text" >
+         <property name="text">
           <string>&amp;Size</string>
          </property>
-         <property name="buddy" >
+         <property name="buddy">
           <cstring>sizeComboBox</cstring>
          </property>
         </widget>
        </item>
-       <item row="2" column="1" >
-        <widget class="QComboBox" name="sizeComboBox" >
-         <property name="toolTip" >
+       <item row="2" column="1">
+        <widget class="QComboBox" name="sizeComboBox">
+         <property name="toolTip">
           <string>Vertex density</string>
          </property>
-         <property name="currentIndex" >
+         <property name="currentIndex">
           <number>3</number>
          </property>
          <item>
-          <property name="text" >
+          <property name="text">
            <string>8</string>
           </property>
          </item>
          <item>
-          <property name="text" >
+          <property name="text">
            <string>16</string>
           </property>
          </item>
          <item>
-          <property name="text" >
+          <property name="text">
            <string>32</string>
           </property>
          </item>
          <item>
-          <property name="text" >
+          <property name="text">
            <string>64</string>
           </property>
          </item>
          <item>
-          <property name="text" >
+          <property name="text">
            <string>128</string>
           </property>
          </item>
          <item>
-          <property name="text" >
+          <property name="text">
            <string>256</string>
           </property>
          </item>
          <item>
-          <property name="text" >
+          <property name="text">
            <string>512</string>
           </property>
          </item>
          <item>
-          <property name="text" >
+          <property name="text">
            <string>1024</string>
           </property>
          </item>
         </widget>
        </item>
-       <item row="3" column="1" >
-        <widget class="QDoubleSpinBox" name="positionSpinBoxX" >
-         <property name="sizePolicy" >
-          <sizepolicy vsizetype="Fixed" hsizetype="Fixed" >
+       <item row="3" column="1">
+        <widget class="QDoubleSpinBox" name="positionSpinBoxX">
+         <property name="sizePolicy">
+          <sizepolicy hsizetype="Fixed" vsizetype="Fixed">
            <horstretch>0</horstretch>
            <verstretch>0</verstretch>
           </sizepolicy>
          </property>
-         <property name="toolTip" >
+         <property name="toolTip">
           <string>Position of the terrain</string>
          </property>
-         <property name="prefix" >
+         <property name="prefix">
           <string>X:</string>
          </property>
-         <property name="minimum" >
+         <property name="minimum">
           <double>-999999999.000000000000000</double>
          </property>
-         <property name="maximum" >
+         <property name="maximum">
           <double>999999999.000000000000000</double>
          </property>
-         <property name="value" >
+         <property name="value">
           <double>0.000000000000000</double>
          </property>
         </widget>
        </item>
-       <item row="4" column="0" >
-        <widget class="QLabel" name="label_11" >
-         <property name="toolTip" >
+       <item row="4" column="0">
+        <widget class="QLabel" name="label_11">
+         <property name="toolTip">
           <string>Position of the terrain</string>
          </property>
-         <property name="text" >
+         <property name="text">
           <string>&amp;Position</string>
          </property>
-         <property name="buddy" >
+         <property name="buddy">
           <cstring>extendsSpinBoxX</cstring>
          </property>
         </widget>
        </item>
-       <item row="4" column="1" >
-        <widget class="QDoubleSpinBox" name="positionSpinBoxY" >
-         <property name="sizePolicy" >
-          <sizepolicy vsizetype="Fixed" hsizetype="Fixed" >
+       <item row="4" column="1">
+        <widget class="QDoubleSpinBox" name="positionSpinBoxY">
+         <property name="sizePolicy">
+          <sizepolicy hsizetype="Fixed" vsizetype="Fixed">
            <horstretch>0</horstretch>
            <verstretch>0</verstretch>
           </sizepolicy>
          </property>
-         <property name="toolTip" >
+         <property name="toolTip">
           <string>Position of the terrain</string>
          </property>
-         <property name="prefix" >
+         <property name="prefix">
           <string>Y:</string>
          </property>
-         <property name="minimum" >
+         <property name="minimum">
           <double>-999999999.000000000000000</double>
          </property>
-         <property name="maximum" >
+         <property name="maximum">
           <double>999999999.000000000000000</double>
          </property>
         </widget>
        </item>
-       <item row="5" column="1" >
-        <widget class="QDoubleSpinBox" name="positionSpinBoxZ" >
-         <property name="sizePolicy" >
-          <sizepolicy vsizetype="Fixed" hsizetype="Fixed" >
+       <item row="5" column="1">
+        <widget class="QDoubleSpinBox" name="positionSpinBoxZ">
+         <property name="sizePolicy">
+          <sizepolicy hsizetype="Fixed" vsizetype="Fixed">
            <horstretch>0</horstretch>
            <verstretch>0</verstretch>
           </sizepolicy>
          </property>
-         <property name="toolTip" >
+         <property name="toolTip">
           <string>Position of the terrain</string>
          </property>
-         <property name="prefix" >
+         <property name="prefix">
           <string>Z:</string>
          </property>
-         <property name="suffix" >
+         <property name="suffix">
           <string/>
          </property>
-         <property name="minimum" >
+         <property name="minimum">
           <double>-999999999.000000000000000</double>
          </property>
-         <property name="maximum" >
+         <property name="maximum">
           <double>999999999.000000000000000</double>
          </property>
         </widget>
        </item>
-       <item row="6" column="1" >
-        <widget class="QSpinBox" name="extendsSpinBoxX" >
-         <property name="sizePolicy" >
-          <sizepolicy vsizetype="Fixed" hsizetype="Fixed" >
+       <item row="6" column="1">
+        <widget class="QSpinBox" name="extendsSpinBoxX">
+         <property name="sizePolicy">
+          <sizepolicy hsizetype="Fixed" vsizetype="Fixed">
            <horstretch>0</horstretch>
            <verstretch>0</verstretch>
           </sizepolicy>
          </property>
-         <property name="toolTip" >
+         <property name="toolTip">
           <string>The extends of the terrain</string>
          </property>
-         <property name="correctionMode" >
+         <property name="correctionMode">
           <enum>QAbstractSpinBox::CorrectToNearestValue</enum>
          </property>
-         <property name="suffix" >
+         <property name="suffix">
           <string/>
          </property>
-         <property name="prefix" >
+         <property name="prefix">
           <string>X:</string>
          </property>
-         <property name="minimum" >
+         <property name="minimum">
           <number>0</number>
          </property>
-         <property name="maximum" >
+         <property name="maximum">
           <number>10000</number>
          </property>
-         <property name="value" >
+         <property name="value">
           <number>128</number>
          </property>
         </widget>
        </item>
-       <item row="7" column="0" >
-        <widget class="QLabel" name="label_3" >
-         <property name="toolTip" >
+       <item row="7" column="0">
+        <widget class="QLabel" name="label_3">
+         <property name="toolTip">
           <string>The extends of the terrain</string>
          </property>
-         <property name="text" >
+         <property name="text">
           <string>&amp;Extends</string>
          </property>
-         <property name="buddy" >
+         <property name="buddy">
           <cstring>extendsSpinBoxX</cstring>
          </property>
         </widget>
        </item>
-       <item row="7" column="1" >
-        <widget class="QSpinBox" name="extendsSpinBoxY" >
-         <property name="sizePolicy" >
-          <sizepolicy vsizetype="Fixed" hsizetype="Fixed" >
+       <item row="7" column="1">
+        <widget class="QSpinBox" name="extendsSpinBoxY">
+         <property name="sizePolicy">
+          <sizepolicy hsizetype="Fixed" vsizetype="Fixed">
            <horstretch>0</horstretch>
            <verstretch>0</verstretch>
           </sizepolicy>
          </property>
-         <property name="toolTip" >
+         <property name="toolTip">
           <string>The extends of the terrain</string>
          </property>
-         <property name="correctionMode" >
+         <property name="correctionMode">
           <enum>QAbstractSpinBox::CorrectToNearestValue</enum>
          </property>
-         <property name="suffix" >
+         <property name="suffix">
           <string/>
          </property>
-         <property name="prefix" >
+         <property name="prefix">
           <string>Y:</string>
          </property>
-         <property name="minimum" >
+         <property name="minimum">
           <number>0</number>
          </property>
-         <property name="maximum" >
+         <property name="maximum">
           <number>10000</number>
          </property>
-         <property name="value" >
+         <property name="value">
           <number>128</number>
          </property>
         </widget>
        </item>
-       <item row="8" column="1" >
-        <widget class="QSpinBox" name="extendsSpinBoxZ" >
-         <property name="sizePolicy" >
-          <sizepolicy vsizetype="Fixed" hsizetype="Fixed" >
+       <item row="8" column="1">
+        <widget class="QSpinBox" name="extendsSpinBoxZ">
+         <property name="sizePolicy">
+          <sizepolicy hsizetype="Fixed" vsizetype="Fixed">
            <horstretch>0</horstretch>
            <verstretch>0</verstretch>
           </sizepolicy>
          </property>
-         <property name="toolTip" >
+         <property name="toolTip">
           <string>The extends of the terrain</string>
          </property>
-         <property name="correctionMode" >
+         <property name="correctionMode">
           <enum>QAbstractSpinBox::CorrectToNearestValue</enum>
          </property>
-         <property name="suffix" >
+         <property name="suffix">
           <string/>
          </property>
-         <property name="prefix" >
+         <property name="prefix">
           <string>Z:</string>
          </property>
-         <property name="minimum" >
+         <property name="minimum">
           <number>0</number>
          </property>
-         <property name="maximum" >
+         <property name="maximum">
           <number>10000</number>
          </property>
-         <property name="value" >
+         <property name="value">
           <number>128</number>
          </property>
         </widget>
        </item>
-       <item row="9" column="0" >
-        <widget class="QLabel" name="label_10" >
-         <property name="toolTip" >
-          <string>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">
-&lt;html>&lt;head>&lt;meta name="qrichtext" content="1" />&lt;style type="text/css">
+       <item row="9" column="0">
+        <widget class="QLabel" name="label_10">
+         <property name="toolTip">
+          <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
+&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
 p, li { white-space: pre-wrap; }
-&lt;/style>&lt;/head>&lt;body style=" font-family:'Sans Serif'; font-size:9pt; font-weight:400; font-style:normal;">
-&lt;p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">This value means how high the vertices are placed in relation to the terrain extend in Y.&lt;/p>
-&lt;p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">This means when you have a terrain extend in Y by 100 and the terrain height is 0.5&lt;/p>
-&lt;p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">the vertices are placed in at height 50.&lt;/p>
-&lt;p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">&lt;img src=":/helpPref/TerrainExtends1.png" />&lt;/p>&lt;/body>&lt;/html></string>
+&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'Sans Serif'; font-size:9pt; font-weight:400; font-style:normal;&quot;&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;This value means how high the vertices are placed in relation to the terrain extend in Y.&lt;/p&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;This means when you have a terrain extend in Y by 100 and the terrain height is 0.5&lt;/p&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;the vertices are placed in at height 50.&lt;/p&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;img src=&quot;:/helpPref/TerrainExtends1.png&quot; /&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
          </property>
-         <property name="text" >
+         <property name="text">
           <string>&amp;Height</string>
          </property>
-         <property name="buddy" >
+         <property name="buddy">
           <cstring>extendsSpinBoxX</cstring>
          </property>
         </widget>
        </item>
-       <item row="9" column="1" >
-        <widget class="QDoubleSpinBox" name="terrainHeightSpinBox" >
-         <property name="sizePolicy" >
-          <sizepolicy vsizetype="Fixed" hsizetype="Fixed" >
+       <item row="9" column="1">
+        <widget class="QDoubleSpinBox" name="terrainHeightSpinBox">
+         <property name="sizePolicy">
+          <sizepolicy hsizetype="Fixed" vsizetype="Fixed">
            <horstretch>0</horstretch>
            <verstretch>0</verstretch>
           </sizepolicy>
          </property>
-         <property name="toolTip" >
-          <string>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">
-&lt;html>&lt;head>&lt;meta name="qrichtext" content="1" />&lt;style type="text/css">
+         <property name="toolTip">
+          <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
+&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
 p, li { white-space: pre-wrap; }
-&lt;/style>&lt;/head>&lt;body style=" font-family:'Sans Serif'; font-size:9pt; font-weight:400; font-style:normal;">
-&lt;p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">This value means how high the vertices are placed in relation to the terrain extend in Y.&lt;/p>
-&lt;p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">This means when you have a terrain extend in Y by 100 and the terrain height is 0.5&lt;/p>
-&lt;p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">the vertices are placed in at height 50.&lt;/p>
-&lt;p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">&lt;img src=":/helpPref/TerrainExtends1.png" />&lt;/p>&lt;/body>&lt;/html></string>
+&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'Sans Serif'; font-size:9pt; font-weight:400; font-style:normal;&quot;&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;This value means how high the vertices are placed in relation to the terrain extend in Y.&lt;/p&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;This means when you have a terrain extend in Y by 100 and the terrain height is 0.5&lt;/p&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;the vertices are placed in at height 50.&lt;/p&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;img src=&quot;:/helpPref/TerrainExtends1.png&quot; /&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
          </property>
-         <property name="maximum" >
+         <property name="maximum">
           <double>1.000000000000000</double>
          </property>
-         <property name="singleStep" >
+         <property name="singleStep">
           <double>0.100000000000000</double>
          </property>
-         <property name="value" >
+         <property name="value">
           <double>0.500000000000000</double>
          </property>
         </widget>
        </item>
-       <item row="10" column="0" colspan="2" >
-        <widget class="QLabel" name="label_7" >
-         <property name="sizePolicy" >
-          <sizepolicy vsizetype="Fixed" hsizetype="Preferred" >
-           <horstretch>0</horstretch>
-           <verstretch>0</verstretch>
-          </sizepolicy>
-         </property>
-         <property name="text" >
-          <string>Splatting Settings</string>
-         </property>
-         <property name="alignment" >
-          <set>Qt::AlignCenter</set>
-         </property>
-         <property name="buddy" >
-          <cstring>baseNameLineEdit</cstring>
-         </property>
-        </widget>
-       </item>
-       <item row="11" column="0" >
-        <widget class="QLabel" name="label_4" >
-         <property name="toolTip" >
-          <string>Base name for the map textures (will be appended by their number)</string>
-         </property>
-         <property name="text" >
-          <string>&amp;Base Name</string>
-         </property>
-         <property name="buddy" >
-          <cstring>baseNameLineEdit</cstring>
-         </property>
-        </widget>
-       </item>
-       <item row="11" column="1" >
-        <widget class="QLineEdit" name="baseNameLineEdit" >
-         <property name="toolTip" >
-          <string>Base name for the map textures (will be appended by their number)</string>
-         </property>
-         <property name="text" >
-          <string>ETSplatting</string>
-         </property>
-        </widget>
-       </item>
-       <item row="12" column="0" >
-        <widget class="QLabel" name="label_5" >
-         <property name="toolTip" >
-          <string>The resource group the textures will be placed in</string>
-         </property>
-         <property name="text" >
-          <string>&amp;Res Group</string>
-         </property>
-         <property name="buddy" >
-          <cstring>resGroupLineEdit</cstring>
-         </property>
-        </widget>
-       </item>
-       <item row="12" column="1" >
-        <widget class="QLineEdit" name="resGroupLineEdit" >
-         <property name="toolTip" >
-          <string>The resource group the textures will be placed in</string>
-         </property>
-         <property name="text" >
-          <string>ET</string>
-         </property>
-        </widget>
-       </item>
-       <item row="13" column="0" >
-        <widget class="QLabel" name="label_8" >
-         <property name="toolTip" >
-          <string>Texture size in pixels</string>
-         </property>
-         <property name="text" >
-          <string>&amp;Tex Size</string>
-         </property>
-         <property name="buddy" >
-          <cstring>texSizeComboBox</cstring>
-         </property>
-        </widget>
-       </item>
-       <item row="13" column="1" >
-        <widget class="QComboBox" name="texSizeComboBox" >
-         <property name="toolTip" >
-          <string>Texture size in pixels</string>
-         </property>
-         <item>
-          <property name="text" >
-           <string>64</string>
-          </property>
-         </item>
-         <item>
-          <property name="text" >
-           <string>128</string>
-          </property>
-         </item>
-         <item>
-          <property name="text" >
-           <string>256</string>
-          </property>
-         </item>
-         <item>
-          <property name="text" >
-           <string>512</string>
-          </property>
-         </item>
-         <item>
-          <property name="text" >
-           <string>1024</string>
-          </property>
-         </item>
-        </widget>
-       </item>
-       <item row="14" column="0" >
-        <widget class="QLabel" name="label_9" >
-         <property name="toolTip" >
-          <string>Number of splatting textures (Layers)</string>
-         </property>
-         <property name="text" >
-          <string>&amp;NumTextures</string>
-         </property>
-         <property name="buddy" >
-          <cstring>numTexturesComboBox</cstring>
-         </property>
-        </widget>
-       </item>
-       <item row="14" column="1" >
-        <widget class="QComboBox" name="numTexturesComboBox" >
-         <property name="toolTip" >
-          <string>Number of splatting textures (Layers)</string>
-         </property>
-         <item>
-          <property name="text" >
-           <string>1</string>
-          </property>
-         </item>
-         <item>
-          <property name="text" >
-           <string>2</string>
-          </property>
-         </item>
-         <item>
-          <property name="text" >
-           <string>3</string>
-          </property>
-         </item>
-         <item>
-          <property name="text" >
-           <string>4</string>
-          </property>
-         </item>
-         <item>
-          <property name="text" >
-           <string>5</string>
-          </property>
-         </item>
-         <item>
-          <property name="text" >
-           <string>6</string>
-          </property>
-         </item>
-        </widget>
-       </item>
-       <item row="15" column="0" colspan="2" >
-        <widget class="QPushButton" name="createTerrainButton" >
-         <property name="text" >
+       <item row="10" column="0" colspan="2">
+        <widget class="QPushButton" name="createTerrainButton">
+         <property name="text">
           <string>Create Terrain</string>
          </property>
         </widget>
        </item>
-       <item row="16" column="0" >
-        <spacer name="verticalSpacer_2" >
-         <property name="orientation" >
+       <item row="11" column="0">
+        <spacer name="verticalSpacer_2">
+         <property name="orientation">
           <enum>Qt::Vertical</enum>
          </property>
-         <property name="sizeHint" stdset="0" >
+         <property name="sizeHint" stdset="0">
           <size>
            <width>20</width>
            <height>40</height>
@@ -634,31 +475,31 @@
        </item>
       </layout>
      </widget>
-     <widget class="QWidget" name="page_2" >
-      <property name="geometry" >
+     <widget class="QWidget" name="page_2">
+      <property name="geometry">
        <rect>
         <x>0</x>
         <y>0</y>
         <width>378</width>
-        <height>655</height>
+        <height>654</height>
        </rect>
       </property>
-      <attribute name="label" >
+      <attribute name="label">
        <string>ModifyTerrain</string>
       </attribute>
-      <layout class="QGridLayout" name="gridLayout_3" >
-       <property name="margin" >
+      <layout class="QGridLayout" name="gridLayout_3">
+       <property name="margin">
         <number>1</number>
        </property>
-       <property name="spacing" >
+       <property name="spacing">
         <number>1</number>
        </property>
-       <item row="6" column="1" >
-        <spacer name="verticalSpacer" >
-         <property name="orientation" >
+       <item row="6" column="1">
+        <spacer name="verticalSpacer">
+         <property name="orientation">
           <enum>Qt::Vertical</enum>
          </property>
-         <property name="sizeHint" stdset="0" >
+         <property name="sizeHint" stdset="0">
           <size>
            <width>20</width>
            <height>451</height>
@@ -666,218 +507,227 @@
          </property>
         </spacer>
        </item>
-       <item row="1" column="0" >
-        <widget class="QLabel" name="label_12" >
-         <property name="toolTip" >
+       <item row="1" column="0">
+        <widget class="QLabel" name="label_12">
+         <property name="toolTip">
           <string>The intensity wich is applied to the tool</string>
          </property>
-         <property name="text" >
+         <property name="text">
           <string>Intensity</string>
          </property>
-         <property name="buddy" >
+         <property name="buddy">
           <cstring>editIntensitySlider</cstring>
          </property>
         </widget>
        </item>
-       <item row="1" column="1" >
-        <widget class="QSlider" name="editIntensitySlider" >
-         <property name="toolTip" >
+       <item row="1" column="1">
+        <widget class="QSlider" name="editIntensitySlider">
+         <property name="toolTip">
           <string>The intensity wich is applied to the tool</string>
          </property>
-         <property name="minimum" >
+         <property name="minimum">
           <number>-50</number>
          </property>
-         <property name="maximum" >
+         <property name="maximum">
           <number>50</number>
          </property>
-         <property name="value" >
+         <property name="value">
           <number>1</number>
          </property>
-         <property name="orientation" >
+         <property name="orientation">
           <enum>Qt::Horizontal</enum>
          </property>
         </widget>
        </item>
-       <item row="1" column="2" >
-        <widget class="QLabel" name="label_13" >
-         <property name="toolTip" >
+       <item row="1" column="2">
+        <widget class="QLabel" name="label_13">
+         <property name="toolTip">
           <string>The intensity wich is applied to the tool</string>
          </property>
-         <property name="text" >
+         <property name="text">
           <string>2</string>
          </property>
         </widget>
        </item>
-       <item row="3" column="1" >
-        <widget class="QPushButton" name="editBrushButton" >
-         <property name="sizePolicy" >
-          <sizepolicy vsizetype="Fixed" hsizetype="Fixed" >
+       <item row="3" column="1">
+        <widget class="QPushButton" name="editBrushButton">
+         <property name="sizePolicy">
+          <sizepolicy hsizetype="Fixed" vsizetype="Fixed">
            <horstretch>0</horstretch>
            <verstretch>0</verstretch>
           </sizepolicy>
          </property>
-         <property name="minimumSize" >
+         <property name="minimumSize">
           <size>
            <width>130</width>
            <height>130</height>
           </size>
          </property>
-         <property name="toolTip" >
+         <property name="toolTip">
           <string>The brush that is applied</string>
          </property>
-         <property name="text" >
+         <property name="text">
           <string>PushButton</string>
          </property>
         </widget>
        </item>
-       <item row="3" column="0" >
-        <widget class="QLabel" name="label_14" >
-         <property name="text" >
+       <item row="3" column="0">
+        <widget class="QLabel" name="label_14">
+         <property name="text">
           <string>Brush Type  </string>
          </property>
-         <property name="buddy" >
+         <property name="buddy">
           <cstring>editBrushButton</cstring>
          </property>
         </widget>
        </item>
-       <item row="2" column="0" >
-        <widget class="QLabel" name="label_15" >
-         <property name="toolTip" >
+       <item row="2" column="0">
+        <widget class="QLabel" name="label_15">
+         <property name="toolTip">
           <string>The diameter of the tool</string>
          </property>
-         <property name="text" >
+         <property name="text">
           <string>Brush Size</string>
          </property>
-         <property name="buddy" >
+         <property name="buddy">
           <cstring>editIntensitySlider</cstring>
          </property>
         </widget>
        </item>
-       <item row="2" column="2" >
-        <widget class="QLabel" name="label_16" >
-         <property name="toolTip" >
+       <item row="2" column="2">
+        <widget class="QLabel" name="label_16">
+         <property name="toolTip">
           <string>The diameter of the tool</string>
          </property>
-         <property name="text" >
+         <property name="text">
           <string>2</string>
          </property>
         </widget>
        </item>
-       <item row="2" column="1" >
-        <widget class="QSlider" name="editBrushSizeSlider" >
-         <property name="toolTip" >
+       <item row="2" column="1">
+        <widget class="QSlider" name="editBrushSizeSlider">
+         <property name="toolTip">
           <string>The diameter of the tool</string>
          </property>
-         <property name="minimum" >
+         <property name="minimum">
           <number>1</number>
          </property>
-         <property name="maximum" >
+         <property name="maximum">
           <number>50</number>
          </property>
-         <property name="value" >
+         <property name="value">
           <number>2</number>
          </property>
-         <property name="orientation" >
+         <property name="orientation">
           <enum>Qt::Horizontal</enum>
          </property>
         </widget>
        </item>
-       <item row="4" column="0" colspan="3" >
-        <widget class="QPushButton" name="setHeightButton" >
-         <property name="text" >
+       <item row="4" column="0" colspan="3">
+        <widget class="QPushButton" name="setHeightButton">
+         <property name="text">
           <string>Set Height</string>
          </property>
-         <property name="checkable" >
+         <property name="checkable">
           <bool>true</bool>
          </property>
         </widget>
        </item>
-       <item row="5" column="0" colspan="3" >
-        <widget class="QPushButton" name="editSmoothButton" >
-         <property name="text" >
+       <item row="5" column="0" colspan="3">
+        <widget class="QPushButton" name="editSmoothButton">
+         <property name="text">
           <string>Smooth</string>
          </property>
-         <property name="checkable" >
+         <property name="checkable">
           <bool>true</bool>
          </property>
         </widget>
        </item>
       </layout>
      </widget>
-     <widget class="QWidget" name="page_3" >
-      <property name="geometry" >
+     <widget class="QWidget" name="page_3">
+      <property name="geometry">
        <rect>
         <x>0</x>
         <y>0</y>
         <width>378</width>
-        <height>655</height>
+        <height>654</height>
        </rect>
       </property>
-      <attribute name="label" >
+      <attribute name="label">
        <string>PaintTerrain</string>
       </attribute>
-      <layout class="QGridLayout" name="gridLayout_2" >
-       <property name="margin" >
+      <layout class="QGridLayout" name="gridLayout_2">
+       <property name="margin">
         <number>1</number>
        </property>
-       <property name="spacing" >
+       <property name="spacing">
         <number>1</number>
        </property>
-       <item row="0" column="2" >
-        <widget class="QLabel" name="label_21" >
-         <property name="toolTip" >
+       <item row="0" column="2">
+        <widget class="QLabel" name="label_21">
+         <property name="toolTip">
           <string>The intensity wich is applied to the tool</string>
          </property>
-         <property name="text" >
-          <string>2</string>
+         <property name="text">
+          <string>20</string>
          </property>
         </widget>
        </item>
-       <item row="0" column="0" >
-        <widget class="QLabel" name="label_18" >
-         <property name="toolTip" >
+       <item row="0" column="0">
+        <widget class="QLabel" name="label_18">
+         <property name="toolTip">
           <string>The intensity wich is applied to the tool</string>
          </property>
-         <property name="text" >
+         <property name="text">
           <string>Intensity</string>
          </property>
-         <property name="buddy" >
+         <property name="buddy">
           <cstring>editIntensitySlider</cstring>
          </property>
         </widget>
        </item>
-       <item row="1" column="0" >
-        <widget class="QLabel" name="label_20" >
-         <property name="toolTip" >
+       <item row="1" column="0">
+        <widget class="QLabel" name="label_20">
+         <property name="toolTip">
           <string>The diameter of the tool</string>
          </property>
-         <property name="text" >
+         <property name="text">
           <string>Brush Size</string>
          </property>
-         <property name="buddy" >
+         <property name="buddy">
           <cstring>editIntensitySlider</cstring>
          </property>
         </widget>
        </item>
-       <item row="0" column="1" >
-        <widget class="QSlider" name="paintIntensitySlider" >
-         <property name="toolTip" >
+       <item row="0" column="1">
+        <widget class="QSlider" name="paintIntensitySlider">
+         <property name="toolTip">
           <string>The intensity wich is applied to the tool</string>
          </property>
-         <property name="value" >
-          <number>2</number>
+         <property name="minimum">
+          <number>1</number>
          </property>
-         <property name="orientation" >
+         <property name="maximum">
+          <number>40</number>
+         </property>
+         <property name="singleStep">
+          <number>1</number>
+         </property>
+         <property name="value">
+          <number>20</number>
+         </property>
+         <property name="orientation">
           <enum>Qt::Horizontal</enum>
          </property>
         </widget>
        </item>
-       <item row="3" column="1" >
-        <spacer name="verticalSpacer_3" >
-         <property name="orientation" >
+       <item row="3" column="1">
+        <spacer name="verticalSpacer_3">
+         <property name="orientation">
           <enum>Qt::Vertical</enum>
          </property>
-         <property name="sizeHint" stdset="0" >
+         <property name="sizeHint" stdset="0">
           <size>
            <width>20</width>
            <height>451</height>
@@ -885,57 +735,57 @@
          </property>
         </spacer>
        </item>
-       <item row="1" column="1" >
-        <widget class="QSlider" name="paintBrushSizeSlider" >
-         <property name="toolTip" >
+       <item row="1" column="1">
+        <widget class="QSlider" name="paintBrushSizeSlider">
+         <property name="toolTip">
           <string>The diameter of the tool</string>
          </property>
-         <property name="value" >
+         <property name="value">
           <number>2</number>
          </property>
-         <property name="orientation" >
+         <property name="orientation">
           <enum>Qt::Horizontal</enum>
          </property>
         </widget>
        </item>
-       <item row="2" column="1" >
-        <widget class="QPushButton" name="paintBrushButton" >
-         <property name="sizePolicy" >
-          <sizepolicy vsizetype="Fixed" hsizetype="Fixed" >
+       <item row="2" column="1">
+        <widget class="QPushButton" name="paintBrushButton">
+         <property name="sizePolicy">
+          <sizepolicy hsizetype="Fixed" vsizetype="Fixed">
            <horstretch>0</horstretch>
            <verstretch>0</verstretch>
           </sizepolicy>
          </property>
-         <property name="minimumSize" >
+         <property name="minimumSize">
           <size>
            <width>130</width>
            <height>130</height>
           </size>
          </property>
-         <property name="toolTip" >
+         <property name="toolTip">
           <string>The brush that is applied</string>
          </property>
-         <property name="text" >
+         <property name="text">
           <string>PushButton</string>
          </property>
         </widget>
        </item>
-       <item row="1" column="2" >
-        <widget class="QLabel" name="label_17" >
-         <property name="toolTip" >
+       <item row="1" column="2">
+        <widget class="QLabel" name="label_17">
+         <property name="toolTip">
           <string>The diameter of the tool</string>
          </property>
-         <property name="text" >
+         <property name="text">
           <string>2</string>
          </property>
         </widget>
        </item>
-       <item row="2" column="0" >
-        <widget class="QLabel" name="label_19" >
-         <property name="text" >
+       <item row="2" column="0">
+        <widget class="QLabel" name="label_19">
+         <property name="text">
           <string>Brush Type  </string>
          </property>
-         <property name="buddy" >
+         <property name="buddy">
           <cstring>editBrushButton</cstring>
          </property>
         </widget>
@@ -954,20 +804,11 @@
     </widget>
    </item>
   </layout>
-  <zorder>terrainListComboBox</zorder>
-  <zorder>toggleTerrainVisibilityButton</zorder>
-  <zorder>editTerrainButton</zorder>
-  <zorder>deleteTerrainButton</zorder>
-  <zorder>toolBox</zorder>
  </widget>
  <tabstops>
   <tabstop>editIntensitySlider</tabstop>
   <tabstop>editBrushButton</tabstop>
   <tabstop>extendsSpinBoxZ</tabstop>
-  <tabstop>baseNameLineEdit</tabstop>
-  <tabstop>resGroupLineEdit</tabstop>
-  <tabstop>texSizeComboBox</tabstop>
-  <tabstop>numTexturesComboBox</tabstop>
   <tabstop>createTerrainButton</tabstop>
   <tabstop>terrainListComboBox</tabstop>
   <tabstop>positionSpinBoxX</tabstop>
@@ -980,8 +821,8 @@
   <tabstop>extendsSpinBoxY</tabstop>
  </tabstops>
  <resources>
-  <include location="../src/media/help/help.qrc" />
-  <include location="../src/media/icons/icons.qrc" />
+  <include location="../src/media/help/help.qrc"/>
+  <include location="../src/media/icons/icons.qrc"/>
  </resources>
  <connections>
   <connection>
@@ -990,11 +831,11 @@
    <receiver>label_13</receiver>
    <slot>setNum(int)</slot>
    <hints>
-    <hint type="sourcelabel" >
+    <hint type="sourcelabel">
      <x>162</x>
      <y>101</y>
     </hint>
-    <hint type="destinationlabel" >
+    <hint type="destinationlabel">
      <x>377</x>
      <y>103</y>
     </hint>
@@ -1006,11 +847,11 @@
    <receiver>label_16</receiver>
    <slot>setNum(int)</slot>
    <hints>
-    <hint type="sourcelabel" >
+    <hint type="sourcelabel">
      <x>160</x>
      <y>112</y>
     </hint>
-    <hint type="destinationlabel" >
+    <hint type="destinationlabel">
      <x>377</x>
      <y>114</y>
     </hint>
@@ -1022,11 +863,11 @@
    <receiver>label_17</receiver>
    <slot>setNum(int)</slot>
    <hints>
-    <hint type="sourcelabel" >
+    <hint type="sourcelabel">
      <x>139</x>
      <y>148</y>
     </hint>
-    <hint type="destinationlabel" >
+    <hint type="destinationlabel">
      <x>371</x>
      <y>150</y>
     </hint>
@@ -1038,11 +879,11 @@
    <receiver>label_21</receiver>
    <slot>setNum(int)</slot>
    <hints>
-    <hint type="sourcelabel" >
+    <hint type="sourcelabel">
      <x>171</x>
      <y>129</y>
     </hint>
-    <hint type="destinationlabel" >
+    <hint type="destinationlabel">
      <x>371</x>
      <y>131</y>
     </hint>
@@ -1054,11 +895,11 @@
    <receiver>editIntensitySlider</receiver>
    <slot>setDisabled(bool)</slot>
    <hints>
-    <hint type="sourcelabel" >
+    <hint type="sourcelabel">
      <x>65</x>
      <y>274</y>
     </hint>
-    <hint type="destinationlabel" >
+    <hint type="destinationlabel">
      <x>85</x>
      <y>94</y>
     </hint>
@@ -1070,11 +911,11 @@
    <receiver>editBrushButton</receiver>
    <slot>setDisabled(bool)</slot>
    <hints>
-    <hint type="sourcelabel" >
+    <hint type="sourcelabel">
      <x>109</x>
      <y>274</y>
     </hint>
-    <hint type="destinationlabel" >
+    <hint type="destinationlabel">
      <x>131</x>
      <y>210</y>
     </hint>
@@ -1086,11 +927,11 @@
    <receiver>editBrushSizeSlider</receiver>
    <slot>setDisabled(bool)</slot>
    <hints>
-    <hint type="sourcelabel" >
+    <hint type="sourcelabel">
      <x>222</x>
      <y>271</y>
     </hint>
-    <hint type="destinationlabel" >
+    <hint type="destinationlabel">
      <x>143</x>
      <y>113</y>
     </hint>
@@ -1102,11 +943,11 @@
    <receiver>editSmoothButton</receiver>
    <slot>setDisabled(bool)</slot>
    <hints>
-    <hint type="sourcelabel" >
+    <hint type="sourcelabel">
      <x>42</x>
      <y>271</y>
     </hint>
-    <hint type="destinationlabel" >
+    <hint type="destinationlabel">
      <x>39</x>
      <y>299</y>
     </hint>
@@ -1118,11 +959,11 @@
    <receiver>setHeightButton</receiver>
    <slot>setDisabled(bool)</slot>
    <hints>
-    <hint type="sourcelabel" >
+    <hint type="sourcelabel">
      <x>101</x>
      <y>301</y>
     </hint>
-    <hint type="destinationlabel" >
+    <hint type="destinationlabel">
      <x>100</x>
      <y>274</y>
     </hint>

Modified: rl/branches/persistence2/engine/core/include/stdinc.h
===================================================================
--- rl/branches/persistence2/engine/core/include/stdinc.h	2009-06-14 12:33:54 UTC (rev 4944)
+++ rl/branches/persistence2/engine/core/include/stdinc.h	2009-06-15 18:20:42 UTC (rev 4945)
@@ -58,6 +58,7 @@
 #include <boost/filesystem/operations.hpp>
 #include <boost/filesystem/exception.hpp>
 #include <boost/any.hpp>
+#include <boost/smartptr.hpp>
 
 #if OGRE_PLATFORM == OGRE_PLATFORM_WIN32
 #  include <Windows.h>

Modified: rl/branches/persistence2/engine/core/src/GameAreaTypes.cpp
===================================================================
--- rl/branches/persistence2/engine/core/src/GameAreaTypes.cpp	2009-06-14 12:33:54 UTC (rev 4944)
+++ rl/branches/persistence2/engine/core/src/GameAreaTypes.cpp	2009-06-15 18:20:42 UTC (rev 4945)
@@ -1,270 +1,272 @@
-/* This source file is part of Rastullahs Lockenpracht.
- * Copyright (C) 2003-2008 Team Pantheon. http://www.team-pantheon.de
- *
- *  This program is free software; you can redistribute it and/or modify
- *  it under the terms of the Clarified Artistic License.
- *
- *  This program is distributed in the hope that it will be useful,
- *  but WITHOUT ANY WARRANTY; without even the implied warranty of
- *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- *  Clarified Artistic License for more details.
- *
- *  You should have received a copy of the Clarified Artistic License
- *  along with this program; if not you can get it here
- *  http://www.jpaulmorrison.com/fbp/artistic2.htm.
- */
-#include "stdinc.h" //precompiled header
-
-#include "GameAreaTypes.h"
-
-#include "Actor.h"
-#include "World.h"
-#include "CoreSubsystem.h"
-#include "Exception.h"
-#include "PhysicsManager.h"
-#include "PhysicalThing.h"
-
-
-using namespace Ogre;
-
-namespace rl {
-    GameAreaType::~GameAreaType()
-    {
-    }
-
-    void GameAreaType::addQueryFlag( unsigned long flag  )
-    {
-        setQueryMask(  getQueryMask() | flag );
-    }
-
-    void GameAreaType::removeQueryFlag( unsigned long flag )
-    {
-        setQueryMask(  getQueryMask() &~ flag );
-    }
-}
-
-
-namespace rl {
-/*
-    GameSphereAreaType::GameSphereAreaType(Vector3 center, Real radius, unsigned long mask)
-    {
-        mSphereQuery = CoreSubsystem::getSingleton().getWorld()->
-            getSceneManager()->createSphereQuery( Sphere(center,radius), mask );
-
-        // Keine Welt-Geometrie erw?nscht, nur Movables
-        mSphereQuery->setWorldFragmentType( SceneQuery::WFT_NONE );
-    }
-
-    GameSphereAreaType::~GameSphereAreaType()
-    {
-        mSphereQuery->clearResults();
-        CoreSubsystem::getSingleton().getWorld()->getSceneManager()->destroyQuery( mSphereQuery );
-    }
-
-    ActorMap GameSphereAreaType::performQuery(  )
-    {
-        SceneQueryResult rs = mSphereQuery->execute();
-        SceneQueryResultMovableList movList = rs.movables;
-
-        ActorMap retMap;
-
-        // Durch die Ergebnis Liste iterieren
-        SceneQueryResultMovableList::iterator it;
-        for (it = movList.begin(); it != movList.end(); ++it)
-        {
-            MovableObject* mov = *it;
-            if( mov->getUserObject() != NULL )
-            {
-                // Zur Zeit sind die einzigen an Movables gekn?pfte Objekte Actoren
-                Actor* act = dynamic_cast<Actor*>( mov->getUserObject() );
-                retMap.insert(ActorPair(act->getName(),act));
-            }
-        }
-
-        return retMap;
-    }
-
-    unsigned long GameSphereAreaType::getQueryMask() const
-    {
-        return mSphereQuery->getQueryMask();
-    }
-
-    void GameSphereAreaType::setQueryMask( unsigned long mask )
-    {
-        mSphereQuery->setQueryMask( mask );
-    }
-
-    void GameSphereAreaType::setQueryPosition( const Ogre::Vector3& vec )
-    {
-        // Wurde es bewegt?
-        if( vec != mSphereQuery->getSphere().getCenter( ) )
-            // Kugel muss neu erzeugt werden :(
-            mSphereQuery->setSphere( Sphere(vec,mSphereQuery->getSphere().getRadius()) );
-    }
-
-    Ogre::Vector3 GameSphereAreaType::getQueryPosition() const
-    {
-        return mSphereQuery->getSphere().getCenter( );
-    }
-*/
-
-
-
-    GameNewtonBodyAreaType::GameNewtonBodyAreaType() :
-        mBody(NULL),
-        mTransitionDistance(0)
-    {
-    }
-
-
-    GameNewtonBodyAreaType::~GameNewtonBodyAreaType()
-    {
-        if(mBody != NULL)
-            delete mBody;
-        mBody = NULL;
-    }
-
-    unsigned long GameNewtonBodyAreaType::getQueryMask() const
-    {
-        return mQueryMask;
-    }
-
-    void GameNewtonBodyAreaType::setQueryMask(unsigned long mask)
-    {
-        mQueryMask = mask;
-    }
-
-    Quaternion GameNewtonBodyAreaType::getQueryOrientation() const
-    {
-        Vector3 pos;
-        Quaternion orient;
-        mBody->getPositionOrientation(pos, orient);
-        return orient;
-    }
-
-    Vector3 GameNewtonBodyAreaType::getQueryPosition() const
-    {
-        Vector3 pos;
-        Quaternion orient;
-        mBody->getPositionOrientation(pos, orient);
-        return pos;
-    }
-
-    void GameNewtonBodyAreaType::setQueryPosition(const Vector3 &pos)
-    {
-        Quaternion orient;
-        Vector3 old_pos;
-        mBody->getPositionOrientation(old_pos, orient);
-        mBody->setPositionOrientation(pos, orient);
-    }
-
-    void GameNewtonBodyAreaType::setQueryOrientation(const Quaternion &orient)
-    {
-        Quaternion old_orient;
-        Vector3 pos;
-        mBody->getPositionOrientation(pos, old_orient);
-        mBody->setPositionOrientation(pos, orient);
-    }
-
-    void GameNewtonBodyAreaType::foundCollision(Actor* actor)
-    {
-        if( actor )
-        {
-            unsigned long flags = actor->getQueryFlags();
-            if( flags & mQueryMask )
-                mFoundActors[actor->getName()] = actor;
-        }
-    }
-
-    void GameNewtonBodyAreaType::resetFoundCollisions()
-    {
-        mFoundActors.clear();
-    }
-
-    bool GameNewtonBodyAreaType::isInside(Actor *actor)
-    {
-        return getDistance(actor) <= 0;
-    }
-
-    ActorMap GameNewtonBodyAreaType::performQuery()
-    {
-        return mFoundActors;
-    }
-
-    Ogre::Real GameNewtonBodyAreaType::getDistance(Actor* actor)
-    {
-        if(!actor)
-            Throw(NullPointerException, "Argument actor cannot be NULL!");
-        OgreNewt::World *world = 
-            PhysicsManager::getSingleton()._getNewtonWorld();
-        Vector3 retA, retB, retNorm;
-        Vector3 positionA;
-        Quaternion orientationA;
-        mBody->getPositionOrientation(positionA, orientationA);
-        int intRet = 
-            OgreNewt::CollisionTools::CollisionClosestPoint(
-                world,
-                mBody->getCollision(), orientationA, positionA,
-                actor->getPhysicalThing()->_getBody()->getCollision(),
-                actor->getOrientation(), actor->getPosition(),
-                retA, retB, retNorm, 0); // set threadindex to 0, I hope this is ok!
-
-        if( intRet == 0 )
-            return 0;
-
-        return (retA - retB).length();
-    }
-
-    Ogre::Real GameNewtonBodyAreaType::getTransitionDistance() const
-    {
-        return mTransitionDistance;
-    }
-
-    void GameNewtonBodyAreaType::setTransitionDistance(Ogre::Real dist) 
-    {
-        mTransitionDistance = dist;
-    }
-
-    GameMeshAreaType::GameMeshAreaType(
-            Ogre::Entity* entity,
-            GeometryType geomType,
-			Ogre::Vector3 offset,
-			Ogre::Quaternion orientation)
-    {
-        if(geomType == GT_MESH)
-        {
-            LOG_ERROR(Logger::CORE, "Geometrie Typ 'GT_MESH' is not (yet) support by GameMeshAreaType, use GT_CONVEXHULL instead!");
-            geomType = GT_CONVEXHULL;
-        }
-        OgreNewt::CollisionPtr col =
-            PhysicsManager::getSingleton().createCollision(entity,
-            geomType, "", offset, orientation);
-        mBody = new OgreNewt::Body(
-            PhysicsManager::getSingleton()._getNewtonWorld(),
-            col);
-        mBody->setMaterialGroupID(
-            PhysicsManager::getSingleton().getMaterialID("gamearea"));
-
-        boost::dynamic_pointer_cast<OgreNewt::ConvexCollision>(col)->setAsTriggerVolume(true);
-    }
-
-    GameSimpleCollisionAreaType::GameSimpleCollisionAreaType(
-            Ogre::AxisAlignedBox aabb,
-            GeometryType geomType,
-            Ogre::Vector3 offset,
-            Ogre::Quaternion orientation)
-    {
-        OgreNewt::CollisionPtr col =
-            PhysicsManager::getSingleton().createCollision(
-            "", aabb, geomType, offset, orientation, 0, NULL, NULL, true);
-        mBody = new OgreNewt::Body(
-            PhysicsManager::getSingleton()._getNewtonWorld(),
-            col);
-        mBody->setMaterialGroupID(
-            PhysicsManager::getSingleton().getMaterialID("gamearea"));
-
-        boost::dynamic_pointer_cast<OgreNewt::ConvexCollision>(col)->setAsTriggerVolume(true);
-    }
-
-}
-
+/* This source file is part of Rastullahs Lockenpracht.
+ * Copyright (C) 2003-2008 Team Pantheon. http://www.team-pantheon.de
+ *
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the Clarified Artistic License.
+ *
+ *  This program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  Clarified Artistic License for more details.
+ *
+ *  You should have received a copy of the Clarified Artistic License
+ *  along with this program; if not you can get it here
+ *  http://www.jpaulmorrison.com/fbp/artistic2.htm.
+ */
+#include "stdinc.h" //precompiled header
+
+#include "GameAreaTypes.h"
+
+#include <boost/smart_ptr.hpp>
+
+#include "Actor.h"
+#include "World.h"
+#include "CoreSubsystem.h"
+#include "Exception.h"
+#include "PhysicsManager.h"
+#include "PhysicalThing.h"
+
+
+using namespace Ogre;
+
+namespace rl {
+    GameAreaType::~GameAreaType()
+    {
+    }
+
+    void GameAreaType::addQueryFlag( unsigned long flag  )
+    {
+        setQueryMask(  getQueryMask() | flag );
+    }
+
+    void GameAreaType::removeQueryFlag( unsigned long flag )
+    {
+        setQueryMask(  getQueryMask() &~ flag );
+    }
+}
+
+
+namespace rl {
+/*
+    GameSphereAreaType::GameSphereAreaType(Vector3 center, Real radius, unsigned long mask)
+    {
+        mSphereQuery = CoreSubsystem::getSingleton().getWorld()->
+            getSceneManager()->createSphereQuery( Sphere(center,radius), mask );
+
+        // Keine Welt-Geometrie erw??nscht, nur Movables
+        mSphereQuery->setWorldFragmentType( SceneQuery::WFT_NONE );
+    }
+
+    GameSphereAreaType::~GameSphereAreaType()
+    {
+        mSphereQuery->clearResults();
+        CoreSubsystem::getSingleton().getWorld()->getSceneManager()->destroyQuery( mSphereQuery );
+    }
+
+    ActorMap GameSphereAreaType::performQuery(  )
+    {
+        SceneQueryResult rs = mSphereQuery->execute();
+        SceneQueryResultMovableList movList = rs.movables;
+
+        ActorMap retMap;
+
+        // Durch die Ergebnis Liste iterieren
+        SceneQueryResultMovableList::iterator it;
+        for (it = movList.begin(); it != movList.end(); ++it)
+        {
+            MovableObject* mov = *it;
+            if( mov->getUserObject() != NULL )
+            {
+                // Zur Zeit sind die einzigen an Movables gekn??pfte Objekte Actoren
+                Actor* act = dynamic_cast<Actor*>( mov->getUserObject() );
+                retMap.insert(ActorPair(act->getName(),act));
+            }
+        }
+
+        return retMap;
+    }
+
+    unsigned long GameSphereAreaType::getQueryMask() const
+    {
+        return mSphereQuery->getQueryMask();
+    }
+
+    void GameSphereAreaType::setQueryMask( unsigned long mask )
+    {
+        mSphereQuery->setQueryMask( mask );
+    }
+
+    void GameSphereAreaType::setQueryPosition( const Ogre::Vector3& vec )
+    {
+        // Wurde es bewegt?
+        if( vec != mSphereQuery->getSphere().getCenter( ) )
+            // Kugel muss neu erzeugt werden :(
+            mSphereQuery->setSphere( Sphere(vec,mSphereQuery->getSphere().getRadius()) );
+    }
+
+    Ogre::Vector3 GameSphereAreaType::getQueryPosition() const
+    {
+        return mSphereQuery->getSphere().getCenter( );
+    }
+*/
+
+
+
+    GameNewtonBodyAreaType::GameNewtonBodyAreaType() :
+        mBody(NULL),
+        mTransitionDistance(0)
+    {
+    }
+
+
+    GameNewtonBodyAreaType::~GameNewtonBodyAreaType()
+    {
+        if(mBody != NULL)
+            delete mBody;
+        mBody = NULL;
+    }
+
+    unsigned long GameNewtonBodyAreaType::getQueryMask() const
+    {
+        return mQueryMask;
+    }
+
+    void GameNewtonBodyAreaType::setQueryMask(unsigned long mask)
+    {
+        mQueryMask = mask;
+    }
+
+    Quaternion GameNewtonBodyAreaType::getQueryOrientation() const
+    {
+        Vector3 pos;
+        Quaternion orient;
+        mBody->getPositionOrientation(pos, orient);
+        return orient;
+    }
+
+    Vector3 GameNewtonBodyAreaType::getQueryPosition() const
+    {
+        Vector3 pos;
+        Quaternion orient;
+        mBody->getPositionOrientation(pos, orient);
+        return pos;
+    }
+
+    void GameNewtonBodyAreaType::setQueryPosition(const Vector3 &pos)
+    {
+        Quaternion orient;
+        Vector3 old_pos;
+        mBody->getPositionOrientation(old_pos, orient);
+        mBody->setPositionOrientation(pos, orient);
+    }
+
+    void GameNewtonBodyAreaType::setQueryOrientation(const Quaternion &orient)
+    {
+        Quaternion old_orient;
+        Vector3 pos;
+        mBody->getPositionOrientation(pos, old_orient);
+        mBody->setPositionOrientation(pos, orient);
+    }
+
+    void GameNewtonBodyAreaType::foundCollision(Actor* actor)
+    {
+        if( actor )
+        {
+            unsigned long flags = actor->getQueryFlags();
+            if( flags & mQueryMask )
+                mFoundActors[actor->getName()] = actor;
+        }
+    }
+
+    void GameNewtonBodyAreaType::resetFoundCollisions()
+    {
+        mFoundActors.clear();
+    }
+
+    bool GameNewtonBodyAreaType::isInside(Actor *actor)
+    {
+        return getDistance(actor) <= 0;
+    }
+
+    ActorMap GameNewtonBodyAreaType::performQuery()
+    {
+        return mFoundActors;
+    }
+
+    Ogre::Real GameNewtonBodyAreaType::getDistance(Actor* actor)
+    {
+        if(!actor)
+            Throw(NullPointerException, "Argument actor cannot be NULL!");
+        OgreNewt::World *world = 
+            PhysicsManager::getSingleton()._getNewtonWorld();
+        Vector3 retA, retB, retNorm;
+        Vector3 positionA;
+        Quaternion orientationA;
+        mBody->getPositionOrientation(positionA, orientationA);
+        int intRet = 
+            OgreNewt::CollisionTools::CollisionClosestPoint(
+                world,
+                mBody->getCollision(), orientationA, positionA,
+                actor->getPhysicalThing()->_getBody()->getCollision(),
+                actor->getOrientation(), actor->getPosition(),
+                retA, retB, retNorm, 0); // set threadindex to 0, I hope this is ok!
+
+        if( intRet == 0 )
+            return 0;
+
+        return (retA - retB).length();
+    }
+
+    Ogre::Real GameNewtonBodyAreaType::getTransitionDistance() const
+    {
+        return mTransitionDistance;
+    }
+
+    void GameNewtonBodyAreaType::setTransitionDistance(Ogre::Real dist) 
+    {
+        mTransitionDistance = dist;
+    }
+
+    GameMeshAreaType::GameMeshAreaType(
+            Ogre::Entity* entity,
+            GeometryType geomType,
+			Ogre::Vector3 offset,
+			Ogre::Quaternion orientation)
+    {
+        if(geomType == GT_MESH)
+        {
+            LOG_ERROR(Logger::CORE, "Geometrie Typ 'GT_MESH' is not (yet) support by GameMeshAreaType, use GT_CONVEXHULL instead!");
+            geomType = GT_CONVEXHULL;
+        }
+        OgreNewt::CollisionPtr col =
+            PhysicsManager::getSingleton().createCollision(entity,
+            geomType, "", offset, orientation);
+        mBody = new OgreNewt::Body(
+            PhysicsManager::getSingleton()._getNewtonWorld(),
+            col);
+        mBody->setMaterialGroupID(
+            PhysicsManager::getSingleton().getMaterialID("gamearea"));
+
+        boost::dynamic_pointer_cast<OgreNewt::ConvexCollision>(col)->setAsTriggerVolume(true);
+    }
+
+    GameSimpleCollisionAreaType::GameSimpleCollisionAreaType(
+            Ogre::AxisAlignedBox aabb,
+            GeometryType geomType,
+            Ogre::Vector3 offset,
+            Ogre::Quaternion orientation)
+    {
+        OgreNewt::CollisionPtr col =
+            PhysicsManager::getSingleton().createCollision(
+            "", aabb, geomType, offset, orientation, 0, NULL, NULL, true);
+        mBody = new OgreNewt::Body(
+            PhysicsManager::getSingleton()._getNewtonWorld(),
+            col);
+        mBody->setMaterialGroupID(
+            PhysicsManager::getSingleton().getMaterialID("gamearea"));
+
+        boost::dynamic_pointer_cast<OgreNewt::ConvexCollision>(col)->setAsTriggerVolume(true);
+    }
+
+}
+

Modified: rl/branches/persistence2/engine/core/src/PhysicsCollisionFactory.cpp
===================================================================
--- rl/branches/persistence2/engine/core/src/PhysicsCollisionFactory.cpp	2009-06-14 12:33:54 UTC (rev 4944)
+++ rl/branches/persistence2/engine/core/src/PhysicsCollisionFactory.cpp	2009-06-15 18:20:42 UTC (rev 4945)
@@ -1,790 +1,790 @@
-/* This source file is part of Rastullahs Lockenpracht.
-* Copyright (C) 2003-2008 Team Pantheon. http://www.team-pantheon.de
-*
-*  This program is free software; you can redistribute it and/or modify
-*  it under the terms of the Clarified Artistic License.
-*
-*  This program is distributed in the hope that it will be useful,
-*  but WITHOUT ANY WARRANTY; without even the implied warranty of
-*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-*  Clarified Artistic License for more details.
-*
-*  You should have received a copy of the Clarified Artistic License
-*  along with this program; if not you can get it here
-*  http://www.jpaulmorrison.com/fbp/artistic2.htm.
-*/
-#include "stdinc.h" //precompiled header
-
-#include "Exception.h"
-#include "PhysicsCollisionFactory.h"
-#include "PhysicsManager.h"
-#include "ConfigurationManager.h"
-
-#include <boost/filesystem/operations.hpp>
-#include <boost/filesystem/exception.hpp>
-
-namespace fs = boost::filesystem;
-
-#ifdef __APPLE__
-#   include <Ogre/OgreMesh.h>
-#else
-#   include <OgreMesh.h>
-#endif
-
-
-
-using namespace std;
-using namespace OgreNewt;
-using namespace Ogre;
-
-
-namespace rl
-{
-
-    PhysicsCollisionFactory::PhysicsCollisionFactory() :
-        mCollisionSerializer()
-    {
-
-#       if OGRE_PLATFORM == OGRE_PLATFORM_LINUX
-        mCachePathName = Ogre::String( Ogre::String(::getenv("HOME")) + "/.rastullah/cache/");
-        fs::path cachePath( mCachePathName, fs::portable_posix_name);
-#       else
-        mCachePathName = Ogre::String( ConfigurationManager::getSingleton().getModulesRootDirectory() + "/cache/" );
-        fs::path cachePath( mCachePathName );
-#       endif
-
-        if( !fs::exists(cachePath) )
-            fs::create_directory(cachePath);
-    }
-
-
-    PhysicsCollisionFactory::~PhysicsCollisionFactory()
-    {
-        clearCollisionCache();
-    }
-
-    void PhysicsCollisionFactory::clearCollisionCache()
-    {
-        mMeshCollisionsCache.clear();
-        mConvexCollisionsCache.clear();
-        mConvexAABBCollisionsCache.clear();
-    }
-
-    bool PhysicsCollisionFactory::checkSize(const Ogre::AxisAlignedBox& aabb) const
-    {
-        Ogre::Vector3 size = aabb.getSize();
-        if( size.x < PhysicsManager::NEWTON_GRID_WIDTH ||
-            size.y < PhysicsManager::NEWTON_GRID_WIDTH ||
-            size.z < PhysicsManager::NEWTON_GRID_WIDTH )
-            return false;
-        return true;
-    }
-
-    void PhysicsCollisionFactory::correctSize(Ogre::AxisAlignedBox& aabb)
-    {
-        Ogre::Vector3 size = aabb.getSize();
-        // correct size, log warning and fail back to box
-        if (size.x < PhysicsManager::NEWTON_GRID_WIDTH)
-            size.x = PhysicsManager::NEWTON_GRID_WIDTH;
-        if (size.y < PhysicsManager::NEWTON_GRID_WIDTH)
-            size.y = PhysicsManager::NEWTON_GRID_WIDTH;
-        if (size.z < PhysicsManager::NEWTON_GRID_WIDTH)
-            size.z = PhysicsManager::NEWTON_GRID_WIDTH;
-        LOG_MESSAGE(Logger::CORE, "Correcting collision primitiv size");
-        Ogre::Vector3 center = aabb.getCenter();
-        aabb.setMaximum(center + 0.5*size);
-        aabb.setMinimum(center - 0.5*size);
-    }
-
-    OgreNewt::CollisionPtr PhysicsCollisionFactory::createCollisionFromAABB(
-        const Ogre::String& name,
-        const Ogre::AxisAlignedBox& passedAabb,
-        const GeometryType& geomType,
-        const Ogre::Vector3 &offset,
-        const Ogre::Quaternion &orientation,
-        const Ogre::Real mass,
-        Ogre::Vector3* inertia,
-        Ogre::Vector3* centerOfMass,
-        bool nocache)
-    {
-
-        // don't cache if the name is ""
-        if( name == "" )
-            nocache = true;
-
-
-        Ogre::AxisAlignedBox aabb(passedAabb);
-        // type for the collision primitiv (can change internally here)
-        bool forceBox (false);
-
-        // result value
-        ConvexCollisionPtr rval;
-
-        // size check (if object is too small, it falls back to a box primitiv
-        if (checkSize(aabb) == false )
-        {
-            correctSize(aabb);
-            LOG_WARNING(Logger::CORE,
-                " AABB is too small, using 'box' instead of primitiv '" +
-                PhysicsManager::convertGeometryTypeToString(geomType));
-            forceBox = true;
-        }
-
-        // check if the geometry type is supported for aabb
-        if (geomType == GT_CONVEXHULL ||
-            geomType == GT_MESH)
-        {
-            LOG_WARNING(Logger::CORE,
-                " the geometry type '"+
-                PhysicsManager::convertGeometryTypeToString(geomType)+
-                "' is not supported for aabb, fail back to box");
-            forceBox = true;
-        }
-
-
-        ConvexCollisionCacheMap::iterator convexCacheIt = mConvexAABBCollisionsCache.end();
-
-        // check if we can reuse a cached collision
-        if( !nocache )
-        {
-            if( !forceBox )
-            {
-                Ogre::String index(name);
-                std::pair<ConvexCollisionCacheMap::iterator,bool> iterBoolPair = mConvexAABBCollisionsCache.insert(std::make_pair(index, ConvexCollisionCacheObject()));
-                convexCacheIt = iterBoolPair.first;
-                if( !iterBoolPair.second )
-                {
-                    // there was already an element, check type, the size, offset etc if we can use it
-                    if( geomType != convexCacheIt->second.type )
-                    {
-                        LOG_MESSAGE(Logger::CORE, "Performance warning: trying to create a collision for aabb '" + name +
-                                "' with geometry-type '"+PhysicsManager::convertGeometryTypeToString(geomType)+
-                                "'. There's already a collision with type '"+PhysicsManager::convertGeometryTypeToString(convexCacheIt->second.type)+"'!");
-                    }
-                    else if( aabb.getSize() == convexCacheIt->second.scale && offset == convexCacheIt->second.offset && orientation == convexCacheIt->second.orientation )
-                    {
-                        // everything fine, reuse it
-                        rval = convexCacheIt->second.col;
-
-                        if( inertia != NULL )
-                            *inertia = convexCacheIt->second.inertia;
-                        if( centerOfMass != NULL )
-                            *centerOfMass = convexCacheIt->second.centerOfMass;
-
-                        LOG_DEBUG(Logger::CORE, "Reused collision for aabb '" + name + "'.");
-
-                        return rval;
-                    }
-                }
-            }
-        }
-
-
-        /* differentiate between the different collision primitives, because they all
-		   need different offset and probably different orientation values.
-		   Newton SDK is really nifty and helps here, because we can shift the origin
-		   of the coordinate system of the primitiv we create into any position we
-		   desire. Actually this is the bottom middle of our mesh - as the meshes are
-		   always constructed like that.
-	    */
-        if( !rval )
-        {
-            if (geomType == GT_BOX || forceBox == true)
-            {
-                rval = createBox(aabb, offset, orientation);
-            }
-            else if (geomType == GT_PYRAMID)
-            {
-                rval = createPyramid(aabb, offset, orientation);
-            }
-            else if (geomType == GT_SPHERE)
-            {
-                rval = createSphere(aabb, offset, orientation);
-            }
-            else if (geomType == GT_ELLIPSOID)
-            {
-                rval = createEllipsoid(aabb, offset, orientation);
-            }
-            else if (geomType == GT_CAPSULE)
-            {
-                rval = createCapsule(aabb, offset, orientation);
-            }
-        }
-
-        if ( rval == NULL )
-        {
-            LOG_WARNING(Logger::CORE, " creating collision primitiv '"+
-                PhysicsManager::convertGeometryTypeToString(geomType)+"' for AABB '"+ name
-                +"' failed.");
-
-            // delete cacheobject
-            if( convexCacheIt != mConvexAABBCollisionsCache.end() )
-            {
-                mConvexAABBCollisionsCache.erase( convexCacheIt );
-            }
-        }
-        else
-        {
-            LOG_DEBUG(Logger::CORE, " collision primitiv '"+
-                PhysicsManager::convertGeometryTypeToString(geomType)+"' created for AABB '"+
-                name+"'");
-        }
-
-
-        // calculate inertia / centerOfMass if requested
-        // and save collision in cache
-        if( rval)
-        {
-            if( convexCacheIt != mConvexAABBCollisionsCache.end() )
-            {
-                // save collision in cache
-                Vector3 temp_inertia, temp_centerOfMass;
-                rval->calculateInertialMatrix(temp_inertia, temp_centerOfMass);
-
-                convexCacheIt->second.col = rval;
-                convexCacheIt->second.scale = aabb.getSize();
-                convexCacheIt->second.offset = offset;
-                convexCacheIt->second.orientation = orientation;
-                convexCacheIt->second.inertia = temp_inertia;
-                convexCacheIt->second.centerOfMass = temp_centerOfMass;
-                convexCacheIt->second.type = geomType;
-
-                if( inertia != NULL )
-                    *inertia = temp_inertia*mass;
-                if( centerOfMass != NULL )
-                    *centerOfMass = temp_centerOfMass;
-            }
-            else if (inertia != NULL || centerOfMass != NULL )
-            {
-                Vector3 temp_inertia, temp_centerOfMass;
-                rval->calculateInertialMatrix(temp_inertia, temp_centerOfMass);
-                if( inertia != NULL )
-                    *inertia = temp_inertia*mass;
-                if( centerOfMass != NULL )
-                    *centerOfMass = temp_centerOfMass;
-            }
-        }
-
-        return rval;
-    }
-
-
-    OgreNewt::CollisionPtr PhysicsCollisionFactory::createCollisionFromEntity(Ogre::Entity* entity,
-        const GeometryType& geomType,
-        const Ogre::String& animName,
-        const Ogre::Vector3 &offset,
-        const Ogre::Quaternion &orientation,
-        const Ogre::Real mass,
-        Ogre::Vector3* inertia,
-        Ogre::Vector3* centerOfMass,
-        bool nocache)
-    {
-        // bounding box of the mesh
-        Ogre::AxisAlignedBox aabb(entity->getBoundingBox());
-        // apply scale if attached to a node (like in OgreNewt for convexhull)
-        Ogre::Vector3 scale = Ogre::Vector3::UNIT_SCALE;
-        if( entity->getParentNode() )
-        {
-            scale = entity->getParentNode()->getScale();
-            aabb.scale(scale);
-        }
-
-        // type for the collision primitiv (can change internally here)
-        bool forceBox (false);
-
-        // result value
-        CollisionPtr rval;
-        ConvexCollisionPtr rvalAsConvexCollision; // store pointer to ConvexCollision, so we don't need to cast
-                                                  // this also indicates, that it is possible to calculate inertia/centerOfMass
-
-        // size check (if object is too small, it falls back to a box primitiv
-        if (checkSize(aabb) == false )
-        {
-            correctSize(aabb);
-            LOG_MESSAGE(Logger::CORE, " Entity '"+entity->getName()+
-                "' is too small, using 'box' instead of primitiv '"+
-                PhysicsManager::convertGeometryTypeToString(geomType));
-            forceBox = true;
-        }
-
-
-        if( geomType == GT_MESH )
-        {
-            if( offset != Ogre::Vector3::ZERO || orientation != Ogre::Quaternion::IDENTITY )
-            {
-                LOG_WARNING(Logger::CORE, " Cannot set collision offset or orientation when using mesh-collision (entity: '" +
-                        entity->getName()+"')!");
-            }
-            if( inertia || centerOfMass )
-            {
-                LOG_WARNING(Logger::CORE, " Cannot calculate inertia or center of mass when using mesh-collision (entity: '" +
-                        entity->getName()+"')!");
-            }
-        }
-
-
-        MeshCollisionCacheMap::iterator meshCacheIt = mMeshCollisionsCache.end();
-        ConvexCollisionCacheMap::iterator convexCacheIt = mConvexCollisionsCache.end();
-
-        // check if we can reuse a cached collision
-        if( !nocache )
-        {
-            // use meshcollisionscache
-            if( geomType == GT_MESH && !forceBox )
-            {
-                StringVector index(entity->getMesh()->getName() + animName, scale);
-                std::pair<MeshCollisionCacheMap::iterator,bool> iterBoolPair = mMeshCollisionsCache.insert(std::make_pair(index, MeshCollisionCacheObject()));
-                meshCacheIt = iterBoolPair.first;
-                if( !iterBoolPair.second )
-                {
-                    // there was already an element -- so we can reuse it
-
-                    LOG_DEBUG(Logger::CORE, "Reused collision for entity '" + entity->getName() + "' (mesh: '"
-                            + entity->getMesh()->getName() + "', animation: '" + animName + "').");
-                    rval = iterBoolPair.first->second.col;
-
-                    return rval;
-                }
-            }
-            // use convexcollisionscache
-            else if( !forceBox )
-            {
-                Ogre::String index(entity->getMesh()->getName() + animName);
-                std::pair<ConvexCollisionCacheMap::iterator,bool> iterBoolPair = mConvexCollisionsCache.insert(std::make_pair(index, ConvexCollisionCacheObject()));
-                convexCacheIt = iterBoolPair.first;
-                if( !iterBoolPair.second )
-                {
-                    // there was already an element, check type, the size, offset etc if we can use it
-                    if( geomType != convexCacheIt->second.type )
-                    {
-                        LOG_MESSAGE(Logger::CORE, "Performance warning: trying to create a collision for entity '"+entity->getName()+"' with animation '"+
-                                animName+"' with geometry-type '"+PhysicsManager::convertGeometryTypeToString(geomType)+
-                                "'. There's already a collision with type '"+PhysicsManager::convertGeometryTypeToString(convexCacheIt->second.type)+"'!");
-                    }
-                    else if( scale == convexCacheIt->second.scale && offset == convexCacheIt->second.offset && orientation == convexCacheIt->second.orientation )
-                    {
-                        // everything fine, reuse it
-                        rval = convexCacheIt->second.col;
-
-                        if( inertia != NULL )
-                            *inertia = convexCacheIt->second.inertia;
-                        if( centerOfMass != NULL )
-                            *centerOfMass = convexCacheIt->second.centerOfMass;
-
-                        LOG_DEBUG(Logger::CORE, "Reused collision for entity '" + entity->getName() + "' (mesh: '"
-                            + entity->getMesh()->getName() + "', animation: '" + animName + "').");
-
-                        return rval;
-                    }
-                    else if( geomType == GT_CONVEXHULL ) // for simple types just use create a new collision
-                    {
-                        // we need to rescale (or change offset or orientation)
-                        // the old transformation
-                        Ogre::Matrix4 oldInvTransformation;
-                        oldInvTransformation.makeInverseTransform(convexCacheIt->second.offset, convexCacheIt->second.scale, convexCacheIt->second.orientation);
-                        // the new transformation
-                        Ogre::Matrix4 newTransformation;
-                        newTransformation.makeTransform(offset, scale, orientation);
-
-                        // the needed transformation from old to new:
-                        Ogre::Matrix4 transformation = oldInvTransformation*newTransformation;
-
-                        OgreNewt::ConvexModifierCollision *convexModCol = new OgreNewt::ConvexModifierCollision(
-                                PhysicsManager::getSingleton()._getNewtonWorld(),convexCacheIt->second.col);
-                        convexModCol->setScalarMatrix(transformation);
-
-                        // set the convexcollision-ptr, so centerOfMass and inertia can be calculated
-                        rval = OgreNewt::ConvexCollisionPtr(convexModCol);
-
-
-                        LOG_DEBUG(Logger::CORE, "Reused collision for entity '" + entity->getName() + "' (mesh: '"
-                                + entity->getMesh()->getName() + "', animation: '" + animName + "') with a ConvexModifierCollision.");
-
-                        // calculate inertia / centerOfMass if needed
-                        if (inertia != NULL || centerOfMass != NULL )
-                        {
-                            Vector3 temp_inertia, temp_centerOfMass;
-                            rvalAsConvexCollision->calculateInertialMatrix(temp_inertia, temp_centerOfMass);
-                            if( inertia != NULL )
-                                *inertia = temp_inertia*mass;
-                            if( centerOfMass != NULL )
-                                *centerOfMass = temp_centerOfMass;
-                        }
-
-                        return rval;
-                    }
-                }
-            }
-        }
-
-		/* differentiate between the different collision primitives, because they all
-		   need different offset and probably different orientation values.
-		   Newton SDK is really nifty and helps here, because we can shift the origin
-		   of the coordinate system of the primitiv we create into any position we
-		   desire. Actually this is the bottom middle of our mesh - as the meshes are
-		   always constructed like that.
-	    */
-        if (geomType == GT_BOX || forceBox == true)
-        {
-            rvalAsConvexCollision = createBox(aabb, offset, orientation);
-            rval = rvalAsConvexCollision;
-        }
-        else if (geomType == GT_PYRAMID)
-        {
-            rvalAsConvexCollision = createPyramid(aabb, offset, orientation);
-            rval = rvalAsConvexCollision;
-        }
-        else if (geomType == GT_SPHERE)
-        {
-            rvalAsConvexCollision = createSphere(aabb, offset, orientation);
-            rval = rvalAsConvexCollision;
-        }
-        else if (geomType == GT_ELLIPSOID)
-        {
-            rvalAsConvexCollision = createEllipsoid(aabb, offset, orientation);
-            rval = rvalAsConvexCollision;
-        }
-        else if (geomType == GT_CAPSULE)
-        {
-            rvalAsConvexCollision = createCapsule(aabb, offset, orientation);
-            rval = rvalAsConvexCollision;
-        }
-        else if (geomType == GT_CONVEXHULL)
-        {
-            rvalAsConvexCollision = createConvexHull(entity, offset, orientation);
-            rval = rvalAsConvexCollision;
-        }
-        else if (geomType == GT_MESH)
-        {
-            rval = createMesh( entity, animName, nocache );
-
-            if( meshCacheIt != mMeshCollisionsCache.end() )
-                meshCacheIt->second.col = rval;
-        }
-        else
-        {
-            Throw(IllegalArgumentException, "unknown geometry type.");
-        }
-
-
-        if ( rval == NULL )
-        {
-            LOG_WARNING(Logger::CORE, " creating collision primitiv '"+
-                PhysicsManager::convertGeometryTypeToString(geomType)+"' for Entity '"+
-                entity->getName()+"' failed.");
-
-            // delete cacheobject
-            if( meshCacheIt != mMeshCollisionsCache.end() )
-            {
-                mMeshCollisionsCache.erase( meshCacheIt );
-            }
-            if( convexCacheIt != mConvexCollisionsCache.end() )
-            {
-                mConvexCollisionsCache.erase( convexCacheIt );
-            }
-        }
-        else
-        {
-            LOG_DEBUG(Logger::CORE, " collision primitiv '"+
-                PhysicsManager::convertGeometryTypeToString(geomType)+"' created for Entity '"+
-                entity->getName()+"'");
-        }
-
-        // calculate inertia / centerOfMass if requested
-        // and save collision in cache
-        if( rvalAsConvexCollision )
-        {
-            if( convexCacheIt != mConvexCollisionsCache.end() )
-            {
-                // save collision in cache
-                Vector3 temp_inertia, temp_centerOfMass;
-                rvalAsConvexCollision->calculateInertialMatrix(temp_inertia, temp_centerOfMass);
-
-                convexCacheIt->second.col = rvalAsConvexCollision;
-                convexCacheIt->second.scale = scale;
-                convexCacheIt->second.offset = offset;
-                convexCacheIt->second.orientation = orientation;
-                convexCacheIt->second.inertia = temp_inertia;
-                convexCacheIt->second.centerOfMass = temp_centerOfMass;
-                convexCacheIt->second.type = geomType;
-
-                if( inertia != NULL )
-                    *inertia = temp_inertia*mass;
-                if( centerOfMass != NULL )
-                    *centerOfMass = temp_centerOfMass;
-            }
-            else if (inertia != NULL || centerOfMass != NULL )
-            {
-                Vector3 temp_inertia, temp_centerOfMass;
-                rvalAsConvexCollision->calculateInertialMatrix(temp_inertia, temp_centerOfMass);
-                if( inertia != NULL )
-                    *inertia = temp_inertia*mass;
-                if( centerOfMass != NULL )
-                    *centerOfMass = temp_centerOfMass;
-            }
-        }
-
-        return rval;
-    }
-
-
-    OgreNewt::ConvexCollisionPtr PhysicsCollisionFactory::createBox(const Ogre::AxisAlignedBox& aabb,
-            const Ogre::Vector3 &offset,
-            const Ogre::Quaternion &orientation)
-    {
-        // offset relative to center
-        Ogre::Vector3 offsetInGlobalSpace = offset + aabb.getCenter();
-
-        // a box collision primitiv has got it's coordinate system at it's center, so we need to shift it
-        OgreNewt::ConvexCollisionPtr rval(new OgreNewt::CollisionPrimitives::Box(
-            PhysicsManager::getSingleton()._getNewtonWorld(),
-            aabb.getSize(), orientation, offsetInGlobalSpace));
-
-       return rval;
-    }
-
-    OgreNewt::ConvexCollisionPtr PhysicsCollisionFactory::createPyramid(const Ogre::AxisAlignedBox& aabb,
-            const Ogre::Vector3 &offset,
-            const Ogre::Quaternion &orientation)
-    {
-        // offset relative to center
-        Ogre::Vector3 offsetInGlobalSpace = offset + aabb.getCenter();
-
-        OgreNewt::ConvexCollisionPtr rval(new OgreNewt::CollisionPrimitives::Pyramid(
-            PhysicsManager::getSingleton()._getNewtonWorld(),
-            aabb.getSize(), orientation, offsetInGlobalSpace));
-
-       return rval;
-    }
-
-    OgreNewt::ConvexCollisionPtr PhysicsCollisionFactory::createSphere(const Ogre::AxisAlignedBox& aabb,
-            const Ogre::Vector3 &offset,
-            const Ogre::Quaternion &orientation)
-    {
-        // offset relative to center
-        Ogre::Vector3 offsetInGlobalSpace = offset + aabb.getCenter();
-
-        Ogre::Vector3 size = aabb.getSize();
-        // calculate the maximum radius needed to include 'everything'
-        double radius = std::max(size.x, std::max(size.y, size.z)) / 2.0;
- 
-        // a sphere primitiv has got its coordinate system at its center, so shift it with radius
-        OgreNewt::ConvexCollisionPtr rval(new OgreNewt::CollisionPrimitives::Ellipsoid(
-            PhysicsManager::getSingleton()._getNewtonWorld(),
-            Vector3(radius, radius, radius), orientation, offsetInGlobalSpace));
- 
-       return rval;
-    }
-
-    OgreNewt::ConvexCollisionPtr PhysicsCollisionFactory::createEllipsoid(const Ogre::AxisAlignedBox& aabb,
-            const Ogre::Vector3 &offset,
-            const Ogre::Quaternion &orientation)
-    {
-        // offset relative to center
-        Ogre::Vector3 offsetInGlobalSpace = offset + aabb.getCenter();
-
-        Ogre::Vector3 size = aabb.getSize();
-        // set the size x/z values to the maximum
-        Vector3 s(size/2.0);
-        s.x = std::max(s.x, s.z);
-        s.z = s.x;
-
-        // an ellipsoid primitiv has got its coordinate system at its center, so shift it with radius
-        OgreNewt::ConvexCollisionPtr rval(new OgreNewt::CollisionPrimitives::Ellipsoid(
-            PhysicsManager::getSingleton()._getNewtonWorld(),
-            s, orientation, offsetInGlobalSpace));
-
-       return rval;
-    }
-
-    OgreNewt::ConvexCollisionPtr PhysicsCollisionFactory::createCapsule(const Ogre::AxisAlignedBox& aabb,
-            const Ogre::Vector3 &offset,
-            const Ogre::Quaternion &orientation)
-    {
-        // offset relative to center
-        Ogre::Vector3 offsetInGlobalSpace = offset + aabb.getCenter();
-        // @todo: fixme: this is a semi ugly fix - because the orientation should be set by the loader
-        //object_orientation.FromAngleAxis(Degree(90), Vector3::UNIT_Z);
-
-        Ogre::Vector3 size = aabb.getSize();
-
-        double radius = std::max(size.x, size.z) / 2.0;
-		double height = size.y;
-
-        // an capsule primitiv has got its coordinate system at its center, so shift it with radius
-        // additionally it is x axis aligned, so rotate it 90 degrees around z axis
-        OgreNewt::ConvexCollisionPtr rval(new OgreNewt::CollisionPrimitives::Capsule(
-            PhysicsManager::getSingleton()._getNewtonWorld(),
-            radius, height, orientation, offsetInGlobalSpace));
-
-        return rval;
-    }
-
-
-
-    OgreNewt::ConvexCollisionPtr PhysicsCollisionFactory::createConvexHull(
-            Ogre::Entity* entity,
-            const Ogre::Vector3 &offset,
-            const Ogre::Quaternion &orientation)
-    {
-        Ogre::Vector3 offsetInGlobalSpace = offset;
-
-        // calculate the convex hull of the animated mesh
-        OgreNewt::ConvexCollisionPtr rval(new OgreNewt::CollisionPrimitives::ConvexHull(
-                    PhysicsManager::getSingleton()._getNewtonWorld(),
-                    entity, orientation, offsetInGlobalSpace));
-
-        return rval;
-    }
-
-
-    OgreNewt::CollisionPtr PhysicsCollisionFactory::loadFromFile(const Ogre::String& filename)
-    {
-        OgreNewt::CollisionPtr rval;
-        Ogre::String fullfilename = mCachePathName+filename;
-        FILE* pFile = fopen(fullfilename.c_str(), "r" );
-        if( pFile )
-        {
-            Ogre::DataStreamPtr streamPtr( new Ogre::FileHandleDataStream( pFile ) );
-            rval = mCollisionSerializer.importCollision( streamPtr, PhysicsManager::getSingleton()._getNewtonWorld() );
-
-            if( rval )
-            {
-                LOG_DEBUG(Logger::CORE, "Loaded collision from file '" + filename + "'.");
-            }
-        }
-
-        return rval;
-    }
-
-
-
-    void PhysicsCollisionFactory::saveToFile(OgreNewt::CollisionPtr col, const Ogre::String& filename)
-    {
-        mCollisionSerializer.exportCollision(col, mCachePathName + filename);
-    }
-
-
-
-    OgreNewt::CollisionPtr PhysicsCollisionFactory::createMesh( Ogre::Entity* entity, const Ogre::String& animName, bool nocache )
-    {
-        OgreNewt::CollisionPtr rval;
-        Ogre::String filename;
-
-        if( !nocache )
-        {
-            Ogre::Vector3 scale(Ogre::Vector3::UNIT_SCALE);
-            if( entity->getParentNode() )
-                scale = entity->getParentNode()->getScale();
-
-            filename = entity->getMesh()->getName() + animName + Ogre::StringConverter::toString(scale) + ".collision";
-
-            // check date of cache file and mesh
-            time_t meshFileModified = 
-                Ogre::ResourceGroupManager::getSingleton().resourceModifiedTime(
-                        entity->getMesh()->getGroup(),
-                        entity->getMesh()->getName());
-
-#if OGRE_PLATFORM == OGRE_PLATFORM_LINUX
-            fs::path cacheFilePath( mCachePathName+filename, fs::portable_posix_name);
-#else
-            fs::path cacheFilePath( mCachePathName+filename );
-#endif
-
-            time_t cacheFileModified = 0;
-            if( fs::exists(cacheFilePath) )
-                cacheFileModified = fs::last_write_time(cacheFilePath);
-
-
-            if( cacheFileModified > meshFileModified )        
-                rval = loadFromFile( filename );
-        }
-
-
-        if( !rval )
-        {
-            rval = OgreNewt::CollisionPtr( new OgreNewt::CollisionPrimitives::TreeCollision(
-                        PhysicsManager::getSingleton()._getNewtonWorld(),
-                        entity, true ));
-
-            if( !nocache )
-            {
-                saveToFile(rval, filename );
-            }
-        }
-
-        return rval;
-    }
-
-
-
-    PhysicsCollisionFactory::StringVector::StringVector(const Ogre::String& str, const Ogre::Vector3& vec)
-    {
-        setString(str);
-        setVector(vec);
-    }
-    
-    void PhysicsCollisionFactory::StringVector::setString(const Ogre::String& str)
-    {
-        mStr = str;
-    }
-    
-    void PhysicsCollisionFactory::StringVector::setVector(const Ogre::Vector3& vec)
-    {
-        mVec = vec;
-    }
-    
-    const Ogre::String& PhysicsCollisionFactory::StringVector::getString() const
-    {
-        return mStr;
-    }
-    
-    const Ogre::Vector3& PhysicsCollisionFactory::StringVector::getVector() const
-    {
-        return mVec;
-    }
-
-    bool PhysicsCollisionFactory::StringVector::operator==(const PhysicsCollisionFactory::StringVector& strVec) const
-    {
-        if( mStr != strVec.mStr )
-            return false;
-
-        Ogre::Vector3 diff = mVec - strVec.mVec;
-        if( abs(diff.x) > 0.01 )
-            return false;
-        if( abs(diff.y) > 0.01 )
-            return false;
-        if( abs(diff.z) > 0.01 )
-            return false;
-
-        return true;
-    }
-
-    bool PhysicsCollisionFactory::StringVector::operator<(const PhysicsCollisionFactory::StringVector& strVec) const
-    {
-        int strCompare = mStr.compare(strVec.mStr);
-        // @todo: use a hash or so
-        if( strCompare == 0 ) // strings are the same
-        {
-            // compare vectors
-            Ogre::Vector3 diff = mVec - strVec.mVec;
-            if( diff.x < -0.01 )
-                return true;
-            if( diff.x > 0.01 )
-                return false;
-            if( diff.y < -0.01 )
-                return true;
-            if( diff.y > 0.01 )
-                return false;
-            if( diff.y < -0.01 )
-                return true;
-
-            return false;
-        }
-        
-        return strCompare < 0;
-    }
-
-
-}
-
+/* This source file is part of Rastullahs Lockenpracht.
+* Copyright (C) 2003-2008 Team Pantheon. http://www.team-pantheon.de
+*
+*  This program is free software; you can redistribute it and/or modify
+*  it under the terms of the Clarified Artistic License.
+*
+*  This program is distributed in the hope that it will be useful,
+*  but WITHOUT ANY WARRANTY; without even the implied warranty of
+*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+*  Clarified Artistic License for more details.
+*
+*  You should have received a copy of the Clarified Artistic License
+*  along with this program; if not you can get it here
+*  http://www.jpaulmorrison.com/fbp/artistic2.htm.
+*/
+#include "stdinc.h" //precompiled header
+
+#include "PhysicsCollisionFactory.h"
+
+#include <boost/filesystem/operations.hpp>
+#include <boost/filesystem/exception.hpp>
+
+#include "ConfigurationManager.h"
+#include "Exception.h"
+#include "PhysicsManager.h"
+
+namespace fs = boost::filesystem;
+
+#ifdef __APPLE__
+#   include <Ogre/OgreMesh.h>
+#else
+#   include <OgreMesh.h>
+#endif
+
+
+using namespace std;
+using namespace OgreNewt;
+using namespace Ogre;
+
+
+namespace rl
+{
+
+    PhysicsCollisionFactory::PhysicsCollisionFactory() :
+        mCollisionSerializer()
+    {
+
+#       if OGRE_PLATFORM == OGRE_PLATFORM_LINUX
+        mCachePathName = Ogre::String( Ogre::String(::getenv("HOME")) + "/.rastullah/cache/");
+        fs::path cachePath( mCachePathName, fs::portable_posix_name);
+#       else
+        mCachePathName = Ogre::String( ConfigurationManager::getSingleton().getModulesRootDirectory() + "/cache/" );
+        fs::path cachePath( mCachePathName );
+#       endif
+
+        if( !fs::exists(cachePath) )
+            fs::create_directory(cachePath);
+    }
+
+
+    PhysicsCollisionFactory::~PhysicsCollisionFactory()
+    {
+        clearCollisionCache();
+    }
+
+    void PhysicsCollisionFactory::clearCollisionCache()
+    {
+        mMeshCollisionsCache.clear();
+        mConvexCollisionsCache.clear();
+        mConvexAABBCollisionsCache.clear();
+    }
+
+    bool PhysicsCollisionFactory::checkSize(const Ogre::AxisAlignedBox& aabb) const
+    {
+        Ogre::Vector3 size = aabb.getSize();
+        if( size.x < PhysicsManager::NEWTON_GRID_WIDTH ||
+            size.y < PhysicsManager::NEWTON_GRID_WIDTH ||
+            size.z < PhysicsManager::NEWTON_GRID_WIDTH )
+            return false;
+        return true;
+    }
+
+    void PhysicsCollisionFactory::correctSize(Ogre::AxisAlignedBox& aabb)
+    {
+        Ogre::Vector3 size = aabb.getSize();
+        // correct size, log warning and fail back to box
+        if (size.x < PhysicsManager::NEWTON_GRID_WIDTH)
+            size.x = PhysicsManager::NEWTON_GRID_WIDTH;
+        if (size.y < PhysicsManager::NEWTON_GRID_WIDTH)
+            size.y = PhysicsManager::NEWTON_GRID_WIDTH;
+        if (size.z < PhysicsManager::NEWTON_GRID_WIDTH)
+            size.z = PhysicsManager::NEWTON_GRID_WIDTH;
+        LOG_MESSAGE(Logger::CORE, "Correcting collision primitiv size");
+        Ogre::Vector3 center = aabb.getCenter();
+        aabb.setMaximum(center + 0.5*size);
+        aabb.setMinimum(center - 0.5*size);
+    }
+
+    OgreNewt::CollisionPtr PhysicsCollisionFactory::createCollisionFromAABB(
+        const Ogre::String& name,
+        const Ogre::AxisAlignedBox& passedAabb,
+        const GeometryType& geomType,
+        const Ogre::Vector3 &offset,
+        const Ogre::Quaternion &orientation,
+        const Ogre::Real mass,
+        Ogre::Vector3* inertia,
+        Ogre::Vector3* centerOfMass,
+        bool nocache)
+    {
+
+        // don't cache if the name is ""
+        if( name == "" )
+            nocache = true;
+
+
+        Ogre::AxisAlignedBox aabb(passedAabb);
+        // type for the collision primitiv (can change internally here)
+        bool forceBox (false);
+
+        // result value
+        ConvexCollisionPtr rval;
+
+        // size check (if object is too small, it falls back to a box primitiv
+        if (checkSize(aabb) == false )
+        {
+            correctSize(aabb);
+            LOG_WARNING(Logger::CORE,
+                " AABB is too small, using 'box' instead of primitiv '" +
+                PhysicsManager::convertGeometryTypeToString(geomType));
+            forceBox = true;
+        }
+
+        // check if the geometry type is supported for aabb
+        if (geomType == GT_CONVEXHULL ||
+            geomType == GT_MESH)
+        {
+            LOG_WARNING(Logger::CORE,
+                " the geometry type '"+
+                PhysicsManager::convertGeometryTypeToString(geomType)+
+                "' is not supported for aabb, fail back to box");
+            forceBox = true;
+        }
+
+
+        ConvexCollisionCacheMap::iterator convexCacheIt = mConvexAABBCollisionsCache.end();
+
+        // check if we can reuse a cached collision
+        if( !nocache )
+        {
+            if( !forceBox )
+            {
+                Ogre::String index(name);
+                std::pair<ConvexCollisionCacheMap::iterator,bool> iterBoolPair = mConvexAABBCollisionsCache.insert(std::make_pair(index, ConvexCollisionCacheObject()));
+                convexCacheIt = iterBoolPair.first;
+                if( !iterBoolPair.second )
+                {
+                    // there was already an element, check type, the size, offset etc if we can use it
+                    if( geomType != convexCacheIt->second.type )
+                    {
+                        LOG_MESSAGE(Logger::CORE, "Performance warning: trying to create a collision for aabb '" + name +
+                                "' with geometry-type '"+PhysicsManager::convertGeometryTypeToString(geomType)+
+                                "'. There's already a collision with type '"+PhysicsManager::convertGeometryTypeToString(convexCacheIt->second.type)+"'!");
+                    }
+                    else if( aabb.getSize() == convexCacheIt->second.scale && offset == convexCacheIt->second.offset && orientation == convexCacheIt->second.orientation )
+                    {
+                        // everything fine, reuse it
+                        rval = convexCacheIt->second.col;
+
+                        if( inertia != NULL )
+                            *inertia = convexCacheIt->second.inertia;
+                        if( centerOfMass != NULL )
+                            *centerOfMass = convexCacheIt->second.centerOfMass;
+
+                        LOG_DEBUG(Logger::CORE, "Reused collision for aabb '" + name + "'.");
+
+                        return rval;
+                    }
+                }
+            }
+        }
+
+
+        /* differentiate between the different collision primitives, because they all
+		   need different offset and probably different orientation values.
+		   Newton SDK is really nifty and helps here, because we can shift the origin
+		   of the coordinate system of the primitiv we create into any position we
+		   desire. Actually this is the bottom middle of our mesh - as the meshes are
+		   always constructed like that.
+	    */
+        if( !rval )
+        {
+            if (geomType == GT_BOX || forceBox == true)
+            {
+                rval = createBox(aabb, offset, orientation);
+            }
+            else if (geomType == GT_PYRAMID)
+            {
+                rval = createPyramid(aabb, offset, orientation);
+            }
+            else if (geomType == GT_SPHERE)
+            {
+                rval = createSphere(aabb, offset, orientation);
+            }
+            else if (geomType == GT_ELLIPSOID)
+            {
+                rval = createEllipsoid(aabb, offset, orientation);
+            }
+            else if (geomType == GT_CAPSULE)
+            {
+                rval = createCapsule(aabb, offset, orientation);
+            }
+        }
+
+        if ( rval == NULL )
+        {
+            LOG_WARNING(Logger::CORE, " creating collision primitiv '"+
+                PhysicsManager::convertGeometryTypeToString(geomType)+"' for AABB '"+ name
+                +"' failed.");
+
+            // delete cacheobject
+            if( convexCacheIt != mConvexAABBCollisionsCache.end() )
+            {
+                mConvexAABBCollisionsCache.erase( convexCacheIt );
+            }
+        }
+        else
+        {
+            LOG_DEBUG(Logger::CORE, " collision primitiv '"+
+                PhysicsManager::convertGeometryTypeToString(geomType)+"' created for AABB '"+
+                name+"'");
+        }
+
+
+        // calculate inertia / centerOfMass if requested
+        // and save collision in cache
+        if( rval)
+        {
+            if( convexCacheIt != mConvexAABBCollisionsCache.end() )
+            {
+                // save collision in cache
+                Vector3 temp_inertia, temp_centerOfMass;
+                rval->calculateInertialMatrix(temp_inertia, temp_centerOfMass);
+
+                convexCacheIt->second.col = rval;
+                convexCacheIt->second.scale = aabb.getSize();
+                convexCacheIt->second.offset = offset;
+                convexCacheIt->second.orientation = orientation;
+                convexCacheIt->second.inertia = temp_inertia;
+                convexCacheIt->second.centerOfMass = temp_centerOfMass;
+                convexCacheIt->second.type = geomType;
+
+                if( inertia != NULL )
+                    *inertia = temp_inertia*mass;
+                if( centerOfMass != NULL )
+                    *centerOfMass = temp_centerOfMass;
+            }
+            else if (inertia != NULL || centerOfMass != NULL )
+            {
+                Vector3 temp_inertia, temp_centerOfMass;
+                rval->calculateInertialMatrix(temp_inertia, temp_centerOfMass);
+                if( inertia != NULL )
+                    *inertia = temp_inertia*mass;
+                if( centerOfMass != NULL )
+                    *centerOfMass = temp_centerOfMass;
+            }
+        }
+
+        return rval;
+    }
+
+
+    OgreNewt::CollisionPtr PhysicsCollisionFactory::createCollisionFromEntity(Ogre::Entity* entity,
+        const GeometryType& geomType,
+        const Ogre::String& animName,
+        const Ogre::Vector3 &offset,
+        const Ogre::Quaternion &orientation,
+        const Ogre::Real mass,
+        Ogre::Vector3* inertia,
+        Ogre::Vector3* centerOfMass,
+        bool nocache)
+    {
+        // bounding box of the mesh
+        Ogre::AxisAlignedBox aabb(entity->getBoundingBox());
+        // apply scale if attached to a node (like in OgreNewt for convexhull)
+        Ogre::Vector3 scale = Ogre::Vector3::UNIT_SCALE;
+        if( entity->getParentNode() )
+        {
+            scale = entity->getParentNode()->getScale();
+            aabb.scale(scale);
+        }
+
+        // type for the collision primitiv (can change internally here)
+        bool forceBox (false);
+
+        // result value
+        CollisionPtr rval;
+        ConvexCollisionPtr rvalAsConvexCollision; // store pointer to ConvexCollision, so we don't need to cast
+                                                  // this also indicates, that it is possible to calculate inertia/centerOfMass
+
+        // size check (if object is too small, it falls back to a box primitiv
+        if (checkSize(aabb) == false )
+        {
+            correctSize(aabb);
+            LOG_MESSAGE(Logger::CORE, " Entity '"+entity->getName()+
+                "' is too small, using 'box' instead of primitiv '"+
+                PhysicsManager::convertGeometryTypeToString(geomType));
+            forceBox = true;
+        }
+
+
+        if( geomType == GT_MESH )
+        {
+            if( offset != Ogre::Vector3::ZERO || orientation != Ogre::Quaternion::IDENTITY )
+            {
+                LOG_WARNING(Logger::CORE, " Cannot set collision offset or orientation when using mesh-collision (entity: '" +
+                        entity->getName()+"')!");
+            }
+            if( inertia || centerOfMass )
+            {
+                LOG_WARNING(Logger::CORE, " Cannot calculate inertia or center of mass when using mesh-collision (entity: '" +
+                        entity->getName()+"')!");
+            }
+        }
+
+
+        MeshCollisionCacheMap::iterator meshCacheIt = mMeshCollisionsCache.end();
+        ConvexCollisionCacheMap::iterator convexCacheIt = mConvexCollisionsCache.end();
+
+        // check if we can reuse a cached collision
+        if( !nocache )
+        {
+            // use meshcollisionscache
+            if( geomType == GT_MESH && !forceBox )
+            {
+                StringVector index(entity->getMesh()->getName() + animName, scale);
+                std::pair<MeshCollisionCacheMap::iterator,bool> iterBoolPair = mMeshCollisionsCache.insert(std::make_pair(index, MeshCollisionCacheObject()));
+                meshCacheIt = iterBoolPair.first;
+                if( !iterBoolPair.second )
+                {
+                    // there was already an element -- so we can reuse it
+
+                    LOG_DEBUG(Logger::CORE, "Reused collision for entity '" + entity->getName() + "' (mesh: '"
+                            + entity->getMesh()->getName() + "', animation: '" + animName + "').");
+                    rval = iterBoolPair.first->second.col;
+
+                    return rval;
+                }
+            }
+            // use convexcollisionscache
+            else if( !forceBox )
+            {
+                Ogre::String index(entity->getMesh()->getName() + animName);
+                std::pair<ConvexCollisionCacheMap::iterator,bool> iterBoolPair = mConvexCollisionsCache.insert(std::make_pair(index, ConvexCollisionCacheObject()));
+                convexCacheIt = iterBoolPair.first;
+                if( !iterBoolPair.second )
+                {
+                    // there was already an element, check type, the size, offset etc if we can use it
+                    if( geomType != convexCacheIt->second.type )
+                    {
+                        LOG_MESSAGE(Logger::CORE, "Performance warning: trying to create a collision for entity '"+entity->getName()+"' with animation '"+
+                                animName+"' with geometry-type '"+PhysicsManager::convertGeometryTypeToString(geomType)+
+                                "'. There's already a collision with type '"+PhysicsManager::convertGeometryTypeToString(convexCacheIt->second.type)+"'!");
+                    }
+                    else if( scale == convexCacheIt->second.scale && offset == convexCacheIt->second.offset && orientation == convexCacheIt->second.orientation )
+                    {
+                        // everything fine, reuse it
+                        rval = convexCacheIt->second.col;
+
+                        if( inertia != NULL )
+                            *inertia = convexCacheIt->second.inertia;
+                        if( centerOfMass != NULL )
+                            *centerOfMass = convexCacheIt->second.centerOfMass;
+
+                        LOG_DEBUG(Logger::CORE, "Reused collision for entity '" + entity->getName() + "' (mesh: '"
+                            + entity->getMesh()->getName() + "', animation: '" + animName + "').");
+
+                        return rval;
+                    }
+                    else if( geomType == GT_CONVEXHULL ) // for simple types just use create a new collision
+                    {
+                        // we need to rescale (or change offset or orientation)
+                        // the old transformation
+                        Ogre::Matrix4 oldInvTransformation;
+                        oldInvTransformation.makeInverseTransform(convexCacheIt->second.offset, convexCacheIt->second.scale, convexCacheIt->second.orientation);
+                        // the new transformation
+                        Ogre::Matrix4 newTransformation;
+                        newTransformation.makeTransform(offset, scale, orientation);
+
+                        // the needed transformation from old to new:
+                        Ogre::Matrix4 transformation = oldInvTransformation*newTransformation;
+
+                        OgreNewt::ConvexModifierCollision *convexModCol = new OgreNewt::ConvexModifierCollision(
+                                PhysicsManager::getSingleton()._getNewtonWorld(),convexCacheIt->second.col);
+                        convexModCol->setScalarMatrix(transformation);
+
+                        // set the convexcollision-ptr, so centerOfMass and inertia can be calculated
+                        rval = OgreNewt::ConvexCollisionPtr(convexModCol);
+
+
+                        LOG_DEBUG(Logger::CORE, "Reused collision for entity '" + entity->getName() + "' (mesh: '"
+                                + entity->getMesh()->getName() + "', animation: '" + animName + "') with a ConvexModifierCollision.");
+
+                        // calculate inertia / centerOfMass if needed
+                        if (inertia != NULL || centerOfMass != NULL )
+                        {
+                            Vector3 temp_inertia, temp_centerOfMass;
+                            rvalAsConvexCollision->calculateInertialMatrix(temp_inertia, temp_centerOfMass);
+                            if( inertia != NULL )
+                                *inertia = temp_inertia*mass;
+                            if( centerOfMass != NULL )
+                                *centerOfMass = temp_centerOfMass;
+                        }
+
+                        return rval;
+                    }
+                }
+            }
+        }
+
+		/* differentiate between the different collision primitives, because they all
+		   need different offset and probably different orientation values.
+		   Newton SDK is really nifty and helps here, because we can shift the origin
+		   of the coordinate system of the primitiv we create into any position we
+		   desire. Actually this is the bottom middle of our mesh - as the meshes are
+		   always constructed like that.
+	    */
+        if (geomType == GT_BOX || forceBox == true)
+        {
+            rvalAsConvexCollision = createBox(aabb, offset, orientation);
+            rval = rvalAsConvexCollision;
+        }
+        else if (geomType == GT_PYRAMID)
+        {
+            rvalAsConvexCollision = createPyramid(aabb, offset, orientation);
+            rval = rvalAsConvexCollision;
+        }
+        else if (geomType == GT_SPHERE)
+        {
+            rvalAsConvexCollision = createSphere(aabb, offset, orientation);
+            rval = rvalAsConvexCollision;
+        }
+        else if (geomType == GT_ELLIPSOID)
+        {
+            rvalAsConvexCollision = createEllipsoid(aabb, offset, orientation);
+            rval = rvalAsConvexCollision;
+        }
+        else if (geomType == GT_CAPSULE)
+        {
+            rvalAsConvexCollision = createCapsule(aabb, offset, orientation);
+            rval = rvalAsConvexCollision;
+        }
+        else if (geomType == GT_CONVEXHULL)
+        {
+            rvalAsConvexCollision = createConvexHull(entity, offset, orientation);
+            rval = rvalAsConvexCollision;
+        }
+        else if (geomType == GT_MESH)
+        {
+            rval = createMesh( entity, animName, nocache );
+
+            if( meshCacheIt != mMeshCollisionsCache.end() )
+                meshCacheIt->second.col = rval;
+        }
+        else
+        {
+            Throw(IllegalArgumentException, "unknown geometry type.");
+        }
+
+
+        if ( rval == NULL )
+        {
+            LOG_WARNING(Logger::CORE, " creating collision primitiv '"+
+                PhysicsManager::convertGeometryTypeToString(geomType)+"' for Entity '"+
+                entity->getName()+"' failed.");
+
+            // delete cacheobject
+            if( meshCacheIt != mMeshCollisionsCache.end() )
+            {
+                mMeshCollisionsCache.erase( meshCacheIt );
+            }
+            if( convexCacheIt != mConvexCollisionsCache.end() )
+            {
+                mConvexCollisionsCache.erase( convexCacheIt );
+            }
+        }
+        else
+        {
+            LOG_DEBUG(Logger::CORE, " collision primitiv '"+
+                PhysicsManager::convertGeometryTypeToString(geomType)+"' created for Entity '"+
+                entity->getName()+"'");
+        }
+
+        // calculate inertia / centerOfMass if requested
+        // and save collision in cache
+        if( rvalAsConvexCollision )
+        {
+            if( convexCacheIt != mConvexCollisionsCache.end() )
+            {
+                // save collision in cache
+                Vector3 temp_inertia, temp_centerOfMass;
+                rvalAsConvexCollision->calculateInertialMatrix(temp_inertia, temp_centerOfMass);
+
+                convexCacheIt->second.col = rvalAsConvexCollision;
+                convexCacheIt->second.scale = scale;
+                convexCacheIt->second.offset = offset;
+                convexCacheIt->second.orientation = orientation;
+                convexCacheIt->second.inertia = temp_inertia;
+                convexCacheIt->second.centerOfMass = temp_centerOfMass;
+                convexCacheIt->second.type = geomType;
+
+                if( inertia != NULL )
+                    *inertia = temp_inertia*mass;
+                if( centerOfMass != NULL )
+                    *centerOfMass = temp_centerOfMass;
+            }
+            else if (inertia != NULL || centerOfMass != NULL )
+            {
+                Vector3 temp_inertia, temp_centerOfMass;
+                rvalAsConvexCollision->calculateInertialMatrix(temp_inertia, temp_centerOfMass);
+                if( inertia != NULL )
+                    *inertia = temp_inertia*mass;
+                if( centerOfMass != NULL )
+                    *centerOfMass = temp_centerOfMass;
+            }
+        }
+
+        return rval;
+    }
+
+
+    OgreNewt::ConvexCollisionPtr PhysicsCollisionFactory::createBox(const Ogre::AxisAlignedBox& aabb,
+            const Ogre::Vector3 &offset,
+            const Ogre::Quaternion &orientation)
+    {
+        // offset relative to center
+        Ogre::Vector3 offsetInGlobalSpace = offset + aabb.getCenter();
+
+        // a box collision primitiv has got it's coordinate system at it's center, so we need to shift it
+        OgreNewt::ConvexCollisionPtr rval(new OgreNewt::CollisionPrimitives::Box(
+            PhysicsManager::getSingleton()._getNewtonWorld(),
+            aabb.getSize(), orientation, offsetInGlobalSpace));
+
+       return rval;
+    }
+
+    OgreNewt::ConvexCollisionPtr PhysicsCollisionFactory::createPyramid(const Ogre::AxisAlignedBox& aabb,
+            const Ogre::Vector3 &offset,
+            const Ogre::Quaternion &orientation)
+    {
+        // offset relative to center
+        Ogre::Vector3 offsetInGlobalSpace = offset + aabb.getCenter();
+
+        OgreNewt::ConvexCollisionPtr rval(new OgreNewt::CollisionPrimitives::Pyramid(
+            PhysicsManager::getSingleton()._getNewtonWorld(),
+            aabb.getSize(), orientation, offsetInGlobalSpace));
+
+       return rval;
+    }
+
+    OgreNewt::ConvexCollisionPtr PhysicsCollisionFactory::createSphere(const Ogre::AxisAlignedBox& aabb,
+            const Ogre::Vector3 &offset,
+            const Ogre::Quaternion &orientation)
+    {
+        // offset relative to center
+        Ogre::Vector3 offsetInGlobalSpace = offset + aabb.getCenter();
+
+        Ogre::Vector3 size = aabb.getSize();
+        // calculate the maximum radius needed to include 'everything'
+        double radius = std::max(size.x, std::max(size.y, size.z)) / 2.0;
+ 
+        // a sphere primitiv has got its coordinate system at its center, so shift it with radius
+        OgreNewt::ConvexCollisionPtr rval(new OgreNewt::CollisionPrimitives::Ellipsoid(
+            PhysicsManager::getSingleton()._getNewtonWorld(),
+            Vector3(radius, radius, radius), orientation, offsetInGlobalSpace));
+ 
+       return rval;
+    }
+
+    OgreNewt::ConvexCollisionPtr PhysicsCollisionFactory::createEllipsoid(const Ogre::AxisAlignedBox& aabb,
+            const Ogre::Vector3 &offset,
+            const Ogre::Quaternion &orientation)
+    {
+        // offset relative to center
+        Ogre::Vector3 offsetInGlobalSpace = offset + aabb.getCenter();
+
+        Ogre::Vector3 size = aabb.getSize();
+        // set the size x/z values to the maximum
+        Vector3 s(size/2.0);
+        s.x = std::max(s.x, s.z);
+        s.z = s.x;
+
+        // an ellipsoid primitiv has got its coordinate system at its center, so shift it with radius
+        OgreNewt::ConvexCollisionPtr rval(new OgreNewt::CollisionPrimitives::Ellipsoid(
+            PhysicsManager::getSingleton()._getNewtonWorld(),
+            s, orientation, offsetInGlobalSpace));
+
+       return rval;
+    }
+
+    OgreNewt::ConvexCollisionPtr PhysicsCollisionFactory::createCapsule(const Ogre::AxisAlignedBox& aabb,
+            const Ogre::Vector3 &offset,
+            const Ogre::Quaternion &orientation)
+    {
+        // offset relative to center
+        Ogre::Vector3 offsetInGlobalSpace = offset + aabb.getCenter();
+        // @todo: fixme: this is a semi ugly fix - because the orientation should be set by the loader
+        //object_orientation.FromAngleAxis(Degree(90), Vector3::UNIT_Z);
+
+        Ogre::Vector3 size = aabb.getSize();
+
+        double radius = std::max(size.x, size.z) / 2.0;
+		double height = size.y;
+
+        // an capsule primitiv has got its coordinate system at its center, so shift it with radius
+        // additionally it is x axis aligned, so rotate it 90 degrees around z axis
+        OgreNewt::ConvexCollisionPtr rval(new OgreNewt::CollisionPrimitives::Capsule(
+            PhysicsManager::getSingleton()._getNewtonWorld(),
+            radius, height, orientation, offsetInGlobalSpace));
+
+        return rval;
+    }
+
+
+
+    OgreNewt::ConvexCollisionPtr PhysicsCollisionFactory::createConvexHull(
+            Ogre::Entity* entity,
+            const Ogre::Vector3 &offset,
+            const Ogre::Quaternion &orientation)
+    {
+        Ogre::Vector3 offsetInGlobalSpace = offset;
+
+        // calculate the convex hull of the animated mesh
+        OgreNewt::ConvexCollisionPtr rval(new OgreNewt::CollisionPrimitives::ConvexHull(
+                    PhysicsManager::getSingleton()._getNewtonWorld(),
+                    entity, orientation, offsetInGlobalSpace));
+
+        return rval;
+    }
+
+
+    OgreNewt::CollisionPtr PhysicsCollisionFactory::loadFromFile(const Ogre::String& filename)
+    {
+        OgreNewt::CollisionPtr rval;
+        Ogre::String fullfilename = mCachePathName+filename;
+        FILE* pFile = fopen(fullfilename.c_str(), "r" );
+        if( pFile )
+        {
+            Ogre::DataStreamPtr streamPtr( new Ogre::FileHandleDataStream( pFile ) );
+            rval = mCollisionSerializer.importCollision( streamPtr, PhysicsManager::getSingleton()._getNewtonWorld() );
+
+            if( rval )
+            {
+                LOG_DEBUG(Logger::CORE, "Loaded collision from file '" + filename + "'.");
+            }
+        }
+
+        return rval;
+    }
+
+
+
+    void PhysicsCollisionFactory::saveToFile(OgreNewt::CollisionPtr col, const Ogre::String& filename)
+    {
+        mCollisionSerializer.exportCollision(col, mCachePathName + filename);
+    }
+
+
+
+    OgreNewt::CollisionPtr PhysicsCollisionFactory::createMesh( Ogre::Entity* entity, const Ogre::String& animName, bool nocache )
+    {
+        OgreNewt::CollisionPtr rval;
+        Ogre::String filename;
+
+        if( !nocache )
+        {
+            Ogre::Vector3 scale(Ogre::Vector3::UNIT_SCALE);
+            if( entity->getParentNode() )
+                scale = entity->getParentNode()->getScale();
+
+            filename = entity->getMesh()->getName() + animName + Ogre::StringConverter::toString(scale) + ".collision";
+
+            // check date of cache file and mesh
+            time_t meshFileModified = 
+                Ogre::ResourceGroupManager::getSingleton().resourceModifiedTime(
+                        entity->getMesh()->getGroup(),
+                        entity->getMesh()->getName());
+
+#if OGRE_PLATFORM == OGRE_PLATFORM_LINUX
+            fs::path cacheFilePath( mCachePathName+filename, fs::portable_posix_name);
+#else
+            fs::path cacheFilePath( mCachePathName+filename );
+#endif
+
+            time_t cacheFileModified = 0;
+            if( fs::exists(cacheFilePath) )
+                cacheFileModified = fs::last_write_time(cacheFilePath);
+
+
+            if( cacheFileModified > meshFileModified )        
+                rval = loadFromFile( filename );
+        }
+
+
+        if( !rval )
+        {
+            rval = OgreNewt::CollisionPtr( new OgreNewt::CollisionPrimitives::TreeCollision(
+                        PhysicsManager::getSingleton()._getNewtonWorld(),
+                        entity, true ));
+
+            if( !nocache )
+            {
+                saveToFile(rval, filename );
+            }
+        }
+
+        return rval;
+    }
+
+
+
+    PhysicsCollisionFactory::StringVector::StringVector(const Ogre::String& str, const Ogre::Vector3& vec)
+    {
+        setString(str);
+        setVector(vec);
+    }
+    
+    void PhysicsCollisionFactory::StringVector::setString(const Ogre::String& str)
+    {
+        mStr = str;
+    }
+    
+    void PhysicsCollisionFactory::StringVector::setVector(const Ogre::Vector3& vec)
+    {
+        mVec = vec;
+    }
+    
+    const Ogre::String& PhysicsCollisionFactory::StringVector::getString() const
+    {
+        return mStr;
+    }
+    
+    const Ogre::Vector3& PhysicsCollisionFactory::StringVector::getVector() const
+    {
+        return mVec;
+    }
+
+    bool PhysicsCollisionFactory::StringVector::operator==(const PhysicsCollisionFactory::StringVector& strVec) const
+    {
+        if( mStr != strVec.mStr )
+            return false;
+
+        Ogre::Vector3 diff = mVec - strVec.mVec;
+        if( abs(diff.x) > 0.01 )
+            return false;
+        if( abs(diff.y) > 0.01 )
+            return false;
+        if( abs(diff.z) > 0.01 )
+            return false;
+
+        return true;
+    }
+
+    bool PhysicsCollisionFactory::StringVector::operator<(const PhysicsCollisionFactory::StringVector& strVec) const
+    {
+        int strCompare = mStr.compare(strVec.mStr);
+        // @todo: use a hash or so
+        if( strCompare == 0 ) // strings are the same
+        {
+            // compare vectors
+            Ogre::Vector3 diff = mVec - strVec.mVec;
+            if( diff.x < -0.01 )
+                return true;
+            if( diff.x > 0.01 )
+                return false;
+            if( diff.y < -0.01 )
+                return true;
+            if( diff.y > 0.01 )
+                return false;
+            if( diff.y < -0.01 )
+                return true;
+
+            return false;
+        }
+        
+        return strCompare < 0;
+    }
+
+
+}
+

Modified: rl/branches/persistence2/engine/ui/src/CutsceneControlState.cpp
===================================================================
--- rl/branches/persistence2/engine/ui/src/CutsceneControlState.cpp	2009-06-14 12:33:54 UTC (rev 4944)
+++ rl/branches/persistence2/engine/ui/src/CutsceneControlState.cpp	2009-06-15 18:20:42 UTC (rev 4945)
@@ -1,118 +1,125 @@
-/*
-* This source file is part of Rastullahs Lockenpracht.
-* Copyright (C) 2003-2008 Team Pantheon. http://www.team-pantheon.de
-*
-*  This program is free software; you can redistribute it and/or modify
-*  it under the terms of the Clarified Artistic License.
-*
-*  This program is distributed in the hope that it will be useful,
-*  but WITHOUT ANY WARRANTY; without even the implied warranty of
-*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-*  Clarified Artistic License for more details.
-*
-*  You should have received a copy of the Clarified Artistic License
-*  along with this program; if not you can get it here
-*  http://www.jpaulmorrison.com/fbp/artistic2.htm.
-*/
-#include "stdinc.h" //precompiled header
-
-#include "CutsceneControlState.h"
-#include "Exception.h"
-#include "Actor.h"
-#include "CameraObject.h"
-#include "CommandMapper.h"
-#include "GameObject.h"
-#include "PhysicalThing.h"
-
-using namespace Ogre;
-
-namespace rl {
-
-	CutsceneControlState::CutsceneControlState(CommandMapper* cmdMapper,
-        Actor* camera) : ControlState(cmdMapper, camera, NULL, CST_CUTSCENE),
-        mTarget(NULL)
-	{
-	}
-
-	CutsceneControlState::~CutsceneControlState()
-	{
-	}
-
-    void CutsceneControlState::pause()
-    {
-		mCameraActor->getPhysicalThing()->unfreeze();
-    }
-
-    void CutsceneControlState::resume()
-    {
-		mCameraActor->getPhysicalThing()->freeze();
-		Camera* ogreCam = static_cast<Camera*>(mCameraActor->_getMovableObject());
-		ogreCam->setFixedYawAxis(true);
-		mCameraActor->_getSceneNode()->setFixedYawAxis(true);
-    }
-
-	void CutsceneControlState::run(Real elapsedTime)
-	{
-	    CameraPosition pos = getBestCameraPosition();
-	    switch (pos.type)
-	    {
-	    case CPT_FIXED:
-	        setCameraPosition(pos.position);
-	        setCameraOrientation(pos.orientation1);
-	        break;
-	    case CPT_ROTATING:
-	        setCameraPosition(pos.position);
-	        lookAt(mTarget->getPosition());
-	        break;
-	    }
-	}
-
-	void CutsceneControlState::setCameraTarget(GameObject* target)
-	{
-	    mTarget = target;
-	}
-
-    void CutsceneControlState::setCameraPosition(const Vector3& pos)
-    {
-        mCameraActor->setPosition(pos);
-    }
-
-    void CutsceneControlState::setCameraOrientation(const Quaternion& orient)
-    {
-        mCameraActor->setOrientation(orient);
-    }
-
-    void CutsceneControlState::lookAt(const Vector3& point)
-    {
-        dynamic_cast<Camera*>(mCameraActor->getControlledObject()->getMovableObject())
-            ->lookAt(point);
-    }
-
-    CameraPosition CutsceneControlState::getBestCameraPosition() const
-    {
-        if (mPositions.empty())
-        {
-            CameraPosition nullPos = {CPT_FIXED, Vector3::ZERO, Quaternion::IDENTITY, Quaternion::IDENTITY};
-            return nullPos;
-        }
-        return *mPositions.begin();
-    }
-
-    void CutsceneControlState::addCamera(const Vector3& position, const Quaternion& orientation)
-    {
-        CameraPosition cpos = {CPT_FIXED, position, orientation, orientation};
-        mPositions.push_back(cpos);
-    }
-
-    void CutsceneControlState::addCamera(const Vector3& position, const Quaternion& orientation1,
-            const Quaternion& orientation2)
-    {
-        CameraPosition cpos = {CPT_ROTATING, position, orientation1, orientation2};
-        mPositions.push_back(cpos);
-    }
-
-    void CutsceneControlState::clearCameras()
-    {
-        mPositions.clear();
-    }
-}
+/*
+* This source file is part of Rastullahs Lockenpracht.
+* Copyright (C) 2003-2008 Team Pantheon. http://www.team-pantheon.de
+*
+*  This program is free software; you can redistribute it and/or modify
+*  it under the terms of the Clarified Artistic License.
+*
+*  This program is distributed in the hope that it will be useful,
+*  but WITHOUT ANY WARRANTY; without even the implied warranty of
+*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+*  Clarified Artistic License for more details.
+*
+*  You should have received a copy of the Clarified Artistic License
+*  along with this program; if not you can get it here
+*  http://www.jpaulmorrison.com/fbp/artistic2.htm.
+*/
+#include "stdinc.h" //precompiled header
+
+#include "CutsceneControlState.h"
+#include "Exception.h"
+#include "Actor.h"
+#include "CameraObject.h"
+#include "CommandMapper.h"
+#include "GameObject.h"
+#include "PhysicalThing.h"
+
+using namespace Ogre;
+using namespace std;
+
+namespace rl {
+
+	CutsceneControlState::CutsceneControlState(CommandMapper* cmdMapper,
+        Actor* camera) : ControlState(cmdMapper, camera, NULL, CST_CUTSCENE),
+        mTarget(NULL)
+	{
+	}
+
+	CutsceneControlState::~CutsceneControlState()
+	{
+	}
+
+    void CutsceneControlState::pause()
+    {
+		mCameraActor->getPhysicalThing()->unfreeze();
+    }
+
+    void CutsceneControlState::resume()
+    {
+		mCameraActor->getPhysicalThing()->freeze();
+		Camera* ogreCam = static_cast<Camera*>(mCameraActor->_getMovableObject());
+		ogreCam->setFixedYawAxis(true);
+		mCameraActor->_getSceneNode()->setFixedYawAxis(true);
+    }
+
+	void CutsceneControlState::run(Real elapsedTime)
+	{
+	    CameraPosition pos = getBestCameraPosition();
+	    switch (pos.type)
+	    {
+	    case CPT_FIXED:
+	        setCameraPosition(pos.position);
+	        setCameraOrientation(pos.orientation1);
+	        break;
+	    case CPT_ROTATING:
+	        setCameraPosition(pos.position);
+	        lookAt(mTarget->getPosition());
+	        break;
+	    }
+	}
+
+	void CutsceneControlState::setCameraTarget(GameObject* target)
+	{
+	    mTarget = target;
+	}
+
+    void CutsceneControlState::setCameraPosition(const Vector3& pos)
+    {
+        mCameraActor->setPosition(pos);
+    }
+
+    void CutsceneControlState::setCameraOrientation(const Quaternion& orient)
+    {
+        mCameraActor->setOrientation(orient);
+    }
+
+    void CutsceneControlState::lookAt(const Vector3& point)
+    {
+        dynamic_cast<Camera*>(mCameraActor->getControlledObject()->getMovableObject())
+            ->lookAt(point);
+    }
+
+    CameraPosition CutsceneControlState::getBestCameraPosition() const
+    {
+        if (mPositions.empty())
+        {
+            CameraPosition nullPos = {CPT_FIXED, Vector3::ZERO, Quaternion::IDENTITY, Quaternion::IDENTITY};
+            return nullPos;
+        }
+        
+        for (vector<CameraPosition>::const_iterator it = mPositions.begin(), end = mPositions.end(); it != end; ++it)
+        {
+            
+        }
+        
+        return *mPositions.begin();
+    }
+
+    void CutsceneControlState::addCamera(const Vector3& position, const Quaternion& orientation)
+    {
+        CameraPosition cpos = {CPT_FIXED, position, orientation, orientation};
+        mPositions.push_back(cpos);
+    }
+
+    void CutsceneControlState::addCamera(const Vector3& position, const Quaternion& orientation1,
+            const Quaternion& orientation2)
+    {
+        CameraPosition cpos = {CPT_ROTATING, position, orientation1, orientation2};
+        mPositions.push_back(cpos);
+    }
+
+    void CutsceneControlState::clearCameras()
+    {
+        mPositions.clear();
+    }
+}



From timm at mail.berlios.de  Mon Jun 15 21:44:50 2009
From: timm at mail.berlios.de (timm at mail.berlios.de)
Date: Mon, 15 Jun 2009 21:44:50 +0200
Subject: [Dsa-hl-svn] r4946 - in rl/branches/persistence2/engine: common
	core core/include
Message-ID: <200906151944.n5FJio0T024704@sheep.berlios.de>

Author: timm
Date: 2009-06-15 21:44:44 +0200 (Mon, 15 Jun 2009)
New Revision: 4946

Modified:
   rl/branches/persistence2/engine/common/RlCommon2008.vcproj
   rl/branches/persistence2/engine/core/RlCore2008.vcproj
   rl/branches/persistence2/engine/core/include/stdinc.h
Log:
Updated VC 2008 project files

Modified: rl/branches/persistence2/engine/common/RlCommon2008.vcproj
===================================================================
--- rl/branches/persistence2/engine/common/RlCommon2008.vcproj	2009-06-15 18:20:42 UTC (rev 4945)
+++ rl/branches/persistence2/engine/common/RlCommon2008.vcproj	2009-06-15 19:44:44 UTC (rev 4946)
@@ -365,18 +365,6 @@
 				</FileConfiguration>
 			</File>
 			<File
-				RelativePath=".\src\WriteableDataStream.cpp"
-				>
-			</File>
-			<File
-				RelativePath=".\src\WriteableDataStreamFormatTarget.cpp"
-				>
-			</File>
-			<File
-				RelativePath=".\src\WriteableFileSystemArchiv.cpp"
-				>
-			</File>
-			<File
 				RelativePath=".\src\XmlProcessor.cpp"
 				>
 			</File>
@@ -485,18 +473,6 @@
 				>
 			</File>
 			<File
-				RelativePath=".\include\WriteableDataStream.h"
-				>
-			</File>
-			<File
-				RelativePath=".\include\WriteableDataStreamFormatTarget.h"
-				>
-			</File>
-			<File
-				RelativePath=".\include\WriteableFileSystemArchiv.h"
-				>
-			</File>
-			<File
 				RelativePath=".\include\XmlProcessor.h"
 				>
 			</File>

Modified: rl/branches/persistence2/engine/core/RlCore2008.vcproj
===================================================================
--- rl/branches/persistence2/engine/core/RlCore2008.vcproj	2009-06-15 18:20:42 UTC (rev 4945)
+++ rl/branches/persistence2/engine/core/RlCore2008.vcproj	2009-06-15 19:44:44 UTC (rev 4946)
@@ -586,6 +586,10 @@
 				>
 			</File>
 			<File
+				RelativePath=".\include\SaveAbleSerializer.h"
+				>
+			</File>
+			<File
 				RelativePath=".\include\SaveGameData.h"
 				>
 			</File>
@@ -931,6 +935,10 @@
 				>
 			</File>
 			<File
+				RelativePath=".\src\SaveAbleSerializer.cpp"
+				>
+			</File>
+			<File
 				RelativePath=".\src\SaveGameData.cpp"
 				>
 			</File>

Modified: rl/branches/persistence2/engine/core/include/stdinc.h
===================================================================
--- rl/branches/persistence2/engine/core/include/stdinc.h	2009-06-15 18:20:42 UTC (rev 4945)
+++ rl/branches/persistence2/engine/core/include/stdinc.h	2009-06-15 19:44:44 UTC (rev 4946)
@@ -58,7 +58,7 @@
 #include <boost/filesystem/operations.hpp>
 #include <boost/filesystem/exception.hpp>
 #include <boost/any.hpp>
-#include <boost/smartptr.hpp>
+#include <boost/smart_ptr.hpp>
 
 #if OGRE_PLATFORM == OGRE_PLATFORM_WIN32
 #  include <Windows.h>



